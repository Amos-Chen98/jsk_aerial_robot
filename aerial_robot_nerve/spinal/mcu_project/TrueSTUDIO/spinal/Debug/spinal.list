
spinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  00200000  00200000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016998  002001c8  002001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c4  00216b60  00216b60  00026b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000204  00218d24  00218d24  00028d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000007f0  00218f28  00218f28  00028f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000030  00219718  00219718  00029718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  00219748  00219748  00029748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000080  20000000  0021974c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00004a0c  20000080  002197cc  00030080  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20004a8c  002197cc  00034a8c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 11 .debug_info   000c3891  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000100a0  00000000  00000000  000f3941  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0002b49a  00000000  00000000  001039e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002280  00000000  00000000  0012ee80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004538  00000000  00000000  00131100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001a782  00000000  00000000  00135638  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000391ea  00000000  00000000  0014fdba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00188fa4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000e664  00000000  00000000  00189020  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         00000030  00000000  00000000  00197874  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001ed  00000000  00000000  00197684  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

002001c8 <__do_global_dtors_aux>:
  2001c8:	b510      	push	{r4, lr}
  2001ca:	4c05      	ldr	r4, [pc, #20]	; (2001e0 <__do_global_dtors_aux+0x18>)
  2001cc:	7823      	ldrb	r3, [r4, #0]
  2001ce:	b933      	cbnz	r3, 2001de <__do_global_dtors_aux+0x16>
  2001d0:	4b04      	ldr	r3, [pc, #16]	; (2001e4 <__do_global_dtors_aux+0x1c>)
  2001d2:	b113      	cbz	r3, 2001da <__do_global_dtors_aux+0x12>
  2001d4:	4804      	ldr	r0, [pc, #16]	; (2001e8 <__do_global_dtors_aux+0x20>)
  2001d6:	f3af 8000 	nop.w
  2001da:	2301      	movs	r3, #1
  2001dc:	7023      	strb	r3, [r4, #0]
  2001de:	bd10      	pop	{r4, pc}
  2001e0:	20000080 	.word	0x20000080
  2001e4:	00000000 	.word	0x00000000
  2001e8:	00216b48 	.word	0x00216b48

002001ec <frame_dummy>:
  2001ec:	b508      	push	{r3, lr}
  2001ee:	4b03      	ldr	r3, [pc, #12]	; (2001fc <frame_dummy+0x10>)
  2001f0:	b11b      	cbz	r3, 2001fa <frame_dummy+0xe>
  2001f2:	4903      	ldr	r1, [pc, #12]	; (200200 <frame_dummy+0x14>)
  2001f4:	4803      	ldr	r0, [pc, #12]	; (200204 <frame_dummy+0x18>)
  2001f6:	f3af 8000 	nop.w
  2001fa:	bd08      	pop	{r3, pc}
  2001fc:	00000000 	.word	0x00000000
  200200:	20000084 	.word	0x20000084
  200204:	00216b48 	.word	0x00216b48

00200208 <strcmp>:
  200208:	f810 2b01 	ldrb.w	r2, [r0], #1
  20020c:	f811 3b01 	ldrb.w	r3, [r1], #1
  200210:	2a01      	cmp	r2, #1
  200212:	bf28      	it	cs
  200214:	429a      	cmpcs	r2, r3
  200216:	d0f7      	beq.n	200208 <strcmp>
  200218:	1ad0      	subs	r0, r2, r3
  20021a:	4770      	bx	lr

0020021c <strlen>:
  20021c:	4603      	mov	r3, r0
  20021e:	f813 2b01 	ldrb.w	r2, [r3], #1
  200222:	2a00      	cmp	r2, #0
  200224:	d1fb      	bne.n	20021e <strlen+0x2>
  200226:	1a18      	subs	r0, r3, r0
  200228:	3801      	subs	r0, #1
  20022a:	4770      	bx	lr

0020022c <__aeabi_drsub>:
  20022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  200230:	e002      	b.n	200238 <__adddf3>
  200232:	bf00      	nop

00200234 <__aeabi_dsub>:
  200234:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00200238 <__adddf3>:
  200238:	b530      	push	{r4, r5, lr}
  20023a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  20023e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  200242:	ea94 0f05 	teq	r4, r5
  200246:	bf08      	it	eq
  200248:	ea90 0f02 	teqeq	r0, r2
  20024c:	bf1f      	itttt	ne
  20024e:	ea54 0c00 	orrsne.w	ip, r4, r0
  200252:	ea55 0c02 	orrsne.w	ip, r5, r2
  200256:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  20025a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  20025e:	f000 80e2 	beq.w	200426 <__adddf3+0x1ee>
  200262:	ea4f 5454 	mov.w	r4, r4, lsr #21
  200266:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  20026a:	bfb8      	it	lt
  20026c:	426d      	neglt	r5, r5
  20026e:	dd0c      	ble.n	20028a <__adddf3+0x52>
  200270:	442c      	add	r4, r5
  200272:	ea80 0202 	eor.w	r2, r0, r2
  200276:	ea81 0303 	eor.w	r3, r1, r3
  20027a:	ea82 0000 	eor.w	r0, r2, r0
  20027e:	ea83 0101 	eor.w	r1, r3, r1
  200282:	ea80 0202 	eor.w	r2, r0, r2
  200286:	ea81 0303 	eor.w	r3, r1, r3
  20028a:	2d36      	cmp	r5, #54	; 0x36
  20028c:	bf88      	it	hi
  20028e:	bd30      	pophi	{r4, r5, pc}
  200290:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  200294:	ea4f 3101 	mov.w	r1, r1, lsl #12
  200298:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  20029c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  2002a0:	d002      	beq.n	2002a8 <__adddf3+0x70>
  2002a2:	4240      	negs	r0, r0
  2002a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  2002a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  2002ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  2002b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  2002b4:	d002      	beq.n	2002bc <__adddf3+0x84>
  2002b6:	4252      	negs	r2, r2
  2002b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  2002bc:	ea94 0f05 	teq	r4, r5
  2002c0:	f000 80a7 	beq.w	200412 <__adddf3+0x1da>
  2002c4:	f1a4 0401 	sub.w	r4, r4, #1
  2002c8:	f1d5 0e20 	rsbs	lr, r5, #32
  2002cc:	db0d      	blt.n	2002ea <__adddf3+0xb2>
  2002ce:	fa02 fc0e 	lsl.w	ip, r2, lr
  2002d2:	fa22 f205 	lsr.w	r2, r2, r5
  2002d6:	1880      	adds	r0, r0, r2
  2002d8:	f141 0100 	adc.w	r1, r1, #0
  2002dc:	fa03 f20e 	lsl.w	r2, r3, lr
  2002e0:	1880      	adds	r0, r0, r2
  2002e2:	fa43 f305 	asr.w	r3, r3, r5
  2002e6:	4159      	adcs	r1, r3
  2002e8:	e00e      	b.n	200308 <__adddf3+0xd0>
  2002ea:	f1a5 0520 	sub.w	r5, r5, #32
  2002ee:	f10e 0e20 	add.w	lr, lr, #32
  2002f2:	2a01      	cmp	r2, #1
  2002f4:	fa03 fc0e 	lsl.w	ip, r3, lr
  2002f8:	bf28      	it	cs
  2002fa:	f04c 0c02 	orrcs.w	ip, ip, #2
  2002fe:	fa43 f305 	asr.w	r3, r3, r5
  200302:	18c0      	adds	r0, r0, r3
  200304:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  200308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  20030c:	d507      	bpl.n	20031e <__adddf3+0xe6>
  20030e:	f04f 0e00 	mov.w	lr, #0
  200312:	f1dc 0c00 	rsbs	ip, ip, #0
  200316:	eb7e 0000 	sbcs.w	r0, lr, r0
  20031a:	eb6e 0101 	sbc.w	r1, lr, r1
  20031e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  200322:	d31b      	bcc.n	20035c <__adddf3+0x124>
  200324:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  200328:	d30c      	bcc.n	200344 <__adddf3+0x10c>
  20032a:	0849      	lsrs	r1, r1, #1
  20032c:	ea5f 0030 	movs.w	r0, r0, rrx
  200330:	ea4f 0c3c 	mov.w	ip, ip, rrx
  200334:	f104 0401 	add.w	r4, r4, #1
  200338:	ea4f 5244 	mov.w	r2, r4, lsl #21
  20033c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  200340:	f080 809a 	bcs.w	200478 <__adddf3+0x240>
  200344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  200348:	bf08      	it	eq
  20034a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  20034e:	f150 0000 	adcs.w	r0, r0, #0
  200352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200356:	ea41 0105 	orr.w	r1, r1, r5
  20035a:	bd30      	pop	{r4, r5, pc}
  20035c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  200360:	4140      	adcs	r0, r0
  200362:	eb41 0101 	adc.w	r1, r1, r1
  200366:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20036a:	f1a4 0401 	sub.w	r4, r4, #1
  20036e:	d1e9      	bne.n	200344 <__adddf3+0x10c>
  200370:	f091 0f00 	teq	r1, #0
  200374:	bf04      	itt	eq
  200376:	4601      	moveq	r1, r0
  200378:	2000      	moveq	r0, #0
  20037a:	fab1 f381 	clz	r3, r1
  20037e:	bf08      	it	eq
  200380:	3320      	addeq	r3, #32
  200382:	f1a3 030b 	sub.w	r3, r3, #11
  200386:	f1b3 0220 	subs.w	r2, r3, #32
  20038a:	da0c      	bge.n	2003a6 <__adddf3+0x16e>
  20038c:	320c      	adds	r2, #12
  20038e:	dd08      	ble.n	2003a2 <__adddf3+0x16a>
  200390:	f102 0c14 	add.w	ip, r2, #20
  200394:	f1c2 020c 	rsb	r2, r2, #12
  200398:	fa01 f00c 	lsl.w	r0, r1, ip
  20039c:	fa21 f102 	lsr.w	r1, r1, r2
  2003a0:	e00c      	b.n	2003bc <__adddf3+0x184>
  2003a2:	f102 0214 	add.w	r2, r2, #20
  2003a6:	bfd8      	it	le
  2003a8:	f1c2 0c20 	rsble	ip, r2, #32
  2003ac:	fa01 f102 	lsl.w	r1, r1, r2
  2003b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  2003b4:	bfdc      	itt	le
  2003b6:	ea41 010c 	orrle.w	r1, r1, ip
  2003ba:	4090      	lslle	r0, r2
  2003bc:	1ae4      	subs	r4, r4, r3
  2003be:	bfa2      	ittt	ge
  2003c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  2003c4:	4329      	orrge	r1, r5
  2003c6:	bd30      	popge	{r4, r5, pc}
  2003c8:	ea6f 0404 	mvn.w	r4, r4
  2003cc:	3c1f      	subs	r4, #31
  2003ce:	da1c      	bge.n	20040a <__adddf3+0x1d2>
  2003d0:	340c      	adds	r4, #12
  2003d2:	dc0e      	bgt.n	2003f2 <__adddf3+0x1ba>
  2003d4:	f104 0414 	add.w	r4, r4, #20
  2003d8:	f1c4 0220 	rsb	r2, r4, #32
  2003dc:	fa20 f004 	lsr.w	r0, r0, r4
  2003e0:	fa01 f302 	lsl.w	r3, r1, r2
  2003e4:	ea40 0003 	orr.w	r0, r0, r3
  2003e8:	fa21 f304 	lsr.w	r3, r1, r4
  2003ec:	ea45 0103 	orr.w	r1, r5, r3
  2003f0:	bd30      	pop	{r4, r5, pc}
  2003f2:	f1c4 040c 	rsb	r4, r4, #12
  2003f6:	f1c4 0220 	rsb	r2, r4, #32
  2003fa:	fa20 f002 	lsr.w	r0, r0, r2
  2003fe:	fa01 f304 	lsl.w	r3, r1, r4
  200402:	ea40 0003 	orr.w	r0, r0, r3
  200406:	4629      	mov	r1, r5
  200408:	bd30      	pop	{r4, r5, pc}
  20040a:	fa21 f004 	lsr.w	r0, r1, r4
  20040e:	4629      	mov	r1, r5
  200410:	bd30      	pop	{r4, r5, pc}
  200412:	f094 0f00 	teq	r4, #0
  200416:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  20041a:	bf06      	itte	eq
  20041c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  200420:	3401      	addeq	r4, #1
  200422:	3d01      	subne	r5, #1
  200424:	e74e      	b.n	2002c4 <__adddf3+0x8c>
  200426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  20042a:	bf18      	it	ne
  20042c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  200430:	d029      	beq.n	200486 <__adddf3+0x24e>
  200432:	ea94 0f05 	teq	r4, r5
  200436:	bf08      	it	eq
  200438:	ea90 0f02 	teqeq	r0, r2
  20043c:	d005      	beq.n	20044a <__adddf3+0x212>
  20043e:	ea54 0c00 	orrs.w	ip, r4, r0
  200442:	bf04      	itt	eq
  200444:	4619      	moveq	r1, r3
  200446:	4610      	moveq	r0, r2
  200448:	bd30      	pop	{r4, r5, pc}
  20044a:	ea91 0f03 	teq	r1, r3
  20044e:	bf1e      	ittt	ne
  200450:	2100      	movne	r1, #0
  200452:	2000      	movne	r0, #0
  200454:	bd30      	popne	{r4, r5, pc}
  200456:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  20045a:	d105      	bne.n	200468 <__adddf3+0x230>
  20045c:	0040      	lsls	r0, r0, #1
  20045e:	4149      	adcs	r1, r1
  200460:	bf28      	it	cs
  200462:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  200466:	bd30      	pop	{r4, r5, pc}
  200468:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  20046c:	bf3c      	itt	cc
  20046e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  200472:	bd30      	popcc	{r4, r5, pc}
  200474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  200478:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  20047c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  200480:	f04f 0000 	mov.w	r0, #0
  200484:	bd30      	pop	{r4, r5, pc}
  200486:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  20048a:	bf1a      	itte	ne
  20048c:	4619      	movne	r1, r3
  20048e:	4610      	movne	r0, r2
  200490:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  200494:	bf1c      	itt	ne
  200496:	460b      	movne	r3, r1
  200498:	4602      	movne	r2, r0
  20049a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  20049e:	bf06      	itte	eq
  2004a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  2004a4:	ea91 0f03 	teqeq	r1, r3
  2004a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  2004ac:	bd30      	pop	{r4, r5, pc}
  2004ae:	bf00      	nop

002004b0 <__aeabi_ui2d>:
  2004b0:	f090 0f00 	teq	r0, #0
  2004b4:	bf04      	itt	eq
  2004b6:	2100      	moveq	r1, #0
  2004b8:	4770      	bxeq	lr
  2004ba:	b530      	push	{r4, r5, lr}
  2004bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  2004c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  2004c4:	f04f 0500 	mov.w	r5, #0
  2004c8:	f04f 0100 	mov.w	r1, #0
  2004cc:	e750      	b.n	200370 <__adddf3+0x138>
  2004ce:	bf00      	nop

002004d0 <__aeabi_i2d>:
  2004d0:	f090 0f00 	teq	r0, #0
  2004d4:	bf04      	itt	eq
  2004d6:	2100      	moveq	r1, #0
  2004d8:	4770      	bxeq	lr
  2004da:	b530      	push	{r4, r5, lr}
  2004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  2004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  2004e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  2004e8:	bf48      	it	mi
  2004ea:	4240      	negmi	r0, r0
  2004ec:	f04f 0100 	mov.w	r1, #0
  2004f0:	e73e      	b.n	200370 <__adddf3+0x138>
  2004f2:	bf00      	nop

002004f4 <__aeabi_f2d>:
  2004f4:	0042      	lsls	r2, r0, #1
  2004f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  2004fa:	ea4f 0131 	mov.w	r1, r1, rrx
  2004fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  200502:	bf1f      	itttt	ne
  200504:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  200508:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  20050c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  200510:	4770      	bxne	lr
  200512:	f092 0f00 	teq	r2, #0
  200516:	bf14      	ite	ne
  200518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  20051c:	4770      	bxeq	lr
  20051e:	b530      	push	{r4, r5, lr}
  200520:	f44f 7460 	mov.w	r4, #896	; 0x380
  200524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  200528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  20052c:	e720      	b.n	200370 <__adddf3+0x138>
  20052e:	bf00      	nop

00200530 <__aeabi_ul2d>:
  200530:	ea50 0201 	orrs.w	r2, r0, r1
  200534:	bf08      	it	eq
  200536:	4770      	bxeq	lr
  200538:	b530      	push	{r4, r5, lr}
  20053a:	f04f 0500 	mov.w	r5, #0
  20053e:	e00a      	b.n	200556 <__aeabi_l2d+0x16>

00200540 <__aeabi_l2d>:
  200540:	ea50 0201 	orrs.w	r2, r0, r1
  200544:	bf08      	it	eq
  200546:	4770      	bxeq	lr
  200548:	b530      	push	{r4, r5, lr}
  20054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  20054e:	d502      	bpl.n	200556 <__aeabi_l2d+0x16>
  200550:	4240      	negs	r0, r0
  200552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  200556:	f44f 6480 	mov.w	r4, #1024	; 0x400
  20055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  20055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  200562:	f43f aedc 	beq.w	20031e <__adddf3+0xe6>
  200566:	f04f 0203 	mov.w	r2, #3
  20056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  20056e:	bf18      	it	ne
  200570:	3203      	addne	r2, #3
  200572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  200576:	bf18      	it	ne
  200578:	3203      	addne	r2, #3
  20057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  20057e:	f1c2 0320 	rsb	r3, r2, #32
  200582:	fa00 fc03 	lsl.w	ip, r0, r3
  200586:	fa20 f002 	lsr.w	r0, r0, r2
  20058a:	fa01 fe03 	lsl.w	lr, r1, r3
  20058e:	ea40 000e 	orr.w	r0, r0, lr
  200592:	fa21 f102 	lsr.w	r1, r1, r2
  200596:	4414      	add	r4, r2
  200598:	e6c1      	b.n	20031e <__adddf3+0xe6>
  20059a:	bf00      	nop

0020059c <__aeabi_dmul>:
  20059c:	b570      	push	{r4, r5, r6, lr}
  20059e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  2005a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  2005a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  2005aa:	bf1d      	ittte	ne
  2005ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  2005b0:	ea94 0f0c 	teqne	r4, ip
  2005b4:	ea95 0f0c 	teqne	r5, ip
  2005b8:	f000 f8de 	bleq	200778 <__aeabi_dmul+0x1dc>
  2005bc:	442c      	add	r4, r5
  2005be:	ea81 0603 	eor.w	r6, r1, r3
  2005c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  2005c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  2005ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  2005ce:	bf18      	it	ne
  2005d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  2005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  2005d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  2005dc:	d038      	beq.n	200650 <__aeabi_dmul+0xb4>
  2005de:	fba0 ce02 	umull	ip, lr, r0, r2
  2005e2:	f04f 0500 	mov.w	r5, #0
  2005e6:	fbe1 e502 	umlal	lr, r5, r1, r2
  2005ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  2005ee:	fbe0 e503 	umlal	lr, r5, r0, r3
  2005f2:	f04f 0600 	mov.w	r6, #0
  2005f6:	fbe1 5603 	umlal	r5, r6, r1, r3
  2005fa:	f09c 0f00 	teq	ip, #0
  2005fe:	bf18      	it	ne
  200600:	f04e 0e01 	orrne.w	lr, lr, #1
  200604:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  200608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  20060c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  200610:	d204      	bcs.n	20061c <__aeabi_dmul+0x80>
  200612:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  200616:	416d      	adcs	r5, r5
  200618:	eb46 0606 	adc.w	r6, r6, r6
  20061c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  200620:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  200624:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  200628:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  20062c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  200630:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  200634:	bf88      	it	hi
  200636:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  20063a:	d81e      	bhi.n	20067a <__aeabi_dmul+0xde>
  20063c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  200640:	bf08      	it	eq
  200642:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  200646:	f150 0000 	adcs.w	r0, r0, #0
  20064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  20064e:	bd70      	pop	{r4, r5, r6, pc}
  200650:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  200654:	ea46 0101 	orr.w	r1, r6, r1
  200658:	ea40 0002 	orr.w	r0, r0, r2
  20065c:	ea81 0103 	eor.w	r1, r1, r3
  200660:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  200664:	bfc2      	ittt	gt
  200666:	ebd4 050c 	rsbsgt	r5, r4, ip
  20066a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  20066e:	bd70      	popgt	{r4, r5, r6, pc}
  200670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200674:	f04f 0e00 	mov.w	lr, #0
  200678:	3c01      	subs	r4, #1
  20067a:	f300 80ab 	bgt.w	2007d4 <__aeabi_dmul+0x238>
  20067e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  200682:	bfde      	ittt	le
  200684:	2000      	movle	r0, #0
  200686:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  20068a:	bd70      	pople	{r4, r5, r6, pc}
  20068c:	f1c4 0400 	rsb	r4, r4, #0
  200690:	3c20      	subs	r4, #32
  200692:	da35      	bge.n	200700 <__aeabi_dmul+0x164>
  200694:	340c      	adds	r4, #12
  200696:	dc1b      	bgt.n	2006d0 <__aeabi_dmul+0x134>
  200698:	f104 0414 	add.w	r4, r4, #20
  20069c:	f1c4 0520 	rsb	r5, r4, #32
  2006a0:	fa00 f305 	lsl.w	r3, r0, r5
  2006a4:	fa20 f004 	lsr.w	r0, r0, r4
  2006a8:	fa01 f205 	lsl.w	r2, r1, r5
  2006ac:	ea40 0002 	orr.w	r0, r0, r2
  2006b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  2006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  2006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  2006bc:	fa21 f604 	lsr.w	r6, r1, r4
  2006c0:	eb42 0106 	adc.w	r1, r2, r6
  2006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  2006c8:	bf08      	it	eq
  2006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  2006ce:	bd70      	pop	{r4, r5, r6, pc}
  2006d0:	f1c4 040c 	rsb	r4, r4, #12
  2006d4:	f1c4 0520 	rsb	r5, r4, #32
  2006d8:	fa00 f304 	lsl.w	r3, r0, r4
  2006dc:	fa20 f005 	lsr.w	r0, r0, r5
  2006e0:	fa01 f204 	lsl.w	r2, r1, r4
  2006e4:	ea40 0002 	orr.w	r0, r0, r2
  2006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2006ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  2006f0:	f141 0100 	adc.w	r1, r1, #0
  2006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  2006f8:	bf08      	it	eq
  2006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  2006fe:	bd70      	pop	{r4, r5, r6, pc}
  200700:	f1c4 0520 	rsb	r5, r4, #32
  200704:	fa00 f205 	lsl.w	r2, r0, r5
  200708:	ea4e 0e02 	orr.w	lr, lr, r2
  20070c:	fa20 f304 	lsr.w	r3, r0, r4
  200710:	fa01 f205 	lsl.w	r2, r1, r5
  200714:	ea43 0302 	orr.w	r3, r3, r2
  200718:	fa21 f004 	lsr.w	r0, r1, r4
  20071c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  200720:	fa21 f204 	lsr.w	r2, r1, r4
  200724:	ea20 0002 	bic.w	r0, r0, r2
  200728:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  20072c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  200730:	bf08      	it	eq
  200732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  200736:	bd70      	pop	{r4, r5, r6, pc}
  200738:	f094 0f00 	teq	r4, #0
  20073c:	d10f      	bne.n	20075e <__aeabi_dmul+0x1c2>
  20073e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  200742:	0040      	lsls	r0, r0, #1
  200744:	eb41 0101 	adc.w	r1, r1, r1
  200748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  20074c:	bf08      	it	eq
  20074e:	3c01      	subeq	r4, #1
  200750:	d0f7      	beq.n	200742 <__aeabi_dmul+0x1a6>
  200752:	ea41 0106 	orr.w	r1, r1, r6
  200756:	f095 0f00 	teq	r5, #0
  20075a:	bf18      	it	ne
  20075c:	4770      	bxne	lr
  20075e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  200762:	0052      	lsls	r2, r2, #1
  200764:	eb43 0303 	adc.w	r3, r3, r3
  200768:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  20076c:	bf08      	it	eq
  20076e:	3d01      	subeq	r5, #1
  200770:	d0f7      	beq.n	200762 <__aeabi_dmul+0x1c6>
  200772:	ea43 0306 	orr.w	r3, r3, r6
  200776:	4770      	bx	lr
  200778:	ea94 0f0c 	teq	r4, ip
  20077c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200780:	bf18      	it	ne
  200782:	ea95 0f0c 	teqne	r5, ip
  200786:	d00c      	beq.n	2007a2 <__aeabi_dmul+0x206>
  200788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  20078c:	bf18      	it	ne
  20078e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  200792:	d1d1      	bne.n	200738 <__aeabi_dmul+0x19c>
  200794:	ea81 0103 	eor.w	r1, r1, r3
  200798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  20079c:	f04f 0000 	mov.w	r0, #0
  2007a0:	bd70      	pop	{r4, r5, r6, pc}
  2007a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  2007a6:	bf06      	itte	eq
  2007a8:	4610      	moveq	r0, r2
  2007aa:	4619      	moveq	r1, r3
  2007ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  2007b0:	d019      	beq.n	2007e6 <__aeabi_dmul+0x24a>
  2007b2:	ea94 0f0c 	teq	r4, ip
  2007b6:	d102      	bne.n	2007be <__aeabi_dmul+0x222>
  2007b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  2007bc:	d113      	bne.n	2007e6 <__aeabi_dmul+0x24a>
  2007be:	ea95 0f0c 	teq	r5, ip
  2007c2:	d105      	bne.n	2007d0 <__aeabi_dmul+0x234>
  2007c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  2007c8:	bf1c      	itt	ne
  2007ca:	4610      	movne	r0, r2
  2007cc:	4619      	movne	r1, r3
  2007ce:	d10a      	bne.n	2007e6 <__aeabi_dmul+0x24a>
  2007d0:	ea81 0103 	eor.w	r1, r1, r3
  2007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  2007d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2007dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  2007e0:	f04f 0000 	mov.w	r0, #0
  2007e4:	bd70      	pop	{r4, r5, r6, pc}
  2007e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  2007ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  2007ee:	bd70      	pop	{r4, r5, r6, pc}

002007f0 <__aeabi_ddiv>:
  2007f0:	b570      	push	{r4, r5, r6, lr}
  2007f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  2007f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  2007fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  2007fe:	bf1d      	ittte	ne
  200800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  200804:	ea94 0f0c 	teqne	r4, ip
  200808:	ea95 0f0c 	teqne	r5, ip
  20080c:	f000 f8a7 	bleq	20095e <__aeabi_ddiv+0x16e>
  200810:	eba4 0405 	sub.w	r4, r4, r5
  200814:	ea81 0e03 	eor.w	lr, r1, r3
  200818:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  20081c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  200820:	f000 8088 	beq.w	200934 <__aeabi_ddiv+0x144>
  200824:	ea4f 3303 	mov.w	r3, r3, lsl #12
  200828:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  20082c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  200830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  200834:	ea4f 2202 	mov.w	r2, r2, lsl #8
  200838:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  20083c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  200840:	ea4f 2600 	mov.w	r6, r0, lsl #8
  200844:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  200848:	429d      	cmp	r5, r3
  20084a:	bf08      	it	eq
  20084c:	4296      	cmpeq	r6, r2
  20084e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  200852:	f504 7440 	add.w	r4, r4, #768	; 0x300
  200856:	d202      	bcs.n	20085e <__aeabi_ddiv+0x6e>
  200858:	085b      	lsrs	r3, r3, #1
  20085a:	ea4f 0232 	mov.w	r2, r2, rrx
  20085e:	1ab6      	subs	r6, r6, r2
  200860:	eb65 0503 	sbc.w	r5, r5, r3
  200864:	085b      	lsrs	r3, r3, #1
  200866:	ea4f 0232 	mov.w	r2, r2, rrx
  20086a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  20086e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  200872:	ebb6 0e02 	subs.w	lr, r6, r2
  200876:	eb75 0e03 	sbcs.w	lr, r5, r3
  20087a:	bf22      	ittt	cs
  20087c:	1ab6      	subcs	r6, r6, r2
  20087e:	4675      	movcs	r5, lr
  200880:	ea40 000c 	orrcs.w	r0, r0, ip
  200884:	085b      	lsrs	r3, r3, #1
  200886:	ea4f 0232 	mov.w	r2, r2, rrx
  20088a:	ebb6 0e02 	subs.w	lr, r6, r2
  20088e:	eb75 0e03 	sbcs.w	lr, r5, r3
  200892:	bf22      	ittt	cs
  200894:	1ab6      	subcs	r6, r6, r2
  200896:	4675      	movcs	r5, lr
  200898:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  20089c:	085b      	lsrs	r3, r3, #1
  20089e:	ea4f 0232 	mov.w	r2, r2, rrx
  2008a2:	ebb6 0e02 	subs.w	lr, r6, r2
  2008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  2008aa:	bf22      	ittt	cs
  2008ac:	1ab6      	subcs	r6, r6, r2
  2008ae:	4675      	movcs	r5, lr
  2008b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  2008b4:	085b      	lsrs	r3, r3, #1
  2008b6:	ea4f 0232 	mov.w	r2, r2, rrx
  2008ba:	ebb6 0e02 	subs.w	lr, r6, r2
  2008be:	eb75 0e03 	sbcs.w	lr, r5, r3
  2008c2:	bf22      	ittt	cs
  2008c4:	1ab6      	subcs	r6, r6, r2
  2008c6:	4675      	movcs	r5, lr
  2008c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  2008cc:	ea55 0e06 	orrs.w	lr, r5, r6
  2008d0:	d018      	beq.n	200904 <__aeabi_ddiv+0x114>
  2008d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  2008d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  2008da:	ea4f 1606 	mov.w	r6, r6, lsl #4
  2008de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  2008e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  2008e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  2008ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  2008ee:	d1c0      	bne.n	200872 <__aeabi_ddiv+0x82>
  2008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  2008f4:	d10b      	bne.n	20090e <__aeabi_ddiv+0x11e>
  2008f6:	ea41 0100 	orr.w	r1, r1, r0
  2008fa:	f04f 0000 	mov.w	r0, #0
  2008fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  200902:	e7b6      	b.n	200872 <__aeabi_ddiv+0x82>
  200904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  200908:	bf04      	itt	eq
  20090a:	4301      	orreq	r1, r0
  20090c:	2000      	moveq	r0, #0
  20090e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  200912:	bf88      	it	hi
  200914:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  200918:	f63f aeaf 	bhi.w	20067a <__aeabi_dmul+0xde>
  20091c:	ebb5 0c03 	subs.w	ip, r5, r3
  200920:	bf04      	itt	eq
  200922:	ebb6 0c02 	subseq.w	ip, r6, r2
  200926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  20092a:	f150 0000 	adcs.w	r0, r0, #0
  20092e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  200932:	bd70      	pop	{r4, r5, r6, pc}
  200934:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  200938:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  20093c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  200940:	bfc2      	ittt	gt
  200942:	ebd4 050c 	rsbsgt	r5, r4, ip
  200946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  20094a:	bd70      	popgt	{r4, r5, r6, pc}
  20094c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200950:	f04f 0e00 	mov.w	lr, #0
  200954:	3c01      	subs	r4, #1
  200956:	e690      	b.n	20067a <__aeabi_dmul+0xde>
  200958:	ea45 0e06 	orr.w	lr, r5, r6
  20095c:	e68d      	b.n	20067a <__aeabi_dmul+0xde>
  20095e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  200962:	ea94 0f0c 	teq	r4, ip
  200966:	bf08      	it	eq
  200968:	ea95 0f0c 	teqeq	r5, ip
  20096c:	f43f af3b 	beq.w	2007e6 <__aeabi_dmul+0x24a>
  200970:	ea94 0f0c 	teq	r4, ip
  200974:	d10a      	bne.n	20098c <__aeabi_ddiv+0x19c>
  200976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  20097a:	f47f af34 	bne.w	2007e6 <__aeabi_dmul+0x24a>
  20097e:	ea95 0f0c 	teq	r5, ip
  200982:	f47f af25 	bne.w	2007d0 <__aeabi_dmul+0x234>
  200986:	4610      	mov	r0, r2
  200988:	4619      	mov	r1, r3
  20098a:	e72c      	b.n	2007e6 <__aeabi_dmul+0x24a>
  20098c:	ea95 0f0c 	teq	r5, ip
  200990:	d106      	bne.n	2009a0 <__aeabi_ddiv+0x1b0>
  200992:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  200996:	f43f aefd 	beq.w	200794 <__aeabi_dmul+0x1f8>
  20099a:	4610      	mov	r0, r2
  20099c:	4619      	mov	r1, r3
  20099e:	e722      	b.n	2007e6 <__aeabi_dmul+0x24a>
  2009a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  2009a4:	bf18      	it	ne
  2009a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  2009aa:	f47f aec5 	bne.w	200738 <__aeabi_dmul+0x19c>
  2009ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  2009b2:	f47f af0d 	bne.w	2007d0 <__aeabi_dmul+0x234>
  2009b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  2009ba:	f47f aeeb 	bne.w	200794 <__aeabi_dmul+0x1f8>
  2009be:	e712      	b.n	2007e6 <__aeabi_dmul+0x24a>

002009c0 <__gedf2>:
  2009c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  2009c4:	e006      	b.n	2009d4 <__cmpdf2+0x4>
  2009c6:	bf00      	nop

002009c8 <__ledf2>:
  2009c8:	f04f 0c01 	mov.w	ip, #1
  2009cc:	e002      	b.n	2009d4 <__cmpdf2+0x4>
  2009ce:	bf00      	nop

002009d0 <__cmpdf2>:
  2009d0:	f04f 0c01 	mov.w	ip, #1
  2009d4:	f84d cd04 	str.w	ip, [sp, #-4]!
  2009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  2009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  2009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  2009e4:	bf18      	it	ne
  2009e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  2009ea:	d01b      	beq.n	200a24 <__cmpdf2+0x54>
  2009ec:	b001      	add	sp, #4
  2009ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  2009f2:	bf0c      	ite	eq
  2009f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  2009f8:	ea91 0f03 	teqne	r1, r3
  2009fc:	bf02      	ittt	eq
  2009fe:	ea90 0f02 	teqeq	r0, r2
  200a02:	2000      	moveq	r0, #0
  200a04:	4770      	bxeq	lr
  200a06:	f110 0f00 	cmn.w	r0, #0
  200a0a:	ea91 0f03 	teq	r1, r3
  200a0e:	bf58      	it	pl
  200a10:	4299      	cmppl	r1, r3
  200a12:	bf08      	it	eq
  200a14:	4290      	cmpeq	r0, r2
  200a16:	bf2c      	ite	cs
  200a18:	17d8      	asrcs	r0, r3, #31
  200a1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  200a1e:	f040 0001 	orr.w	r0, r0, #1
  200a22:	4770      	bx	lr
  200a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  200a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  200a2c:	d102      	bne.n	200a34 <__cmpdf2+0x64>
  200a2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  200a32:	d107      	bne.n	200a44 <__cmpdf2+0x74>
  200a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  200a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  200a3c:	d1d6      	bne.n	2009ec <__cmpdf2+0x1c>
  200a3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  200a42:	d0d3      	beq.n	2009ec <__cmpdf2+0x1c>
  200a44:	f85d 0b04 	ldr.w	r0, [sp], #4
  200a48:	4770      	bx	lr
  200a4a:	bf00      	nop

00200a4c <__aeabi_cdrcmple>:
  200a4c:	4684      	mov	ip, r0
  200a4e:	4610      	mov	r0, r2
  200a50:	4662      	mov	r2, ip
  200a52:	468c      	mov	ip, r1
  200a54:	4619      	mov	r1, r3
  200a56:	4663      	mov	r3, ip
  200a58:	e000      	b.n	200a5c <__aeabi_cdcmpeq>
  200a5a:	bf00      	nop

00200a5c <__aeabi_cdcmpeq>:
  200a5c:	b501      	push	{r0, lr}
  200a5e:	f7ff ffb7 	bl	2009d0 <__cmpdf2>
  200a62:	2800      	cmp	r0, #0
  200a64:	bf48      	it	mi
  200a66:	f110 0f00 	cmnmi.w	r0, #0
  200a6a:	bd01      	pop	{r0, pc}

00200a6c <__aeabi_dcmpeq>:
  200a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  200a70:	f7ff fff4 	bl	200a5c <__aeabi_cdcmpeq>
  200a74:	bf0c      	ite	eq
  200a76:	2001      	moveq	r0, #1
  200a78:	2000      	movne	r0, #0
  200a7a:	f85d fb08 	ldr.w	pc, [sp], #8
  200a7e:	bf00      	nop

00200a80 <__aeabi_dcmplt>:
  200a80:	f84d ed08 	str.w	lr, [sp, #-8]!
  200a84:	f7ff ffea 	bl	200a5c <__aeabi_cdcmpeq>
  200a88:	bf34      	ite	cc
  200a8a:	2001      	movcc	r0, #1
  200a8c:	2000      	movcs	r0, #0
  200a8e:	f85d fb08 	ldr.w	pc, [sp], #8
  200a92:	bf00      	nop

00200a94 <__aeabi_dcmple>:
  200a94:	f84d ed08 	str.w	lr, [sp, #-8]!
  200a98:	f7ff ffe0 	bl	200a5c <__aeabi_cdcmpeq>
  200a9c:	bf94      	ite	ls
  200a9e:	2001      	movls	r0, #1
  200aa0:	2000      	movhi	r0, #0
  200aa2:	f85d fb08 	ldr.w	pc, [sp], #8
  200aa6:	bf00      	nop

00200aa8 <__aeabi_dcmpge>:
  200aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
  200aac:	f7ff ffce 	bl	200a4c <__aeabi_cdrcmple>
  200ab0:	bf94      	ite	ls
  200ab2:	2001      	movls	r0, #1
  200ab4:	2000      	movhi	r0, #0
  200ab6:	f85d fb08 	ldr.w	pc, [sp], #8
  200aba:	bf00      	nop

00200abc <__aeabi_dcmpgt>:
  200abc:	f84d ed08 	str.w	lr, [sp, #-8]!
  200ac0:	f7ff ffc4 	bl	200a4c <__aeabi_cdrcmple>
  200ac4:	bf34      	ite	cc
  200ac6:	2001      	movcc	r0, #1
  200ac8:	2000      	movcs	r0, #0
  200aca:	f85d fb08 	ldr.w	pc, [sp], #8
  200ace:	bf00      	nop

00200ad0 <__aeabi_d2f>:
  200ad0:	ea4f 0241 	mov.w	r2, r1, lsl #1
  200ad4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  200ad8:	bf24      	itt	cs
  200ada:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  200ade:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  200ae2:	d90d      	bls.n	200b00 <__aeabi_d2f+0x30>
  200ae4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  200ae8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  200aec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  200af0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  200af4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  200af8:	bf08      	it	eq
  200afa:	f020 0001 	biceq.w	r0, r0, #1
  200afe:	4770      	bx	lr
  200b00:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  200b04:	d121      	bne.n	200b4a <__aeabi_d2f+0x7a>
  200b06:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  200b0a:	bfbc      	itt	lt
  200b0c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  200b10:	4770      	bxlt	lr
  200b12:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  200b16:	ea4f 5252 	mov.w	r2, r2, lsr #21
  200b1a:	f1c2 0218 	rsb	r2, r2, #24
  200b1e:	f1c2 0c20 	rsb	ip, r2, #32
  200b22:	fa10 f30c 	lsls.w	r3, r0, ip
  200b26:	fa20 f002 	lsr.w	r0, r0, r2
  200b2a:	bf18      	it	ne
  200b2c:	f040 0001 	orrne.w	r0, r0, #1
  200b30:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  200b34:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  200b38:	fa03 fc0c 	lsl.w	ip, r3, ip
  200b3c:	ea40 000c 	orr.w	r0, r0, ip
  200b40:	fa23 f302 	lsr.w	r3, r3, r2
  200b44:	ea4f 0343 	mov.w	r3, r3, lsl #1
  200b48:	e7cc      	b.n	200ae4 <__aeabi_d2f+0x14>
  200b4a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  200b4e:	d107      	bne.n	200b60 <__aeabi_d2f+0x90>
  200b50:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  200b54:	bf1e      	ittt	ne
  200b56:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  200b5a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  200b5e:	4770      	bxne	lr
  200b60:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  200b64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  200b68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  200b6c:	4770      	bx	lr
  200b6e:	bf00      	nop

00200b70 <__aeabi_uldivmod>:
  200b70:	b953      	cbnz	r3, 200b88 <__aeabi_uldivmod+0x18>
  200b72:	b94a      	cbnz	r2, 200b88 <__aeabi_uldivmod+0x18>
  200b74:	2900      	cmp	r1, #0
  200b76:	bf08      	it	eq
  200b78:	2800      	cmpeq	r0, #0
  200b7a:	bf1c      	itt	ne
  200b7c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
  200b80:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  200b84:	f001 b8f6 	b.w	201d74 <__aeabi_idiv0>
  200b88:	f1ad 0c08 	sub.w	ip, sp, #8
  200b8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  200b90:	f000 f806 	bl	200ba0 <__udivmoddi4>
  200b94:	f8dd e004 	ldr.w	lr, [sp, #4]
  200b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  200b9c:	b004      	add	sp, #16
  200b9e:	4770      	bx	lr

00200ba0 <__udivmoddi4>:
  200ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  200ba4:	468c      	mov	ip, r1
  200ba6:	460d      	mov	r5, r1
  200ba8:	4604      	mov	r4, r0
  200baa:	9e08      	ldr	r6, [sp, #32]
  200bac:	2b00      	cmp	r3, #0
  200bae:	d151      	bne.n	200c54 <__udivmoddi4+0xb4>
  200bb0:	428a      	cmp	r2, r1
  200bb2:	4617      	mov	r7, r2
  200bb4:	d96d      	bls.n	200c92 <__udivmoddi4+0xf2>
  200bb6:	fab2 fe82 	clz	lr, r2
  200bba:	f1be 0f00 	cmp.w	lr, #0
  200bbe:	d00b      	beq.n	200bd8 <__udivmoddi4+0x38>
  200bc0:	f1ce 0c20 	rsb	ip, lr, #32
  200bc4:	fa01 f50e 	lsl.w	r5, r1, lr
  200bc8:	fa20 fc0c 	lsr.w	ip, r0, ip
  200bcc:	fa02 f70e 	lsl.w	r7, r2, lr
  200bd0:	ea4c 0c05 	orr.w	ip, ip, r5
  200bd4:	fa00 f40e 	lsl.w	r4, r0, lr
  200bd8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  200bdc:	0c25      	lsrs	r5, r4, #16
  200bde:	fbbc f8fa 	udiv	r8, ip, sl
  200be2:	fa1f f987 	uxth.w	r9, r7
  200be6:	fb0a cc18 	mls	ip, sl, r8, ip
  200bea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  200bee:	fb08 f309 	mul.w	r3, r8, r9
  200bf2:	42ab      	cmp	r3, r5
  200bf4:	d90a      	bls.n	200c0c <__udivmoddi4+0x6c>
  200bf6:	19ed      	adds	r5, r5, r7
  200bf8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
  200bfc:	f080 8123 	bcs.w	200e46 <__udivmoddi4+0x2a6>
  200c00:	42ab      	cmp	r3, r5
  200c02:	f240 8120 	bls.w	200e46 <__udivmoddi4+0x2a6>
  200c06:	f1a8 0802 	sub.w	r8, r8, #2
  200c0a:	443d      	add	r5, r7
  200c0c:	1aed      	subs	r5, r5, r3
  200c0e:	b2a4      	uxth	r4, r4
  200c10:	fbb5 f0fa 	udiv	r0, r5, sl
  200c14:	fb0a 5510 	mls	r5, sl, r0, r5
  200c18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  200c1c:	fb00 f909 	mul.w	r9, r0, r9
  200c20:	45a1      	cmp	r9, r4
  200c22:	d909      	bls.n	200c38 <__udivmoddi4+0x98>
  200c24:	19e4      	adds	r4, r4, r7
  200c26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
  200c2a:	f080 810a 	bcs.w	200e42 <__udivmoddi4+0x2a2>
  200c2e:	45a1      	cmp	r9, r4
  200c30:	f240 8107 	bls.w	200e42 <__udivmoddi4+0x2a2>
  200c34:	3802      	subs	r0, #2
  200c36:	443c      	add	r4, r7
  200c38:	eba4 0409 	sub.w	r4, r4, r9
  200c3c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  200c40:	2100      	movs	r1, #0
  200c42:	2e00      	cmp	r6, #0
  200c44:	d061      	beq.n	200d0a <__udivmoddi4+0x16a>
  200c46:	fa24 f40e 	lsr.w	r4, r4, lr
  200c4a:	2300      	movs	r3, #0
  200c4c:	6034      	str	r4, [r6, #0]
  200c4e:	6073      	str	r3, [r6, #4]
  200c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  200c54:	428b      	cmp	r3, r1
  200c56:	d907      	bls.n	200c68 <__udivmoddi4+0xc8>
  200c58:	2e00      	cmp	r6, #0
  200c5a:	d054      	beq.n	200d06 <__udivmoddi4+0x166>
  200c5c:	2100      	movs	r1, #0
  200c5e:	e886 0021 	stmia.w	r6, {r0, r5}
  200c62:	4608      	mov	r0, r1
  200c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  200c68:	fab3 f183 	clz	r1, r3
  200c6c:	2900      	cmp	r1, #0
  200c6e:	f040 808e 	bne.w	200d8e <__udivmoddi4+0x1ee>
  200c72:	42ab      	cmp	r3, r5
  200c74:	d302      	bcc.n	200c7c <__udivmoddi4+0xdc>
  200c76:	4282      	cmp	r2, r0
  200c78:	f200 80fa 	bhi.w	200e70 <__udivmoddi4+0x2d0>
  200c7c:	1a84      	subs	r4, r0, r2
  200c7e:	eb65 0503 	sbc.w	r5, r5, r3
  200c82:	2001      	movs	r0, #1
  200c84:	46ac      	mov	ip, r5
  200c86:	2e00      	cmp	r6, #0
  200c88:	d03f      	beq.n	200d0a <__udivmoddi4+0x16a>
  200c8a:	e886 1010 	stmia.w	r6, {r4, ip}
  200c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  200c92:	b912      	cbnz	r2, 200c9a <__udivmoddi4+0xfa>
  200c94:	2701      	movs	r7, #1
  200c96:	fbb7 f7f2 	udiv	r7, r7, r2
  200c9a:	fab7 fe87 	clz	lr, r7
  200c9e:	f1be 0f00 	cmp.w	lr, #0
  200ca2:	d134      	bne.n	200d0e <__udivmoddi4+0x16e>
  200ca4:	1beb      	subs	r3, r5, r7
  200ca6:	0c3a      	lsrs	r2, r7, #16
  200ca8:	fa1f fc87 	uxth.w	ip, r7
  200cac:	2101      	movs	r1, #1
  200cae:	fbb3 f8f2 	udiv	r8, r3, r2
  200cb2:	0c25      	lsrs	r5, r4, #16
  200cb4:	fb02 3318 	mls	r3, r2, r8, r3
  200cb8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  200cbc:	fb0c f308 	mul.w	r3, ip, r8
  200cc0:	42ab      	cmp	r3, r5
  200cc2:	d907      	bls.n	200cd4 <__udivmoddi4+0x134>
  200cc4:	19ed      	adds	r5, r5, r7
  200cc6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
  200cca:	d202      	bcs.n	200cd2 <__udivmoddi4+0x132>
  200ccc:	42ab      	cmp	r3, r5
  200cce:	f200 80d1 	bhi.w	200e74 <__udivmoddi4+0x2d4>
  200cd2:	4680      	mov	r8, r0
  200cd4:	1aed      	subs	r5, r5, r3
  200cd6:	b2a3      	uxth	r3, r4
  200cd8:	fbb5 f0f2 	udiv	r0, r5, r2
  200cdc:	fb02 5510 	mls	r5, r2, r0, r5
  200ce0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  200ce4:	fb0c fc00 	mul.w	ip, ip, r0
  200ce8:	45a4      	cmp	ip, r4
  200cea:	d907      	bls.n	200cfc <__udivmoddi4+0x15c>
  200cec:	19e4      	adds	r4, r4, r7
  200cee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
  200cf2:	d202      	bcs.n	200cfa <__udivmoddi4+0x15a>
  200cf4:	45a4      	cmp	ip, r4
  200cf6:	f200 80b8 	bhi.w	200e6a <__udivmoddi4+0x2ca>
  200cfa:	4618      	mov	r0, r3
  200cfc:	eba4 040c 	sub.w	r4, r4, ip
  200d00:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  200d04:	e79d      	b.n	200c42 <__udivmoddi4+0xa2>
  200d06:	4631      	mov	r1, r6
  200d08:	4630      	mov	r0, r6
  200d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  200d0e:	f1ce 0420 	rsb	r4, lr, #32
  200d12:	fa05 f30e 	lsl.w	r3, r5, lr
  200d16:	fa07 f70e 	lsl.w	r7, r7, lr
  200d1a:	fa20 f804 	lsr.w	r8, r0, r4
  200d1e:	0c3a      	lsrs	r2, r7, #16
  200d20:	fa25 f404 	lsr.w	r4, r5, r4
  200d24:	ea48 0803 	orr.w	r8, r8, r3
  200d28:	fbb4 f1f2 	udiv	r1, r4, r2
  200d2c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  200d30:	fb02 4411 	mls	r4, r2, r1, r4
  200d34:	fa1f fc87 	uxth.w	ip, r7
  200d38:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  200d3c:	fb01 f30c 	mul.w	r3, r1, ip
  200d40:	42ab      	cmp	r3, r5
  200d42:	fa00 f40e 	lsl.w	r4, r0, lr
  200d46:	d909      	bls.n	200d5c <__udivmoddi4+0x1bc>
  200d48:	19ed      	adds	r5, r5, r7
  200d4a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
  200d4e:	f080 808a 	bcs.w	200e66 <__udivmoddi4+0x2c6>
  200d52:	42ab      	cmp	r3, r5
  200d54:	f240 8087 	bls.w	200e66 <__udivmoddi4+0x2c6>
  200d58:	3902      	subs	r1, #2
  200d5a:	443d      	add	r5, r7
  200d5c:	1aeb      	subs	r3, r5, r3
  200d5e:	fa1f f588 	uxth.w	r5, r8
  200d62:	fbb3 f0f2 	udiv	r0, r3, r2
  200d66:	fb02 3310 	mls	r3, r2, r0, r3
  200d6a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  200d6e:	fb00 f30c 	mul.w	r3, r0, ip
  200d72:	42ab      	cmp	r3, r5
  200d74:	d907      	bls.n	200d86 <__udivmoddi4+0x1e6>
  200d76:	19ed      	adds	r5, r5, r7
  200d78:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
  200d7c:	d26f      	bcs.n	200e5e <__udivmoddi4+0x2be>
  200d7e:	42ab      	cmp	r3, r5
  200d80:	d96d      	bls.n	200e5e <__udivmoddi4+0x2be>
  200d82:	3802      	subs	r0, #2
  200d84:	443d      	add	r5, r7
  200d86:	1aeb      	subs	r3, r5, r3
  200d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  200d8c:	e78f      	b.n	200cae <__udivmoddi4+0x10e>
  200d8e:	f1c1 0720 	rsb	r7, r1, #32
  200d92:	fa22 f807 	lsr.w	r8, r2, r7
  200d96:	408b      	lsls	r3, r1
  200d98:	fa05 f401 	lsl.w	r4, r5, r1
  200d9c:	ea48 0303 	orr.w	r3, r8, r3
  200da0:	fa20 fe07 	lsr.w	lr, r0, r7
  200da4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  200da8:	40fd      	lsrs	r5, r7
  200daa:	ea4e 0e04 	orr.w	lr, lr, r4
  200dae:	fbb5 f9fc 	udiv	r9, r5, ip
  200db2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  200db6:	fb0c 5519 	mls	r5, ip, r9, r5
  200dba:	fa1f f883 	uxth.w	r8, r3
  200dbe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  200dc2:	fb09 f408 	mul.w	r4, r9, r8
  200dc6:	42ac      	cmp	r4, r5
  200dc8:	fa02 f201 	lsl.w	r2, r2, r1
  200dcc:	fa00 fa01 	lsl.w	sl, r0, r1
  200dd0:	d908      	bls.n	200de4 <__udivmoddi4+0x244>
  200dd2:	18ed      	adds	r5, r5, r3
  200dd4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
  200dd8:	d243      	bcs.n	200e62 <__udivmoddi4+0x2c2>
  200dda:	42ac      	cmp	r4, r5
  200ddc:	d941      	bls.n	200e62 <__udivmoddi4+0x2c2>
  200dde:	f1a9 0902 	sub.w	r9, r9, #2
  200de2:	441d      	add	r5, r3
  200de4:	1b2d      	subs	r5, r5, r4
  200de6:	fa1f fe8e 	uxth.w	lr, lr
  200dea:	fbb5 f0fc 	udiv	r0, r5, ip
  200dee:	fb0c 5510 	mls	r5, ip, r0, r5
  200df2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  200df6:	fb00 f808 	mul.w	r8, r0, r8
  200dfa:	45a0      	cmp	r8, r4
  200dfc:	d907      	bls.n	200e0e <__udivmoddi4+0x26e>
  200dfe:	18e4      	adds	r4, r4, r3
  200e00:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
  200e04:	d229      	bcs.n	200e5a <__udivmoddi4+0x2ba>
  200e06:	45a0      	cmp	r8, r4
  200e08:	d927      	bls.n	200e5a <__udivmoddi4+0x2ba>
  200e0a:	3802      	subs	r0, #2
  200e0c:	441c      	add	r4, r3
  200e0e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  200e12:	eba4 0408 	sub.w	r4, r4, r8
  200e16:	fba0 8902 	umull	r8, r9, r0, r2
  200e1a:	454c      	cmp	r4, r9
  200e1c:	46c6      	mov	lr, r8
  200e1e:	464d      	mov	r5, r9
  200e20:	d315      	bcc.n	200e4e <__udivmoddi4+0x2ae>
  200e22:	d012      	beq.n	200e4a <__udivmoddi4+0x2aa>
  200e24:	b156      	cbz	r6, 200e3c <__udivmoddi4+0x29c>
  200e26:	ebba 030e 	subs.w	r3, sl, lr
  200e2a:	eb64 0405 	sbc.w	r4, r4, r5
  200e2e:	fa04 f707 	lsl.w	r7, r4, r7
  200e32:	40cb      	lsrs	r3, r1
  200e34:	431f      	orrs	r7, r3
  200e36:	40cc      	lsrs	r4, r1
  200e38:	6037      	str	r7, [r6, #0]
  200e3a:	6074      	str	r4, [r6, #4]
  200e3c:	2100      	movs	r1, #0
  200e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  200e42:	4618      	mov	r0, r3
  200e44:	e6f8      	b.n	200c38 <__udivmoddi4+0x98>
  200e46:	4690      	mov	r8, r2
  200e48:	e6e0      	b.n	200c0c <__udivmoddi4+0x6c>
  200e4a:	45c2      	cmp	sl, r8
  200e4c:	d2ea      	bcs.n	200e24 <__udivmoddi4+0x284>
  200e4e:	ebb8 0e02 	subs.w	lr, r8, r2
  200e52:	eb69 0503 	sbc.w	r5, r9, r3
  200e56:	3801      	subs	r0, #1
  200e58:	e7e4      	b.n	200e24 <__udivmoddi4+0x284>
  200e5a:	4628      	mov	r0, r5
  200e5c:	e7d7      	b.n	200e0e <__udivmoddi4+0x26e>
  200e5e:	4640      	mov	r0, r8
  200e60:	e791      	b.n	200d86 <__udivmoddi4+0x1e6>
  200e62:	4681      	mov	r9, r0
  200e64:	e7be      	b.n	200de4 <__udivmoddi4+0x244>
  200e66:	4601      	mov	r1, r0
  200e68:	e778      	b.n	200d5c <__udivmoddi4+0x1bc>
  200e6a:	3802      	subs	r0, #2
  200e6c:	443c      	add	r4, r7
  200e6e:	e745      	b.n	200cfc <__udivmoddi4+0x15c>
  200e70:	4608      	mov	r0, r1
  200e72:	e708      	b.n	200c86 <__udivmoddi4+0xe6>
  200e74:	f1a8 0802 	sub.w	r8, r8, #2
  200e78:	443d      	add	r5, r7
  200e7a:	e72b      	b.n	200cd4 <__udivmoddi4+0x134>

00200e7c <selfrel_offset31>:
  200e7c:	6803      	ldr	r3, [r0, #0]
  200e7e:	005a      	lsls	r2, r3, #1
  200e80:	bf4c      	ite	mi
  200e82:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
  200e86:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
  200e8a:	4418      	add	r0, r3
  200e8c:	4770      	bx	lr
  200e8e:	bf00      	nop

00200e90 <search_EIT_table>:
  200e90:	b361      	cbz	r1, 200eec <search_EIT_table+0x5c>
  200e92:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200e96:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
  200e9a:	4690      	mov	r8, r2
  200e9c:	4606      	mov	r6, r0
  200e9e:	46d1      	mov	r9, sl
  200ea0:	2700      	movs	r7, #0
  200ea2:	eb07 0409 	add.w	r4, r7, r9
  200ea6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
  200eaa:	1064      	asrs	r4, r4, #1
  200eac:	00e5      	lsls	r5, r4, #3
  200eae:	1971      	adds	r1, r6, r5
  200eb0:	4608      	mov	r0, r1
  200eb2:	f7ff ffe3 	bl	200e7c <selfrel_offset31>
  200eb6:	45a2      	cmp	sl, r4
  200eb8:	4683      	mov	fp, r0
  200eba:	f105 0008 	add.w	r0, r5, #8
  200ebe:	4430      	add	r0, r6
  200ec0:	d009      	beq.n	200ed6 <search_EIT_table+0x46>
  200ec2:	f7ff ffdb 	bl	200e7c <selfrel_offset31>
  200ec6:	45c3      	cmp	fp, r8
  200ec8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
  200ecc:	d805      	bhi.n	200eda <search_EIT_table+0x4a>
  200ece:	4540      	cmp	r0, r8
  200ed0:	d209      	bcs.n	200ee6 <search_EIT_table+0x56>
  200ed2:	1c67      	adds	r7, r4, #1
  200ed4:	e7e5      	b.n	200ea2 <search_EIT_table+0x12>
  200ed6:	45c3      	cmp	fp, r8
  200ed8:	d905      	bls.n	200ee6 <search_EIT_table+0x56>
  200eda:	42a7      	cmp	r7, r4
  200edc:	d002      	beq.n	200ee4 <search_EIT_table+0x54>
  200ede:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
  200ee2:	e7de      	b.n	200ea2 <search_EIT_table+0x12>
  200ee4:	2100      	movs	r1, #0
  200ee6:	4608      	mov	r0, r1
  200ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200eec:	4608      	mov	r0, r1
  200eee:	4770      	bx	lr

00200ef0 <__gnu_unwind_get_pr_addr>:
  200ef0:	2801      	cmp	r0, #1
  200ef2:	d007      	beq.n	200f04 <__gnu_unwind_get_pr_addr+0x14>
  200ef4:	2802      	cmp	r0, #2
  200ef6:	d007      	beq.n	200f08 <__gnu_unwind_get_pr_addr+0x18>
  200ef8:	4b04      	ldr	r3, [pc, #16]	; (200f0c <__gnu_unwind_get_pr_addr+0x1c>)
  200efa:	2800      	cmp	r0, #0
  200efc:	bf0c      	ite	eq
  200efe:	4618      	moveq	r0, r3
  200f00:	2000      	movne	r0, #0
  200f02:	4770      	bx	lr
  200f04:	4802      	ldr	r0, [pc, #8]	; (200f10 <__gnu_unwind_get_pr_addr+0x20>)
  200f06:	4770      	bx	lr
  200f08:	4802      	ldr	r0, [pc, #8]	; (200f14 <__gnu_unwind_get_pr_addr+0x24>)
  200f0a:	4770      	bx	lr
  200f0c:	002015f5 	.word	0x002015f5
  200f10:	002015f9 	.word	0x002015f9
  200f14:	002015fd 	.word	0x002015fd

00200f18 <get_eit_entry>:
  200f18:	b530      	push	{r4, r5, lr}
  200f1a:	4b24      	ldr	r3, [pc, #144]	; (200fac <get_eit_entry+0x94>)
  200f1c:	b083      	sub	sp, #12
  200f1e:	4604      	mov	r4, r0
  200f20:	1e8d      	subs	r5, r1, #2
  200f22:	b37b      	cbz	r3, 200f84 <get_eit_entry+0x6c>
  200f24:	a901      	add	r1, sp, #4
  200f26:	4628      	mov	r0, r5
  200f28:	f3af 8000 	nop.w
  200f2c:	b320      	cbz	r0, 200f78 <get_eit_entry+0x60>
  200f2e:	9901      	ldr	r1, [sp, #4]
  200f30:	462a      	mov	r2, r5
  200f32:	f7ff ffad 	bl	200e90 <search_EIT_table>
  200f36:	4601      	mov	r1, r0
  200f38:	b1f0      	cbz	r0, 200f78 <get_eit_entry+0x60>
  200f3a:	f7ff ff9f 	bl	200e7c <selfrel_offset31>
  200f3e:	684b      	ldr	r3, [r1, #4]
  200f40:	64a0      	str	r0, [r4, #72]	; 0x48
  200f42:	2b01      	cmp	r3, #1
  200f44:	d012      	beq.n	200f6c <get_eit_entry+0x54>
  200f46:	2b00      	cmp	r3, #0
  200f48:	f101 0004 	add.w	r0, r1, #4
  200f4c:	db20      	blt.n	200f90 <get_eit_entry+0x78>
  200f4e:	f7ff ff95 	bl	200e7c <selfrel_offset31>
  200f52:	2300      	movs	r3, #0
  200f54:	64e0      	str	r0, [r4, #76]	; 0x4c
  200f56:	6523      	str	r3, [r4, #80]	; 0x50
  200f58:	6803      	ldr	r3, [r0, #0]
  200f5a:	2b00      	cmp	r3, #0
  200f5c:	db1c      	blt.n	200f98 <get_eit_entry+0x80>
  200f5e:	f7ff ff8d 	bl	200e7c <selfrel_offset31>
  200f62:	2300      	movs	r3, #0
  200f64:	6120      	str	r0, [r4, #16]
  200f66:	4618      	mov	r0, r3
  200f68:	b003      	add	sp, #12
  200f6a:	bd30      	pop	{r4, r5, pc}
  200f6c:	2300      	movs	r3, #0
  200f6e:	6123      	str	r3, [r4, #16]
  200f70:	2305      	movs	r3, #5
  200f72:	4618      	mov	r0, r3
  200f74:	b003      	add	sp, #12
  200f76:	bd30      	pop	{r4, r5, pc}
  200f78:	2300      	movs	r3, #0
  200f7a:	6123      	str	r3, [r4, #16]
  200f7c:	2309      	movs	r3, #9
  200f7e:	4618      	mov	r0, r3
  200f80:	b003      	add	sp, #12
  200f82:	bd30      	pop	{r4, r5, pc}
  200f84:	490a      	ldr	r1, [pc, #40]	; (200fb0 <get_eit_entry+0x98>)
  200f86:	480b      	ldr	r0, [pc, #44]	; (200fb4 <get_eit_entry+0x9c>)
  200f88:	1a09      	subs	r1, r1, r0
  200f8a:	10c9      	asrs	r1, r1, #3
  200f8c:	9101      	str	r1, [sp, #4]
  200f8e:	e7cf      	b.n	200f30 <get_eit_entry+0x18>
  200f90:	2301      	movs	r3, #1
  200f92:	64e0      	str	r0, [r4, #76]	; 0x4c
  200f94:	6523      	str	r3, [r4, #80]	; 0x50
  200f96:	e7df      	b.n	200f58 <get_eit_entry+0x40>
  200f98:	f3c3 6003 	ubfx	r0, r3, #24, #4
  200f9c:	f7ff ffa8 	bl	200ef0 <__gnu_unwind_get_pr_addr>
  200fa0:	2800      	cmp	r0, #0
  200fa2:	6120      	str	r0, [r4, #16]
  200fa4:	bf14      	ite	ne
  200fa6:	2300      	movne	r3, #0
  200fa8:	2309      	moveq	r3, #9
  200faa:	e7dc      	b.n	200f66 <get_eit_entry+0x4e>
  200fac:	00000000 	.word	0x00000000
  200fb0:	00219718 	.word	0x00219718
  200fb4:	00218f28 	.word	0x00218f28

00200fb8 <restore_non_core_regs>:
  200fb8:	6803      	ldr	r3, [r0, #0]
  200fba:	07da      	lsls	r2, r3, #31
  200fbc:	b510      	push	{r4, lr}
  200fbe:	4604      	mov	r4, r0
  200fc0:	d406      	bmi.n	200fd0 <restore_non_core_regs+0x18>
  200fc2:	079b      	lsls	r3, r3, #30
  200fc4:	f100 0048 	add.w	r0, r0, #72	; 0x48
  200fc8:	d509      	bpl.n	200fde <restore_non_core_regs+0x26>
  200fca:	f000 fc51 	bl	201870 <__gnu_Unwind_Restore_VFP_D>
  200fce:	6823      	ldr	r3, [r4, #0]
  200fd0:	0759      	lsls	r1, r3, #29
  200fd2:	d509      	bpl.n	200fe8 <restore_non_core_regs+0x30>
  200fd4:	071a      	lsls	r2, r3, #28
  200fd6:	d50e      	bpl.n	200ff6 <restore_non_core_regs+0x3e>
  200fd8:	06db      	lsls	r3, r3, #27
  200fda:	d513      	bpl.n	201004 <restore_non_core_regs+0x4c>
  200fdc:	bd10      	pop	{r4, pc}
  200fde:	f000 fc3f 	bl	201860 <__gnu_Unwind_Restore_VFP>
  200fe2:	6823      	ldr	r3, [r4, #0]
  200fe4:	0759      	lsls	r1, r3, #29
  200fe6:	d4f5      	bmi.n	200fd4 <restore_non_core_regs+0x1c>
  200fe8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
  200fec:	f000 fc48 	bl	201880 <__gnu_Unwind_Restore_VFP_D_16_to_31>
  200ff0:	6823      	ldr	r3, [r4, #0]
  200ff2:	071a      	lsls	r2, r3, #28
  200ff4:	d4f0      	bmi.n	200fd8 <restore_non_core_regs+0x20>
  200ff6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
  200ffa:	f000 fc49 	bl	201890 <__gnu_Unwind_Restore_WMMXD>
  200ffe:	6823      	ldr	r3, [r4, #0]
  201000:	06db      	lsls	r3, r3, #27
  201002:	d4eb      	bmi.n	200fdc <restore_non_core_regs+0x24>
  201004:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
  201008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  20100c:	f000 bc84 	b.w	201918 <__gnu_Unwind_Restore_WMMXC>

00201010 <_Unwind_decode_typeinfo_ptr.isra.0>:
  201010:	6803      	ldr	r3, [r0, #0]
  201012:	b103      	cbz	r3, 201016 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
  201014:	4403      	add	r3, r0
  201016:	4618      	mov	r0, r3
  201018:	4770      	bx	lr
  20101a:	bf00      	nop

0020101c <__gnu_unwind_24bit.isra.1>:
  20101c:	2009      	movs	r0, #9
  20101e:	4770      	bx	lr

00201020 <_Unwind_DebugHook>:
  201020:	4770      	bx	lr
  201022:	bf00      	nop

00201024 <unwind_phase2>:
  201024:	b570      	push	{r4, r5, r6, lr}
  201026:	4604      	mov	r4, r0
  201028:	460d      	mov	r5, r1
  20102a:	e008      	b.n	20103e <unwind_phase2+0x1a>
  20102c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  20102e:	6163      	str	r3, [r4, #20]
  201030:	462a      	mov	r2, r5
  201032:	6923      	ldr	r3, [r4, #16]
  201034:	4621      	mov	r1, r4
  201036:	2001      	movs	r0, #1
  201038:	4798      	blx	r3
  20103a:	2808      	cmp	r0, #8
  20103c:	d108      	bne.n	201050 <unwind_phase2+0x2c>
  20103e:	6c29      	ldr	r1, [r5, #64]	; 0x40
  201040:	4620      	mov	r0, r4
  201042:	f7ff ff69 	bl	200f18 <get_eit_entry>
  201046:	4606      	mov	r6, r0
  201048:	2800      	cmp	r0, #0
  20104a:	d0ef      	beq.n	20102c <unwind_phase2+0x8>
  20104c:	f015 fb9e 	bl	21678c <abort>
  201050:	2807      	cmp	r0, #7
  201052:	d1fb      	bne.n	20104c <unwind_phase2+0x28>
  201054:	4630      	mov	r0, r6
  201056:	6c29      	ldr	r1, [r5, #64]	; 0x40
  201058:	f7ff ffe2 	bl	201020 <_Unwind_DebugHook>
  20105c:	1d28      	adds	r0, r5, #4
  20105e:	f000 fbf3 	bl	201848 <__restore_core_regs>
  201062:	bf00      	nop

00201064 <unwind_phase2_forced>:
  201064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  201068:	1d0c      	adds	r4, r1, #4
  20106a:	4605      	mov	r5, r0
  20106c:	4692      	mov	sl, r2
  20106e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  201070:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
  201074:	ae03      	add	r6, sp, #12
  201076:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  201078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  20107a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  20107c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  20107e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  201080:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  201084:	ac02      	add	r4, sp, #8
  201086:	f8d5 800c 	ldr.w	r8, [r5, #12]
  20108a:	f8d5 9018 	ldr.w	r9, [r5, #24]
  20108e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  201092:	2300      	movs	r3, #0
  201094:	4628      	mov	r0, r5
  201096:	6c21      	ldr	r1, [r4, #64]	; 0x40
  201098:	6023      	str	r3, [r4, #0]
  20109a:	f7ff ff3d 	bl	200f18 <get_eit_entry>
  20109e:	f1ba 0f00 	cmp.w	sl, #0
  2010a2:	4607      	mov	r7, r0
  2010a4:	bf14      	ite	ne
  2010a6:	260a      	movne	r6, #10
  2010a8:	2609      	moveq	r6, #9
  2010aa:	b17f      	cbz	r7, 2010cc <unwind_phase2_forced+0x68>
  2010ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  2010ae:	f046 0110 	orr.w	r1, r6, #16
  2010b2:	e88d 0210 	stmia.w	sp, {r4, r9}
  2010b6:	462a      	mov	r2, r5
  2010b8:	6463      	str	r3, [r4, #68]	; 0x44
  2010ba:	2001      	movs	r0, #1
  2010bc:	462b      	mov	r3, r5
  2010be:	47c0      	blx	r8
  2010c0:	bb78      	cbnz	r0, 201122 <unwind_phase2_forced+0xbe>
  2010c2:	4638      	mov	r0, r7
  2010c4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
  2010c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  2010cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  2010ce:	616b      	str	r3, [r5, #20]
  2010d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  2010d4:	4621      	mov	r1, r4
  2010d6:	a87a      	add	r0, sp, #488	; 0x1e8
  2010d8:	f015 fbb7 	bl	21684a <memcpy>
  2010dc:	692b      	ldr	r3, [r5, #16]
  2010de:	aa7a      	add	r2, sp, #488	; 0x1e8
  2010e0:	4629      	mov	r1, r5
  2010e2:	4630      	mov	r0, r6
  2010e4:	4798      	blx	r3
  2010e6:	9b88      	ldr	r3, [sp, #544]	; 0x220
  2010e8:	4682      	mov	sl, r0
  2010ea:	e88d 0210 	stmia.w	sp, {r4, r9}
  2010ee:	4631      	mov	r1, r6
  2010f0:	6463      	str	r3, [r4, #68]	; 0x44
  2010f2:	462a      	mov	r2, r5
  2010f4:	462b      	mov	r3, r5
  2010f6:	2001      	movs	r0, #1
  2010f8:	47c0      	blx	r8
  2010fa:	b990      	cbnz	r0, 201122 <unwind_phase2_forced+0xbe>
  2010fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  201100:	a97a      	add	r1, sp, #488	; 0x1e8
  201102:	4620      	mov	r0, r4
  201104:	f015 fba1 	bl	21684a <memcpy>
  201108:	f1ba 0f08 	cmp.w	sl, #8
  20110c:	d106      	bne.n	20111c <unwind_phase2_forced+0xb8>
  20110e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  201110:	4628      	mov	r0, r5
  201112:	f7ff ff01 	bl	200f18 <get_eit_entry>
  201116:	2609      	movs	r6, #9
  201118:	4607      	mov	r7, r0
  20111a:	e7c6      	b.n	2010aa <unwind_phase2_forced+0x46>
  20111c:	f1ba 0f07 	cmp.w	sl, #7
  201120:	d005      	beq.n	20112e <unwind_phase2_forced+0xca>
  201122:	2709      	movs	r7, #9
  201124:	4638      	mov	r0, r7
  201126:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
  20112a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  20112e:	4638      	mov	r0, r7
  201130:	6c21      	ldr	r1, [r4, #64]	; 0x40
  201132:	f7ff ff75 	bl	201020 <_Unwind_DebugHook>
  201136:	a803      	add	r0, sp, #12
  201138:	f000 fb86 	bl	201848 <__restore_core_regs>

0020113c <_Unwind_GetCFA>:
  20113c:	6c40      	ldr	r0, [r0, #68]	; 0x44
  20113e:	4770      	bx	lr

00201140 <__gnu_Unwind_RaiseException>:
  201140:	b5f0      	push	{r4, r5, r6, r7, lr}
  201142:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  201144:	640b      	str	r3, [r1, #64]	; 0x40
  201146:	1d0e      	adds	r6, r1, #4
  201148:	460f      	mov	r7, r1
  20114a:	4604      	mov	r4, r0
  20114c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  20114e:	b0f9      	sub	sp, #484	; 0x1e4
  201150:	ad01      	add	r5, sp, #4
  201152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  201154:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  201156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  201158:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  20115a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  20115c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  201160:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  201164:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  201168:	9600      	str	r6, [sp, #0]
  20116a:	e006      	b.n	20117a <__gnu_Unwind_RaiseException+0x3a>
  20116c:	6923      	ldr	r3, [r4, #16]
  20116e:	466a      	mov	r2, sp
  201170:	4621      	mov	r1, r4
  201172:	4798      	blx	r3
  201174:	2808      	cmp	r0, #8
  201176:	4605      	mov	r5, r0
  201178:	d108      	bne.n	20118c <__gnu_Unwind_RaiseException+0x4c>
  20117a:	9910      	ldr	r1, [sp, #64]	; 0x40
  20117c:	4620      	mov	r0, r4
  20117e:	f7ff fecb 	bl	200f18 <get_eit_entry>
  201182:	2800      	cmp	r0, #0
  201184:	d0f2      	beq.n	20116c <__gnu_Unwind_RaiseException+0x2c>
  201186:	2009      	movs	r0, #9
  201188:	b079      	add	sp, #484	; 0x1e4
  20118a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20118c:	4668      	mov	r0, sp
  20118e:	f7ff ff13 	bl	200fb8 <restore_non_core_regs>
  201192:	2d06      	cmp	r5, #6
  201194:	d1f7      	bne.n	201186 <__gnu_Unwind_RaiseException+0x46>
  201196:	4639      	mov	r1, r7
  201198:	4620      	mov	r0, r4
  20119a:	f7ff ff43 	bl	201024 <unwind_phase2>
  20119e:	bf00      	nop

002011a0 <__gnu_Unwind_ForcedUnwind>:
  2011a0:	b430      	push	{r4, r5}
  2011a2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  2011a4:	60c1      	str	r1, [r0, #12]
  2011a6:	6182      	str	r2, [r0, #24]
  2011a8:	4619      	mov	r1, r3
  2011aa:	641d      	str	r5, [r3, #64]	; 0x40
  2011ac:	2200      	movs	r2, #0
  2011ae:	bc30      	pop	{r4, r5}
  2011b0:	e758      	b.n	201064 <unwind_phase2_forced>
  2011b2:	bf00      	nop

002011b4 <__gnu_Unwind_Resume>:
  2011b4:	b570      	push	{r4, r5, r6, lr}
  2011b6:	68c6      	ldr	r6, [r0, #12]
  2011b8:	6943      	ldr	r3, [r0, #20]
  2011ba:	640b      	str	r3, [r1, #64]	; 0x40
  2011bc:	b126      	cbz	r6, 2011c8 <__gnu_Unwind_Resume+0x14>
  2011be:	2201      	movs	r2, #1
  2011c0:	f7ff ff50 	bl	201064 <unwind_phase2_forced>
  2011c4:	f015 fae2 	bl	21678c <abort>
  2011c8:	6903      	ldr	r3, [r0, #16]
  2011ca:	460a      	mov	r2, r1
  2011cc:	4604      	mov	r4, r0
  2011ce:	460d      	mov	r5, r1
  2011d0:	4601      	mov	r1, r0
  2011d2:	2002      	movs	r0, #2
  2011d4:	4798      	blx	r3
  2011d6:	2807      	cmp	r0, #7
  2011d8:	d007      	beq.n	2011ea <__gnu_Unwind_Resume+0x36>
  2011da:	2808      	cmp	r0, #8
  2011dc:	d103      	bne.n	2011e6 <__gnu_Unwind_Resume+0x32>
  2011de:	4629      	mov	r1, r5
  2011e0:	4620      	mov	r0, r4
  2011e2:	f7ff ff1f 	bl	201024 <unwind_phase2>
  2011e6:	f015 fad1 	bl	21678c <abort>
  2011ea:	4630      	mov	r0, r6
  2011ec:	6c29      	ldr	r1, [r5, #64]	; 0x40
  2011ee:	f7ff ff17 	bl	201020 <_Unwind_DebugHook>
  2011f2:	1d28      	adds	r0, r5, #4
  2011f4:	f000 fb28 	bl	201848 <__restore_core_regs>

002011f8 <__gnu_Unwind_Resume_or_Rethrow>:
  2011f8:	68c2      	ldr	r2, [r0, #12]
  2011fa:	b11a      	cbz	r2, 201204 <__gnu_Unwind_Resume_or_Rethrow+0xc>
  2011fc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
  2011fe:	640a      	str	r2, [r1, #64]	; 0x40
  201200:	2200      	movs	r2, #0
  201202:	e72f      	b.n	201064 <unwind_phase2_forced>
  201204:	e79c      	b.n	201140 <__gnu_Unwind_RaiseException>
  201206:	bf00      	nop

00201208 <_Unwind_Complete>:
  201208:	4770      	bx	lr
  20120a:	bf00      	nop

0020120c <_Unwind_DeleteException>:
  20120c:	6883      	ldr	r3, [r0, #8]
  20120e:	b113      	cbz	r3, 201216 <_Unwind_DeleteException+0xa>
  201210:	4601      	mov	r1, r0
  201212:	2001      	movs	r0, #1
  201214:	4718      	bx	r3
  201216:	4770      	bx	lr

00201218 <_Unwind_VRS_Get>:
  201218:	b500      	push	{lr}
  20121a:	2904      	cmp	r1, #4
  20121c:	d807      	bhi.n	20122e <_Unwind_VRS_Get+0x16>
  20121e:	e8df f001 	tbb	[pc, r1]
  201222:	0903      	.short	0x0903
  201224:	0906      	.short	0x0906
  201226:	09          	.byte	0x09
  201227:	00          	.byte	0x00
  201228:	b90b      	cbnz	r3, 20122e <_Unwind_VRS_Get+0x16>
  20122a:	2a0f      	cmp	r2, #15
  20122c:	d905      	bls.n	20123a <_Unwind_VRS_Get+0x22>
  20122e:	2002      	movs	r0, #2
  201230:	f85d fb04 	ldr.w	pc, [sp], #4
  201234:	2001      	movs	r0, #1
  201236:	f85d fb04 	ldr.w	pc, [sp], #4
  20123a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  20123e:	4618      	mov	r0, r3
  201240:	6853      	ldr	r3, [r2, #4]
  201242:	9a01      	ldr	r2, [sp, #4]
  201244:	6013      	str	r3, [r2, #0]
  201246:	f85d fb04 	ldr.w	pc, [sp], #4
  20124a:	bf00      	nop

0020124c <_Unwind_GetGR>:
  20124c:	b510      	push	{r4, lr}
  20124e:	b084      	sub	sp, #16
  201250:	2300      	movs	r3, #0
  201252:	ac03      	add	r4, sp, #12
  201254:	460a      	mov	r2, r1
  201256:	9400      	str	r4, [sp, #0]
  201258:	4619      	mov	r1, r3
  20125a:	f7ff ffdd 	bl	201218 <_Unwind_VRS_Get>
  20125e:	9803      	ldr	r0, [sp, #12]
  201260:	b004      	add	sp, #16
  201262:	bd10      	pop	{r4, pc}

00201264 <_Unwind_VRS_Set>:
  201264:	b500      	push	{lr}
  201266:	2904      	cmp	r1, #4
  201268:	d807      	bhi.n	20127a <_Unwind_VRS_Set+0x16>
  20126a:	e8df f001 	tbb	[pc, r1]
  20126e:	0903      	.short	0x0903
  201270:	0906      	.short	0x0906
  201272:	09          	.byte	0x09
  201273:	00          	.byte	0x00
  201274:	b90b      	cbnz	r3, 20127a <_Unwind_VRS_Set+0x16>
  201276:	2a0f      	cmp	r2, #15
  201278:	d905      	bls.n	201286 <_Unwind_VRS_Set+0x22>
  20127a:	2002      	movs	r0, #2
  20127c:	f85d fb04 	ldr.w	pc, [sp], #4
  201280:	2001      	movs	r0, #1
  201282:	f85d fb04 	ldr.w	pc, [sp], #4
  201286:	9901      	ldr	r1, [sp, #4]
  201288:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  20128c:	6809      	ldr	r1, [r1, #0]
  20128e:	6051      	str	r1, [r2, #4]
  201290:	4618      	mov	r0, r3
  201292:	f85d fb04 	ldr.w	pc, [sp], #4
  201296:	bf00      	nop

00201298 <_Unwind_SetGR>:
  201298:	b510      	push	{r4, lr}
  20129a:	b084      	sub	sp, #16
  20129c:	ac04      	add	r4, sp, #16
  20129e:	2300      	movs	r3, #0
  2012a0:	f844 2d04 	str.w	r2, [r4, #-4]!
  2012a4:	460a      	mov	r2, r1
  2012a6:	9400      	str	r4, [sp, #0]
  2012a8:	4619      	mov	r1, r3
  2012aa:	f7ff ffdb 	bl	201264 <_Unwind_VRS_Set>
  2012ae:	b004      	add	sp, #16
  2012b0:	bd10      	pop	{r4, pc}
  2012b2:	bf00      	nop

002012b4 <__gnu_Unwind_Backtrace>:
  2012b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  2012b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  2012b8:	6413      	str	r3, [r2, #64]	; 0x40
  2012ba:	1d15      	adds	r5, r2, #4
  2012bc:	4607      	mov	r7, r0
  2012be:	460e      	mov	r6, r1
  2012c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  2012c2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  2012c6:	ac17      	add	r4, sp, #92	; 0x5c
  2012c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  2012ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  2012cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  2012ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  2012d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  2012d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  2012d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  2012da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  2012de:	9516      	str	r5, [sp, #88]	; 0x58
  2012e0:	e010      	b.n	201304 <__gnu_Unwind_Backtrace+0x50>
  2012e2:	a816      	add	r0, sp, #88	; 0x58
  2012e4:	f7ff ffd8 	bl	201298 <_Unwind_SetGR>
  2012e8:	4631      	mov	r1, r6
  2012ea:	a816      	add	r0, sp, #88	; 0x58
  2012ec:	47b8      	blx	r7
  2012ee:	aa16      	add	r2, sp, #88	; 0x58
  2012f0:	4669      	mov	r1, sp
  2012f2:	b978      	cbnz	r0, 201314 <__gnu_Unwind_Backtrace+0x60>
  2012f4:	9b04      	ldr	r3, [sp, #16]
  2012f6:	2008      	movs	r0, #8
  2012f8:	4798      	blx	r3
  2012fa:	2805      	cmp	r0, #5
  2012fc:	4604      	mov	r4, r0
  2012fe:	d00a      	beq.n	201316 <__gnu_Unwind_Backtrace+0x62>
  201300:	2809      	cmp	r0, #9
  201302:	d007      	beq.n	201314 <__gnu_Unwind_Backtrace+0x60>
  201304:	9926      	ldr	r1, [sp, #152]	; 0x98
  201306:	4668      	mov	r0, sp
  201308:	f7ff fe06 	bl	200f18 <get_eit_entry>
  20130c:	466a      	mov	r2, sp
  20130e:	210c      	movs	r1, #12
  201310:	2800      	cmp	r0, #0
  201312:	d0e6      	beq.n	2012e2 <__gnu_Unwind_Backtrace+0x2e>
  201314:	2409      	movs	r4, #9
  201316:	a816      	add	r0, sp, #88	; 0x58
  201318:	f7ff fe4e 	bl	200fb8 <restore_non_core_regs>
  20131c:	4620      	mov	r0, r4
  20131e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
  201322:	bdf0      	pop	{r4, r5, r6, r7, pc}

00201324 <__gnu_unwind_pr_common>:
  201324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201328:	460d      	mov	r5, r1
  20132a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
  20132c:	b08b      	sub	sp, #44	; 0x2c
  20132e:	1d0c      	adds	r4, r1, #4
  201330:	6809      	ldr	r1, [r1, #0]
  201332:	9107      	str	r1, [sp, #28]
  201334:	4691      	mov	r9, r2
  201336:	9408      	str	r4, [sp, #32]
  201338:	f000 0b03 	and.w	fp, r0, #3
  20133c:	461e      	mov	r6, r3
  20133e:	2b00      	cmp	r3, #0
  201340:	d160      	bne.n	201404 <__gnu_unwind_pr_common+0xe0>
  201342:	0209      	lsls	r1, r1, #8
  201344:	2303      	movs	r3, #3
  201346:	9107      	str	r1, [sp, #28]
  201348:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
  20134c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  201350:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  201352:	f1bb 0f02 	cmp.w	fp, #2
  201356:	bf08      	it	eq
  201358:	6bac      	ldreq	r4, [r5, #56]	; 0x38
  20135a:	f013 0301 	ands.w	r3, r3, #1
  20135e:	d140      	bne.n	2013e2 <__gnu_unwind_pr_common+0xbe>
  201360:	9301      	str	r3, [sp, #4]
  201362:	f000 0308 	and.w	r3, r0, #8
  201366:	9303      	str	r3, [sp, #12]
  201368:	f8d4 8000 	ldr.w	r8, [r4]
  20136c:	f1b8 0f00 	cmp.w	r8, #0
  201370:	d039      	beq.n	2013e6 <__gnu_unwind_pr_common+0xc2>
  201372:	2e02      	cmp	r6, #2
  201374:	d043      	beq.n	2013fe <__gnu_unwind_pr_common+0xda>
  201376:	f8b4 8000 	ldrh.w	r8, [r4]
  20137a:	8867      	ldrh	r7, [r4, #2]
  20137c:	3404      	adds	r4, #4
  20137e:	6cab      	ldr	r3, [r5, #72]	; 0x48
  201380:	f027 0a01 	bic.w	sl, r7, #1
  201384:	210f      	movs	r1, #15
  201386:	4648      	mov	r0, r9
  201388:	449a      	add	sl, r3
  20138a:	f7ff ff5f 	bl	20124c <_Unwind_GetGR>
  20138e:	4582      	cmp	sl, r0
  201390:	d833      	bhi.n	2013fa <__gnu_unwind_pr_common+0xd6>
  201392:	f028 0301 	bic.w	r3, r8, #1
  201396:	449a      	add	sl, r3
  201398:	4550      	cmp	r0, sl
  20139a:	bf2c      	ite	cs
  20139c:	2000      	movcs	r0, #0
  20139e:	2001      	movcc	r0, #1
  2013a0:	007f      	lsls	r7, r7, #1
  2013a2:	f007 0702 	and.w	r7, r7, #2
  2013a6:	f008 0801 	and.w	r8, r8, #1
  2013aa:	ea47 0708 	orr.w	r7, r7, r8
  2013ae:	2f01      	cmp	r7, #1
  2013b0:	d03e      	beq.n	201430 <__gnu_unwind_pr_common+0x10c>
  2013b2:	d335      	bcc.n	201420 <__gnu_unwind_pr_common+0xfc>
  2013b4:	2f02      	cmp	r7, #2
  2013b6:	d11c      	bne.n	2013f2 <__gnu_unwind_pr_common+0xce>
  2013b8:	6823      	ldr	r3, [r4, #0]
  2013ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
  2013be:	9202      	str	r2, [sp, #8]
  2013c0:	f1bb 0f00 	cmp.w	fp, #0
  2013c4:	d176      	bne.n	2014b4 <__gnu_unwind_pr_common+0x190>
  2013c6:	b128      	cbz	r0, 2013d4 <__gnu_unwind_pr_common+0xb0>
  2013c8:	9903      	ldr	r1, [sp, #12]
  2013ca:	2900      	cmp	r1, #0
  2013cc:	d07e      	beq.n	2014cc <__gnu_unwind_pr_common+0x1a8>
  2013ce:	2a00      	cmp	r2, #0
  2013d0:	f000 80a6 	beq.w	201520 <__gnu_unwind_pr_common+0x1fc>
  2013d4:	2b00      	cmp	r3, #0
  2013d6:	db77      	blt.n	2014c8 <__gnu_unwind_pr_common+0x1a4>
  2013d8:	9b02      	ldr	r3, [sp, #8]
  2013da:	3301      	adds	r3, #1
  2013dc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
  2013e0:	e7c2      	b.n	201368 <__gnu_unwind_pr_common+0x44>
  2013e2:	2300      	movs	r3, #0
  2013e4:	9301      	str	r3, [sp, #4]
  2013e6:	2e02      	cmp	r6, #2
  2013e8:	dd3e      	ble.n	201468 <__gnu_unwind_pr_common+0x144>
  2013ea:	f7ff fe17 	bl	20101c <__gnu_unwind_24bit.isra.1>
  2013ee:	2800      	cmp	r0, #0
  2013f0:	d040      	beq.n	201474 <__gnu_unwind_pr_common+0x150>
  2013f2:	2009      	movs	r0, #9
  2013f4:	b00b      	add	sp, #44	; 0x2c
  2013f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2013fa:	2000      	movs	r0, #0
  2013fc:	e7d0      	b.n	2013a0 <__gnu_unwind_pr_common+0x7c>
  2013fe:	6867      	ldr	r7, [r4, #4]
  201400:	3408      	adds	r4, #8
  201402:	e7bc      	b.n	20137e <__gnu_unwind_pr_common+0x5a>
  201404:	2b02      	cmp	r3, #2
  201406:	dca3      	bgt.n	201350 <__gnu_unwind_pr_common+0x2c>
  201408:	0c0b      	lsrs	r3, r1, #16
  20140a:	b2da      	uxtb	r2, r3
  20140c:	0409      	lsls	r1, r1, #16
  20140e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  201412:	2302      	movs	r3, #2
  201414:	eb04 0482 	add.w	r4, r4, r2, lsl #2
  201418:	9107      	str	r1, [sp, #28]
  20141a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  20141e:	e797      	b.n	201350 <__gnu_unwind_pr_common+0x2c>
  201420:	f1bb 0f00 	cmp.w	fp, #0
  201424:	d002      	beq.n	20142c <__gnu_unwind_pr_common+0x108>
  201426:	2800      	cmp	r0, #0
  201428:	f040 80bd 	bne.w	2015a6 <__gnu_unwind_pr_common+0x282>
  20142c:	3404      	adds	r4, #4
  20142e:	e79b      	b.n	201368 <__gnu_unwind_pr_common+0x44>
  201430:	f1bb 0f00 	cmp.w	fp, #0
  201434:	d125      	bne.n	201482 <__gnu_unwind_pr_common+0x15e>
  201436:	b1a8      	cbz	r0, 201464 <__gnu_unwind_pr_common+0x140>
  201438:	e894 000c 	ldmia.w	r4, {r2, r3}
  20143c:	1c99      	adds	r1, r3, #2
  20143e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
  201442:	d0d6      	beq.n	2013f2 <__gnu_unwind_pr_common+0xce>
  201444:	f105 0158 	add.w	r1, r5, #88	; 0x58
  201448:	3301      	adds	r3, #1
  20144a:	9106      	str	r1, [sp, #24]
  20144c:	f000 80a3 	beq.w	201596 <__gnu_unwind_pr_common+0x272>
  201450:	1d20      	adds	r0, r4, #4
  201452:	f7ff fddd 	bl	201010 <_Unwind_decode_typeinfo_ptr.isra.0>
  201456:	ab06      	add	r3, sp, #24
  201458:	4601      	mov	r1, r0
  20145a:	4628      	mov	r0, r5
  20145c:	f013 f8a8 	bl	2145b0 <__cxa_type_match>
  201460:	2800      	cmp	r0, #0
  201462:	d177      	bne.n	201554 <__gnu_unwind_pr_common+0x230>
  201464:	3408      	adds	r4, #8
  201466:	e77f      	b.n	201368 <__gnu_unwind_pr_common+0x44>
  201468:	a907      	add	r1, sp, #28
  20146a:	4648      	mov	r0, r9
  20146c:	f000 faee 	bl	201a4c <__gnu_unwind_execute>
  201470:	2800      	cmp	r0, #0
  201472:	d1be      	bne.n	2013f2 <__gnu_unwind_pr_common+0xce>
  201474:	9b01      	ldr	r3, [sp, #4]
  201476:	2b00      	cmp	r3, #0
  201478:	d15c      	bne.n	201534 <__gnu_unwind_pr_common+0x210>
  20147a:	2008      	movs	r0, #8
  20147c:	b00b      	add	sp, #44	; 0x2c
  20147e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  201482:	210d      	movs	r1, #13
  201484:	4648      	mov	r0, r9
  201486:	6a2f      	ldr	r7, [r5, #32]
  201488:	f7ff fee0 	bl	20124c <_Unwind_GetGR>
  20148c:	4287      	cmp	r7, r0
  20148e:	d1e9      	bne.n	201464 <__gnu_unwind_pr_common+0x140>
  201490:	6aab      	ldr	r3, [r5, #40]	; 0x28
  201492:	429c      	cmp	r4, r3
  201494:	d1e6      	bne.n	201464 <__gnu_unwind_pr_common+0x140>
  201496:	4620      	mov	r0, r4
  201498:	f7ff fcf0 	bl	200e7c <selfrel_offset31>
  20149c:	210f      	movs	r1, #15
  20149e:	4602      	mov	r2, r0
  2014a0:	4648      	mov	r0, r9
  2014a2:	f7ff fef9 	bl	201298 <_Unwind_SetGR>
  2014a6:	4648      	mov	r0, r9
  2014a8:	462a      	mov	r2, r5
  2014aa:	2100      	movs	r1, #0
  2014ac:	f7ff fef4 	bl	201298 <_Unwind_SetGR>
  2014b0:	2007      	movs	r0, #7
  2014b2:	e79f      	b.n	2013f4 <__gnu_unwind_pr_common+0xd0>
  2014b4:	210d      	movs	r1, #13
  2014b6:	4648      	mov	r0, r9
  2014b8:	6a2f      	ldr	r7, [r5, #32]
  2014ba:	f7ff fec7 	bl	20124c <_Unwind_GetGR>
  2014be:	4287      	cmp	r7, r0
  2014c0:	d058      	beq.n	201574 <__gnu_unwind_pr_common+0x250>
  2014c2:	6823      	ldr	r3, [r4, #0]
  2014c4:	2b00      	cmp	r3, #0
  2014c6:	da87      	bge.n	2013d8 <__gnu_unwind_pr_common+0xb4>
  2014c8:	3404      	adds	r4, #4
  2014ca:	e785      	b.n	2013d8 <__gnu_unwind_pr_common+0xb4>
  2014cc:	9b02      	ldr	r3, [sp, #8]
  2014ce:	b33b      	cbz	r3, 201520 <__gnu_unwind_pr_common+0x1fc>
  2014d0:	f105 0358 	add.w	r3, r5, #88	; 0x58
  2014d4:	1d27      	adds	r7, r4, #4
  2014d6:	f8cd b010 	str.w	fp, [sp, #16]
  2014da:	f8dd 800c 	ldr.w	r8, [sp, #12]
  2014de:	f8dd a008 	ldr.w	sl, [sp, #8]
  2014e2:	9605      	str	r6, [sp, #20]
  2014e4:	46a3      	mov	fp, r4
  2014e6:	461c      	mov	r4, r3
  2014e8:	e002      	b.n	2014f0 <__gnu_unwind_pr_common+0x1cc>
  2014ea:	45b2      	cmp	sl, r6
  2014ec:	46b0      	mov	r8, r6
  2014ee:	d016      	beq.n	20151e <__gnu_unwind_pr_common+0x1fa>
  2014f0:	4638      	mov	r0, r7
  2014f2:	9406      	str	r4, [sp, #24]
  2014f4:	f7ff fd8c 	bl	201010 <_Unwind_decode_typeinfo_ptr.isra.0>
  2014f8:	ab06      	add	r3, sp, #24
  2014fa:	4601      	mov	r1, r0
  2014fc:	2200      	movs	r2, #0
  2014fe:	4628      	mov	r0, r5
  201500:	f013 f856 	bl	2145b0 <__cxa_type_match>
  201504:	f108 0601 	add.w	r6, r8, #1
  201508:	3704      	adds	r7, #4
  20150a:	2800      	cmp	r0, #0
  20150c:	d0ed      	beq.n	2014ea <__gnu_unwind_pr_common+0x1c6>
  20150e:	9b02      	ldr	r3, [sp, #8]
  201510:	9e05      	ldr	r6, [sp, #20]
  201512:	4543      	cmp	r3, r8
  201514:	465c      	mov	r4, fp
  201516:	f8dd b010 	ldr.w	fp, [sp, #16]
  20151a:	d1d2      	bne.n	2014c2 <__gnu_unwind_pr_common+0x19e>
  20151c:	e000      	b.n	201520 <__gnu_unwind_pr_common+0x1fc>
  20151e:	465c      	mov	r4, fp
  201520:	4648      	mov	r0, r9
  201522:	210d      	movs	r1, #13
  201524:	f7ff fe92 	bl	20124c <_Unwind_GetGR>
  201528:	9b06      	ldr	r3, [sp, #24]
  20152a:	6228      	str	r0, [r5, #32]
  20152c:	62ac      	str	r4, [r5, #40]	; 0x28
  20152e:	626b      	str	r3, [r5, #36]	; 0x24
  201530:	2006      	movs	r0, #6
  201532:	e75f      	b.n	2013f4 <__gnu_unwind_pr_common+0xd0>
  201534:	210f      	movs	r1, #15
  201536:	4648      	mov	r0, r9
  201538:	f7ff fe88 	bl	20124c <_Unwind_GetGR>
  20153c:	210e      	movs	r1, #14
  20153e:	4602      	mov	r2, r0
  201540:	4648      	mov	r0, r9
  201542:	f7ff fea9 	bl	201298 <_Unwind_SetGR>
  201546:	4648      	mov	r0, r9
  201548:	4a29      	ldr	r2, [pc, #164]	; (2015f0 <__gnu_unwind_pr_common+0x2cc>)
  20154a:	210f      	movs	r1, #15
  20154c:	f7ff fea4 	bl	201298 <_Unwind_SetGR>
  201550:	2007      	movs	r0, #7
  201552:	e74f      	b.n	2013f4 <__gnu_unwind_pr_common+0xd0>
  201554:	4607      	mov	r7, r0
  201556:	210d      	movs	r1, #13
  201558:	4648      	mov	r0, r9
  20155a:	f7ff fe77 	bl	20124c <_Unwind_GetGR>
  20155e:	2f02      	cmp	r7, #2
  201560:	6228      	str	r0, [r5, #32]
  201562:	d11d      	bne.n	2015a0 <__gnu_unwind_pr_common+0x27c>
  201564:	462b      	mov	r3, r5
  201566:	9a06      	ldr	r2, [sp, #24]
  201568:	f843 2f2c 	str.w	r2, [r3, #44]!
  20156c:	626b      	str	r3, [r5, #36]	; 0x24
  20156e:	62ac      	str	r4, [r5, #40]	; 0x28
  201570:	2006      	movs	r0, #6
  201572:	e73f      	b.n	2013f4 <__gnu_unwind_pr_common+0xd0>
  201574:	6aab      	ldr	r3, [r5, #40]	; 0x28
  201576:	429c      	cmp	r4, r3
  201578:	d1a3      	bne.n	2014c2 <__gnu_unwind_pr_common+0x19e>
  20157a:	2204      	movs	r2, #4
  20157c:	2700      	movs	r7, #0
  20157e:	18a3      	adds	r3, r4, r2
  201580:	9902      	ldr	r1, [sp, #8]
  201582:	62a9      	str	r1, [r5, #40]	; 0x28
  201584:	62ef      	str	r7, [r5, #44]	; 0x2c
  201586:	632a      	str	r2, [r5, #48]	; 0x30
  201588:	636b      	str	r3, [r5, #52]	; 0x34
  20158a:	6823      	ldr	r3, [r4, #0]
  20158c:	42bb      	cmp	r3, r7
  20158e:	db1d      	blt.n	2015cc <__gnu_unwind_pr_common+0x2a8>
  201590:	2301      	movs	r3, #1
  201592:	9301      	str	r3, [sp, #4]
  201594:	e720      	b.n	2013d8 <__gnu_unwind_pr_common+0xb4>
  201596:	4648      	mov	r0, r9
  201598:	210d      	movs	r1, #13
  20159a:	f7ff fe57 	bl	20124c <_Unwind_GetGR>
  20159e:	6228      	str	r0, [r5, #32]
  2015a0:	9b06      	ldr	r3, [sp, #24]
  2015a2:	626b      	str	r3, [r5, #36]	; 0x24
  2015a4:	e7e3      	b.n	20156e <__gnu_unwind_pr_common+0x24a>
  2015a6:	4620      	mov	r0, r4
  2015a8:	f7ff fc68 	bl	200e7c <selfrel_offset31>
  2015ac:	3404      	adds	r4, #4
  2015ae:	4606      	mov	r6, r0
  2015b0:	63ac      	str	r4, [r5, #56]	; 0x38
  2015b2:	4628      	mov	r0, r5
  2015b4:	f013 f85a 	bl	21466c <__cxa_begin_cleanup>
  2015b8:	2800      	cmp	r0, #0
  2015ba:	f43f af1a 	beq.w	2013f2 <__gnu_unwind_pr_common+0xce>
  2015be:	4648      	mov	r0, r9
  2015c0:	4632      	mov	r2, r6
  2015c2:	210f      	movs	r1, #15
  2015c4:	f7ff fe68 	bl	201298 <_Unwind_SetGR>
  2015c8:	2007      	movs	r0, #7
  2015ca:	e713      	b.n	2013f4 <__gnu_unwind_pr_common+0xd0>
  2015cc:	4608      	mov	r0, r1
  2015ce:	3001      	adds	r0, #1
  2015d0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  2015d4:	f7ff fc52 	bl	200e7c <selfrel_offset31>
  2015d8:	210f      	movs	r1, #15
  2015da:	4602      	mov	r2, r0
  2015dc:	4648      	mov	r0, r9
  2015de:	f7ff fe5b 	bl	201298 <_Unwind_SetGR>
  2015e2:	4648      	mov	r0, r9
  2015e4:	462a      	mov	r2, r5
  2015e6:	4639      	mov	r1, r7
  2015e8:	f7ff fe56 	bl	201298 <_Unwind_SetGR>
  2015ec:	2007      	movs	r0, #7
  2015ee:	e701      	b.n	2013f4 <__gnu_unwind_pr_common+0xd0>
  2015f0:	00214f19 	.word	0x00214f19

002015f4 <__aeabi_unwind_cpp_pr0>:
  2015f4:	2300      	movs	r3, #0
  2015f6:	e695      	b.n	201324 <__gnu_unwind_pr_common>

002015f8 <__aeabi_unwind_cpp_pr1>:
  2015f8:	2301      	movs	r3, #1
  2015fa:	e693      	b.n	201324 <__gnu_unwind_pr_common>

002015fc <__aeabi_unwind_cpp_pr2>:
  2015fc:	2302      	movs	r3, #2
  2015fe:	e691      	b.n	201324 <__gnu_unwind_pr_common>

00201600 <_Unwind_VRS_Pop>:
  201600:	b5f0      	push	{r4, r5, r6, r7, lr}
  201602:	4604      	mov	r4, r0
  201604:	b0c5      	sub	sp, #276	; 0x114
  201606:	2904      	cmp	r1, #4
  201608:	d80d      	bhi.n	201626 <_Unwind_VRS_Pop+0x26>
  20160a:	e8df f001 	tbb	[pc, r1]
  20160e:	0353      	.short	0x0353
  201610:	310c      	.short	0x310c
  201612:	0f          	.byte	0x0f
  201613:	00          	.byte	0x00
  201614:	2b01      	cmp	r3, #1
  201616:	ea4f 4612 	mov.w	r6, r2, lsr #16
  20161a:	b295      	uxth	r5, r2
  20161c:	d162      	bne.n	2016e4 <_Unwind_VRS_Pop+0xe4>
  20161e:	1972      	adds	r2, r6, r5
  201620:	2a10      	cmp	r2, #16
  201622:	f240 809b 	bls.w	20175c <_Unwind_VRS_Pop+0x15c>
  201626:	2002      	movs	r0, #2
  201628:	b045      	add	sp, #276	; 0x114
  20162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20162c:	2b00      	cmp	r3, #0
  20162e:	d1fa      	bne.n	201626 <_Unwind_VRS_Pop+0x26>
  201630:	2a10      	cmp	r2, #16
  201632:	d8f8      	bhi.n	201626 <_Unwind_VRS_Pop+0x26>
  201634:	6823      	ldr	r3, [r4, #0]
  201636:	06d8      	lsls	r0, r3, #27
  201638:	f100 80c6 	bmi.w	2017c8 <_Unwind_VRS_Pop+0x1c8>
  20163c:	ae22      	add	r6, sp, #136	; 0x88
  20163e:	4630      	mov	r0, r6
  201640:	9201      	str	r2, [sp, #4]
  201642:	f000 f973 	bl	20192c <__gnu_Unwind_Save_WMMXC>
  201646:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  201648:	9a01      	ldr	r2, [sp, #4]
  20164a:	2300      	movs	r3, #0
  20164c:	2501      	movs	r5, #1
  20164e:	fa05 f103 	lsl.w	r1, r5, r3
  201652:	4211      	tst	r1, r2
  201654:	d003      	beq.n	20165e <_Unwind_VRS_Pop+0x5e>
  201656:	6801      	ldr	r1, [r0, #0]
  201658:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  20165c:	3004      	adds	r0, #4
  20165e:	3301      	adds	r3, #1
  201660:	2b04      	cmp	r3, #4
  201662:	d1f4      	bne.n	20164e <_Unwind_VRS_Pop+0x4e>
  201664:	63a0      	str	r0, [r4, #56]	; 0x38
  201666:	4630      	mov	r0, r6
  201668:	f000 f956 	bl	201918 <__gnu_Unwind_Restore_WMMXC>
  20166c:	2000      	movs	r0, #0
  20166e:	e7db      	b.n	201628 <_Unwind_VRS_Pop+0x28>
  201670:	2b03      	cmp	r3, #3
  201672:	d1d8      	bne.n	201626 <_Unwind_VRS_Pop+0x26>
  201674:	0c15      	lsrs	r5, r2, #16
  201676:	b297      	uxth	r7, r2
  201678:	19eb      	adds	r3, r5, r7
  20167a:	2b10      	cmp	r3, #16
  20167c:	d8d3      	bhi.n	201626 <_Unwind_VRS_Pop+0x26>
  20167e:	6823      	ldr	r3, [r4, #0]
  201680:	071e      	lsls	r6, r3, #28
  201682:	f100 80b5 	bmi.w	2017f0 <_Unwind_VRS_Pop+0x1f0>
  201686:	ae22      	add	r6, sp, #136	; 0x88
  201688:	4630      	mov	r0, r6
  20168a:	f000 f923 	bl	2018d4 <__gnu_Unwind_Save_WMMXD>
  20168e:	00ed      	lsls	r5, r5, #3
  201690:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  201692:	b14f      	cbz	r7, 2016a8 <_Unwind_VRS_Pop+0xa8>
  201694:	3d04      	subs	r5, #4
  201696:	1971      	adds	r1, r6, r5
  201698:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
  20169c:	f853 2b04 	ldr.w	r2, [r3], #4
  2016a0:	f841 2f04 	str.w	r2, [r1, #4]!
  2016a4:	4283      	cmp	r3, r0
  2016a6:	d1f9      	bne.n	20169c <_Unwind_VRS_Pop+0x9c>
  2016a8:	4630      	mov	r0, r6
  2016aa:	63a3      	str	r3, [r4, #56]	; 0x38
  2016ac:	f000 f8f0 	bl	201890 <__gnu_Unwind_Restore_WMMXD>
  2016b0:	2000      	movs	r0, #0
  2016b2:	e7b9      	b.n	201628 <_Unwind_VRS_Pop+0x28>
  2016b4:	2b00      	cmp	r3, #0
  2016b6:	d1b6      	bne.n	201626 <_Unwind_VRS_Pop+0x26>
  2016b8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  2016ba:	b297      	uxth	r7, r2
  2016bc:	1d20      	adds	r0, r4, #4
  2016be:	2601      	movs	r6, #1
  2016c0:	fa06 f103 	lsl.w	r1, r6, r3
  2016c4:	4239      	tst	r1, r7
  2016c6:	f103 0301 	add.w	r3, r3, #1
  2016ca:	d002      	beq.n	2016d2 <_Unwind_VRS_Pop+0xd2>
  2016cc:	6829      	ldr	r1, [r5, #0]
  2016ce:	6001      	str	r1, [r0, #0]
  2016d0:	3504      	adds	r5, #4
  2016d2:	2b10      	cmp	r3, #16
  2016d4:	f100 0004 	add.w	r0, r0, #4
  2016d8:	d1f2      	bne.n	2016c0 <_Unwind_VRS_Pop+0xc0>
  2016da:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
  2016de:	d13b      	bne.n	201758 <_Unwind_VRS_Pop+0x158>
  2016e0:	63a5      	str	r5, [r4, #56]	; 0x38
  2016e2:	e7a1      	b.n	201628 <_Unwind_VRS_Pop+0x28>
  2016e4:	2b05      	cmp	r3, #5
  2016e6:	d19e      	bne.n	201626 <_Unwind_VRS_Pop+0x26>
  2016e8:	1977      	adds	r7, r6, r5
  2016ea:	2f20      	cmp	r7, #32
  2016ec:	d89b      	bhi.n	201626 <_Unwind_VRS_Pop+0x26>
  2016ee:	2e0f      	cmp	r6, #15
  2016f0:	d966      	bls.n	2017c0 <_Unwind_VRS_Pop+0x1c0>
  2016f2:	462f      	mov	r7, r5
  2016f4:	2d00      	cmp	r5, #0
  2016f6:	d13a      	bne.n	20176e <_Unwind_VRS_Pop+0x16e>
  2016f8:	462a      	mov	r2, r5
  2016fa:	2700      	movs	r7, #0
  2016fc:	2a00      	cmp	r2, #0
  2016fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  201700:	dd72      	ble.n	2017e8 <_Unwind_VRS_Pop+0x1e8>
  201702:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
  201706:	4601      	mov	r1, r0
  201708:	a844      	add	r0, sp, #272	; 0x110
  20170a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
  20170e:	388c      	subs	r0, #140	; 0x8c
  201710:	f851 5b04 	ldr.w	r5, [r1], #4
  201714:	f840 5f04 	str.w	r5, [r0, #4]!
  201718:	4291      	cmp	r1, r2
  20171a:	d1f9      	bne.n	201710 <_Unwind_VRS_Pop+0x110>
  20171c:	4608      	mov	r0, r1
  20171e:	b197      	cbz	r7, 201746 <_Unwind_VRS_Pop+0x146>
  201720:	2e10      	cmp	r6, #16
  201722:	4632      	mov	r2, r6
  201724:	a944      	add	r1, sp, #272	; 0x110
  201726:	bf38      	it	cc
  201728:	2210      	movcc	r2, #16
  20172a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  20172e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
  201732:	0079      	lsls	r1, r7, #1
  201734:	3a04      	subs	r2, #4
  201736:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  20173a:	f850 5b04 	ldr.w	r5, [r0], #4
  20173e:	f842 5f04 	str.w	r5, [r2, #4]!
  201742:	4288      	cmp	r0, r1
  201744:	d1f9      	bne.n	20173a <_Unwind_VRS_Pop+0x13a>
  201746:	2b01      	cmp	r3, #1
  201748:	d048      	beq.n	2017dc <_Unwind_VRS_Pop+0x1dc>
  20174a:	2e0f      	cmp	r6, #15
  20174c:	63a1      	str	r1, [r4, #56]	; 0x38
  20174e:	d933      	bls.n	2017b8 <_Unwind_VRS_Pop+0x1b8>
  201750:	b117      	cbz	r7, 201758 <_Unwind_VRS_Pop+0x158>
  201752:	a802      	add	r0, sp, #8
  201754:	f000 f894 	bl	201880 <__gnu_Unwind_Restore_VFP_D_16_to_31>
  201758:	2000      	movs	r0, #0
  20175a:	e765      	b.n	201628 <_Unwind_VRS_Pop+0x28>
  20175c:	2e0f      	cmp	r6, #15
  20175e:	f63f af62 	bhi.w	201626 <_Unwind_VRS_Pop+0x26>
  201762:	2700      	movs	r7, #0
  201764:	6822      	ldr	r2, [r4, #0]
  201766:	07d1      	lsls	r1, r2, #31
  201768:	d417      	bmi.n	20179a <_Unwind_VRS_Pop+0x19a>
  20176a:	2f00      	cmp	r7, #0
  20176c:	d060      	beq.n	201830 <_Unwind_VRS_Pop+0x230>
  20176e:	6822      	ldr	r2, [r4, #0]
  201770:	0751      	lsls	r1, r2, #29
  201772:	d445      	bmi.n	201800 <_Unwind_VRS_Pop+0x200>
  201774:	2b01      	cmp	r3, #1
  201776:	d04d      	beq.n	201814 <_Unwind_VRS_Pop+0x214>
  201778:	2e0f      	cmp	r6, #15
  20177a:	d806      	bhi.n	20178a <_Unwind_VRS_Pop+0x18a>
  20177c:	a822      	add	r0, sp, #136	; 0x88
  20177e:	9301      	str	r3, [sp, #4]
  201780:	f000 f87a 	bl	201878 <__gnu_Unwind_Save_VFP_D>
  201784:	9b01      	ldr	r3, [sp, #4]
  201786:	2f00      	cmp	r7, #0
  201788:	d0b6      	beq.n	2016f8 <_Unwind_VRS_Pop+0xf8>
  20178a:	a802      	add	r0, sp, #8
  20178c:	9301      	str	r3, [sp, #4]
  20178e:	f000 f87b 	bl	201888 <__gnu_Unwind_Save_VFP_D_16_to_31>
  201792:	9b01      	ldr	r3, [sp, #4]
  201794:	f1c6 0210 	rsb	r2, r6, #16
  201798:	e7b0      	b.n	2016fc <_Unwind_VRS_Pop+0xfc>
  20179a:	f022 0101 	bic.w	r1, r2, #1
  20179e:	2b05      	cmp	r3, #5
  2017a0:	6021      	str	r1, [r4, #0]
  2017a2:	9301      	str	r3, [sp, #4]
  2017a4:	4620      	mov	r0, r4
  2017a6:	d03b      	beq.n	201820 <_Unwind_VRS_Pop+0x220>
  2017a8:	f022 0203 	bic.w	r2, r2, #3
  2017ac:	f840 2b48 	str.w	r2, [r0], #72
  2017b0:	f000 f85a 	bl	201868 <__gnu_Unwind_Save_VFP>
  2017b4:	9b01      	ldr	r3, [sp, #4]
  2017b6:	e7d8      	b.n	20176a <_Unwind_VRS_Pop+0x16a>
  2017b8:	a822      	add	r0, sp, #136	; 0x88
  2017ba:	f000 f859 	bl	201870 <__gnu_Unwind_Restore_VFP_D>
  2017be:	e7c7      	b.n	201750 <_Unwind_VRS_Pop+0x150>
  2017c0:	2f10      	cmp	r7, #16
  2017c2:	d9ce      	bls.n	201762 <_Unwind_VRS_Pop+0x162>
  2017c4:	3f10      	subs	r7, #16
  2017c6:	e7cd      	b.n	201764 <_Unwind_VRS_Pop+0x164>
  2017c8:	f023 0310 	bic.w	r3, r3, #16
  2017cc:	6023      	str	r3, [r4, #0]
  2017ce:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
  2017d2:	9201      	str	r2, [sp, #4]
  2017d4:	f000 f8aa 	bl	20192c <__gnu_Unwind_Save_WMMXC>
  2017d8:	9a01      	ldr	r2, [sp, #4]
  2017da:	e72f      	b.n	20163c <_Unwind_VRS_Pop+0x3c>
  2017dc:	3104      	adds	r1, #4
  2017de:	63a1      	str	r1, [r4, #56]	; 0x38
  2017e0:	a822      	add	r0, sp, #136	; 0x88
  2017e2:	f000 f83d 	bl	201860 <__gnu_Unwind_Restore_VFP>
  2017e6:	e7b7      	b.n	201758 <_Unwind_VRS_Pop+0x158>
  2017e8:	2f00      	cmp	r7, #0
  2017ea:	d199      	bne.n	201720 <_Unwind_VRS_Pop+0x120>
  2017ec:	4601      	mov	r1, r0
  2017ee:	e7aa      	b.n	201746 <_Unwind_VRS_Pop+0x146>
  2017f0:	f023 0308 	bic.w	r3, r3, #8
  2017f4:	6023      	str	r3, [r4, #0]
  2017f6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
  2017fa:	f000 f86b 	bl	2018d4 <__gnu_Unwind_Save_WMMXD>
  2017fe:	e742      	b.n	201686 <_Unwind_VRS_Pop+0x86>
  201800:	4620      	mov	r0, r4
  201802:	f022 0204 	bic.w	r2, r2, #4
  201806:	f840 2bd0 	str.w	r2, [r0], #208
  20180a:	9301      	str	r3, [sp, #4]
  20180c:	f000 f83c 	bl	201888 <__gnu_Unwind_Save_VFP_D_16_to_31>
  201810:	9b01      	ldr	r3, [sp, #4]
  201812:	e7af      	b.n	201774 <_Unwind_VRS_Pop+0x174>
  201814:	a822      	add	r0, sp, #136	; 0x88
  201816:	9301      	str	r3, [sp, #4]
  201818:	f000 f826 	bl	201868 <__gnu_Unwind_Save_VFP>
  20181c:	9b01      	ldr	r3, [sp, #4]
  20181e:	e7b9      	b.n	201794 <_Unwind_VRS_Pop+0x194>
  201820:	f041 0102 	orr.w	r1, r1, #2
  201824:	f840 1b48 	str.w	r1, [r0], #72
  201828:	f000 f826 	bl	201878 <__gnu_Unwind_Save_VFP_D>
  20182c:	9b01      	ldr	r3, [sp, #4]
  20182e:	e79c      	b.n	20176a <_Unwind_VRS_Pop+0x16a>
  201830:	2b01      	cmp	r3, #1
  201832:	d003      	beq.n	20183c <_Unwind_VRS_Pop+0x23c>
  201834:	2e0f      	cmp	r6, #15
  201836:	f63f af5f 	bhi.w	2016f8 <_Unwind_VRS_Pop+0xf8>
  20183a:	e79f      	b.n	20177c <_Unwind_VRS_Pop+0x17c>
  20183c:	a822      	add	r0, sp, #136	; 0x88
  20183e:	9301      	str	r3, [sp, #4]
  201840:	f000 f812 	bl	201868 <__gnu_Unwind_Save_VFP>
  201844:	9b01      	ldr	r3, [sp, #4]
  201846:	e757      	b.n	2016f8 <_Unwind_VRS_Pop+0xf8>

00201848 <__restore_core_regs>:
  201848:	f100 0134 	add.w	r1, r0, #52	; 0x34
  20184c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
  201850:	469c      	mov	ip, r3
  201852:	46a6      	mov	lr, r4
  201854:	f84c 5d04 	str.w	r5, [ip, #-4]!
  201858:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
  20185c:	46e5      	mov	sp, ip
  20185e:	bd00      	pop	{pc}

00201860 <__gnu_Unwind_Restore_VFP>:
  201860:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
  201864:	4770      	bx	lr
  201866:	bf00      	nop

00201868 <__gnu_Unwind_Save_VFP>:
  201868:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
  20186c:	4770      	bx	lr
  20186e:	bf00      	nop

00201870 <__gnu_Unwind_Restore_VFP_D>:
  201870:	ec90 0b20 	vldmia	r0, {d0-d15}
  201874:	4770      	bx	lr
  201876:	bf00      	nop

00201878 <__gnu_Unwind_Save_VFP_D>:
  201878:	ec80 0b20 	vstmia	r0, {d0-d15}
  20187c:	4770      	bx	lr
  20187e:	bf00      	nop

00201880 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
  201880:	ecd0 0b20 	vldmia	r0, {d16-d31}
  201884:	4770      	bx	lr
  201886:	bf00      	nop

00201888 <__gnu_Unwind_Save_VFP_D_16_to_31>:
  201888:	ecc0 0b20 	vstmia	r0, {d16-d31}
  20188c:	4770      	bx	lr
  20188e:	bf00      	nop

00201890 <__gnu_Unwind_Restore_WMMXD>:
  201890:	ecf0 0102 	ldfe	f0, [r0], #8
  201894:	ecf0 1102 	ldfe	f1, [r0], #8
  201898:	ecf0 2102 	ldfe	f2, [r0], #8
  20189c:	ecf0 3102 	ldfe	f3, [r0], #8
  2018a0:	ecf0 4102 	ldfe	f4, [r0], #8
  2018a4:	ecf0 5102 	ldfe	f5, [r0], #8
  2018a8:	ecf0 6102 	ldfe	f6, [r0], #8
  2018ac:	ecf0 7102 	ldfe	f7, [r0], #8
  2018b0:	ecf0 8102 	ldfp	f0, [r0], #8
  2018b4:	ecf0 9102 	ldfp	f1, [r0], #8
  2018b8:	ecf0 a102 	ldfp	f2, [r0], #8
  2018bc:	ecf0 b102 	ldfp	f3, [r0], #8
  2018c0:	ecf0 c102 	ldfp	f4, [r0], #8
  2018c4:	ecf0 d102 	ldfp	f5, [r0], #8
  2018c8:	ecf0 e102 	ldfp	f6, [r0], #8
  2018cc:	ecf0 f102 	ldfp	f7, [r0], #8
  2018d0:	4770      	bx	lr
  2018d2:	bf00      	nop

002018d4 <__gnu_Unwind_Save_WMMXD>:
  2018d4:	ece0 0102 	stfe	f0, [r0], #8
  2018d8:	ece0 1102 	stfe	f1, [r0], #8
  2018dc:	ece0 2102 	stfe	f2, [r0], #8
  2018e0:	ece0 3102 	stfe	f3, [r0], #8
  2018e4:	ece0 4102 	stfe	f4, [r0], #8
  2018e8:	ece0 5102 	stfe	f5, [r0], #8
  2018ec:	ece0 6102 	stfe	f6, [r0], #8
  2018f0:	ece0 7102 	stfe	f7, [r0], #8
  2018f4:	ece0 8102 	stfp	f0, [r0], #8
  2018f8:	ece0 9102 	stfp	f1, [r0], #8
  2018fc:	ece0 a102 	stfp	f2, [r0], #8
  201900:	ece0 b102 	stfp	f3, [r0], #8
  201904:	ece0 c102 	stfp	f4, [r0], #8
  201908:	ece0 d102 	stfp	f5, [r0], #8
  20190c:	ece0 e102 	stfp	f6, [r0], #8
  201910:	ece0 f102 	stfp	f7, [r0], #8
  201914:	4770      	bx	lr
  201916:	bf00      	nop

00201918 <__gnu_Unwind_Restore_WMMXC>:
  201918:	fcb0 8101 	ldc2	1, cr8, [r0], #4
  20191c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
  201920:	fcb0 a101 	ldc2	1, cr10, [r0], #4
  201924:	fcb0 b101 	ldc2	1, cr11, [r0], #4
  201928:	4770      	bx	lr
  20192a:	bf00      	nop

0020192c <__gnu_Unwind_Save_WMMXC>:
  20192c:	fca0 8101 	stc2	1, cr8, [r0], #4
  201930:	fca0 9101 	stc2	1, cr9, [r0], #4
  201934:	fca0 a101 	stc2	1, cr10, [r0], #4
  201938:	fca0 b101 	stc2	1, cr11, [r0], #4
  20193c:	4770      	bx	lr
  20193e:	bf00      	nop

00201940 <_Unwind_RaiseException>:
  201940:	46ec      	mov	ip, sp
  201942:	b500      	push	{lr}
  201944:	e92d 5000 	stmdb	sp!, {ip, lr}
  201948:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  20194c:	f04f 0300 	mov.w	r3, #0
  201950:	e92d 000c 	stmdb	sp!, {r2, r3}
  201954:	a901      	add	r1, sp, #4
  201956:	f7ff fbf3 	bl	201140 <__gnu_Unwind_RaiseException>
  20195a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  20195e:	b012      	add	sp, #72	; 0x48
  201960:	4770      	bx	lr
  201962:	bf00      	nop

00201964 <_Unwind_Resume>:
  201964:	46ec      	mov	ip, sp
  201966:	b500      	push	{lr}
  201968:	e92d 5000 	stmdb	sp!, {ip, lr}
  20196c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  201970:	f04f 0300 	mov.w	r3, #0
  201974:	e92d 000c 	stmdb	sp!, {r2, r3}
  201978:	a901      	add	r1, sp, #4
  20197a:	f7ff fc1b 	bl	2011b4 <__gnu_Unwind_Resume>
  20197e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  201982:	b012      	add	sp, #72	; 0x48
  201984:	4770      	bx	lr
  201986:	bf00      	nop

00201988 <_Unwind_Resume_or_Rethrow>:
  201988:	46ec      	mov	ip, sp
  20198a:	b500      	push	{lr}
  20198c:	e92d 5000 	stmdb	sp!, {ip, lr}
  201990:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  201994:	f04f 0300 	mov.w	r3, #0
  201998:	e92d 000c 	stmdb	sp!, {r2, r3}
  20199c:	a901      	add	r1, sp, #4
  20199e:	f7ff fc2b 	bl	2011f8 <__gnu_Unwind_Resume_or_Rethrow>
  2019a2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  2019a6:	b012      	add	sp, #72	; 0x48
  2019a8:	4770      	bx	lr
  2019aa:	bf00      	nop

002019ac <_Unwind_ForcedUnwind>:
  2019ac:	46ec      	mov	ip, sp
  2019ae:	b500      	push	{lr}
  2019b0:	e92d 5000 	stmdb	sp!, {ip, lr}
  2019b4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  2019b8:	f04f 0300 	mov.w	r3, #0
  2019bc:	e92d 000c 	stmdb	sp!, {r2, r3}
  2019c0:	ab01      	add	r3, sp, #4
  2019c2:	f7ff fbed 	bl	2011a0 <__gnu_Unwind_ForcedUnwind>
  2019c6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  2019ca:	b012      	add	sp, #72	; 0x48
  2019cc:	4770      	bx	lr
  2019ce:	bf00      	nop

002019d0 <_Unwind_Backtrace>:
  2019d0:	46ec      	mov	ip, sp
  2019d2:	b500      	push	{lr}
  2019d4:	e92d 5000 	stmdb	sp!, {ip, lr}
  2019d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
  2019dc:	f04f 0300 	mov.w	r3, #0
  2019e0:	e92d 000c 	stmdb	sp!, {r2, r3}
  2019e4:	aa01      	add	r2, sp, #4
  2019e6:	f7ff fc65 	bl	2012b4 <__gnu_Unwind_Backtrace>
  2019ea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
  2019ee:	b012      	add	sp, #72	; 0x48
  2019f0:	4770      	bx	lr
  2019f2:	bf00      	nop

002019f4 <next_unwind_byte>:
  2019f4:	7a02      	ldrb	r2, [r0, #8]
  2019f6:	b91a      	cbnz	r2, 201a00 <next_unwind_byte+0xc>
  2019f8:	7a43      	ldrb	r3, [r0, #9]
  2019fa:	b943      	cbnz	r3, 201a0e <next_unwind_byte+0x1a>
  2019fc:	20b0      	movs	r0, #176	; 0xb0
  2019fe:	4770      	bx	lr
  201a00:	6803      	ldr	r3, [r0, #0]
  201a02:	3a01      	subs	r2, #1
  201a04:	7202      	strb	r2, [r0, #8]
  201a06:	021a      	lsls	r2, r3, #8
  201a08:	6002      	str	r2, [r0, #0]
  201a0a:	0e18      	lsrs	r0, r3, #24
  201a0c:	4770      	bx	lr
  201a0e:	6842      	ldr	r2, [r0, #4]
  201a10:	3b01      	subs	r3, #1
  201a12:	b410      	push	{r4}
  201a14:	7243      	strb	r3, [r0, #9]
  201a16:	6813      	ldr	r3, [r2, #0]
  201a18:	2103      	movs	r1, #3
  201a1a:	1d14      	adds	r4, r2, #4
  201a1c:	7201      	strb	r1, [r0, #8]
  201a1e:	021a      	lsls	r2, r3, #8
  201a20:	6044      	str	r4, [r0, #4]
  201a22:	6002      	str	r2, [r0, #0]
  201a24:	f85d 4b04 	ldr.w	r4, [sp], #4
  201a28:	0e18      	lsrs	r0, r3, #24
  201a2a:	4770      	bx	lr

00201a2c <_Unwind_GetGR.constprop.0>:
  201a2c:	b500      	push	{lr}
  201a2e:	b085      	sub	sp, #20
  201a30:	aa03      	add	r2, sp, #12
  201a32:	2300      	movs	r3, #0
  201a34:	9200      	str	r2, [sp, #0]
  201a36:	4619      	mov	r1, r3
  201a38:	220c      	movs	r2, #12
  201a3a:	f7ff fbed 	bl	201218 <_Unwind_VRS_Get>
  201a3e:	9803      	ldr	r0, [sp, #12]
  201a40:	b005      	add	sp, #20
  201a42:	f85d fb04 	ldr.w	pc, [sp], #4
  201a46:	bf00      	nop

00201a48 <unwind_UCB_from_context>:
  201a48:	e7f0      	b.n	201a2c <_Unwind_GetGR.constprop.0>
  201a4a:	bf00      	nop

00201a4c <__gnu_unwind_execute>:
  201a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  201a50:	4606      	mov	r6, r0
  201a52:	b085      	sub	sp, #20
  201a54:	460f      	mov	r7, r1
  201a56:	f04f 0800 	mov.w	r8, #0
  201a5a:	4638      	mov	r0, r7
  201a5c:	f7ff ffca 	bl	2019f4 <next_unwind_byte>
  201a60:	28b0      	cmp	r0, #176	; 0xb0
  201a62:	4604      	mov	r4, r0
  201a64:	d023      	beq.n	201aae <__gnu_unwind_execute+0x62>
  201a66:	0605      	lsls	r5, r0, #24
  201a68:	d427      	bmi.n	201aba <__gnu_unwind_execute+0x6e>
  201a6a:	2300      	movs	r3, #0
  201a6c:	f10d 090c 	add.w	r9, sp, #12
  201a70:	4619      	mov	r1, r3
  201a72:	0085      	lsls	r5, r0, #2
  201a74:	220d      	movs	r2, #13
  201a76:	f8cd 9000 	str.w	r9, [sp]
  201a7a:	4630      	mov	r0, r6
  201a7c:	f7ff fbcc 	bl	201218 <_Unwind_VRS_Get>
  201a80:	b2ed      	uxtb	r5, r5
  201a82:	9b03      	ldr	r3, [sp, #12]
  201a84:	f8cd 9000 	str.w	r9, [sp]
  201a88:	0660      	lsls	r0, r4, #25
  201a8a:	f105 0504 	add.w	r5, r5, #4
  201a8e:	bf4c      	ite	mi
  201a90:	1b5d      	submi	r5, r3, r5
  201a92:	18ed      	addpl	r5, r5, r3
  201a94:	2300      	movs	r3, #0
  201a96:	4619      	mov	r1, r3
  201a98:	220d      	movs	r2, #13
  201a9a:	4630      	mov	r0, r6
  201a9c:	9503      	str	r5, [sp, #12]
  201a9e:	f7ff fbe1 	bl	201264 <_Unwind_VRS_Set>
  201aa2:	4638      	mov	r0, r7
  201aa4:	f7ff ffa6 	bl	2019f4 <next_unwind_byte>
  201aa8:	28b0      	cmp	r0, #176	; 0xb0
  201aaa:	4604      	mov	r4, r0
  201aac:	d1db      	bne.n	201a66 <__gnu_unwind_execute+0x1a>
  201aae:	f1b8 0f00 	cmp.w	r8, #0
  201ab2:	f000 8095 	beq.w	201be0 <__gnu_unwind_execute+0x194>
  201ab6:	2000      	movs	r0, #0
  201ab8:	e01c      	b.n	201af4 <__gnu_unwind_execute+0xa8>
  201aba:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
  201abe:	2b80      	cmp	r3, #128	; 0x80
  201ac0:	d05d      	beq.n	201b7e <__gnu_unwind_execute+0x132>
  201ac2:	2b90      	cmp	r3, #144	; 0x90
  201ac4:	d019      	beq.n	201afa <__gnu_unwind_execute+0xae>
  201ac6:	2ba0      	cmp	r3, #160	; 0xa0
  201ac8:	d02c      	beq.n	201b24 <__gnu_unwind_execute+0xd8>
  201aca:	2bb0      	cmp	r3, #176	; 0xb0
  201acc:	d03f      	beq.n	201b4e <__gnu_unwind_execute+0x102>
  201ace:	2bc0      	cmp	r3, #192	; 0xc0
  201ad0:	d06c      	beq.n	201bac <__gnu_unwind_execute+0x160>
  201ad2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
  201ad6:	2bd0      	cmp	r3, #208	; 0xd0
  201ad8:	d10b      	bne.n	201af2 <__gnu_unwind_execute+0xa6>
  201ada:	f000 0207 	and.w	r2, r0, #7
  201ade:	3201      	adds	r2, #1
  201ae0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  201ae4:	2305      	movs	r3, #5
  201ae6:	2101      	movs	r1, #1
  201ae8:	4630      	mov	r0, r6
  201aea:	f7ff fd89 	bl	201600 <_Unwind_VRS_Pop>
  201aee:	2800      	cmp	r0, #0
  201af0:	d0b3      	beq.n	201a5a <__gnu_unwind_execute+0xe>
  201af2:	2009      	movs	r0, #9
  201af4:	b005      	add	sp, #20
  201af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  201afa:	f000 030d 	and.w	r3, r0, #13
  201afe:	2b0d      	cmp	r3, #13
  201b00:	d0f7      	beq.n	201af2 <__gnu_unwind_execute+0xa6>
  201b02:	ad03      	add	r5, sp, #12
  201b04:	2300      	movs	r3, #0
  201b06:	f000 020f 	and.w	r2, r0, #15
  201b0a:	4619      	mov	r1, r3
  201b0c:	9500      	str	r5, [sp, #0]
  201b0e:	4630      	mov	r0, r6
  201b10:	f7ff fb82 	bl	201218 <_Unwind_VRS_Get>
  201b14:	2300      	movs	r3, #0
  201b16:	9500      	str	r5, [sp, #0]
  201b18:	4619      	mov	r1, r3
  201b1a:	220d      	movs	r2, #13
  201b1c:	4630      	mov	r0, r6
  201b1e:	f7ff fba1 	bl	201264 <_Unwind_VRS_Set>
  201b22:	e79a      	b.n	201a5a <__gnu_unwind_execute+0xe>
  201b24:	43c2      	mvns	r2, r0
  201b26:	f002 0307 	and.w	r3, r2, #7
  201b2a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
  201b2e:	411a      	asrs	r2, r3
  201b30:	0701      	lsls	r1, r0, #28
  201b32:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
  201b36:	f04f 0300 	mov.w	r3, #0
  201b3a:	bf48      	it	mi
  201b3c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
  201b40:	4619      	mov	r1, r3
  201b42:	4630      	mov	r0, r6
  201b44:	f7ff fd5c 	bl	201600 <_Unwind_VRS_Pop>
  201b48:	2800      	cmp	r0, #0
  201b4a:	d1d2      	bne.n	201af2 <__gnu_unwind_execute+0xa6>
  201b4c:	e785      	b.n	201a5a <__gnu_unwind_execute+0xe>
  201b4e:	28b1      	cmp	r0, #177	; 0xb1
  201b50:	d057      	beq.n	201c02 <__gnu_unwind_execute+0x1b6>
  201b52:	28b2      	cmp	r0, #178	; 0xb2
  201b54:	d068      	beq.n	201c28 <__gnu_unwind_execute+0x1dc>
  201b56:	28b3      	cmp	r0, #179	; 0xb3
  201b58:	f000 8095 	beq.w	201c86 <__gnu_unwind_execute+0x23a>
  201b5c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
  201b60:	2bb4      	cmp	r3, #180	; 0xb4
  201b62:	d0c6      	beq.n	201af2 <__gnu_unwind_execute+0xa6>
  201b64:	f000 0207 	and.w	r2, r0, #7
  201b68:	3201      	adds	r2, #1
  201b6a:	2301      	movs	r3, #1
  201b6c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  201b70:	4619      	mov	r1, r3
  201b72:	4630      	mov	r0, r6
  201b74:	f7ff fd44 	bl	201600 <_Unwind_VRS_Pop>
  201b78:	2800      	cmp	r0, #0
  201b7a:	d1ba      	bne.n	201af2 <__gnu_unwind_execute+0xa6>
  201b7c:	e76d      	b.n	201a5a <__gnu_unwind_execute+0xe>
  201b7e:	4638      	mov	r0, r7
  201b80:	f7ff ff38 	bl	2019f4 <next_unwind_byte>
  201b84:	0224      	lsls	r4, r4, #8
  201b86:	4304      	orrs	r4, r0
  201b88:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  201b8c:	d0b1      	beq.n	201af2 <__gnu_unwind_execute+0xa6>
  201b8e:	0124      	lsls	r4, r4, #4
  201b90:	2300      	movs	r3, #0
  201b92:	b2a2      	uxth	r2, r4
  201b94:	4619      	mov	r1, r3
  201b96:	4630      	mov	r0, r6
  201b98:	f7ff fd32 	bl	201600 <_Unwind_VRS_Pop>
  201b9c:	2800      	cmp	r0, #0
  201b9e:	d1a8      	bne.n	201af2 <__gnu_unwind_execute+0xa6>
  201ba0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
  201ba4:	bf18      	it	ne
  201ba6:	f04f 0801 	movne.w	r8, #1
  201baa:	e756      	b.n	201a5a <__gnu_unwind_execute+0xe>
  201bac:	28c6      	cmp	r0, #198	; 0xc6
  201bae:	d07d      	beq.n	201cac <__gnu_unwind_execute+0x260>
  201bb0:	28c7      	cmp	r0, #199	; 0xc7
  201bb2:	f000 8086 	beq.w	201cc2 <__gnu_unwind_execute+0x276>
  201bb6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
  201bba:	2bc0      	cmp	r3, #192	; 0xc0
  201bbc:	f000 8094 	beq.w	201ce8 <__gnu_unwind_execute+0x29c>
  201bc0:	28c8      	cmp	r0, #200	; 0xc8
  201bc2:	f000 809f 	beq.w	201d04 <__gnu_unwind_execute+0x2b8>
  201bc6:	28c9      	cmp	r0, #201	; 0xc9
  201bc8:	d193      	bne.n	201af2 <__gnu_unwind_execute+0xa6>
  201bca:	4638      	mov	r0, r7
  201bcc:	f7ff ff12 	bl	2019f4 <next_unwind_byte>
  201bd0:	0302      	lsls	r2, r0, #12
  201bd2:	f000 000f 	and.w	r0, r0, #15
  201bd6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  201bda:	3001      	adds	r0, #1
  201bdc:	4302      	orrs	r2, r0
  201bde:	e781      	b.n	201ae4 <__gnu_unwind_execute+0x98>
  201be0:	ac03      	add	r4, sp, #12
  201be2:	4643      	mov	r3, r8
  201be4:	220e      	movs	r2, #14
  201be6:	4641      	mov	r1, r8
  201be8:	9400      	str	r4, [sp, #0]
  201bea:	4630      	mov	r0, r6
  201bec:	f7ff fb14 	bl	201218 <_Unwind_VRS_Get>
  201bf0:	9400      	str	r4, [sp, #0]
  201bf2:	4630      	mov	r0, r6
  201bf4:	4643      	mov	r3, r8
  201bf6:	220f      	movs	r2, #15
  201bf8:	4641      	mov	r1, r8
  201bfa:	f7ff fb33 	bl	201264 <_Unwind_VRS_Set>
  201bfe:	4640      	mov	r0, r8
  201c00:	e778      	b.n	201af4 <__gnu_unwind_execute+0xa8>
  201c02:	4638      	mov	r0, r7
  201c04:	f7ff fef6 	bl	2019f4 <next_unwind_byte>
  201c08:	2800      	cmp	r0, #0
  201c0a:	f43f af72 	beq.w	201af2 <__gnu_unwind_execute+0xa6>
  201c0e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
  201c12:	f47f af6e 	bne.w	201af2 <__gnu_unwind_execute+0xa6>
  201c16:	4602      	mov	r2, r0
  201c18:	4619      	mov	r1, r3
  201c1a:	4630      	mov	r0, r6
  201c1c:	f7ff fcf0 	bl	201600 <_Unwind_VRS_Pop>
  201c20:	2800      	cmp	r0, #0
  201c22:	f47f af66 	bne.w	201af2 <__gnu_unwind_execute+0xa6>
  201c26:	e718      	b.n	201a5a <__gnu_unwind_execute+0xe>
  201c28:	2300      	movs	r3, #0
  201c2a:	f10d 090c 	add.w	r9, sp, #12
  201c2e:	220d      	movs	r2, #13
  201c30:	4619      	mov	r1, r3
  201c32:	f8cd 9000 	str.w	r9, [sp]
  201c36:	4630      	mov	r0, r6
  201c38:	f7ff faee 	bl	201218 <_Unwind_VRS_Get>
  201c3c:	4638      	mov	r0, r7
  201c3e:	f7ff fed9 	bl	2019f4 <next_unwind_byte>
  201c42:	0602      	lsls	r2, r0, #24
  201c44:	f04f 0402 	mov.w	r4, #2
  201c48:	d50c      	bpl.n	201c64 <__gnu_unwind_execute+0x218>
  201c4a:	9b03      	ldr	r3, [sp, #12]
  201c4c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  201c50:	40a0      	lsls	r0, r4
  201c52:	4403      	add	r3, r0
  201c54:	4638      	mov	r0, r7
  201c56:	9303      	str	r3, [sp, #12]
  201c58:	f7ff fecc 	bl	2019f4 <next_unwind_byte>
  201c5c:	0603      	lsls	r3, r0, #24
  201c5e:	f104 0407 	add.w	r4, r4, #7
  201c62:	d4f2      	bmi.n	201c4a <__gnu_unwind_execute+0x1fe>
  201c64:	9b03      	ldr	r3, [sp, #12]
  201c66:	f8cd 9000 	str.w	r9, [sp]
  201c6a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  201c6e:	40a2      	lsls	r2, r4
  201c70:	f503 7401 	add.w	r4, r3, #516	; 0x204
  201c74:	2300      	movs	r3, #0
  201c76:	4414      	add	r4, r2
  201c78:	4619      	mov	r1, r3
  201c7a:	220d      	movs	r2, #13
  201c7c:	4630      	mov	r0, r6
  201c7e:	9403      	str	r4, [sp, #12]
  201c80:	f7ff faf0 	bl	201264 <_Unwind_VRS_Set>
  201c84:	e6e9      	b.n	201a5a <__gnu_unwind_execute+0xe>
  201c86:	4638      	mov	r0, r7
  201c88:	f7ff feb4 	bl	2019f4 <next_unwind_byte>
  201c8c:	0301      	lsls	r1, r0, #12
  201c8e:	f000 000f 	and.w	r0, r0, #15
  201c92:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  201c96:	1c42      	adds	r2, r0, #1
  201c98:	2301      	movs	r3, #1
  201c9a:	430a      	orrs	r2, r1
  201c9c:	4630      	mov	r0, r6
  201c9e:	4619      	mov	r1, r3
  201ca0:	f7ff fcae 	bl	201600 <_Unwind_VRS_Pop>
  201ca4:	2800      	cmp	r0, #0
  201ca6:	f47f af24 	bne.w	201af2 <__gnu_unwind_execute+0xa6>
  201caa:	e6d6      	b.n	201a5a <__gnu_unwind_execute+0xe>
  201cac:	4638      	mov	r0, r7
  201cae:	f7ff fea1 	bl	2019f4 <next_unwind_byte>
  201cb2:	0301      	lsls	r1, r0, #12
  201cb4:	f000 000f 	and.w	r0, r0, #15
  201cb8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  201cbc:	1c42      	adds	r2, r0, #1
  201cbe:	2303      	movs	r3, #3
  201cc0:	e7eb      	b.n	201c9a <__gnu_unwind_execute+0x24e>
  201cc2:	4638      	mov	r0, r7
  201cc4:	f7ff fe96 	bl	2019f4 <next_unwind_byte>
  201cc8:	2800      	cmp	r0, #0
  201cca:	f43f af12 	beq.w	201af2 <__gnu_unwind_execute+0xa6>
  201cce:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
  201cd2:	f47f af0e 	bne.w	201af2 <__gnu_unwind_execute+0xa6>
  201cd6:	4602      	mov	r2, r0
  201cd8:	2104      	movs	r1, #4
  201cda:	4630      	mov	r0, r6
  201cdc:	f7ff fc90 	bl	201600 <_Unwind_VRS_Pop>
  201ce0:	2800      	cmp	r0, #0
  201ce2:	f47f af06 	bne.w	201af2 <__gnu_unwind_execute+0xa6>
  201ce6:	e6b8      	b.n	201a5a <__gnu_unwind_execute+0xe>
  201ce8:	f000 020f 	and.w	r2, r0, #15
  201cec:	3201      	adds	r2, #1
  201cee:	2303      	movs	r3, #3
  201cf0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
  201cf4:	4619      	mov	r1, r3
  201cf6:	4630      	mov	r0, r6
  201cf8:	f7ff fc82 	bl	201600 <_Unwind_VRS_Pop>
  201cfc:	2800      	cmp	r0, #0
  201cfe:	f47f aef8 	bne.w	201af2 <__gnu_unwind_execute+0xa6>
  201d02:	e6aa      	b.n	201a5a <__gnu_unwind_execute+0xe>
  201d04:	4638      	mov	r0, r7
  201d06:	f7ff fe75 	bl	2019f4 <next_unwind_byte>
  201d0a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
  201d0e:	f000 030f 	and.w	r3, r0, #15
  201d12:	3210      	adds	r2, #16
  201d14:	3301      	adds	r3, #1
  201d16:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
  201d1a:	e6e3      	b.n	201ae4 <__gnu_unwind_execute+0x98>

00201d1c <__gnu_unwind_frame>:
  201d1c:	b510      	push	{r4, lr}
  201d1e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  201d20:	b084      	sub	sp, #16
  201d22:	685a      	ldr	r2, [r3, #4]
  201d24:	2003      	movs	r0, #3
  201d26:	f88d 000c 	strb.w	r0, [sp, #12]
  201d2a:	79dc      	ldrb	r4, [r3, #7]
  201d2c:	f88d 400d 	strb.w	r4, [sp, #13]
  201d30:	0212      	lsls	r2, r2, #8
  201d32:	3308      	adds	r3, #8
  201d34:	4608      	mov	r0, r1
  201d36:	a901      	add	r1, sp, #4
  201d38:	9201      	str	r2, [sp, #4]
  201d3a:	9302      	str	r3, [sp, #8]
  201d3c:	f7ff fe86 	bl	201a4c <__gnu_unwind_execute>
  201d40:	b004      	add	sp, #16
  201d42:	bd10      	pop	{r4, pc}

00201d44 <_Unwind_GetRegionStart>:
  201d44:	b508      	push	{r3, lr}
  201d46:	f7ff fe7f 	bl	201a48 <unwind_UCB_from_context>
  201d4a:	6c80      	ldr	r0, [r0, #72]	; 0x48
  201d4c:	bd08      	pop	{r3, pc}
  201d4e:	bf00      	nop

00201d50 <_Unwind_GetLanguageSpecificData>:
  201d50:	b508      	push	{r3, lr}
  201d52:	f7ff fe79 	bl	201a48 <unwind_UCB_from_context>
  201d56:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  201d58:	79c3      	ldrb	r3, [r0, #7]
  201d5a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  201d5e:	3008      	adds	r0, #8
  201d60:	bd08      	pop	{r3, pc}
  201d62:	bf00      	nop

00201d64 <_Unwind_GetTextRelBase>:
  201d64:	b508      	push	{r3, lr}
  201d66:	f014 fd11 	bl	21678c <abort>
  201d6a:	bf00      	nop

00201d6c <_Unwind_GetDataRelBase>:
  201d6c:	b508      	push	{r3, lr}
  201d6e:	f7ff fff9 	bl	201d64 <_Unwind_GetTextRelBase>
  201d72:	bf00      	nop

00201d74 <__aeabi_idiv0>:
  201d74:	4770      	bx	lr
  201d76:	bf00      	nop

00201d78 <_ZN6CANIMU13updateRawDataEv>:
#include <string.h>

void CANIMU::updateRawData()
{
	/* transform */
	raw_gyro_adc_[0] = -r_gyro_data[1] * GYRO_SCALE;
  201d78:	f9b0 310e 	ldrsh.w	r3, [r0, #270]	; 0x10e
  201d7c:	425b      	negs	r3, r3
  201d7e:	ee07 3a90 	vmov	s15, r3
  201d82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  201d86:	eddf 6a2f 	vldr	s13, [pc, #188]	; 201e44 <_ZN6CANIMU13updateRawDataEv+0xcc>
  201d8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
  201d8e:	edc0 7a3a 	vstr	s15, [r0, #232]	; 0xe8
	raw_gyro_adc_[1] = r_gyro_data[0] * GYRO_SCALE;
  201d92:	f9b0 310c 	ldrsh.w	r3, [r0, #268]	; 0x10c
  201d96:	ee07 3a10 	vmov	s14, r3
  201d9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  201d9e:	ee27 7a26 	vmul.f32	s14, s14, s13
  201da2:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
	raw_gyro_adc_[2] = r_gyro_data[2] * GYRO_SCALE;
  201da6:	f9b0 3110 	ldrsh.w	r3, [r0, #272]	; 0x110
  201daa:	ee07 3a90 	vmov	s15, r3
  201dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  201db2:	ee67 7aa6 	vmul.f32	s15, s15, s13
  201db6:	edc0 7a3c 	vstr	s15, [r0, #240]	; 0xf0
	raw_acc_adc_[0] = -r_acc_data[1] * ACC_SCALE;
  201dba:	f9b0 3114 	ldrsh.w	r3, [r0, #276]	; 0x114
  201dbe:	425b      	negs	r3, r3
  201dc0:	ee07 3a90 	vmov	s15, r3
  201dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  201dc8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 201e48 <_ZN6CANIMU13updateRawDataEv+0xd0>
  201dcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
  201dd0:	edc0 7a3d 	vstr	s15, [r0, #244]	; 0xf4
	raw_acc_adc_[1] = r_acc_data[0] * ACC_SCALE;
  201dd4:	f9b0 3112 	ldrsh.w	r3, [r0, #274]	; 0x112
  201dd8:	ee07 3a10 	vmov	s14, r3
  201ddc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  201de0:	ee27 7a26 	vmul.f32	s14, s14, s13
  201de4:	ed80 7a3e 	vstr	s14, [r0, #248]	; 0xf8
	raw_acc_adc_[2] = r_acc_data[2] * ACC_SCALE;
  201de8:	f9b0 3116 	ldrsh.w	r3, [r0, #278]	; 0x116
  201dec:	ee07 3a90 	vmov	s15, r3
  201df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  201df4:	ee67 7aa6 	vmul.f32	s15, s15, s13
  201df8:	edc0 7a3f 	vstr	s15, [r0, #252]	; 0xfc

	raw_mag_adc_[0] = -r_mag_data[0] * MAG_SCALE;
  201dfc:	f9b0 3118 	ldrsh.w	r3, [r0, #280]	; 0x118
  201e00:	425b      	negs	r3, r3
  201e02:	ee07 3a10 	vmov	s14, r3
  201e06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  201e0a:	eddf 6a10 	vldr	s13, [pc, #64]	; 201e4c <_ZN6CANIMU13updateRawDataEv+0xd4>
  201e0e:	ee27 7a26 	vmul.f32	s14, s14, s13
  201e12:	ed80 7a40 	vstr	s14, [r0, #256]	; 0x100
	raw_mag_adc_[1] = r_mag_data[1] * MAG_SCALE;
  201e16:	f9b0 311a 	ldrsh.w	r3, [r0, #282]	; 0x11a
  201e1a:	ee07 3a10 	vmov	s14, r3
  201e1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  201e22:	ee27 7a26 	vmul.f32	s14, s14, s13
  201e26:	ed80 7a41 	vstr	s14, [r0, #260]	; 0x104
	raw_mag_adc_[2] = -r_mag_data[2] * MAG_SCALE;
  201e2a:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	; 0x11c
  201e2e:	425b      	negs	r3, r3
  201e30:	ee07 3a90 	vmov	s15, r3
  201e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  201e38:	ee67 7aa6 	vmul.f32	s15, s15, s13
  201e3c:	edc0 7a42 	vstr	s15, [r0, #264]	; 0x108
  201e40:	4770      	bx	lr
  201e42:	bf00      	nop
  201e44:	3a8ba170 	.word	0x3a8ba170
  201e48:	3b1ce80a 	.word	0x3b1ce80a
  201e4c:	3e198999 	.word	0x3e198999

00201e50 <_ZThn8_N6CANIMU13updateRawDataEv>:
#include "CAN/can_device.h"
#include "sensors/imu/imu_basic.h"

class CANIMU : public CANDevice, public IMU {
private:
	void updateRawData() override;
  201e50:	f1a0 0008 	sub.w	r0, r0, #8
  201e54:	f7ff bf90 	b.w	201d78 <_ZN6CANIMU13updateRawDataEv>

00201e58 <_ZN6CANIMU8sendDataEv>:
}

void CANIMU::sendData()
{
  201e58:	4770      	bx	lr

00201e5a <_ZN6CANIMU19receiveDataCallbackEhhmPh>:
	return;
}

void CANIMU::receiveDataCallback(uint8_t slave_id, uint8_t message_id, uint32_t DLC, uint8_t* data)
{
  201e5a:	9b00      	ldr	r3, [sp, #0]
	switch (message_id) {
  201e5c:	2a01      	cmp	r2, #1
  201e5e:	d00a      	beq.n	201e76 <_ZN6CANIMU19receiveDataCallbackEhhmPh+0x1c>
  201e60:	b112      	cbz	r2, 201e68 <_ZN6CANIMU19receiveDataCallbackEhhmPh+0xe>
  201e62:	2a02      	cmp	r2, #2
  201e64:	d00e      	beq.n	201e84 <_ZN6CANIMU19receiveDataCallbackEhhmPh+0x2a>
  201e66:	4770      	bx	lr
	case CAN::MESSAGEID_SEND_GYRO:
		memcpy(r_gyro_data, data, sizeof(uint8_t) * 6);
  201e68:	681a      	ldr	r2, [r3, #0]
  201e6a:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
  201e6e:	889b      	ldrh	r3, [r3, #4]
  201e70:	f8a0 3110 	strh.w	r3, [r0, #272]	; 0x110
		break;
  201e74:	4770      	bx	lr
	case CAN::MESSAGEID_SEND_ACC:
		memcpy(r_acc_data, data, sizeof(uint8_t) * 6);
  201e76:	681a      	ldr	r2, [r3, #0]
  201e78:	f8c0 2112 	str.w	r2, [r0, #274]	; 0x112
  201e7c:	889b      	ldrh	r3, [r3, #4]
  201e7e:	f8a0 3116 	strh.w	r3, [r0, #278]	; 0x116
		break;
  201e82:	4770      	bx	lr
	case CAN::MESSAGEID_SEND_MAG:
		memcpy(r_mag_data, data, sizeof(uint8_t) * 6);
  201e84:	681a      	ldr	r2, [r3, #0]
  201e86:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
  201e8a:	889b      	ldrh	r3, [r3, #4]
  201e8c:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
  201e90:	4770      	bx	lr

00201e92 <_ZN14CANInitializer8sendDataEv>:
 */

#include <CANDevice/initializer/can_initalizer.h>

void CANInitializer::sendData()
{
  201e92:	4770      	bx	lr

00201e94 <_ZN14CANInitializer12configDeviceERKN6hydrus14BoardConfigCmdE>:
		HAL_Delay(200);
	}
}

void CANInitializer::configDevice(const hydrus::BoardConfigCmd& config_msg)
{
  201e94:	b570      	push	{r4, r5, r6, lr}
  201e96:	b084      	sub	sp, #16
	uint8_t slave_id = static_cast<uint8_t>(config_msg.data[0]);
  201e98:	690b      	ldr	r3, [r1, #16]
  201e9a:	781a      	ldrb	r2, [r3, #0]
	switch (config_msg.command) {
  201e9c:	7909      	ldrb	r1, [r1, #4]
  201e9e:	2906      	cmp	r1, #6
  201ea0:	d817      	bhi.n	201ed2 <_ZN14CANInitializer12configDeviceERKN6hydrus14BoardConfigCmdE+0x3e>
  201ea2:	e8df f001 	tbb	[pc, r1]
  201ea6:	1804      	.short	0x1804
  201ea8:	8a71492b 	.word	0x8a71492b
  201eac:	a0          	.byte	0xa0
  201ead:	00          	.byte	0x00
		case hydrus::BoardConfigCmd::SET_SLAVE_ID:
		{
			uint8_t new_slave_id = static_cast<uint8_t>(config_msg.data[1]);
  201eae:	791b      	ldrb	r3, [r3, #4]
			uint8_t send_data[2];
			send_data[0] = CAN::BOARD_CONFIG_SET_SLAVE_ID;
  201eb0:	2100      	movs	r1, #0
  201eb2:	f88d 1008 	strb.w	r1, [sp, #8]
			send_data[1] = new_slave_id;
  201eb6:	f88d 3009 	strb.w	r3, [sp, #9]
public:
	CANDevice(){}
	CANDevice(uint8_t device_id, uint8_t slave_id):m_device_id(device_id), m_slave_id(slave_id){}
	uint8_t getDeviceId(){return m_device_id;}
	uint8_t getSlaveId(){return m_slave_id;}
	void setMessage(uint8_t message_id, uint8_t slave_id, uint32_t dlc, uint8_t* data){CAN::setMessage(m_device_id, message_id, slave_id, dlc, data);}
  201eba:	7900      	ldrb	r0, [r0, #4]
  201ebc:	ab02      	add	r3, sp, #8
  201ebe:	9300      	str	r3, [sp, #0]
  201ec0:	2302      	movs	r3, #2
  201ec2:	4619      	mov	r1, r3
  201ec4:	f004 ff7e 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
	void init(CAN_HandleTypeDef* hcan);
	CAN_HandleTypeDef* getHcanInstance();
	void setMessage(uint8_t device_id, uint8_t message_id, uint8_t slave_id, uint32_t DLC, uint8_t* data);
	inline void sendMessage(int timeout)
	{
		HAL_CAN_Transmit(getHcanInstance(), timeout);
  201ec8:	f004 ff76 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  201ecc:	2101      	movs	r1, #1
  201ece:	f00e f8a5 	bl	21001c <HAL_CAN_Transmit>
			break;
		}
		default:
			break;
	}
}
  201ed2:	b004      	add	sp, #16
  201ed4:	bd70      	pop	{r4, r5, r6, pc}
			uint8_t imu_send_data_flag = static_cast<uint8_t>(config_msg.data[1]);
  201ed6:	791b      	ldrb	r3, [r3, #4]
			send_data[0] = CAN::BOARD_CONFIG_SET_IMU_SEND_FLAG;
  201ed8:	2401      	movs	r4, #1
  201eda:	f88d 4008 	strb.w	r4, [sp, #8]
			send_data[1] = imu_send_data_flag;
  201ede:	f88d 3009 	strb.w	r3, [sp, #9]
  201ee2:	7900      	ldrb	r0, [r0, #4]
  201ee4:	ab02      	add	r3, sp, #8
  201ee6:	9300      	str	r3, [sp, #0]
  201ee8:	2302      	movs	r3, #2
  201eea:	4619      	mov	r1, r3
  201eec:	f004 ff6a 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
  201ef0:	f004 ff62 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  201ef4:	4621      	mov	r1, r4
  201ef6:	f00e f891 	bl	21001c <HAL_CAN_Transmit>
  201efa:	e7ea      	b.n	201ed2 <_ZN14CANInitializer12configDeviceERKN6hydrus14BoardConfigCmdE+0x3e>
			uint8_t servo_index = static_cast<uint8_t>(config_msg.data[1]);
  201efc:	791c      	ldrb	r4, [r3, #4]
			int32_t joint_offset = config_msg.data[2];
  201efe:	689b      	ldr	r3, [r3, #8]
			send_data[0] = CAN::BOARD_CONFIG_SET_SERVO_HOMING_OFFSET;
  201f00:	2102      	movs	r1, #2
  201f02:	f88d 1008 	strb.w	r1, [sp, #8]
			send_data[1] = servo_index;
  201f06:	f88d 4009 	strb.w	r4, [sp, #9]
			send_data[2] = joint_offset & 0xFF;
  201f0a:	f88d 300a 	strb.w	r3, [sp, #10]
			send_data[3] = (joint_offset >> 8) & 0xFF;
  201f0e:	121c      	asrs	r4, r3, #8
  201f10:	f88d 400b 	strb.w	r4, [sp, #11]
			send_data[4] = (joint_offset >> 16) & 0xFF;
  201f14:	141c      	asrs	r4, r3, #16
  201f16:	f88d 400c 	strb.w	r4, [sp, #12]
			send_data[5] = (joint_offset >> 24) & 0xFF;
  201f1a:	0e1b      	lsrs	r3, r3, #24
  201f1c:	f88d 300d 	strb.w	r3, [sp, #13]
  201f20:	7900      	ldrb	r0, [r0, #4]
  201f22:	ab02      	add	r3, sp, #8
  201f24:	9300      	str	r3, [sp, #0]
  201f26:	2306      	movs	r3, #6
  201f28:	f004 ff4c 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
  201f2c:	f004 ff44 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  201f30:	2101      	movs	r1, #1
  201f32:	f00e f873 	bl	21001c <HAL_CAN_Transmit>
  201f36:	e7cc      	b.n	201ed2 <_ZN14CANInitializer12configDeviceERKN6hydrus14BoardConfigCmdE+0x3e>
			uint8_t servo_index = static_cast<uint8_t>(config_msg.data[1]);
  201f38:	791d      	ldrb	r5, [r3, #4]
			int16_t p_gain = static_cast<uint16_t>(config_msg.data[2]);
  201f3a:	689c      	ldr	r4, [r3, #8]
			int16_t i_gain = static_cast<uint16_t>(config_msg.data[3]);
  201f3c:	68d9      	ldr	r1, [r3, #12]
			int16_t d_gain = static_cast<uint16_t>(config_msg.data[4]);
  201f3e:	691b      	ldr	r3, [r3, #16]
			send_data[0] = CAN::BOARD_CONFIG_SET_SERVO_PID_GAIN;
  201f40:	2603      	movs	r6, #3
  201f42:	f88d 6008 	strb.w	r6, [sp, #8]
			send_data[1] = servo_index;
  201f46:	f88d 5009 	strb.w	r5, [sp, #9]
			send_data[2] = p_gain & 0xFF;
  201f4a:	f88d 400a 	strb.w	r4, [sp, #10]
			send_data[3] = (p_gain >> 8) & 0xFF;
  201f4e:	f344 2407 	sbfx	r4, r4, #8, #8
  201f52:	f88d 400b 	strb.w	r4, [sp, #11]
			send_data[4] = i_gain & 0xFF;
  201f56:	f88d 100c 	strb.w	r1, [sp, #12]
			send_data[5] = (i_gain >> 8) & 0xFF;
  201f5a:	f341 2107 	sbfx	r1, r1, #8, #8
  201f5e:	f88d 100d 	strb.w	r1, [sp, #13]
			send_data[6] = d_gain & 0xFF;
  201f62:	f88d 300e 	strb.w	r3, [sp, #14]
			send_data[7] = (d_gain >> 8) & 0xFF;
  201f66:	f343 2307 	sbfx	r3, r3, #8, #8
  201f6a:	f88d 300f 	strb.w	r3, [sp, #15]
  201f6e:	7900      	ldrb	r0, [r0, #4]
  201f70:	ab02      	add	r3, sp, #8
  201f72:	9300      	str	r3, [sp, #0]
  201f74:	2308      	movs	r3, #8
  201f76:	2102      	movs	r1, #2
  201f78:	f004 ff24 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
  201f7c:	f004 ff1c 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  201f80:	2101      	movs	r1, #1
  201f82:	f00e f84b 	bl	21001c <HAL_CAN_Transmit>
  201f86:	e7a4      	b.n	201ed2 <_ZN14CANInitializer12configDeviceERKN6hydrus14BoardConfigCmdE+0x3e>
			uint8_t servo_index = static_cast<uint8_t>(config_msg.data[1]);
  201f88:	791c      	ldrb	r4, [r3, #4]
			int16_t profile_vel = static_cast<uint16_t>(config_msg.data[2]);
  201f8a:	6899      	ldr	r1, [r3, #8]
			send_data[0] = CAN::BOARD_CONFIG_SET_SERVO_PROFILE_VEL;
  201f8c:	2304      	movs	r3, #4
  201f8e:	f88d 3008 	strb.w	r3, [sp, #8]
			send_data[1] = servo_index;
  201f92:	f88d 4009 	strb.w	r4, [sp, #9]
			send_data[2] = profile_vel & 0xFF;
  201f96:	f88d 100a 	strb.w	r1, [sp, #10]
			send_data[3] = (profile_vel >> 8) & 0xFF;
  201f9a:	f341 2107 	sbfx	r1, r1, #8, #8
  201f9e:	f88d 100b 	strb.w	r1, [sp, #11]
  201fa2:	7900      	ldrb	r0, [r0, #4]
  201fa4:	a902      	add	r1, sp, #8
  201fa6:	9100      	str	r1, [sp, #0]
  201fa8:	2102      	movs	r1, #2
  201faa:	f004 ff0b 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
  201fae:	f004 ff03 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  201fb2:	2101      	movs	r1, #1
  201fb4:	f00e f832 	bl	21001c <HAL_CAN_Transmit>
  201fb8:	e78b      	b.n	201ed2 <_ZN14CANInitializer12configDeviceERKN6hydrus14BoardConfigCmdE+0x3e>
			uint8_t servo_index = static_cast<uint8_t>(config_msg.data[1]);
  201fba:	7919      	ldrb	r1, [r3, #4]
			uint8_t servo_send_data_flag = static_cast<uint8_t>(config_msg.data[2]);
  201fbc:	7a1b      	ldrb	r3, [r3, #8]
			send_data[0] = CAN::BOARD_CONFIG_SET_SEND_DATA_FLAG;
  201fbe:	2405      	movs	r4, #5
  201fc0:	f88d 4008 	strb.w	r4, [sp, #8]
			send_data[1] = servo_index;
  201fc4:	f88d 1009 	strb.w	r1, [sp, #9]
			send_data[2] = servo_send_data_flag & 0xFF;
  201fc8:	f88d 300a 	strb.w	r3, [sp, #10]
  201fcc:	7900      	ldrb	r0, [r0, #4]
  201fce:	ab02      	add	r3, sp, #8
  201fd0:	9300      	str	r3, [sp, #0]
  201fd2:	2303      	movs	r3, #3
  201fd4:	2102      	movs	r1, #2
  201fd6:	f004 fef5 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
  201fda:	f004 feed 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  201fde:	2101      	movs	r1, #1
  201fe0:	f00e f81c 	bl	21001c <HAL_CAN_Transmit>
  201fe4:	e775      	b.n	201ed2 <_ZN14CANInitializer12configDeviceERKN6hydrus14BoardConfigCmdE+0x3e>
			uint8_t servo_index = static_cast<uint8_t>(config_msg.data[1]);
  201fe6:	7919      	ldrb	r1, [r3, #4]
			int16_t current_limit = static_cast<uint16_t>(config_msg.data[2]);
  201fe8:	689b      	ldr	r3, [r3, #8]
			send_data[0] = CAN::BOARD_CONFIG_SET_SERVO_CURRENT_LIMIT;
  201fea:	2406      	movs	r4, #6
  201fec:	f88d 4008 	strb.w	r4, [sp, #8]
			send_data[1] = servo_index;
  201ff0:	f88d 1009 	strb.w	r1, [sp, #9]
			send_data[2] = current_limit & 0xFF;
  201ff4:	f88d 300a 	strb.w	r3, [sp, #10]
			send_data[3] = (current_limit >> 8) & 0xFF;
  201ff8:	f343 2307 	sbfx	r3, r3, #8, #8
  201ffc:	f88d 300b 	strb.w	r3, [sp, #11]
  202000:	7900      	ldrb	r0, [r0, #4]
  202002:	ab02      	add	r3, sp, #8
  202004:	9300      	str	r3, [sp, #0]
  202006:	2304      	movs	r3, #4
  202008:	2102      	movs	r1, #2
  20200a:	f004 fedb 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
  20200e:	f004 fed3 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  202012:	2101      	movs	r1, #1
  202014:	f00e f802 	bl	21001c <HAL_CAN_Transmit>
}
  202018:	e75b      	b.n	201ed2 <_ZN14CANInitializer12configDeviceERKN6hydrus14BoardConfigCmdE+0x3e>
	...

0020201c <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
  20201c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202020:	b085      	sub	sp, #20

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  202022:	6843      	ldr	r3, [r0, #4]
  202024:	6802      	ldr	r2, [r0, #0]
  202026:	1a9b      	subs	r3, r3, r2
  202028:	119a      	asrs	r2, r3, #6
  20202a:	4b0f      	ldr	r3, [pc, #60]	; (202068 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x4c>)
  20202c:	fb03 f302 	mul.w	r3, r3, r2

      // Called by the latter.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
  202030:	4a0e      	ldr	r2, [pc, #56]	; (20206c <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x50>)
  202032:	4293      	cmp	r3, r2
  202034:	d00b      	beq.n	20204e <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x32>
  202036:	4680      	mov	r8, r0
  202038:	460c      	mov	r4, r1
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
  20203a:	b1db      	cbz	r3, 202074 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x58>
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
  20203c:	005a      	lsls	r2, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  20203e:	4293      	cmp	r3, r2
  202040:	d802      	bhi.n	202048 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x2c>
  202042:	4b0a      	ldr	r3, [pc, #40]	; (20206c <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x50>)
  202044:	429a      	cmp	r2, r3
  202046:	d905      	bls.n	202054 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x38>
  202048:	4b08      	ldr	r3, [pc, #32]	; (20206c <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x50>)
  20204a:	9302      	str	r3, [sp, #8]
  20204c:	e014      	b.n	202078 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x5c>
	  __throw_length_error(__N(__s));
  20204e:	4808      	ldr	r0, [pc, #32]	; (202070 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x54>)
  202050:	f012 ff15 	bl	214e7e <_ZSt20__throw_length_errorPKc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  202054:	2a00      	cmp	r2, #0
  202056:	f000 8233 	beq.w	2024c0 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x4a4>
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
  20205a:	429a      	cmp	r2, r3
  20205c:	d801      	bhi.n	202062 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x46>
	const size_type __len = size() + std::max(size(), __n);
  20205e:	9202      	str	r2, [sp, #8]
  202060:	e00a      	b.n	202078 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x5c>
	  std::__throw_bad_alloc();
  202062:	f012 ff06 	bl	214e72 <_ZSt17__throw_bad_allocv>
  202066:	bf00      	nop
  202068:	cccccccd 	.word	0xcccccccd
  20206c:	00cccccc 	.word	0x00cccccc
  202070:	00216d44 	.word	0x00216d44
  202074:	2301      	movs	r3, #1
  202076:	9302      	str	r3, [sp, #8]

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  202078:	9b02      	ldr	r3, [sp, #8]
  20207a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
  20207e:	0180      	lsls	r0, r0, #6
  202080:	f012 f823 	bl	2140ca <_Znwj>
  202084:	9001      	str	r0, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  202086:	f8d8 2004 	ldr.w	r2, [r8, #4]
  20208a:	f8d8 3000 	ldr.w	r3, [r8]
  20208e:	1ad2      	subs	r2, r2, r3

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  202090:	9801      	ldr	r0, [sp, #4]
  202092:	1883      	adds	r3, r0, r2
  202094:	f000 80e5 	beq.w	202262 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x246>

#include <CANDevice/imu/can_imu_mpu9250.h>
#include <CANDevice/motor/can_motor.h>
#include <CANDevice/servo/can_servo.h>

class Neuron {
  202098:	7821      	ldrb	r1, [r4, #0]
  20209a:	5481      	strb	r1, [r0, r2]
class CANDevice
  20209c:	7a22      	ldrb	r2, [r4, #8]
  20209e:	721a      	strb	r2, [r3, #8]
  2020a0:	7a62      	ldrb	r2, [r4, #9]
  2020a2:	725a      	strb	r2, [r3, #9]
#define APPLICATION_HYDRUS_LIB_CANDEVICE_MOTOR_CAN_MOTOR_H_

#include "CAN/can_device.h"
#include <functional>

class CANMotor : public CANDevice
  2020a4:	4a79      	ldr	r2, [pc, #484]	; (20228c <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x270>)
  2020a6:	605a      	str	r2, [r3, #4]
  2020a8:	8962      	ldrh	r2, [r4, #10]
  2020aa:	815a      	strh	r2, [r3, #10]
  2020ac:	7c22      	ldrb	r2, [r4, #16]
  2020ae:	741a      	strb	r2, [r3, #16]
  2020b0:	7c62      	ldrb	r2, [r4, #17]
  2020b2:	745a      	strb	r2, [r3, #17]
#include <ros.h>
#include <std_msgs/UInt8.h>
#include "config.h"
#include "math/definitions.h"

class IMU {
  2020b4:	7e22      	ldrb	r2, [r4, #24]
  2020b6:	761a      	strb	r2, [r3, #24]
  2020b8:	f103 051c 	add.w	r5, r3, #28
  2020bc:	f104 021c 	add.w	r2, r4, #28
  2020c0:	ca07      	ldmia	r2, {r0, r1, r2}
  2020c2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2020c6:	f103 0528 	add.w	r5, r3, #40	; 0x28
  2020ca:	f104 0228 	add.w	r2, r4, #40	; 0x28
  2020ce:	ca07      	ldmia	r2, {r0, r1, r2}
  2020d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2020d4:	f103 0534 	add.w	r5, r3, #52	; 0x34
  2020d8:	f104 0234 	add.w	r2, r4, #52	; 0x34
  2020dc:	ca07      	ldmia	r2, {r0, r1, r2}
  2020de:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2020e2:	f103 0540 	add.w	r5, r3, #64	; 0x40
  2020e6:	f104 0240 	add.w	r2, r4, #64	; 0x40
  2020ea:	ca07      	ldmia	r2, {r0, r1, r2}
  2020ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2020f0:	f103 054c 	add.w	r5, r3, #76	; 0x4c
  2020f4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  2020f8:	ca07      	ldmia	r2, {r0, r1, r2}
  2020fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2020fe:	f103 0558 	add.w	r5, r3, #88	; 0x58
  202102:	f104 0258 	add.w	r2, r4, #88	; 0x58
  202106:	ca07      	ldmia	r2, {r0, r1, r2}
  202108:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20210c:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
  202110:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  202114:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  202116:	669a      	str	r2, [r3, #104]	; 0x68
  202118:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  20211a:	66da      	str	r2, [r3, #108]	; 0x6c
  20211c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  20211e:	671a      	str	r2, [r3, #112]	; 0x70
  202120:	f103 0574 	add.w	r5, r3, #116	; 0x74
  202124:	f104 0274 	add.w	r2, r4, #116	; 0x74
  202128:	ca07      	ldmia	r2, {r0, r1, r2}
  20212a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20212e:	f103 0580 	add.w	r5, r3, #128	; 0x80
  202132:	f104 0280 	add.w	r2, r4, #128	; 0x80
  202136:	ca07      	ldmia	r2, {r0, r1, r2}
  202138:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20213c:	f103 058c 	add.w	r5, r3, #140	; 0x8c
  202140:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  202144:	ca07      	ldmia	r2, {r0, r1, r2}
  202146:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20214a:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
  20214e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
  202152:	f103 059c 	add.w	r5, r3, #156	; 0x9c
  202156:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  20215a:	ca07      	ldmia	r2, {r0, r1, r2}
  20215c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  202160:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
  202164:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
  202168:	ca07      	ldmia	r2, {r0, r1, r2}
  20216a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20216e:	f103 05b4 	add.w	r5, r3, #180	; 0xb4
  202172:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
  202176:	ca07      	ldmia	r2, {r0, r1, r2}
  202178:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20217c:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
  202180:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
  202184:	ca07      	ldmia	r2, {r0, r1, r2}
  202186:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20218a:	f103 05cc 	add.w	r5, r3, #204	; 0xcc
  20218e:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
  202192:	ca07      	ldmia	r2, {r0, r1, r2}
  202194:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  202198:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
  20219c:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
  2021a0:	ca07      	ldmia	r2, {r0, r1, r2}
  2021a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2021a6:	f103 05e4 	add.w	r5, r3, #228	; 0xe4
  2021aa:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
  2021ae:	ca07      	ldmia	r2, {r0, r1, r2}
  2021b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2021b4:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
  2021b8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  2021bc:	f103 05f4 	add.w	r5, r3, #244	; 0xf4
  2021c0:	f104 02f4 	add.w	r2, r4, #244	; 0xf4
  2021c4:	ca07      	ldmia	r2, {r0, r1, r2}
  2021c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2021ca:	f503 7580 	add.w	r5, r3, #256	; 0x100
  2021ce:	f504 7280 	add.w	r2, r4, #256	; 0x100
  2021d2:	ca07      	ldmia	r2, {r0, r1, r2}
  2021d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2021d8:	f503 7586 	add.w	r5, r3, #268	; 0x10c
  2021dc:	f504 7286 	add.w	r2, r4, #268	; 0x10c
  2021e0:	ca07      	ldmia	r2, {r0, r1, r2}
  2021e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
class CANIMU : public CANDevice, public IMU {
  2021e6:	4a2a      	ldr	r2, [pc, #168]	; (202290 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x274>)
  2021e8:	60da      	str	r2, [r3, #12]
  2021ea:	3214      	adds	r2, #20
  2021ec:	615a      	str	r2, [r3, #20]
  2021ee:	f504 728c 	add.w	r2, r4, #280	; 0x118
  2021f2:	e892 0003 	ldmia.w	r2, {r0, r1}
  2021f6:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
  2021fa:	f8a3 111c 	strh.w	r1, [r3, #284]	; 0x11c
  2021fe:	f8d4 111e 	ldr.w	r1, [r4, #286]	; 0x11e
  202202:	f8c3 111e 	str.w	r1, [r3, #286]	; 0x11e
  202206:	f8b4 2122 	ldrh.w	r2, [r4, #290]	; 0x122
  20220a:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
  20220e:	f504 7292 	add.w	r2, r4, #292	; 0x124
  202212:	e892 0003 	ldmia.w	r2, {r0, r1}
  202216:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
  20221a:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
  20221e:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
  202222:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
  202226:	f894 2130 	ldrb.w	r2, [r4, #304]	; 0x130
  20222a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  20222e:	f894 2131 	ldrb.w	r2, [r4, #305]	; 0x131
  202232:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
	void setIndex(uint8_t index) {index_ = index;}
	void setGoalPosition(uint16_t goal_position) {goal_position_ = goal_position;}
	void setTorqueEnable(bool torque_enable) {torque_enable_ = torque_enable;}
};

class CANServo : public CANDevice
  202236:	4a17      	ldr	r2, [pc, #92]	; (202294 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x278>)
  202238:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
  20223c:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
  202240:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  202244:	2200      	movs	r2, #0
  202246:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  20224a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
  20224e:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  202252:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  202256:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  20225a:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  20225e:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
				     std::forward<_Args>(__args)...);
	    __new_finish = pointer();

	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
  202262:	f8d8 3000 	ldr.w	r3, [r8]
  202266:	461c      	mov	r4, r3
  202268:	9303      	str	r3, [sp, #12]
  20226a:	f8d8 e004 	ldr.w	lr, [r8, #4]
		      _ForwardIterator __result)
        {
	  _ForwardIterator __cur = __result;
	  __try
	    {
	      for (; __first != __last; ++__first, (void)++__cur)
  20226e:	4573      	cmp	r3, lr
  202270:	f000 8137 	beq.w	2024e2 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x4c6>
  202274:	9b01      	ldr	r3, [sp, #4]
  202276:	4f08      	ldr	r7, [pc, #32]	; (202298 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x27c>)
  202278:	f8df b010 	ldr.w	fp, [pc, #16]	; 20228c <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x270>
  20227c:	f8df a01c 	ldr.w	sl, [pc, #28]	; 20229c <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x280>
  202280:	f8df c00c 	ldr.w	ip, [pc, #12]	; 202290 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x274>
  202284:	f10c 0914 	add.w	r9, ip, #20
	  _M_start(), _M_finish(), _M_end_of_storage()
  202288:	2600      	movs	r6, #0
  20228a:	e009      	b.n	2022a0 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x284>
  20228c:	00216c1c 	.word	0x00216c1c
  202290:	00216b90 	.word	0x00216b90
  202294:	00216c54 	.word	0x00216c54
  202298:	00216d30 	.word	0x00216d30
  20229c:	00216d40 	.word	0x00216d40
   */
#if __cplusplus >= 201103L
  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  2022a0:	2b00      	cmp	r3, #0
  2022a2:	f000 80f4 	beq.w	20248e <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x472>
  2022a6:	7822      	ldrb	r2, [r4, #0]
  2022a8:	701a      	strb	r2, [r3, #0]
  2022aa:	605f      	str	r7, [r3, #4]
  2022ac:	7a22      	ldrb	r2, [r4, #8]
  2022ae:	721a      	strb	r2, [r3, #8]
  2022b0:	7a62      	ldrb	r2, [r4, #9]
  2022b2:	725a      	strb	r2, [r3, #9]
  2022b4:	f8c3 b004 	str.w	fp, [r3, #4]
  2022b8:	8962      	ldrh	r2, [r4, #10]
  2022ba:	815a      	strh	r2, [r3, #10]
  2022bc:	60df      	str	r7, [r3, #12]
  2022be:	7c22      	ldrb	r2, [r4, #16]
  2022c0:	741a      	strb	r2, [r3, #16]
  2022c2:	7c62      	ldrb	r2, [r4, #17]
  2022c4:	745a      	strb	r2, [r3, #17]
  2022c6:	f8c3 a014 	str.w	sl, [r3, #20]
  2022ca:	7e22      	ldrb	r2, [r4, #24]
  2022cc:	761a      	strb	r2, [r3, #24]
  2022ce:	f103 051c 	add.w	r5, r3, #28
  2022d2:	f104 021c 	add.w	r2, r4, #28
  2022d6:	ca07      	ldmia	r2, {r0, r1, r2}
  2022d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2022dc:	f103 0528 	add.w	r5, r3, #40	; 0x28
  2022e0:	f104 0228 	add.w	r2, r4, #40	; 0x28
  2022e4:	ca07      	ldmia	r2, {r0, r1, r2}
  2022e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2022ea:	f103 0534 	add.w	r5, r3, #52	; 0x34
  2022ee:	f104 0234 	add.w	r2, r4, #52	; 0x34
  2022f2:	ca07      	ldmia	r2, {r0, r1, r2}
  2022f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2022f8:	f103 0540 	add.w	r5, r3, #64	; 0x40
  2022fc:	f104 0240 	add.w	r2, r4, #64	; 0x40
  202300:	ca07      	ldmia	r2, {r0, r1, r2}
  202302:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  202306:	f103 054c 	add.w	r5, r3, #76	; 0x4c
  20230a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  20230e:	ca07      	ldmia	r2, {r0, r1, r2}
  202310:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  202314:	f103 0558 	add.w	r5, r3, #88	; 0x58
  202318:	f104 0258 	add.w	r2, r4, #88	; 0x58
  20231c:	ca07      	ldmia	r2, {r0, r1, r2}
  20231e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  202322:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
  202326:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  20232a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  20232c:	669a      	str	r2, [r3, #104]	; 0x68
  20232e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  202330:	66da      	str	r2, [r3, #108]	; 0x6c
  202332:	6f22      	ldr	r2, [r4, #112]	; 0x70
  202334:	671a      	str	r2, [r3, #112]	; 0x70
  202336:	f103 0574 	add.w	r5, r3, #116	; 0x74
  20233a:	f104 0274 	add.w	r2, r4, #116	; 0x74
  20233e:	ca07      	ldmia	r2, {r0, r1, r2}
  202340:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  202344:	f103 0580 	add.w	r5, r3, #128	; 0x80
  202348:	f104 0280 	add.w	r2, r4, #128	; 0x80
  20234c:	ca07      	ldmia	r2, {r0, r1, r2}
  20234e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  202352:	f103 058c 	add.w	r5, r3, #140	; 0x8c
  202356:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  20235a:	ca07      	ldmia	r2, {r0, r1, r2}
  20235c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  202360:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
  202364:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
  202368:	f103 059c 	add.w	r5, r3, #156	; 0x9c
  20236c:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  202370:	ca07      	ldmia	r2, {r0, r1, r2}
  202372:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  202376:	f103 05a8 	add.w	r5, r3, #168	; 0xa8
  20237a:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
  20237e:	ca07      	ldmia	r2, {r0, r1, r2}
  202380:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  202384:	f103 05b4 	add.w	r5, r3, #180	; 0xb4
  202388:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
  20238c:	ca07      	ldmia	r2, {r0, r1, r2}
  20238e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  202392:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
  202396:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
  20239a:	ca07      	ldmia	r2, {r0, r1, r2}
  20239c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2023a0:	f103 05cc 	add.w	r5, r3, #204	; 0xcc
  2023a4:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
  2023a8:	ca07      	ldmia	r2, {r0, r1, r2}
  2023aa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2023ae:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
  2023b2:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
  2023b6:	ca07      	ldmia	r2, {r0, r1, r2}
  2023b8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2023bc:	f103 05e4 	add.w	r5, r3, #228	; 0xe4
  2023c0:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
  2023c4:	ca07      	ldmia	r2, {r0, r1, r2}
  2023c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2023ca:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
  2023ce:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  2023d2:	f103 05f4 	add.w	r5, r3, #244	; 0xf4
  2023d6:	f104 02f4 	add.w	r2, r4, #244	; 0xf4
  2023da:	ca07      	ldmia	r2, {r0, r1, r2}
  2023dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2023e0:	f503 7580 	add.w	r5, r3, #256	; 0x100
  2023e4:	f504 7280 	add.w	r2, r4, #256	; 0x100
  2023e8:	ca07      	ldmia	r2, {r0, r1, r2}
  2023ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2023ee:	f503 7586 	add.w	r5, r3, #268	; 0x10c
  2023f2:	f504 7286 	add.w	r2, r4, #268	; 0x10c
  2023f6:	ca07      	ldmia	r2, {r0, r1, r2}
  2023f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2023fc:	f8c3 c00c 	str.w	ip, [r3, #12]
  202400:	f8c3 9014 	str.w	r9, [r3, #20]
  202404:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
  202408:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
  20240c:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
  202410:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
  202414:	f8d4 111e 	ldr.w	r1, [r4, #286]	; 0x11e
  202418:	f8c3 111e 	str.w	r1, [r3, #286]	; 0x11e
  20241c:	f8b4 2122 	ldrh.w	r2, [r4, #290]	; 0x122
  202420:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
  202424:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
  202428:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
  20242c:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
  202430:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
  202434:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
  202438:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
  20243c:	f8c3 712c 	str.w	r7, [r3, #300]	; 0x12c
  202440:	f894 2130 	ldrb.w	r2, [r4, #304]	; 0x130
  202444:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  202448:	f894 2131 	ldrb.w	r2, [r4, #305]	; 0x131
  20244c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
  202450:	4a2f      	ldr	r2, [pc, #188]	; (202510 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x4f4>)
  202452:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
  202456:	f8c3 6134 	str.w	r6, [r3, #308]	; 0x134
  20245a:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
  20245e:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
      __a = _GLIBCXX_MOVE(__b);
  202462:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
  202466:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  20246a:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  20246e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  202472:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
  202476:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  20247a:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  20247e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
      __a = _GLIBCXX_MOVE(__b);
  202482:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  202486:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  20248a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
      { return _M_current; }

      move_iterator&
      operator++()
      {
	++_M_current;
  20248e:	f504 74a0 	add.w	r4, r4, #320	; 0x140
  202492:	f503 73a0 	add.w	r3, r3, #320	; 0x140
  202496:	45a6      	cmp	lr, r4
  202498:	f47f af02 	bne.w	2022a0 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x284>
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
  20249c:	9b03      	ldr	r3, [sp, #12]
  20249e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
  2024a2:	1ae4      	subs	r4, r4, r3
  2024a4:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
  2024a8:	f504 7420 	add.w	r4, r4, #640	; 0x280
  2024ac:	9b01      	ldr	r3, [sp, #4]
  2024ae:	441c      	add	r4, r3
	    else
	      std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	    _M_deallocate(__new_start, __len);
	    __throw_exception_again;
	  }
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  2024b0:	f8d8 5000 	ldr.w	r5, [r8]
  2024b4:	f8d8 6004 	ldr.w	r6, [r8, #4]
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
  2024b8:	42b5      	cmp	r5, r6
  2024ba:	d015      	beq.n	2024e8 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x4cc>
  2024bc:	4f14      	ldr	r7, [pc, #80]	; (202510 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x4f4>)
  2024be:	e007      	b.n	2024d0 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x4b4>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  2024c0:	2300      	movs	r3, #0
  2024c2:	9302      	str	r3, [sp, #8]
  2024c4:	9301      	str	r3, [sp, #4]
  2024c6:	e5de      	b.n	202086 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x6a>
  2024c8:	f505 75a0 	add.w	r5, r5, #320	; 0x140
  2024cc:	42b5      	cmp	r5, r6
  2024ce:	d00b      	beq.n	2024e8 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x4cc>
  2024d0:	f8c5 712c 	str.w	r7, [r5, #300]	; 0x12c
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  2024d4:	f8d5 0134 	ldr.w	r0, [r5, #308]	; 0x134
	if (__p)
  2024d8:	2800      	cmp	r0, #0
  2024da:	d0f5      	beq.n	2024c8 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x4ac>
      { ::operator delete(__p); }
  2024dc:	f011 fdc5 	bl	21406a <_ZdlPv>
  2024e0:	e7f2      	b.n	2024c8 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x4ac>
	    ++__new_finish;
  2024e2:	9b01      	ldr	r3, [sp, #4]
  2024e4:	f503 74a0 	add.w	r4, r3, #320	; 0x140
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
  2024e8:	f8d8 0000 	ldr.w	r0, [r8]
  2024ec:	b108      	cbz	r0, 2024f2 <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_+0x4d6>
  2024ee:	f011 fdbc 	bl	21406a <_ZdlPv>
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
  2024f2:	9a01      	ldr	r2, [sp, #4]
  2024f4:	f8c8 2000 	str.w	r2, [r8]
	this->_M_impl._M_finish = __new_finish;
  2024f8:	f8c8 4004 	str.w	r4, [r8, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
  2024fc:	9b02      	ldr	r3, [sp, #8]
  2024fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  202502:	eb02 1383 	add.w	r3, r2, r3, lsl #6
  202506:	f8c8 3008 	str.w	r3, [r8, #8]
      }
  20250a:	b005      	add	sp, #20
  20250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  202510:	00216c54 	.word	0x00216c54

00202514 <_ZNSt6vectorI6NeuronSaIS0_EE12emplace_backIJS0_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  202514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  202516:	4605      	mov	r5, r0
  202518:	460c      	mov	r4, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  20251a:	6843      	ldr	r3, [r0, #4]
  20251c:	6882      	ldr	r2, [r0, #8]
  20251e:	4293      	cmp	r3, r2
  202520:	f000 80fe 	beq.w	202720 <_ZNSt6vectorI6NeuronSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x20c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  202524:	2b00      	cmp	r3, #0
  202526:	f000 80f6 	beq.w	202716 <_ZNSt6vectorI6NeuronSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x202>
  20252a:	780a      	ldrb	r2, [r1, #0]
  20252c:	701a      	strb	r2, [r3, #0]
  20252e:	4e7e      	ldr	r6, [pc, #504]	; (202728 <_ZNSt6vectorI6NeuronSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x214>)
  202530:	605e      	str	r6, [r3, #4]
  202532:	7a0a      	ldrb	r2, [r1, #8]
  202534:	721a      	strb	r2, [r3, #8]
  202536:	7a4a      	ldrb	r2, [r1, #9]
  202538:	725a      	strb	r2, [r3, #9]
  20253a:	4a7c      	ldr	r2, [pc, #496]	; (20272c <_ZNSt6vectorI6NeuronSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x218>)
  20253c:	605a      	str	r2, [r3, #4]
  20253e:	894a      	ldrh	r2, [r1, #10]
  202540:	815a      	strh	r2, [r3, #10]
  202542:	60de      	str	r6, [r3, #12]
  202544:	7c0a      	ldrb	r2, [r1, #16]
  202546:	741a      	strb	r2, [r3, #16]
  202548:	7c4a      	ldrb	r2, [r1, #17]
  20254a:	745a      	strb	r2, [r3, #17]
  20254c:	4a78      	ldr	r2, [pc, #480]	; (202730 <_ZNSt6vectorI6NeuronSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x21c>)
  20254e:	615a      	str	r2, [r3, #20]
  202550:	7e0a      	ldrb	r2, [r1, #24]
  202552:	761a      	strb	r2, [r3, #24]
  202554:	f103 071c 	add.w	r7, r3, #28
  202558:	f101 021c 	add.w	r2, r1, #28
  20255c:	ca07      	ldmia	r2, {r0, r1, r2}
  20255e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  202562:	f103 0728 	add.w	r7, r3, #40	; 0x28
  202566:	f104 0228 	add.w	r2, r4, #40	; 0x28
  20256a:	ca07      	ldmia	r2, {r0, r1, r2}
  20256c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  202570:	f103 0734 	add.w	r7, r3, #52	; 0x34
  202574:	f104 0234 	add.w	r2, r4, #52	; 0x34
  202578:	ca07      	ldmia	r2, {r0, r1, r2}
  20257a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  20257e:	f103 0740 	add.w	r7, r3, #64	; 0x40
  202582:	f104 0240 	add.w	r2, r4, #64	; 0x40
  202586:	ca07      	ldmia	r2, {r0, r1, r2}
  202588:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  20258c:	f103 074c 	add.w	r7, r3, #76	; 0x4c
  202590:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  202594:	ca07      	ldmia	r2, {r0, r1, r2}
  202596:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  20259a:	f103 0758 	add.w	r7, r3, #88	; 0x58
  20259e:	f104 0258 	add.w	r2, r4, #88	; 0x58
  2025a2:	ca07      	ldmia	r2, {r0, r1, r2}
  2025a4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  2025a8:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
  2025ac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  2025b0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  2025b2:	669a      	str	r2, [r3, #104]	; 0x68
  2025b4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  2025b6:	66da      	str	r2, [r3, #108]	; 0x6c
  2025b8:	6f22      	ldr	r2, [r4, #112]	; 0x70
  2025ba:	671a      	str	r2, [r3, #112]	; 0x70
  2025bc:	f103 0774 	add.w	r7, r3, #116	; 0x74
  2025c0:	f104 0274 	add.w	r2, r4, #116	; 0x74
  2025c4:	ca07      	ldmia	r2, {r0, r1, r2}
  2025c6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  2025ca:	f103 0780 	add.w	r7, r3, #128	; 0x80
  2025ce:	f104 0280 	add.w	r2, r4, #128	; 0x80
  2025d2:	ca07      	ldmia	r2, {r0, r1, r2}
  2025d4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  2025d8:	f103 078c 	add.w	r7, r3, #140	; 0x8c
  2025dc:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  2025e0:	ca07      	ldmia	r2, {r0, r1, r2}
  2025e2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  2025e6:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
  2025ea:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
  2025ee:	f103 079c 	add.w	r7, r3, #156	; 0x9c
  2025f2:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  2025f6:	ca07      	ldmia	r2, {r0, r1, r2}
  2025f8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  2025fc:	f103 07a8 	add.w	r7, r3, #168	; 0xa8
  202600:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
  202604:	ca07      	ldmia	r2, {r0, r1, r2}
  202606:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  20260a:	f103 07b4 	add.w	r7, r3, #180	; 0xb4
  20260e:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
  202612:	ca07      	ldmia	r2, {r0, r1, r2}
  202614:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  202618:	f103 07c0 	add.w	r7, r3, #192	; 0xc0
  20261c:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
  202620:	ca07      	ldmia	r2, {r0, r1, r2}
  202622:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  202626:	f103 07cc 	add.w	r7, r3, #204	; 0xcc
  20262a:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
  20262e:	ca07      	ldmia	r2, {r0, r1, r2}
  202630:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  202634:	f103 07d8 	add.w	r7, r3, #216	; 0xd8
  202638:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
  20263c:	ca07      	ldmia	r2, {r0, r1, r2}
  20263e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  202642:	f103 07e4 	add.w	r7, r3, #228	; 0xe4
  202646:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
  20264a:	ca07      	ldmia	r2, {r0, r1, r2}
  20264c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  202650:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
  202654:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  202658:	f103 07f4 	add.w	r7, r3, #244	; 0xf4
  20265c:	f104 02f4 	add.w	r2, r4, #244	; 0xf4
  202660:	ca07      	ldmia	r2, {r0, r1, r2}
  202662:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  202666:	f503 7780 	add.w	r7, r3, #256	; 0x100
  20266a:	f504 7280 	add.w	r2, r4, #256	; 0x100
  20266e:	ca07      	ldmia	r2, {r0, r1, r2}
  202670:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  202674:	f503 7786 	add.w	r7, r3, #268	; 0x10c
  202678:	f504 7286 	add.w	r2, r4, #268	; 0x10c
  20267c:	ca07      	ldmia	r2, {r0, r1, r2}
  20267e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  202682:	4a2c      	ldr	r2, [pc, #176]	; (202734 <_ZNSt6vectorI6NeuronSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x220>)
  202684:	60da      	str	r2, [r3, #12]
  202686:	3214      	adds	r2, #20
  202688:	615a      	str	r2, [r3, #20]
  20268a:	f504 728c 	add.w	r2, r4, #280	; 0x118
  20268e:	e892 0003 	ldmia.w	r2, {r0, r1}
  202692:	f8c3 0118 	str.w	r0, [r3, #280]	; 0x118
  202696:	f8a3 111c 	strh.w	r1, [r3, #284]	; 0x11c
  20269a:	f8d4 111e 	ldr.w	r1, [r4, #286]	; 0x11e
  20269e:	f8c3 111e 	str.w	r1, [r3, #286]	; 0x11e
  2026a2:	f8b4 2122 	ldrh.w	r2, [r4, #290]	; 0x122
  2026a6:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
  2026aa:	f504 7292 	add.w	r2, r4, #292	; 0x124
  2026ae:	e892 0003 	ldmia.w	r2, {r0, r1}
  2026b2:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
  2026b6:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
  2026ba:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
  2026be:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
  2026c2:	f8c3 612c 	str.w	r6, [r3, #300]	; 0x12c
  2026c6:	f894 2130 	ldrb.w	r2, [r4, #304]	; 0x130
  2026ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  2026ce:	f894 2131 	ldrb.w	r2, [r4, #305]	; 0x131
  2026d2:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
  2026d6:	4a18      	ldr	r2, [pc, #96]	; (202738 <_ZNSt6vectorI6NeuronSaIS0_EE12emplace_backIJS0_EEEvDpOT_+0x224>)
  2026d8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	  _M_start(), _M_finish(), _M_end_of_storage()
  2026dc:	2200      	movs	r2, #0
  2026de:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  2026e2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  2026e6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
      __a = _GLIBCXX_MOVE(__b);
  2026ea:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
  2026ee:	f8c3 1134 	str.w	r1, [r3, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  2026f2:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  2026f6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  2026fa:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
  2026fe:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  202702:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  202706:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
      __a = _GLIBCXX_MOVE(__b);
  20270a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  20270e:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  202712:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
	    ++this->_M_impl._M_finish;
  202716:	686b      	ldr	r3, [r5, #4]
  202718:	f503 73a0 	add.w	r3, r3, #320	; 0x140
  20271c:	606b      	str	r3, [r5, #4]
  20271e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  202720:	f7ff fc7c 	bl	20201c <_ZNSt6vectorI6NeuronSaIS0_EE19_M_emplace_back_auxIJS0_EEEvDpOT_>
  202724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  202726:	bf00      	nop
  202728:	00216d30 	.word	0x00216d30
  20272c:	00216c1c 	.word	0x00216c1c
  202730:	00216d40 	.word	0x00216d40
  202734:	00216b90 	.word	0x00216b90
  202738:	00216c54 	.word	0x00216c54

0020273c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag>:
    }

  /// This is an overload used by find algos for the RAI case.
  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
  20273c:	b470      	push	{r4, r5, r6}
    { return __lhs.base() - __rhs.base(); }
  20273e:	1a0c      	subs	r4, r1, r0
  202740:	11a3      	asrs	r3, r4, #6
  202742:	4c2f      	ldr	r4, [pc, #188]	; (202800 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0xc4>)
  202744:	fb04 f403 	mul.w	r4, r4, r3
	      _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;
  202748:	10a4      	asrs	r4, r4, #2

      for (; __trip_count > 0; --__trip_count)
  20274a:	2c00      	cmp	r4, #0
  20274c:	dd39      	ble.n	2027c2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x86>
  20274e:	4606      	mov	r6, r0
		return this->slave_id_ < right.slave_id_;
	}

	bool operator==(const Neuron& right) const
	{
		return this->slave_id_ == right.slave_id_;
  202750:	7813      	ldrb	r3, [r2, #0]
	{
	  if (__pred(__first))
  202752:	7805      	ldrb	r5, [r0, #0]
  202754:	429d      	cmp	r5, r3
  202756:	d02c      	beq.n	2027b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x76>
	    return __first;
	  ++__first;

	  if (__pred(__first))
  202758:	f890 5140 	ldrb.w	r5, [r0, #320]	; 0x140
  20275c:	429d      	cmp	r5, r3
  20275e:	d01d      	beq.n	20279c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x60>
	    return __first;
	  ++__first;

	  if (__pred(__first))
  202760:	f890 5280 	ldrb.w	r5, [r0, #640]	; 0x280
  202764:	429d      	cmp	r5, r3
  202766:	d01c      	beq.n	2027a2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x66>
	    return __first;
	  ++__first;

	  if (__pred(__first))
  202768:	f890 53c0 	ldrb.w	r5, [r0, #960]	; 0x3c0
  20276c:	429d      	cmp	r5, r3
  20276e:	d01b      	beq.n	2027a8 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x6c>
  202770:	f506 60a0 	add.w	r0, r6, #1280	; 0x500
      for (; __trip_count > 0; --__trip_count)
  202774:	3c01      	subs	r4, #1
  202776:	d024      	beq.n	2027c2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x86>
	  if (__pred(__first))
  202778:	f896 5500 	ldrb.w	r5, [r6, #1280]	; 0x500
  20277c:	429d      	cmp	r5, r3
  20277e:	d018      	beq.n	2027b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x76>
	  if (__pred(__first))
  202780:	f890 5140 	ldrb.w	r5, [r0, #320]	; 0x140
  202784:	429d      	cmp	r5, r3
  202786:	d012      	beq.n	2027ae <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x72>
	  if (__pred(__first))
  202788:	f890 5280 	ldrb.w	r5, [r0, #640]	; 0x280
  20278c:	429d      	cmp	r5, r3
  20278e:	d012      	beq.n	2027b6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x7a>
  202790:	f890 53c0 	ldrb.w	r5, [r0, #960]	; 0x3c0
	  if (__pred(__first))
  202794:	429d      	cmp	r5, r3
  202796:	d011      	beq.n	2027bc <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x80>
	++_M_current;
  202798:	4606      	mov	r6, r0
  20279a:	e7e9      	b.n	202770 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x34>
  20279c:	f500 70a0 	add.w	r0, r0, #320	; 0x140
  2027a0:	e007      	b.n	2027b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x76>
  2027a2:	f500 7020 	add.w	r0, r0, #640	; 0x280
  2027a6:	e004      	b.n	2027b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x76>
  2027a8:	f500 7070 	add.w	r0, r0, #960	; 0x3c0
  2027ac:	e001      	b.n	2027b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x76>
  2027ae:	f506 60c8 	add.w	r0, r6, #1600	; 0x640
	  ++__first;
	case 0:
	default:
	  return __last;
	}
    }
  2027b2:	bc70      	pop	{r4, r5, r6}
  2027b4:	4770      	bx	lr
  2027b6:	f506 60f0 	add.w	r0, r6, #1920	; 0x780
	    return __first;
  2027ba:	e7fa      	b.n	2027b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x76>
  2027bc:	f506 600c 	add.w	r0, r6, #2240	; 0x8c0
	    return __first;
  2027c0:	e7f7      	b.n	2027b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x76>
    { return __lhs.base() - __rhs.base(); }
  2027c2:	1a0b      	subs	r3, r1, r0
  2027c4:	119c      	asrs	r4, r3, #6
  2027c6:	4b0e      	ldr	r3, [pc, #56]	; (202800 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0xc4>)
  2027c8:	fb03 f304 	mul.w	r3, r3, r4
      switch (__last - __first)
  2027cc:	2b02      	cmp	r3, #2
  2027ce:	d00a      	beq.n	2027e6 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0xaa>
  2027d0:	2b03      	cmp	r3, #3
  2027d2:	d002      	beq.n	2027da <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x9e>
  2027d4:	2b01      	cmp	r3, #1
  2027d6:	d110      	bne.n	2027fa <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0xbe>
  2027d8:	e00b      	b.n	2027f2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0xb6>
	  if (__pred(__first))
  2027da:	7804      	ldrb	r4, [r0, #0]
  2027dc:	7813      	ldrb	r3, [r2, #0]
  2027de:	429c      	cmp	r4, r3
  2027e0:	d0e7      	beq.n	2027b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x76>
	++_M_current;
  2027e2:	f500 70a0 	add.w	r0, r0, #320	; 0x140
	  if (__pred(__first))
  2027e6:	7804      	ldrb	r4, [r0, #0]
  2027e8:	7813      	ldrb	r3, [r2, #0]
  2027ea:	429c      	cmp	r4, r3
  2027ec:	d0e1      	beq.n	2027b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x76>
  2027ee:	f500 70a0 	add.w	r0, r0, #320	; 0x140
	  if (__pred(__first))
  2027f2:	7804      	ldrb	r4, [r0, #0]
  2027f4:	7813      	ldrb	r3, [r2, #0]
  2027f6:	429c      	cmp	r4, r3
  2027f8:	d0db      	beq.n	2027b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x76>
	  return __last;
  2027fa:	4608      	mov	r0, r1
  2027fc:	e7d9      	b.n	2027b2 <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag+0x76>
  2027fe:	bf00      	nop
  202800:	cccccccd 	.word	0xcccccccd

00202804 <_ZN14CANInitializer19receiveDataCallbackEhhmPh>:

void CANInitializer::receiveDataCallback(uint8_t slave_id, uint8_t message_id, uint32_t DLC, uint8_t* data)
{
  202804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  202808:	b0d6      	sub	sp, #344	; 0x158
  20280a:	4604      	mov	r4, r0
  20280c:	468a      	mov	sl, r1
  20280e:	f8dd 9178 	ldr.w	r9, [sp, #376]	; 0x178
	switch (message_id) {
  202812:	2a03      	cmp	r2, #3
  202814:	f200 8215 	bhi.w	202c42 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x43e>
  202818:	e8df f012 	tbh	[pc, r2, lsl #1]
  20281c:	00250004 	.word	0x00250004
  202820:	01b30164 	.word	0x01b30164
	case CAN::MESSAGEID_SEND_ENUM_RESPONSE:
		neuron_.push_back(Neuron(slave_id));
  202824:	6884      	ldr	r4, [r0, #8]
	Neuron(uint8_t slave_id):slave_id_(slave_id){}
  202826:	f88d 1000 	strb.w	r1, [sp]
{
private:
	uint16_t m_pwm;
public:
	CANMotor(){}
  20282a:	4baa      	ldr	r3, [pc, #680]	; (202ad4 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x2d0>)
  20282c:	9301      	str	r3, [sp, #4]
	CANDevice(){}
  20282e:	4baa      	ldr	r3, [pc, #680]	; (202ad8 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x2d4>)
  202830:	9303      	str	r3, [sp, #12]
	int16_t r_gyro_data[3], r_acc_data[3], r_mag_data[3];
	bool send_data_flag_;
public:
	CANIMU(){}
  202832:	a805      	add	r0, sp, #20
  202834:	f008 fa54 	bl	20ace0 <_ZN3IMUC1Ev>
  202838:	4ba8      	ldr	r3, [pc, #672]	; (202adc <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x2d8>)
  20283a:	9303      	str	r3, [sp, #12]
  20283c:	3314      	adds	r3, #20
  20283e:	9305      	str	r3, [sp, #20]
{
public:
	CANServo(){}
  202840:	4ba7      	ldr	r3, [pc, #668]	; (202ae0 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x2dc>)
  202842:	934b      	str	r3, [sp, #300]	; 0x12c
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  202844:	2300      	movs	r3, #0
  202846:	934d      	str	r3, [sp, #308]	; 0x134
  202848:	934e      	str	r3, [sp, #312]	; 0x138
  20284a:	934f      	str	r3, [sp, #316]	; 0x13c
      { emplace_back(std::move(__x)); }
  20284c:	4669      	mov	r1, sp
  20284e:	4620      	mov	r0, r4
  202850:	f7ff fe60 	bl	202514 <_ZNSt6vectorI6NeuronSaIS0_EE12emplace_backIJS0_EEEvDpOT_>
class CANServo : public CANDevice
  202854:	4ba2      	ldr	r3, [pc, #648]	; (202ae0 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x2dc>)
  202856:	934b      	str	r3, [sp, #300]	; 0x12c
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  202858:	984d      	ldr	r0, [sp, #308]	; 0x134
	if (__p)
  20285a:	2800      	cmp	r0, #0
  20285c:	f000 81f1 	beq.w	202c42 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x43e>
      { ::operator delete(__p); }
  202860:	f011 fc03 	bl	21406a <_ZdlPv>
		break;
  202864:	e1ed      	b.n	202c42 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x43e>
	case CAN::MESSAGEID_SEND_INITIAL_CONFIG_0:
		{
			auto slave = std::find(neuron_.begin(), neuron_.end(), Neuron(slave_id));
  202866:	6883      	ldr	r3, [r0, #8]
      : _M_current(__i) { }
  202868:	681d      	ldr	r5, [r3, #0]
  20286a:	685e      	ldr	r6, [r3, #4]
  20286c:	f88d 1000 	strb.w	r1, [sp]
  202870:	4b98      	ldr	r3, [pc, #608]	; (202ad4 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x2d0>)
  202872:	9301      	str	r3, [sp, #4]
  202874:	4b98      	ldr	r3, [pc, #608]	; (202ad8 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x2d4>)
  202876:	9303      	str	r3, [sp, #12]
  202878:	a805      	add	r0, sp, #20
  20287a:	f008 fa31 	bl	20ace0 <_ZN3IMUC1Ev>
  20287e:	4b97      	ldr	r3, [pc, #604]	; (202adc <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x2d8>)
  202880:	9303      	str	r3, [sp, #12]
  202882:	3314      	adds	r3, #20
  202884:	9305      	str	r3, [sp, #20]
	CANServo(){}
  202886:	4f96      	ldr	r7, [pc, #600]	; (202ae0 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x2dc>)
  202888:	974b      	str	r7, [sp, #300]	; 0x12c
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  20288a:	2300      	movs	r3, #0
  20288c:	934d      	str	r3, [sp, #308]	; 0x134
  20288e:	934e      	str	r3, [sp, #312]	; 0x138
  202890:	934f      	str	r3, [sp, #316]	; 0x13c
  template<typename _Iterator, typename _Predicate>
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
      return __find_if(__first, __last, __pred,
		       std::__iterator_category(__first));
  202892:	466a      	mov	r2, sp
  202894:	4631      	mov	r1, r6
  202896:	4628      	mov	r0, r5
  202898:	f7ff ff50 	bl	20273c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag>
  20289c:	4606      	mov	r6, r0
class CANServo : public CANDevice
  20289e:	974b      	str	r7, [sp, #300]	; 0x12c
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  2028a0:	984d      	ldr	r0, [sp, #308]	; 0x134
	if (__p)
  2028a2:	b108      	cbz	r0, 2028a8 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0xa4>
  2028a4:	f011 fbe1 	bl	21406a <_ZdlPv>
  2028a8:	68a3      	ldr	r3, [r4, #8]
			if (slave == neuron_.end()) return;
  2028aa:	685b      	ldr	r3, [r3, #4]
  2028ac:	42b3      	cmp	r3, r6
  2028ae:	f000 81c8 	beq.w	202c42 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x43e>
class CANDevice
  2028b2:	2300      	movs	r3, #0
  2028b4:	7233      	strb	r3, [r6, #8]
  2028b6:	f886 a009 	strb.w	sl, [r6, #9]
class CANMotor : public CANDevice
  2028ba:	8173      	strh	r3, [r6, #10]
			slave->can_motor_ = CANMotor(slave_id);
			slave->can_servo_ = CANServo(slave_id, data[0]);
  2028bc:	f899 8000 	ldrb.w	r8, [r9]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  2028c0:	f1b8 0f00 	cmp.w	r8, #0
  2028c4:	f000 8101 	beq.w	202aca <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x2c6>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  2028c8:	eb08 0e48 	add.w	lr, r8, r8, lsl #1
  2028cc:	ea4f 04ce 	mov.w	r4, lr, lsl #3
  2028d0:	4620      	mov	r0, r4
  2028d2:	f011 fbfa 	bl	2140ca <_Znwj>
  2028d6:	4684      	mov	ip, r0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  2028d8:	eb00 0e04 	add.w	lr, r0, r4
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
	  typedef typename iterator_traits<_ForwardIterator>::value_type
	    _ValueType;

	  return std::fill_n(__first, __n, _ValueType());
  2028dc:	2300      	movs	r3, #0
  2028de:	9350      	str	r3, [sp, #320]	; 0x140
  2028e0:	9351      	str	r3, [sp, #324]	; 0x144
  2028e2:	9352      	str	r3, [sp, #328]	; 0x148
  2028e4:	9353      	str	r3, [sp, #332]	; 0x14c
  2028e6:	9354      	str	r3, [sp, #336]	; 0x150
  2028e8:	9355      	str	r3, [sp, #340]	; 0x154
  2028ea:	f100 0718 	add.w	r7, r0, #24
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
	   __niter > 0; --__niter, ++__first)
	*__first = __value;
  2028ee:	ac50      	add	r4, sp, #320	; 0x140
  2028f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  2028f2:	f847 0c18 	str.w	r0, [r7, #-24]
  2028f6:	f847 1c14 	str.w	r1, [r7, #-20]
  2028fa:	f847 2c10 	str.w	r2, [r7, #-16]
  2028fe:	f847 3c0c 	str.w	r3, [r7, #-12]
  202902:	6820      	ldr	r0, [r4, #0]
  202904:	f847 0c08 	str.w	r0, [r7, #-8]
  202908:	88a2      	ldrh	r2, [r4, #4]
  20290a:	79a3      	ldrb	r3, [r4, #6]
  20290c:	f827 2c04 	strh.w	r2, [r7, #-4]
  202910:	f807 3c02 	strb.w	r3, [r7, #-2]
  202914:	3718      	adds	r7, #24
	   __niter > 0; --__niter, ++__first)
  202916:	f1b8 0801 	subs.w	r8, r8, #1
  20291a:	d1e8      	bne.n	2028ee <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0xea>
  20291c:	2302      	movs	r3, #2
  20291e:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
  202922:	f886 a131 	strb.w	sl, [r6, #305]	; 0x131
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  202926:	f8d6 0134 	ldr.w	r0, [r6, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  20292a:	f8c6 c134 	str.w	ip, [r6, #308]	; 0x134
  20292e:	f8c6 e138 	str.w	lr, [r6, #312]	; 0x138
  202932:	f8c6 e13c 	str.w	lr, [r6, #316]	; 0x13c
	if (__p)
  202936:	b108      	cbz	r0, 20293c <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x138>
      { ::operator delete(__p); }
  202938:	f011 fb97 	bl	21406a <_ZdlPv>
			slave->can_imu_ = CANIMU(slave_id, (data[1] != 0) ? true : false);
  20293c:	f899 4001 	ldrb.w	r4, [r9, #1]
  202940:	3400      	adds	r4, #0
  202942:	bf18      	it	ne
  202944:	2401      	movne	r4, #1
	CANDevice(uint8_t device_id, uint8_t slave_id):m_device_id(device_id), m_slave_id(slave_id){}
  202946:	4b64      	ldr	r3, [pc, #400]	; (202ad8 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x2d4>)
  202948:	9300      	str	r3, [sp, #0]
  20294a:	2301      	movs	r3, #1
  20294c:	f88d 3004 	strb.w	r3, [sp, #4]
  202950:	f88d a005 	strb.w	sl, [sp, #5]
	CANIMU(uint8_t slave_id, bool send_data_flag) : CANDevice(CAN::DEVICEID_IMU, slave_id), IMU(), send_data_flag_(send_data_flag){}
  202954:	a802      	add	r0, sp, #8
  202956:	f008 f9c3 	bl	20ace0 <_ZN3IMUC1Ev>
  20295a:	f88d 411e 	strb.w	r4, [sp, #286]	; 0x11e
class CANDevice
  20295e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  202962:	7433      	strb	r3, [r6, #16]
  202964:	f89d 3005 	ldrb.w	r3, [sp, #5]
  202968:	7473      	strb	r3, [r6, #17]
  20296a:	f89d 300c 	ldrb.w	r3, [sp, #12]
  20296e:	7633      	strb	r3, [r6, #24]
  202970:	f106 031c 	add.w	r3, r6, #28
  202974:	aa04      	add	r2, sp, #16
  202976:	ca07      	ldmia	r2, {r0, r1, r2}
  202978:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20297c:	f106 0328 	add.w	r3, r6, #40	; 0x28
  202980:	aa07      	add	r2, sp, #28
  202982:	ca07      	ldmia	r2, {r0, r1, r2}
  202984:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202988:	f106 0334 	add.w	r3, r6, #52	; 0x34
  20298c:	aa0a      	add	r2, sp, #40	; 0x28
  20298e:	ca07      	ldmia	r2, {r0, r1, r2}
  202990:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202994:	f106 0340 	add.w	r3, r6, #64	; 0x40
  202998:	aa0d      	add	r2, sp, #52	; 0x34
  20299a:	ca07      	ldmia	r2, {r0, r1, r2}
  20299c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2029a0:	f106 034c 	add.w	r3, r6, #76	; 0x4c
  2029a4:	aa10      	add	r2, sp, #64	; 0x40
  2029a6:	ca07      	ldmia	r2, {r0, r1, r2}
  2029a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2029ac:	f106 0358 	add.w	r3, r6, #88	; 0x58
  2029b0:	aa13      	add	r2, sp, #76	; 0x4c
  2029b2:	ca07      	ldmia	r2, {r0, r1, r2}
  2029b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2029b8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  2029bc:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
  2029c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  2029c2:	66b3      	str	r3, [r6, #104]	; 0x68
  2029c4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  2029c6:	66f3      	str	r3, [r6, #108]	; 0x6c
  2029c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  2029ca:	6733      	str	r3, [r6, #112]	; 0x70
  2029cc:	f106 0374 	add.w	r3, r6, #116	; 0x74
  2029d0:	aa1a      	add	r2, sp, #104	; 0x68
  2029d2:	ca07      	ldmia	r2, {r0, r1, r2}
  2029d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2029d8:	f106 0380 	add.w	r3, r6, #128	; 0x80
  2029dc:	aa1d      	add	r2, sp, #116	; 0x74
  2029de:	ca07      	ldmia	r2, {r0, r1, r2}
  2029e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2029e4:	f106 038c 	add.w	r3, r6, #140	; 0x8c
  2029e8:	aa20      	add	r2, sp, #128	; 0x80
  2029ea:	ca07      	ldmia	r2, {r0, r1, r2}
  2029ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2029f0:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  2029f4:	f8a6 3098 	strh.w	r3, [r6, #152]	; 0x98
  2029f8:	f106 039c 	add.w	r3, r6, #156	; 0x9c
  2029fc:	aa24      	add	r2, sp, #144	; 0x90
  2029fe:	ca07      	ldmia	r2, {r0, r1, r2}
  202a00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202a04:	f106 03a8 	add.w	r3, r6, #168	; 0xa8
  202a08:	aa27      	add	r2, sp, #156	; 0x9c
  202a0a:	ca07      	ldmia	r2, {r0, r1, r2}
  202a0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202a10:	f106 03b4 	add.w	r3, r6, #180	; 0xb4
  202a14:	aa2a      	add	r2, sp, #168	; 0xa8
  202a16:	ca07      	ldmia	r2, {r0, r1, r2}
  202a18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202a1c:	f106 03c0 	add.w	r3, r6, #192	; 0xc0
  202a20:	aa2d      	add	r2, sp, #180	; 0xb4
  202a22:	ca07      	ldmia	r2, {r0, r1, r2}
  202a24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202a28:	f106 03cc 	add.w	r3, r6, #204	; 0xcc
  202a2c:	aa30      	add	r2, sp, #192	; 0xc0
  202a2e:	ca07      	ldmia	r2, {r0, r1, r2}
  202a30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202a34:	f106 03d8 	add.w	r3, r6, #216	; 0xd8
  202a38:	aa33      	add	r2, sp, #204	; 0xcc
  202a3a:	ca07      	ldmia	r2, {r0, r1, r2}
  202a3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202a40:	f106 03e4 	add.w	r3, r6, #228	; 0xe4
  202a44:	aa36      	add	r2, sp, #216	; 0xd8
  202a46:	ca07      	ldmia	r2, {r0, r1, r2}
  202a48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202a4c:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
  202a50:	f886 30f0 	strb.w	r3, [r6, #240]	; 0xf0
  202a54:	f106 03f4 	add.w	r3, r6, #244	; 0xf4
  202a58:	aa3a      	add	r2, sp, #232	; 0xe8
  202a5a:	ca07      	ldmia	r2, {r0, r1, r2}
  202a5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202a60:	f506 7380 	add.w	r3, r6, #256	; 0x100
  202a64:	aa3d      	add	r2, sp, #244	; 0xf4
  202a66:	ca07      	ldmia	r2, {r0, r1, r2}
  202a68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202a6c:	f506 7386 	add.w	r3, r6, #268	; 0x10c
  202a70:	aa40      	add	r2, sp, #256	; 0x100
  202a72:	ca07      	ldmia	r2, {r0, r1, r2}
  202a74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
class CANIMU : public CANDevice, public IMU {
  202a78:	f8bd 310c 	ldrh.w	r3, [sp, #268]	; 0x10c
  202a7c:	f8a6 3118 	strh.w	r3, [r6, #280]	; 0x118
  202a80:	f8bd 310e 	ldrh.w	r3, [sp, #270]	; 0x10e
  202a84:	f8a6 311a 	strh.w	r3, [r6, #282]	; 0x11a
  202a88:	f8bd 3110 	ldrh.w	r3, [sp, #272]	; 0x110
  202a8c:	f8a6 311c 	strh.w	r3, [r6, #284]	; 0x11c
  202a90:	f8bd 3112 	ldrh.w	r3, [sp, #274]	; 0x112
  202a94:	f8a6 311e 	strh.w	r3, [r6, #286]	; 0x11e
  202a98:	f8bd 3114 	ldrh.w	r3, [sp, #276]	; 0x114
  202a9c:	f8a6 3120 	strh.w	r3, [r6, #288]	; 0x120
  202aa0:	f8bd 3116 	ldrh.w	r3, [sp, #278]	; 0x116
  202aa4:	f8a6 3122 	strh.w	r3, [r6, #290]	; 0x122
  202aa8:	f8bd 3118 	ldrh.w	r3, [sp, #280]	; 0x118
  202aac:	f8a6 3124 	strh.w	r3, [r6, #292]	; 0x124
  202ab0:	f8bd 311a 	ldrh.w	r3, [sp, #282]	; 0x11a
  202ab4:	f8a6 3126 	strh.w	r3, [r6, #294]	; 0x126
  202ab8:	f8bd 311c 	ldrh.w	r3, [sp, #284]	; 0x11c
  202abc:	f8a6 3128 	strh.w	r3, [r6, #296]	; 0x128
  202ac0:	f89d 311e 	ldrb.w	r3, [sp, #286]	; 0x11e
  202ac4:	f886 312a 	strb.w	r3, [r6, #298]	; 0x12a
		}
		break;
  202ac8:	e0bb      	b.n	202c42 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x43e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  202aca:	f04f 0c00 	mov.w	ip, #0
  202ace:	46e6      	mov	lr, ip
  202ad0:	e724      	b.n	20291c <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x118>
  202ad2:	bf00      	nop
  202ad4:	00216c1c 	.word	0x00216c1c
  202ad8:	00216d30 	.word	0x00216d30
  202adc:	00216b90 	.word	0x00216b90
  202ae0:	00216c54 	.word	0x00216c54
	case CAN::MESSAGEID_SEND_INITIAL_CONFIG_1:
		{
			auto slave = std::find(neuron_.begin(), neuron_.end(), Neuron(slave_id));
  202ae4:	6883      	ldr	r3, [r0, #8]
  202ae6:	681d      	ldr	r5, [r3, #0]
  202ae8:	685e      	ldr	r6, [r3, #4]
  202aea:	f88d 1000 	strb.w	r1, [sp]
	CANMotor(){}
  202aee:	4b5a      	ldr	r3, [pc, #360]	; (202c58 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x454>)
  202af0:	9301      	str	r3, [sp, #4]
	CANDevice(){}
  202af2:	4b5a      	ldr	r3, [pc, #360]	; (202c5c <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x458>)
  202af4:	9303      	str	r3, [sp, #12]
	CANIMU(){}
  202af6:	a805      	add	r0, sp, #20
  202af8:	f008 f8f2 	bl	20ace0 <_ZN3IMUC1Ev>
  202afc:	4b58      	ldr	r3, [pc, #352]	; (202c60 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x45c>)
  202afe:	9303      	str	r3, [sp, #12]
  202b00:	3314      	adds	r3, #20
  202b02:	9305      	str	r3, [sp, #20]
	CANServo(){}
  202b04:	4f57      	ldr	r7, [pc, #348]	; (202c64 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x460>)
  202b06:	974b      	str	r7, [sp, #300]	; 0x12c
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  202b08:	2300      	movs	r3, #0
  202b0a:	934d      	str	r3, [sp, #308]	; 0x134
  202b0c:	934e      	str	r3, [sp, #312]	; 0x138
  202b0e:	934f      	str	r3, [sp, #316]	; 0x13c
  202b10:	466a      	mov	r2, sp
  202b12:	4631      	mov	r1, r6
  202b14:	4628      	mov	r0, r5
  202b16:	f7ff fe11 	bl	20273c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag>
  202b1a:	4605      	mov	r5, r0
class CANServo : public CANDevice
  202b1c:	974b      	str	r7, [sp, #300]	; 0x12c
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  202b1e:	984d      	ldr	r0, [sp, #308]	; 0x134
	if (__p)
  202b20:	b108      	cbz	r0, 202b26 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x322>
  202b22:	f011 faa2 	bl	21406a <_ZdlPv>
  202b26:	68a3      	ldr	r3, [r4, #8]
			if (slave == neuron_.end()) return;
  202b28:	685b      	ldr	r3, [r3, #4]
  202b2a:	42ab      	cmp	r3, r5
  202b2c:	f000 8089 	beq.w	202c42 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x43e>
			uint8_t servo_index = data[0];
			slave->can_servo_.servo_[servo_index].id_ = data[1];
  202b30:	f899 3000 	ldrb.w	r3, [r9]
      { return *(this->_M_impl._M_start + __n); }
  202b34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  202b38:	00db      	lsls	r3, r3, #3
  202b3a:	f899 1001 	ldrb.w	r1, [r9, #1]
  202b3e:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
  202b42:	54d1      	strb	r1, [r2, r3]
			slave->can_servo_.servo_[servo_index].p_gain_ = (data[3] << 8) | data[2];
  202b44:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
  202b48:	441a      	add	r2, r3
  202b4a:	f899 0003 	ldrb.w	r0, [r9, #3]
  202b4e:	f899 1002 	ldrb.w	r1, [r9, #2]
  202b52:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  202b56:	8051      	strh	r1, [r2, #2]
			slave->can_servo_.servo_[servo_index].i_gain_ = (data[5] << 8) | data[4];
  202b58:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
  202b5c:	441a      	add	r2, r3
  202b5e:	f899 0005 	ldrb.w	r0, [r9, #5]
  202b62:	f899 1004 	ldrb.w	r1, [r9, #4]
  202b66:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  202b6a:	8091      	strh	r1, [r2, #4]
			slave->can_servo_.servo_[servo_index].d_gain_ = (data[7] << 8) | data[6];
  202b6c:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
  202b70:	4413      	add	r3, r2
  202b72:	f899 1007 	ldrb.w	r1, [r9, #7]
  202b76:	f899 2006 	ldrb.w	r2, [r9, #6]
  202b7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  202b7e:	80da      	strh	r2, [r3, #6]
		}
		break;
  202b80:	e05f      	b.n	202c42 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x43e>
	case CAN::MESSAGEID_SEND_INITIAL_CONFIG_2:
		{
			auto slave = std::find(neuron_.begin(), neuron_.end(), Neuron(slave_id));
  202b82:	6883      	ldr	r3, [r0, #8]
  202b84:	681d      	ldr	r5, [r3, #0]
  202b86:	685e      	ldr	r6, [r3, #4]
  202b88:	f88d 1000 	strb.w	r1, [sp]
  202b8c:	4b32      	ldr	r3, [pc, #200]	; (202c58 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x454>)
  202b8e:	9301      	str	r3, [sp, #4]
  202b90:	4b32      	ldr	r3, [pc, #200]	; (202c5c <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x458>)
  202b92:	9303      	str	r3, [sp, #12]
  202b94:	a805      	add	r0, sp, #20
  202b96:	f008 f8a3 	bl	20ace0 <_ZN3IMUC1Ev>
  202b9a:	4b31      	ldr	r3, [pc, #196]	; (202c60 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x45c>)
  202b9c:	9303      	str	r3, [sp, #12]
  202b9e:	3314      	adds	r3, #20
  202ba0:	9305      	str	r3, [sp, #20]
	CANServo(){}
  202ba2:	4f30      	ldr	r7, [pc, #192]	; (202c64 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x460>)
  202ba4:	974b      	str	r7, [sp, #300]	; 0x12c
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  202ba6:	2300      	movs	r3, #0
  202ba8:	934d      	str	r3, [sp, #308]	; 0x134
  202baa:	934e      	str	r3, [sp, #312]	; 0x138
  202bac:	934f      	str	r3, [sp, #316]	; 0x13c
  202bae:	466a      	mov	r2, sp
  202bb0:	4631      	mov	r1, r6
  202bb2:	4628      	mov	r0, r5
  202bb4:	f7ff fdc2 	bl	20273c <_ZSt9__find_ifIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops16_Iter_equals_valIKS2_EEET_SC_SC_T0_St26random_access_iterator_tag>
  202bb8:	4605      	mov	r5, r0
class CANServo : public CANDevice
  202bba:	974b      	str	r7, [sp, #300]	; 0x12c
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  202bbc:	984d      	ldr	r0, [sp, #308]	; 0x134
	if (__p)
  202bbe:	b108      	cbz	r0, 202bc4 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x3c0>
  202bc0:	f011 fa53 	bl	21406a <_ZdlPv>
  202bc4:	68a3      	ldr	r3, [r4, #8]
			if (slave == neuron_.end()) return;
  202bc6:	685b      	ldr	r3, [r3, #4]
  202bc8:	42ab      	cmp	r3, r5
  202bca:	d03a      	beq.n	202c42 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x43e>
			uint8_t servo_index = data[0];
			slave->can_servo_.servo_[servo_index].present_position_ = (data[2] << 8) | data[1];
  202bcc:	f899 3000 	ldrb.w	r3, [r9]
      { return *(this->_M_impl._M_start + __n); }
  202bd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  202bd4:	00db      	lsls	r3, r3, #3
  202bd6:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
  202bda:	441a      	add	r2, r3
  202bdc:	f899 0002 	ldrb.w	r0, [r9, #2]
  202be0:	f899 1001 	ldrb.w	r1, [r9, #1]
  202be4:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  202be8:	8111      	strh	r1, [r2, #8]
			slave->can_servo_.servo_[servo_index].goal_position_ = (data[2] << 8) | data[1];
  202bea:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
  202bee:	441a      	add	r2, r3
  202bf0:	f899 0002 	ldrb.w	r0, [r9, #2]
  202bf4:	f899 1001 	ldrb.w	r1, [r9, #1]
  202bf8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  202bfc:	8151      	strh	r1, [r2, #10]
			slave->can_servo_.servo_[servo_index].profile_velocity_ = (data[4] << 8) | data[3];
  202bfe:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
  202c02:	441a      	add	r2, r3
  202c04:	f899 0004 	ldrb.w	r0, [r9, #4]
  202c08:	f899 1003 	ldrb.w	r1, [r9, #3]
  202c0c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  202c10:	8191      	strh	r1, [r2, #12]
			slave->can_servo_.servo_[servo_index].current_limit_ = (data[6] << 8) | data[5];
  202c12:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
  202c16:	441a      	add	r2, r3
  202c18:	f899 0006 	ldrb.w	r0, [r9, #6]
  202c1c:	f899 1005 	ldrb.w	r1, [r9, #5]
  202c20:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  202c24:	8211      	strh	r1, [r2, #16]
			slave->can_servo_.servo_[servo_index].send_data_flag_ = data[7];
  202c26:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
  202c2a:	441a      	add	r2, r3
  202c2c:	f899 1007 	ldrb.w	r1, [r9, #7]
  202c30:	3100      	adds	r1, #0
  202c32:	bf18      	it	ne
  202c34:	2101      	movne	r1, #1
  202c36:	7551      	strb	r1, [r2, #21]
			slave->can_servo_.servo_[servo_index].torque_enable_ = true;
  202c38:	f8d5 2134 	ldr.w	r2, [r5, #308]	; 0x134
  202c3c:	4413      	add	r3, r2
  202c3e:	2201      	movs	r2, #1
  202c40:	759a      	strb	r2, [r3, #22]
		}
		break;
	}
}
  202c42:	b056      	add	sp, #344	; 0x158
  202c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  202c48:	4b06      	ldr	r3, [pc, #24]	; (202c64 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x460>)
  202c4a:	934b      	str	r3, [sp, #300]	; 0x12c
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  202c4c:	984d      	ldr	r0, [sp, #308]	; 0x134
	if (__p)
  202c4e:	b108      	cbz	r0, 202c54 <_ZN14CANInitializer19receiveDataCallbackEhhmPh+0x450>
  202c50:	f011 fa0b 	bl	21406a <_ZdlPv>
  202c54:	f011 fc88 	bl	214568 <__cxa_end_cleanup>
  202c58:	00216c1c 	.word	0x00216c1c
  202c5c:	00216d30 	.word	0x00216d30
  202c60:	00216b90 	.word	0x00216b90
  202c64:	00216c54 	.word	0x00216c54

00202c68 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
  202c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  202c6c:	b0e1      	sub	sp, #388	; 0x184
  202c6e:	4605      	mov	r5, r0
class Neuron {
  202c70:	f890 8000 	ldrb.w	r8, [r0]
  202c74:	f88d 8040 	strb.w	r8, [sp, #64]	; 0x40
class CANDevice
  202c78:	f890 b008 	ldrb.w	fp, [r0, #8]
  202c7c:	f88d b048 	strb.w	fp, [sp, #72]	; 0x48
  202c80:	f890 a009 	ldrb.w	sl, [r0, #9]
  202c84:	f88d a049 	strb.w	sl, [sp, #73]	; 0x49
class CANMotor : public CANDevice
  202c88:	4b72      	ldr	r3, [pc, #456]	; (202e54 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x1ec>)
  202c8a:	9311      	str	r3, [sp, #68]	; 0x44
  202c8c:	f8b0 900a 	ldrh.w	r9, [r0, #10]
  202c90:	f8ad 904a 	strh.w	r9, [sp, #74]	; 0x4a
  202c94:	7c03      	ldrb	r3, [r0, #16]
  202c96:	9306      	str	r3, [sp, #24]
  202c98:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
  202c9c:	7c43      	ldrb	r3, [r0, #17]
  202c9e:	9307      	str	r3, [sp, #28]
  202ca0:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  202ca4:	7e03      	ldrb	r3, [r0, #24]
  202ca6:	9309      	str	r3, [sp, #36]	; 0x24
  202ca8:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
  202cac:	ab17      	add	r3, sp, #92	; 0x5c
  202cae:	f100 021c 	add.w	r2, r0, #28
  202cb2:	ca07      	ldmia	r2, {r0, r1, r2}
  202cb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202cb8:	ab1a      	add	r3, sp, #104	; 0x68
  202cba:	f105 0228 	add.w	r2, r5, #40	; 0x28
  202cbe:	ca07      	ldmia	r2, {r0, r1, r2}
  202cc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202cc4:	ab1d      	add	r3, sp, #116	; 0x74
  202cc6:	f105 0234 	add.w	r2, r5, #52	; 0x34
  202cca:	ca07      	ldmia	r2, {r0, r1, r2}
  202ccc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202cd0:	ab20      	add	r3, sp, #128	; 0x80
  202cd2:	f105 0240 	add.w	r2, r5, #64	; 0x40
  202cd6:	ca07      	ldmia	r2, {r0, r1, r2}
  202cd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202cdc:	ab23      	add	r3, sp, #140	; 0x8c
  202cde:	f105 024c 	add.w	r2, r5, #76	; 0x4c
  202ce2:	ca07      	ldmia	r2, {r0, r1, r2}
  202ce4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202ce8:	ab26      	add	r3, sp, #152	; 0x98
  202cea:	f105 0258 	add.w	r2, r5, #88	; 0x58
  202cee:	ca07      	ldmia	r2, {r0, r1, r2}
  202cf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202cf4:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
  202cf8:	930a      	str	r3, [sp, #40]	; 0x28
  202cfa:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
  202cfe:	6eab      	ldr	r3, [r5, #104]	; 0x68
  202d00:	930b      	str	r3, [sp, #44]	; 0x2c
  202d02:	932a      	str	r3, [sp, #168]	; 0xa8
  202d04:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  202d06:	930c      	str	r3, [sp, #48]	; 0x30
  202d08:	932b      	str	r3, [sp, #172]	; 0xac
  202d0a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  202d0c:	930d      	str	r3, [sp, #52]	; 0x34
  202d0e:	932c      	str	r3, [sp, #176]	; 0xb0
  202d10:	ab2d      	add	r3, sp, #180	; 0xb4
  202d12:	f105 0274 	add.w	r2, r5, #116	; 0x74
  202d16:	ca07      	ldmia	r2, {r0, r1, r2}
  202d18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202d1c:	ab30      	add	r3, sp, #192	; 0xc0
  202d1e:	f105 0280 	add.w	r2, r5, #128	; 0x80
  202d22:	ca07      	ldmia	r2, {r0, r1, r2}
  202d24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202d28:	ab33      	add	r3, sp, #204	; 0xcc
  202d2a:	f105 028c 	add.w	r2, r5, #140	; 0x8c
  202d2e:	ca07      	ldmia	r2, {r0, r1, r2}
  202d30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202d34:	f8b5 3098 	ldrh.w	r3, [r5, #152]	; 0x98
  202d38:	930e      	str	r3, [sp, #56]	; 0x38
  202d3a:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
  202d3e:	ab37      	add	r3, sp, #220	; 0xdc
  202d40:	f105 029c 	add.w	r2, r5, #156	; 0x9c
  202d44:	ca07      	ldmia	r2, {r0, r1, r2}
  202d46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202d4a:	ab3a      	add	r3, sp, #232	; 0xe8
  202d4c:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
  202d50:	ca07      	ldmia	r2, {r0, r1, r2}
  202d52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202d56:	ab3d      	add	r3, sp, #244	; 0xf4
  202d58:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
  202d5c:	ca07      	ldmia	r2, {r0, r1, r2}
  202d5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202d62:	ab40      	add	r3, sp, #256	; 0x100
  202d64:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
  202d68:	ca07      	ldmia	r2, {r0, r1, r2}
  202d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202d6e:	ab43      	add	r3, sp, #268	; 0x10c
  202d70:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
  202d74:	ca07      	ldmia	r2, {r0, r1, r2}
  202d76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202d7a:	ab46      	add	r3, sp, #280	; 0x118
  202d7c:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
  202d80:	ca07      	ldmia	r2, {r0, r1, r2}
  202d82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202d86:	ab49      	add	r3, sp, #292	; 0x124
  202d88:	f105 02e4 	add.w	r2, r5, #228	; 0xe4
  202d8c:	ca07      	ldmia	r2, {r0, r1, r2}
  202d8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202d92:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
  202d96:	930f      	str	r3, [sp, #60]	; 0x3c
  202d98:	f88d 3130 	strb.w	r3, [sp, #304]	; 0x130
  202d9c:	ab4d      	add	r3, sp, #308	; 0x134
  202d9e:	f105 02f4 	add.w	r2, r5, #244	; 0xf4
  202da2:	ca07      	ldmia	r2, {r0, r1, r2}
  202da4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202da8:	ab50      	add	r3, sp, #320	; 0x140
  202daa:	f505 7280 	add.w	r2, r5, #256	; 0x100
  202dae:	ca07      	ldmia	r2, {r0, r1, r2}
  202db0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202db4:	ab53      	add	r3, sp, #332	; 0x14c
  202db6:	f505 7286 	add.w	r2, r5, #268	; 0x10c
  202dba:	ca07      	ldmia	r2, {r0, r1, r2}
  202dbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
class CANIMU : public CANDevice, public IMU {
  202dc0:	4b25      	ldr	r3, [pc, #148]	; (202e58 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x1f0>)
  202dc2:	9313      	str	r3, [sp, #76]	; 0x4c
  202dc4:	3314      	adds	r3, #20
  202dc6:	9315      	str	r3, [sp, #84]	; 0x54
  202dc8:	f505 738c 	add.w	r3, r5, #280	; 0x118
  202dcc:	e893 0003 	ldmia.w	r3, {r0, r1}
  202dd0:	9056      	str	r0, [sp, #344]	; 0x158
  202dd2:	f8ad 115c 	strh.w	r1, [sp, #348]	; 0x15c
  202dd6:	f8d5 211e 	ldr.w	r2, [r5, #286]	; 0x11e
  202dda:	f8cd 215e 	str.w	r2, [sp, #350]	; 0x15e
  202dde:	f8b5 3122 	ldrh.w	r3, [r5, #290]	; 0x122
  202de2:	f8ad 3162 	strh.w	r3, [sp, #354]	; 0x162
  202de6:	f505 7392 	add.w	r3, r5, #292	; 0x124
  202dea:	e893 0003 	ldmia.w	r3, {r0, r1}
  202dee:	9059      	str	r0, [sp, #356]	; 0x164
  202df0:	f8ad 1168 	strh.w	r1, [sp, #360]	; 0x168
  202df4:	f895 312a 	ldrb.w	r3, [r5, #298]	; 0x12a
  202df8:	9308      	str	r3, [sp, #32]
  202dfa:	f88d 316a 	strb.w	r3, [sp, #362]	; 0x16a
  202dfe:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
  202e02:	9301      	str	r3, [sp, #4]
  202e04:	f88d 3170 	strb.w	r3, [sp, #368]	; 0x170
  202e08:	f895 3131 	ldrb.w	r3, [r5, #305]	; 0x131
  202e0c:	9302      	str	r3, [sp, #8]
  202e0e:	f88d 3171 	strb.w	r3, [sp, #369]	; 0x171
  202e12:	4b12      	ldr	r3, [pc, #72]	; (202e5c <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x1f4>)
  202e14:	935b      	str	r3, [sp, #364]	; 0x16c
  202e16:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
  202e1a:	9303      	str	r3, [sp, #12]
  202e1c:	935d      	str	r3, [sp, #372]	; 0x174
      __b = _GLIBCXX_MOVE(__tmp);
  202e1e:	2300      	movs	r3, #0
  202e20:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  202e24:	f8d5 2138 	ldr.w	r2, [r5, #312]	; 0x138
  202e28:	9204      	str	r2, [sp, #16]
  202e2a:	925e      	str	r2, [sp, #376]	; 0x178
      __b = _GLIBCXX_MOVE(__tmp);
  202e2c:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  202e30:	f8d5 213c 	ldr.w	r2, [r5, #316]	; 0x13c
  202e34:	9205      	str	r2, [sp, #20]
  202e36:	925f      	str	r2, [sp, #380]	; 0x17c
      __b = _GLIBCXX_MOVE(__tmp);
  202e38:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
	--_M_current;
  202e3c:	f5a5 74a0 	sub.w	r4, r5, #320	; 0x140
		return this->slave_id_ < right.slave_id_;
  202e40:	7823      	ldrb	r3, [r4, #0]
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
  202e42:	4598      	cmp	r8, r3
  202e44:	f280 8107 	bge.w	203056 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x3ee>
  202e48:	4647      	mov	r7, r8
  202e4a:	f505 7592 	add.w	r5, r5, #292	; 0x124
  202e4e:	2600      	movs	r6, #0
  202e50:	e032      	b.n	202eb8 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x250>
  202e52:	bf00      	nop
  202e54:	00216c1c 	.word	0x00216c1c
  202e58:	00216b90 	.word	0x00216b90
  202e5c:	00216c54 	.word	0x00216c54
  202e60:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
  202e64:	f884 326a 	strb.w	r3, [r4, #618]	; 0x26a
  202e68:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
  202e6c:	f884 3270 	strb.w	r3, [r4, #624]	; 0x270
  202e70:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
  202e74:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  202e78:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
      __a = _GLIBCXX_MOVE(__b);
  202e7c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
  202e80:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      __b = _GLIBCXX_MOVE(__tmp);
  202e84:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  202e88:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
  202e8c:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
      __b = _GLIBCXX_MOVE(__tmp);
  202e90:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  202e94:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
  202e98:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
      __b = _GLIBCXX_MOVE(__tmp);
  202e9c:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
  202ea0:	b108      	cbz	r0, 202ea6 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x23e>
  202ea2:	f011 f8e2 	bl	21406a <_ZdlPv>
  202ea6:	f5a4 72a0 	sub.w	r2, r4, #320	; 0x140
  202eaa:	7813      	ldrb	r3, [r2, #0]
  202eac:	f5a5 75a0 	sub.w	r5, r5, #320	; 0x140
  202eb0:	42bb      	cmp	r3, r7
  202eb2:	f340 80cf 	ble.w	203054 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x3ec>
  202eb6:	4614      	mov	r4, r2
class Neuron {
  202eb8:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  202ebc:	7a23      	ldrb	r3, [r4, #8]
  202ebe:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
  202ec2:	7a63      	ldrb	r3, [r4, #9]
  202ec4:	f884 3149 	strb.w	r3, [r4, #329]	; 0x149
  202ec8:	8963      	ldrh	r3, [r4, #10]
  202eca:	f8a4 314a 	strh.w	r3, [r4, #330]	; 0x14a
  202ece:	7c23      	ldrb	r3, [r4, #16]
  202ed0:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
  202ed4:	7c63      	ldrb	r3, [r4, #17]
  202ed6:	f884 3151 	strb.w	r3, [r4, #337]	; 0x151
  202eda:	7e23      	ldrb	r3, [r4, #24]
  202edc:	f884 3158 	strb.w	r3, [r4, #344]	; 0x158
  202ee0:	f504 73ae 	add.w	r3, r4, #348	; 0x15c
  202ee4:	f104 021c 	add.w	r2, r4, #28
  202ee8:	ca07      	ldmia	r2, {r0, r1, r2}
  202eea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202eee:	f504 73b4 	add.w	r3, r4, #360	; 0x168
  202ef2:	f104 0228 	add.w	r2, r4, #40	; 0x28
  202ef6:	ca07      	ldmia	r2, {r0, r1, r2}
  202ef8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202efc:	f504 73ba 	add.w	r3, r4, #372	; 0x174
  202f00:	f104 0234 	add.w	r2, r4, #52	; 0x34
  202f04:	ca07      	ldmia	r2, {r0, r1, r2}
  202f06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202f0a:	f504 73c0 	add.w	r3, r4, #384	; 0x180
  202f0e:	f104 0240 	add.w	r2, r4, #64	; 0x40
  202f12:	ca07      	ldmia	r2, {r0, r1, r2}
  202f14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202f18:	f504 73c6 	add.w	r3, r4, #396	; 0x18c
  202f1c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  202f20:	ca07      	ldmia	r2, {r0, r1, r2}
  202f22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202f26:	f504 73cc 	add.w	r3, r4, #408	; 0x198
  202f2a:	f104 0258 	add.w	r2, r4, #88	; 0x58
  202f2e:	ca07      	ldmia	r2, {r0, r1, r2}
  202f30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202f34:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
  202f38:	f884 31a4 	strb.w	r3, [r4, #420]	; 0x1a4
  202f3c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  202f3e:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
  202f42:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  202f44:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
  202f48:	6f23      	ldr	r3, [r4, #112]	; 0x70
  202f4a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  202f4e:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
  202f52:	f104 0274 	add.w	r2, r4, #116	; 0x74
  202f56:	ca07      	ldmia	r2, {r0, r1, r2}
  202f58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202f5c:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
  202f60:	f104 0280 	add.w	r2, r4, #128	; 0x80
  202f64:	ca07      	ldmia	r2, {r0, r1, r2}
  202f66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202f6a:	f504 73e6 	add.w	r3, r4, #460	; 0x1cc
  202f6e:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  202f72:	ca07      	ldmia	r2, {r0, r1, r2}
  202f74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202f78:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
  202f7c:	f8a4 31d8 	strh.w	r3, [r4, #472]	; 0x1d8
  202f80:	f504 73ee 	add.w	r3, r4, #476	; 0x1dc
  202f84:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  202f88:	ca07      	ldmia	r2, {r0, r1, r2}
  202f8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202f8e:	f504 73f4 	add.w	r3, r4, #488	; 0x1e8
  202f92:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
  202f96:	ca07      	ldmia	r2, {r0, r1, r2}
  202f98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202f9c:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
  202fa0:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
  202fa4:	ca07      	ldmia	r2, {r0, r1, r2}
  202fa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202faa:	f504 7300 	add.w	r3, r4, #512	; 0x200
  202fae:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
  202fb2:	ca07      	ldmia	r2, {r0, r1, r2}
  202fb4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202fb8:	f504 7303 	add.w	r3, r4, #524	; 0x20c
  202fbc:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
  202fc0:	ca07      	ldmia	r2, {r0, r1, r2}
  202fc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202fc6:	f504 7306 	add.w	r3, r4, #536	; 0x218
  202fca:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
  202fce:	ca07      	ldmia	r2, {r0, r1, r2}
  202fd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202fd4:	f504 7309 	add.w	r3, r4, #548	; 0x224
  202fd8:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
  202fdc:	ca07      	ldmia	r2, {r0, r1, r2}
  202fde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202fe2:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
  202fe6:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
  202fea:	f504 730d 	add.w	r3, r4, #564	; 0x234
  202fee:	f104 02f4 	add.w	r2, r4, #244	; 0xf4
  202ff2:	ca07      	ldmia	r2, {r0, r1, r2}
  202ff4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  202ff8:	f504 7310 	add.w	r3, r4, #576	; 0x240
  202ffc:	f504 7280 	add.w	r2, r4, #256	; 0x100
  203000:	ca07      	ldmia	r2, {r0, r1, r2}
  203002:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203006:	f504 7313 	add.w	r3, r4, #588	; 0x24c
  20300a:	f504 7286 	add.w	r2, r4, #268	; 0x10c
  20300e:	ca07      	ldmia	r2, {r0, r1, r2}
  203010:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203014:	f504 728b 	add.w	r2, r4, #278	; 0x116
  203018:	f204 205e 	addw	r0, r4, #606	; 0x25e
  20301c:	f504 7316 	add.w	r3, r4, #600	; 0x258
  203020:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
  203024:	f823 1b02 	strh.w	r1, [r3], #2
  203028:	4298      	cmp	r0, r3
  20302a:	d1f9      	bne.n	203020 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x3b8>
  20302c:	f504 728e 	add.w	r2, r4, #284	; 0x11c
  203030:	4628      	mov	r0, r5
  203032:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
  203036:	f823 1b02 	strh.w	r1, [r3], #2
  20303a:	4283      	cmp	r3, r0
  20303c:	d1f9      	bne.n	203032 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x3ca>
  20303e:	f504 7291 	add.w	r2, r4, #290	; 0x122
  203042:	f204 206a 	addw	r0, r4, #618	; 0x26a
  203046:	f932 1f02 	ldrsh.w	r1, [r2, #2]!
  20304a:	f823 1b02 	strh.w	r1, [r3], #2
  20304e:	4298      	cmp	r0, r3
  203050:	d1f9      	bne.n	203046 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x3de>
  203052:	e705      	b.n	202e60 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x1f8>
  203054:	4625      	mov	r5, r4
  203056:	f885 8000 	strb.w	r8, [r5]
  20305a:	f885 b008 	strb.w	fp, [r5, #8]
  20305e:	f885 a009 	strb.w	sl, [r5, #9]
  203062:	f8a5 900a 	strh.w	r9, [r5, #10]
  203066:	f89d 3018 	ldrb.w	r3, [sp, #24]
  20306a:	742b      	strb	r3, [r5, #16]
  20306c:	f89d 301c 	ldrb.w	r3, [sp, #28]
  203070:	746b      	strb	r3, [r5, #17]
  203072:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  203076:	762b      	strb	r3, [r5, #24]
  203078:	f105 031c 	add.w	r3, r5, #28
  20307c:	aa17      	add	r2, sp, #92	; 0x5c
  20307e:	ca07      	ldmia	r2, {r0, r1, r2}
  203080:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203084:	f105 0328 	add.w	r3, r5, #40	; 0x28
  203088:	aa1a      	add	r2, sp, #104	; 0x68
  20308a:	ca07      	ldmia	r2, {r0, r1, r2}
  20308c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203090:	f105 0334 	add.w	r3, r5, #52	; 0x34
  203094:	aa1d      	add	r2, sp, #116	; 0x74
  203096:	ca07      	ldmia	r2, {r0, r1, r2}
  203098:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20309c:	f105 0340 	add.w	r3, r5, #64	; 0x40
  2030a0:	aa20      	add	r2, sp, #128	; 0x80
  2030a2:	ca07      	ldmia	r2, {r0, r1, r2}
  2030a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2030a8:	f105 034c 	add.w	r3, r5, #76	; 0x4c
  2030ac:	aa23      	add	r2, sp, #140	; 0x8c
  2030ae:	ca07      	ldmia	r2, {r0, r1, r2}
  2030b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2030b4:	f105 0358 	add.w	r3, r5, #88	; 0x58
  2030b8:	aa26      	add	r2, sp, #152	; 0x98
  2030ba:	ca07      	ldmia	r2, {r0, r1, r2}
  2030bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2030c0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  2030c4:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
  2030c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  2030ca:	66ab      	str	r3, [r5, #104]	; 0x68
  2030cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  2030ce:	66eb      	str	r3, [r5, #108]	; 0x6c
  2030d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  2030d2:	672b      	str	r3, [r5, #112]	; 0x70
  2030d4:	f105 0374 	add.w	r3, r5, #116	; 0x74
  2030d8:	aa2d      	add	r2, sp, #180	; 0xb4
  2030da:	ca07      	ldmia	r2, {r0, r1, r2}
  2030dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2030e0:	f105 0380 	add.w	r3, r5, #128	; 0x80
  2030e4:	aa30      	add	r2, sp, #192	; 0xc0
  2030e6:	ca07      	ldmia	r2, {r0, r1, r2}
  2030e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2030ec:	f105 038c 	add.w	r3, r5, #140	; 0x8c
  2030f0:	aa33      	add	r2, sp, #204	; 0xcc
  2030f2:	ca07      	ldmia	r2, {r0, r1, r2}
  2030f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2030f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  2030fc:	f8a5 3098 	strh.w	r3, [r5, #152]	; 0x98
  203100:	f105 039c 	add.w	r3, r5, #156	; 0x9c
  203104:	aa37      	add	r2, sp, #220	; 0xdc
  203106:	ca07      	ldmia	r2, {r0, r1, r2}
  203108:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20310c:	f105 03a8 	add.w	r3, r5, #168	; 0xa8
  203110:	aa3a      	add	r2, sp, #232	; 0xe8
  203112:	ca07      	ldmia	r2, {r0, r1, r2}
  203114:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203118:	f105 03b4 	add.w	r3, r5, #180	; 0xb4
  20311c:	aa3d      	add	r2, sp, #244	; 0xf4
  20311e:	ca07      	ldmia	r2, {r0, r1, r2}
  203120:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203124:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
  203128:	aa40      	add	r2, sp, #256	; 0x100
  20312a:	ca07      	ldmia	r2, {r0, r1, r2}
  20312c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203130:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
  203134:	aa43      	add	r2, sp, #268	; 0x10c
  203136:	ca07      	ldmia	r2, {r0, r1, r2}
  203138:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20313c:	f105 03d8 	add.w	r3, r5, #216	; 0xd8
  203140:	aa46      	add	r2, sp, #280	; 0x118
  203142:	ca07      	ldmia	r2, {r0, r1, r2}
  203144:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203148:	f105 03e4 	add.w	r3, r5, #228	; 0xe4
  20314c:	aa49      	add	r2, sp, #292	; 0x124
  20314e:	ca07      	ldmia	r2, {r0, r1, r2}
  203150:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203154:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  203158:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
  20315c:	f105 03f4 	add.w	r3, r5, #244	; 0xf4
  203160:	aa4d      	add	r2, sp, #308	; 0x134
  203162:	ca07      	ldmia	r2, {r0, r1, r2}
  203164:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203168:	f505 7380 	add.w	r3, r5, #256	; 0x100
  20316c:	aa50      	add	r2, sp, #320	; 0x140
  20316e:	ca07      	ldmia	r2, {r0, r1, r2}
  203170:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203174:	f505 7386 	add.w	r3, r5, #268	; 0x10c
  203178:	aa53      	add	r2, sp, #332	; 0x14c
  20317a:	ca07      	ldmia	r2, {r0, r1, r2}
  20317c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203180:	f8bd 3158 	ldrh.w	r3, [sp, #344]	; 0x158
  203184:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
  203188:	f8bd 315a 	ldrh.w	r3, [sp, #346]	; 0x15a
  20318c:	f8a5 311a 	strh.w	r3, [r5, #282]	; 0x11a
  203190:	f8bd 315c 	ldrh.w	r3, [sp, #348]	; 0x15c
  203194:	f8a5 311c 	strh.w	r3, [r5, #284]	; 0x11c
  203198:	f8bd 315e 	ldrh.w	r3, [sp, #350]	; 0x15e
  20319c:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
  2031a0:	f8bd 3160 	ldrh.w	r3, [sp, #352]	; 0x160
  2031a4:	f8a5 3120 	strh.w	r3, [r5, #288]	; 0x120
  2031a8:	f8bd 3162 	ldrh.w	r3, [sp, #354]	; 0x162
  2031ac:	f8a5 3122 	strh.w	r3, [r5, #290]	; 0x122
  2031b0:	f8bd 3164 	ldrh.w	r3, [sp, #356]	; 0x164
  2031b4:	f8a5 3124 	strh.w	r3, [r5, #292]	; 0x124
  2031b8:	f8bd 3166 	ldrh.w	r3, [sp, #358]	; 0x166
  2031bc:	f8a5 3126 	strh.w	r3, [r5, #294]	; 0x126
  2031c0:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
  2031c4:	f8a5 3128 	strh.w	r3, [r5, #296]	; 0x128
  2031c8:	f89d 3020 	ldrb.w	r3, [sp, #32]
  2031cc:	f885 312a 	strb.w	r3, [r5, #298]	; 0x12a
  2031d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
  2031d4:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
  2031d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
  2031dc:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  2031e0:	f8d5 0134 	ldr.w	r0, [r5, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  2031e4:	9b03      	ldr	r3, [sp, #12]
  2031e6:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  2031ea:	2300      	movs	r3, #0
  2031ec:	935d      	str	r3, [sp, #372]	; 0x174
      __a = _GLIBCXX_MOVE(__b);
  2031ee:	9a04      	ldr	r2, [sp, #16]
  2031f0:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  2031f4:	935e      	str	r3, [sp, #376]	; 0x178
      __a = _GLIBCXX_MOVE(__b);
  2031f6:	9a05      	ldr	r2, [sp, #20]
  2031f8:	f8c5 213c 	str.w	r2, [r5, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  2031fc:	935f      	str	r3, [sp, #380]	; 0x17c
  2031fe:	b108      	cbz	r0, 203204 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_+0x59c>
  203200:	f010 ff33 	bl	21406a <_ZdlPv>
	  *__last = _GLIBCXX_MOVE(*__next);
	  __last = __next;
	  --__next;
	}
      *__last = _GLIBCXX_MOVE(__val);
    }
  203204:	b061      	add	sp, #388	; 0x184
  203206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  20320a:	bf00      	nop

0020320c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
  20320c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  203210:	b0e5      	sub	sp, #404	; 0x194
  203212:	9100      	str	r1, [sp, #0]
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
  203214:	4281      	cmp	r1, r0
  203216:	f000 82fb 	beq.w	203810 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x604>
  20321a:	4683      	mov	fp, r0
      { return __normal_iterator(_M_current + __n); }
  20321c:	f500 70a0 	add.w	r0, r0, #320	; 0x140

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
  203220:	4288      	cmp	r0, r1
  203222:	f000 82f5 	beq.w	203810 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x604>
  203226:	4682      	mov	sl, r0
  203228:	4b7f      	ldr	r3, [pc, #508]	; (203428 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x21c>)
  20322a:	3314      	adds	r3, #20
  20322c:	9313      	str	r3, [sp, #76]	; 0x4c
  20322e:	e1ec      	b.n	20360a <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x3fe>
  203230:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
  203234:	f884 326a 	strb.w	r3, [r4, #618]	; 0x26a
  203238:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
  20323c:	f884 3270 	strb.w	r3, [r4, #624]	; 0x270
  203240:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
  203244:	f884 3271 	strb.w	r3, [r4, #625]	; 0x271
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  203248:	f8d4 0274 	ldr.w	r0, [r4, #628]	; 0x274
      __a = _GLIBCXX_MOVE(__b);
  20324c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
  203250:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
      __b = _GLIBCXX_MOVE(__tmp);
  203254:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  203258:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
  20325c:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
      __b = _GLIBCXX_MOVE(__tmp);
  203260:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  203264:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
  203268:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
      __b = _GLIBCXX_MOVE(__tmp);
  20326c:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
  203270:	b108      	cbz	r0, 203276 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x6a>
  203272:	f010 fefa 	bl	21406a <_ZdlPv>
  203276:	f5a8 78a0 	sub.w	r8, r8, #320	; 0x140
  20327a:	f5a7 77a0 	sub.w	r7, r7, #320	; 0x140
	    *--__result = std::move(*--__last);
  20327e:	4623      	mov	r3, r4
	  for (__n = __last - __first; __n > 0; --__n)
  203280:	3d01      	subs	r5, #1
  203282:	f000 80d3 	beq.w	20342c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x220>
	    *--__result = std::move(*--__last);
  203286:	f5a3 74a0 	sub.w	r4, r3, #320	; 0x140
  20328a:	7822      	ldrb	r2, [r4, #0]
  20328c:	f884 2140 	strb.w	r2, [r4, #320]	; 0x140
  203290:	7a22      	ldrb	r2, [r4, #8]
  203292:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
  203296:	7a62      	ldrb	r2, [r4, #9]
  203298:	f884 2149 	strb.w	r2, [r4, #329]	; 0x149
  20329c:	8962      	ldrh	r2, [r4, #10]
  20329e:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
  2032a2:	7c22      	ldrb	r2, [r4, #16]
  2032a4:	f884 2150 	strb.w	r2, [r4, #336]	; 0x150
  2032a8:	7c62      	ldrb	r2, [r4, #17]
  2032aa:	f884 2151 	strb.w	r2, [r4, #337]	; 0x151
  2032ae:	7e22      	ldrb	r2, [r4, #24]
  2032b0:	f884 2158 	strb.w	r2, [r4, #344]	; 0x158
  2032b4:	f103 0e1c 	add.w	lr, r3, #28
  2032b8:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
  2032bc:	ca07      	ldmia	r2, {r0, r1, r2}
  2032be:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  2032c2:	f103 0e28 	add.w	lr, r3, #40	; 0x28
  2032c6:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
  2032ca:	ca07      	ldmia	r2, {r0, r1, r2}
  2032cc:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  2032d0:	f103 0e34 	add.w	lr, r3, #52	; 0x34
  2032d4:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
  2032d8:	ca07      	ldmia	r2, {r0, r1, r2}
  2032da:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  2032de:	f103 0e40 	add.w	lr, r3, #64	; 0x40
  2032e2:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
  2032e6:	ca07      	ldmia	r2, {r0, r1, r2}
  2032e8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  2032ec:	f103 0e4c 	add.w	lr, r3, #76	; 0x4c
  2032f0:	f1a3 02f4 	sub.w	r2, r3, #244	; 0xf4
  2032f4:	ca07      	ldmia	r2, {r0, r1, r2}
  2032f6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  2032fa:	f103 0e58 	add.w	lr, r3, #88	; 0x58
  2032fe:	f1a3 02e8 	sub.w	r2, r3, #232	; 0xe8
  203302:	ca07      	ldmia	r2, {r0, r1, r2}
  203304:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203308:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
  20330c:	f884 21a4 	strb.w	r2, [r4, #420]	; 0x1a4
  203310:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  203312:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
  203316:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  203318:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
  20331c:	6f22      	ldr	r2, [r4, #112]	; 0x70
  20331e:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
  203322:	f103 0e74 	add.w	lr, r3, #116	; 0x74
  203326:	f1a3 02cc 	sub.w	r2, r3, #204	; 0xcc
  20332a:	ca07      	ldmia	r2, {r0, r1, r2}
  20332c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203330:	f103 0e80 	add.w	lr, r3, #128	; 0x80
  203334:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
  203338:	ca07      	ldmia	r2, {r0, r1, r2}
  20333a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  20333e:	f103 0e8c 	add.w	lr, r3, #140	; 0x8c
  203342:	f1a3 02b4 	sub.w	r2, r3, #180	; 0xb4
  203346:	ca07      	ldmia	r2, {r0, r1, r2}
  203348:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  20334c:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
  203350:	f8a4 21d8 	strh.w	r2, [r4, #472]	; 0x1d8
  203354:	f103 0e9c 	add.w	lr, r3, #156	; 0x9c
  203358:	f1a3 02a4 	sub.w	r2, r3, #164	; 0xa4
  20335c:	ca07      	ldmia	r2, {r0, r1, r2}
  20335e:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203362:	f103 0ea8 	add.w	lr, r3, #168	; 0xa8
  203366:	f1a3 0298 	sub.w	r2, r3, #152	; 0x98
  20336a:	ca07      	ldmia	r2, {r0, r1, r2}
  20336c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203370:	f103 0eb4 	add.w	lr, r3, #180	; 0xb4
  203374:	f1a3 028c 	sub.w	r2, r3, #140	; 0x8c
  203378:	ca07      	ldmia	r2, {r0, r1, r2}
  20337a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  20337e:	f103 0ec0 	add.w	lr, r3, #192	; 0xc0
  203382:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
  203386:	ca07      	ldmia	r2, {r0, r1, r2}
  203388:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  20338c:	f103 0ecc 	add.w	lr, r3, #204	; 0xcc
  203390:	f1a3 0274 	sub.w	r2, r3, #116	; 0x74
  203394:	ca07      	ldmia	r2, {r0, r1, r2}
  203396:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  20339a:	f103 0ed8 	add.w	lr, r3, #216	; 0xd8
  20339e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
  2033a2:	ca07      	ldmia	r2, {r0, r1, r2}
  2033a4:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  2033a8:	f103 0ee4 	add.w	lr, r3, #228	; 0xe4
  2033ac:	f1a3 025c 	sub.w	r2, r3, #92	; 0x5c
  2033b0:	ca07      	ldmia	r2, {r0, r1, r2}
  2033b2:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  2033b6:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
  2033ba:	f884 2230 	strb.w	r2, [r4, #560]	; 0x230
  2033be:	f103 0ef4 	add.w	lr, r3, #244	; 0xf4
  2033c2:	f1a3 024c 	sub.w	r2, r3, #76	; 0x4c
  2033c6:	ca07      	ldmia	r2, {r0, r1, r2}
  2033c8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  2033cc:	f503 7e80 	add.w	lr, r3, #256	; 0x100
  2033d0:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
  2033d4:	ca07      	ldmia	r2, {r0, r1, r2}
  2033d6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  2033da:	f503 7e86 	add.w	lr, r3, #268	; 0x10c
  2033de:	f1a3 0234 	sub.w	r2, r3, #52	; 0x34
  2033e2:	ca07      	ldmia	r2, {r0, r1, r2}
  2033e4:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  2033e8:	f1a3 012a 	sub.w	r1, r3, #42	; 0x2a
  2033ec:	46be      	mov	lr, r7
  2033ee:	f503 728c 	add.w	r2, r3, #280	; 0x118
  2033f2:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  2033f6:	f822 0b02 	strh.w	r0, [r2], #2
  2033fa:	4572      	cmp	r2, lr
  2033fc:	d1f9      	bne.n	2033f2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x1e6>
  2033fe:	f1a3 0124 	sub.w	r1, r3, #36	; 0x24
  203402:	46c6      	mov	lr, r8
  203404:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  203408:	f822 0b02 	strh.w	r0, [r2], #2
  20340c:	4572      	cmp	r2, lr
  20340e:	d1f9      	bne.n	203404 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x1f8>
  203410:	f1a3 011e 	sub.w	r1, r3, #30
  203414:	f503 7395 	add.w	r3, r3, #298	; 0x12a
  203418:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  20341c:	f822 0b02 	strh.w	r0, [r2], #2
  203420:	429a      	cmp	r2, r3
  203422:	d1f9      	bne.n	203418 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x20c>
  203424:	e704      	b.n	203230 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x24>
  203426:	bf00      	nop
  203428:	00216b90 	.word	0x00216b90
  20342c:	f88b 9000 	strb.w	r9, [fp]
  203430:	f89d 3004 	ldrb.w	r3, [sp, #4]
  203434:	f88b 3008 	strb.w	r3, [fp, #8]
  203438:	f89d 3008 	ldrb.w	r3, [sp, #8]
  20343c:	f88b 3009 	strb.w	r3, [fp, #9]
  203440:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  203444:	f8ab 300a 	strh.w	r3, [fp, #10]
  203448:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  20344c:	f88b 3010 	strb.w	r3, [fp, #16]
  203450:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  203454:	f88b 3011 	strb.w	r3, [fp, #17]
  203458:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
  20345c:	f88b 3018 	strb.w	r3, [fp, #24]
  203460:	f10b 031c 	add.w	r3, fp, #28
  203464:	aa1b      	add	r2, sp, #108	; 0x6c
  203466:	ca07      	ldmia	r2, {r0, r1, r2}
  203468:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20346c:	f10b 0328 	add.w	r3, fp, #40	; 0x28
  203470:	aa1e      	add	r2, sp, #120	; 0x78
  203472:	ca07      	ldmia	r2, {r0, r1, r2}
  203474:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203478:	f10b 0334 	add.w	r3, fp, #52	; 0x34
  20347c:	aa21      	add	r2, sp, #132	; 0x84
  20347e:	ca07      	ldmia	r2, {r0, r1, r2}
  203480:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203484:	f10b 0340 	add.w	r3, fp, #64	; 0x40
  203488:	aa24      	add	r2, sp, #144	; 0x90
  20348a:	ca07      	ldmia	r2, {r0, r1, r2}
  20348c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203490:	f10b 034c 	add.w	r3, fp, #76	; 0x4c
  203494:	aa27      	add	r2, sp, #156	; 0x9c
  203496:	ca07      	ldmia	r2, {r0, r1, r2}
  203498:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20349c:	f10b 0358 	add.w	r3, fp, #88	; 0x58
  2034a0:	aa2a      	add	r2, sp, #168	; 0xa8
  2034a2:	ca07      	ldmia	r2, {r0, r1, r2}
  2034a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2034a8:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
  2034ac:	f88b 3064 	strb.w	r3, [fp, #100]	; 0x64
  2034b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  2034b2:	f8cb 3068 	str.w	r3, [fp, #104]	; 0x68
  2034b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  2034b8:	f8cb 306c 	str.w	r3, [fp, #108]	; 0x6c
  2034bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  2034be:	f8cb 3070 	str.w	r3, [fp, #112]	; 0x70
  2034c2:	f10b 0374 	add.w	r3, fp, #116	; 0x74
  2034c6:	aa31      	add	r2, sp, #196	; 0xc4
  2034c8:	ca07      	ldmia	r2, {r0, r1, r2}
  2034ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2034ce:	f10b 0380 	add.w	r3, fp, #128	; 0x80
  2034d2:	aa34      	add	r2, sp, #208	; 0xd0
  2034d4:	ca07      	ldmia	r2, {r0, r1, r2}
  2034d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2034da:	f10b 038c 	add.w	r3, fp, #140	; 0x8c
  2034de:	aa37      	add	r2, sp, #220	; 0xdc
  2034e0:	ca07      	ldmia	r2, {r0, r1, r2}
  2034e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2034e6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  2034ea:	f8ab 3098 	strh.w	r3, [fp, #152]	; 0x98
  2034ee:	f10b 039c 	add.w	r3, fp, #156	; 0x9c
  2034f2:	aa3b      	add	r2, sp, #236	; 0xec
  2034f4:	ca07      	ldmia	r2, {r0, r1, r2}
  2034f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2034fa:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
  2034fe:	aa3e      	add	r2, sp, #248	; 0xf8
  203500:	ca07      	ldmia	r2, {r0, r1, r2}
  203502:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203506:	f10b 03b4 	add.w	r3, fp, #180	; 0xb4
  20350a:	aa41      	add	r2, sp, #260	; 0x104
  20350c:	ca07      	ldmia	r2, {r0, r1, r2}
  20350e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203512:	f10b 03c0 	add.w	r3, fp, #192	; 0xc0
  203516:	aa44      	add	r2, sp, #272	; 0x110
  203518:	ca07      	ldmia	r2, {r0, r1, r2}
  20351a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20351e:	f10b 03cc 	add.w	r3, fp, #204	; 0xcc
  203522:	aa47      	add	r2, sp, #284	; 0x11c
  203524:	ca07      	ldmia	r2, {r0, r1, r2}
  203526:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20352a:	f10b 03d8 	add.w	r3, fp, #216	; 0xd8
  20352e:	aa4a      	add	r2, sp, #296	; 0x128
  203530:	ca07      	ldmia	r2, {r0, r1, r2}
  203532:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203536:	f10b 03e4 	add.w	r3, fp, #228	; 0xe4
  20353a:	aa4d      	add	r2, sp, #308	; 0x134
  20353c:	ca07      	ldmia	r2, {r0, r1, r2}
  20353e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203542:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
  203546:	f88b 30f0 	strb.w	r3, [fp, #240]	; 0xf0
  20354a:	f10b 03f4 	add.w	r3, fp, #244	; 0xf4
  20354e:	aa51      	add	r2, sp, #324	; 0x144
  203550:	ca07      	ldmia	r2, {r0, r1, r2}
  203552:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203556:	f50b 7380 	add.w	r3, fp, #256	; 0x100
  20355a:	aa54      	add	r2, sp, #336	; 0x150
  20355c:	ca07      	ldmia	r2, {r0, r1, r2}
  20355e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203562:	f50b 7386 	add.w	r3, fp, #268	; 0x10c
  203566:	aa57      	add	r2, sp, #348	; 0x15c
  203568:	ca07      	ldmia	r2, {r0, r1, r2}
  20356a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20356e:	f8bd 3168 	ldrh.w	r3, [sp, #360]	; 0x168
  203572:	f8ab 3118 	strh.w	r3, [fp, #280]	; 0x118
  203576:	f8bd 316a 	ldrh.w	r3, [sp, #362]	; 0x16a
  20357a:	f8ab 311a 	strh.w	r3, [fp, #282]	; 0x11a
  20357e:	f8bd 316c 	ldrh.w	r3, [sp, #364]	; 0x16c
  203582:	f8ab 311c 	strh.w	r3, [fp, #284]	; 0x11c
  203586:	f8bd 316e 	ldrh.w	r3, [sp, #366]	; 0x16e
  20358a:	f8ab 311e 	strh.w	r3, [fp, #286]	; 0x11e
  20358e:	f8bd 3170 	ldrh.w	r3, [sp, #368]	; 0x170
  203592:	f8ab 3120 	strh.w	r3, [fp, #288]	; 0x120
  203596:	f8bd 3172 	ldrh.w	r3, [sp, #370]	; 0x172
  20359a:	f8ab 3122 	strh.w	r3, [fp, #290]	; 0x122
  20359e:	f8bd 3174 	ldrh.w	r3, [sp, #372]	; 0x174
  2035a2:	f8ab 3124 	strh.w	r3, [fp, #292]	; 0x124
  2035a6:	f8bd 3176 	ldrh.w	r3, [sp, #374]	; 0x176
  2035aa:	f8ab 3126 	strh.w	r3, [fp, #294]	; 0x126
  2035ae:	f8bd 3178 	ldrh.w	r3, [sp, #376]	; 0x178
  2035b2:	f8ab 3128 	strh.w	r3, [fp, #296]	; 0x128
  2035b6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  2035ba:	f88b 312a 	strb.w	r3, [fp, #298]	; 0x12a
  2035be:	f89d 3010 	ldrb.w	r3, [sp, #16]
  2035c2:	f88b 3130 	strb.w	r3, [fp, #304]	; 0x130
  2035c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
  2035ca:	f88b 3131 	strb.w	r3, [fp, #305]	; 0x131
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  2035ce:	f8db 0134 	ldr.w	r0, [fp, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  2035d2:	9b06      	ldr	r3, [sp, #24]
  2035d4:	f8cb 3134 	str.w	r3, [fp, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  2035d8:	2300      	movs	r3, #0
  2035da:	9361      	str	r3, [sp, #388]	; 0x184
      __a = _GLIBCXX_MOVE(__b);
  2035dc:	9a07      	ldr	r2, [sp, #28]
  2035de:	f8cb 2138 	str.w	r2, [fp, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  2035e2:	9362      	str	r3, [sp, #392]	; 0x188
      __a = _GLIBCXX_MOVE(__b);
  2035e4:	9a08      	ldr	r2, [sp, #32]
  2035e6:	f8cb 213c 	str.w	r2, [fp, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  2035ea:	9363      	str	r3, [sp, #396]	; 0x18c
  2035ec:	b138      	cbz	r0, 2035fe <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x3f2>
  2035ee:	f010 fd3c 	bl	21406a <_ZdlPv>
  2035f2:	e004      	b.n	2035fe <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x3f2>
		__val = _GLIBCXX_MOVE(*__i);
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
	    }
	  else
	    std::__unguarded_linear_insert(__i,
  2035f4:	f04f 0100 	mov.w	r1, #0
  2035f8:	4650      	mov	r0, sl
  2035fa:	f7ff fb35 	bl	202c68 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_>
  2035fe:	f50a 7aa0 	add.w	sl, sl, #320	; 0x140
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
  203602:	9b00      	ldr	r3, [sp, #0]
  203604:	4553      	cmp	r3, sl
  203606:	f000 8103 	beq.w	203810 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x604>
  20360a:	4653      	mov	r3, sl
		return this->slave_id_ < right.slave_id_;
  20360c:	f89a 9000 	ldrb.w	r9, [sl]
  203610:	f89b 2000 	ldrb.w	r2, [fp]
	  if (__comp(__i, __first))
  203614:	4591      	cmp	r9, r2
  203616:	daed      	bge.n	2035f4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x3e8>
class Neuron {
  203618:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
  20361c:	f89a 2008 	ldrb.w	r2, [sl, #8]
  203620:	9201      	str	r2, [sp, #4]
  203622:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
  203626:	f89a 2009 	ldrb.w	r2, [sl, #9]
  20362a:	9202      	str	r2, [sp, #8]
  20362c:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
  203630:	4a79      	ldr	r2, [pc, #484]	; (203818 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x60c>)
  203632:	9215      	str	r2, [sp, #84]	; 0x54
  203634:	f8ba 200a 	ldrh.w	r2, [sl, #10]
  203638:	9203      	str	r2, [sp, #12]
  20363a:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
  20363e:	f89a 2010 	ldrb.w	r2, [sl, #16]
  203642:	9209      	str	r2, [sp, #36]	; 0x24
  203644:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
  203648:	f89a 2011 	ldrb.w	r2, [sl, #17]
  20364c:	920a      	str	r2, [sp, #40]	; 0x28
  20364e:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
  203652:	f89a 2018 	ldrb.w	r2, [sl, #24]
  203656:	920c      	str	r2, [sp, #48]	; 0x30
  203658:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
  20365c:	ac1b      	add	r4, sp, #108	; 0x6c
  20365e:	f10a 021c 	add.w	r2, sl, #28
  203662:	ca07      	ldmia	r2, {r0, r1, r2}
  203664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  203668:	ac1e      	add	r4, sp, #120	; 0x78
  20366a:	f10a 0228 	add.w	r2, sl, #40	; 0x28
  20366e:	ca07      	ldmia	r2, {r0, r1, r2}
  203670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  203674:	ac21      	add	r4, sp, #132	; 0x84
  203676:	f10a 0234 	add.w	r2, sl, #52	; 0x34
  20367a:	ca07      	ldmia	r2, {r0, r1, r2}
  20367c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  203680:	ac24      	add	r4, sp, #144	; 0x90
  203682:	f10a 0240 	add.w	r2, sl, #64	; 0x40
  203686:	ca07      	ldmia	r2, {r0, r1, r2}
  203688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20368c:	ac27      	add	r4, sp, #156	; 0x9c
  20368e:	f10a 024c 	add.w	r2, sl, #76	; 0x4c
  203692:	ca07      	ldmia	r2, {r0, r1, r2}
  203694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  203698:	ac2a      	add	r4, sp, #168	; 0xa8
  20369a:	f10a 0258 	add.w	r2, sl, #88	; 0x58
  20369e:	ca07      	ldmia	r2, {r0, r1, r2}
  2036a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2036a4:	f89a 2064 	ldrb.w	r2, [sl, #100]	; 0x64
  2036a8:	920d      	str	r2, [sp, #52]	; 0x34
  2036aa:	f88d 20b4 	strb.w	r2, [sp, #180]	; 0xb4
  2036ae:	f8da 2068 	ldr.w	r2, [sl, #104]	; 0x68
  2036b2:	920e      	str	r2, [sp, #56]	; 0x38
  2036b4:	922e      	str	r2, [sp, #184]	; 0xb8
  2036b6:	f8da 206c 	ldr.w	r2, [sl, #108]	; 0x6c
  2036ba:	920f      	str	r2, [sp, #60]	; 0x3c
  2036bc:	922f      	str	r2, [sp, #188]	; 0xbc
  2036be:	f8da 2070 	ldr.w	r2, [sl, #112]	; 0x70
  2036c2:	9210      	str	r2, [sp, #64]	; 0x40
  2036c4:	9230      	str	r2, [sp, #192]	; 0xc0
  2036c6:	ac31      	add	r4, sp, #196	; 0xc4
  2036c8:	f10a 0274 	add.w	r2, sl, #116	; 0x74
  2036cc:	ca07      	ldmia	r2, {r0, r1, r2}
  2036ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2036d2:	ac34      	add	r4, sp, #208	; 0xd0
  2036d4:	f10a 0280 	add.w	r2, sl, #128	; 0x80
  2036d8:	ca07      	ldmia	r2, {r0, r1, r2}
  2036da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2036de:	ac37      	add	r4, sp, #220	; 0xdc
  2036e0:	f10a 028c 	add.w	r2, sl, #140	; 0x8c
  2036e4:	ca07      	ldmia	r2, {r0, r1, r2}
  2036e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2036ea:	f8ba 2098 	ldrh.w	r2, [sl, #152]	; 0x98
  2036ee:	9211      	str	r2, [sp, #68]	; 0x44
  2036f0:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
  2036f4:	ac3b      	add	r4, sp, #236	; 0xec
  2036f6:	f10a 029c 	add.w	r2, sl, #156	; 0x9c
  2036fa:	ca07      	ldmia	r2, {r0, r1, r2}
  2036fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  203700:	ac3e      	add	r4, sp, #248	; 0xf8
  203702:	f10a 02a8 	add.w	r2, sl, #168	; 0xa8
  203706:	ca07      	ldmia	r2, {r0, r1, r2}
  203708:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20370c:	ac41      	add	r4, sp, #260	; 0x104
  20370e:	f10a 02b4 	add.w	r2, sl, #180	; 0xb4
  203712:	ca07      	ldmia	r2, {r0, r1, r2}
  203714:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  203718:	ac44      	add	r4, sp, #272	; 0x110
  20371a:	f10a 02c0 	add.w	r2, sl, #192	; 0xc0
  20371e:	ca07      	ldmia	r2, {r0, r1, r2}
  203720:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  203724:	ac47      	add	r4, sp, #284	; 0x11c
  203726:	f10a 02cc 	add.w	r2, sl, #204	; 0xcc
  20372a:	ca07      	ldmia	r2, {r0, r1, r2}
  20372c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  203730:	ac4a      	add	r4, sp, #296	; 0x128
  203732:	f10a 02d8 	add.w	r2, sl, #216	; 0xd8
  203736:	ca07      	ldmia	r2, {r0, r1, r2}
  203738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20373c:	ac4d      	add	r4, sp, #308	; 0x134
  20373e:	f10a 02e4 	add.w	r2, sl, #228	; 0xe4
  203742:	ca07      	ldmia	r2, {r0, r1, r2}
  203744:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  203748:	f89a 20f0 	ldrb.w	r2, [sl, #240]	; 0xf0
  20374c:	9212      	str	r2, [sp, #72]	; 0x48
  20374e:	f88d 2140 	strb.w	r2, [sp, #320]	; 0x140
  203752:	ac51      	add	r4, sp, #324	; 0x144
  203754:	f10a 02f4 	add.w	r2, sl, #244	; 0xf4
  203758:	ca07      	ldmia	r2, {r0, r1, r2}
  20375a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20375e:	ac54      	add	r4, sp, #336	; 0x150
  203760:	f50a 7280 	add.w	r2, sl, #256	; 0x100
  203764:	ca07      	ldmia	r2, {r0, r1, r2}
  203766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20376a:	ac57      	add	r4, sp, #348	; 0x15c
  20376c:	f50a 7286 	add.w	r2, sl, #268	; 0x10c
  203770:	ca07      	ldmia	r2, {r0, r1, r2}
  203772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  203776:	4a29      	ldr	r2, [pc, #164]	; (20381c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x610>)
  203778:	9217      	str	r2, [sp, #92]	; 0x5c
  20377a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  20377c:	9219      	str	r2, [sp, #100]	; 0x64
  20377e:	f8da 0118 	ldr.w	r0, [sl, #280]	; 0x118
  203782:	905a      	str	r0, [sp, #360]	; 0x168
  203784:	f8ba 211c 	ldrh.w	r2, [sl, #284]	; 0x11c
  203788:	f8ad 216c 	strh.w	r2, [sp, #364]	; 0x16c
  20378c:	f8da 111e 	ldr.w	r1, [sl, #286]	; 0x11e
  203790:	f8cd 116e 	str.w	r1, [sp, #366]	; 0x16e
  203794:	f8ba 2122 	ldrh.w	r2, [sl, #290]	; 0x122
  203798:	f8ad 2172 	strh.w	r2, [sp, #370]	; 0x172
  20379c:	f8da 0124 	ldr.w	r0, [sl, #292]	; 0x124
  2037a0:	905d      	str	r0, [sp, #372]	; 0x174
  2037a2:	f8ba 2128 	ldrh.w	r2, [sl, #296]	; 0x128
  2037a6:	f8ad 2178 	strh.w	r2, [sp, #376]	; 0x178
  2037aa:	f89a 212a 	ldrb.w	r2, [sl, #298]	; 0x12a
  2037ae:	920b      	str	r2, [sp, #44]	; 0x2c
  2037b0:	f88d 217a 	strb.w	r2, [sp, #378]	; 0x17a
  2037b4:	f89a 2130 	ldrb.w	r2, [sl, #304]	; 0x130
  2037b8:	9204      	str	r2, [sp, #16]
  2037ba:	f88d 2180 	strb.w	r2, [sp, #384]	; 0x180
  2037be:	f89a 2131 	ldrb.w	r2, [sl, #305]	; 0x131
  2037c2:	9205      	str	r2, [sp, #20]
  2037c4:	f88d 2181 	strb.w	r2, [sp, #385]	; 0x181
  2037c8:	4a15      	ldr	r2, [pc, #84]	; (203820 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x614>)
  2037ca:	925f      	str	r2, [sp, #380]	; 0x17c
      __a = _GLIBCXX_MOVE(__b);
  2037cc:	f8da 2134 	ldr.w	r2, [sl, #308]	; 0x134
  2037d0:	9206      	str	r2, [sp, #24]
  2037d2:	9261      	str	r2, [sp, #388]	; 0x184
      __b = _GLIBCXX_MOVE(__tmp);
  2037d4:	2200      	movs	r2, #0
  2037d6:	f8ca 2134 	str.w	r2, [sl, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  2037da:	f8da 1138 	ldr.w	r1, [sl, #312]	; 0x138
  2037de:	9107      	str	r1, [sp, #28]
  2037e0:	9162      	str	r1, [sp, #392]	; 0x188
      __b = _GLIBCXX_MOVE(__tmp);
  2037e2:	f8ca 2138 	str.w	r2, [sl, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  2037e6:	f8da 113c 	ldr.w	r1, [sl, #316]	; 0x13c
  2037ea:	9108      	str	r1, [sp, #32]
  2037ec:	9163      	str	r1, [sp, #396]	; 0x18c
      __b = _GLIBCXX_MOVE(__tmp);
  2037ee:	f8ca 213c 	str.w	r2, [sl, #316]	; 0x13c
	  for (__n = __last - __first; __n > 0; --__n)
  2037f2:	ebaa 050b 	sub.w	r5, sl, fp
  2037f6:	11aa      	asrs	r2, r5, #6
  2037f8:	4d0a      	ldr	r5, [pc, #40]	; (203824 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x618>)
  2037fa:	fb05 f502 	mul.w	r5, r5, r2
  2037fe:	2d00      	cmp	r5, #0
  203800:	f77f ae14 	ble.w	20342c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x220>
  203804:	f50a 7892 	add.w	r8, sl, #292	; 0x124
  203808:	f50a 778f 	add.w	r7, sl, #286	; 0x11e
  20380c:	2600      	movs	r6, #0
  20380e:	e53a      	b.n	203286 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x7a>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
  203810:	b065      	add	sp, #404	; 0x194
  203812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  203816:	bf00      	nop
  203818:	00216c1c 	.word	0x00216c1c
  20381c:	00216b90 	.word	0x00216b90
  203820:	00216c54 	.word	0x00216c54
  203824:	cccccccd 	.word	0xcccccccd

00203828 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_>:
    swap(_Tp& __a, _Tp& __b)
  203828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  20382c:	b0ef      	sub	sp, #444	; 0x1bc
  20382e:	4603      	mov	r3, r0
  203830:	460c      	mov	r4, r1
  203832:	7802      	ldrb	r2, [r0, #0]
  203834:	9200      	str	r2, [sp, #0]
  203836:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  20383a:	7a02      	ldrb	r2, [r0, #8]
  20383c:	9201      	str	r2, [sp, #4]
  20383e:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
  203842:	7a42      	ldrb	r2, [r0, #9]
  203844:	9202      	str	r2, [sp, #8]
  203846:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
  20384a:	4ac1      	ldr	r2, [pc, #772]	; (203b50 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_+0x328>)
  20384c:	921f      	str	r2, [sp, #124]	; 0x7c
  20384e:	8942      	ldrh	r2, [r0, #10]
  203850:	9203      	str	r2, [sp, #12]
  203852:	f8ad 2082 	strh.w	r2, [sp, #130]	; 0x82
  203856:	7c02      	ldrb	r2, [r0, #16]
  203858:	9209      	str	r2, [sp, #36]	; 0x24
  20385a:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
  20385e:	7c42      	ldrb	r2, [r0, #17]
  203860:	920a      	str	r2, [sp, #40]	; 0x28
  203862:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
  203866:	7e02      	ldrb	r2, [r0, #24]
  203868:	920c      	str	r2, [sp, #48]	; 0x30
  20386a:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
  20386e:	ad25      	add	r5, sp, #148	; 0x94
  203870:	f100 0b1c 	add.w	fp, r0, #28
  203874:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
  203878:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20387c:	ad28      	add	r5, sp, #160	; 0xa0
  20387e:	f103 0a28 	add.w	sl, r3, #40	; 0x28
  203882:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
  203886:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20388a:	ad2b      	add	r5, sp, #172	; 0xac
  20388c:	f103 0234 	add.w	r2, r3, #52	; 0x34
  203890:	4616      	mov	r6, r2
  203892:	ca07      	ldmia	r2, {r0, r1, r2}
  203894:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  203898:	ad2e      	add	r5, sp, #184	; 0xb8
  20389a:	f103 0240 	add.w	r2, r3, #64	; 0x40
  20389e:	9213      	str	r2, [sp, #76]	; 0x4c
  2038a0:	ca07      	ldmia	r2, {r0, r1, r2}
  2038a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2038a6:	ad31      	add	r5, sp, #196	; 0xc4
  2038a8:	f103 024c 	add.w	r2, r3, #76	; 0x4c
  2038ac:	9214      	str	r2, [sp, #80]	; 0x50
  2038ae:	ca07      	ldmia	r2, {r0, r1, r2}
  2038b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2038b4:	ad34      	add	r5, sp, #208	; 0xd0
  2038b6:	f103 0258 	add.w	r2, r3, #88	; 0x58
  2038ba:	9215      	str	r2, [sp, #84]	; 0x54
  2038bc:	ca07      	ldmia	r2, {r0, r1, r2}
  2038be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2038c2:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
  2038c6:	920d      	str	r2, [sp, #52]	; 0x34
  2038c8:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
  2038cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  2038ce:	920e      	str	r2, [sp, #56]	; 0x38
  2038d0:	9238      	str	r2, [sp, #224]	; 0xe0
  2038d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  2038d4:	920f      	str	r2, [sp, #60]	; 0x3c
  2038d6:	9239      	str	r2, [sp, #228]	; 0xe4
  2038d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  2038da:	9210      	str	r2, [sp, #64]	; 0x40
  2038dc:	923a      	str	r2, [sp, #232]	; 0xe8
  2038de:	ad3b      	add	r5, sp, #236	; 0xec
  2038e0:	f103 0274 	add.w	r2, r3, #116	; 0x74
  2038e4:	9216      	str	r2, [sp, #88]	; 0x58
  2038e6:	ca07      	ldmia	r2, {r0, r1, r2}
  2038e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2038ec:	ad3e      	add	r5, sp, #248	; 0xf8
  2038ee:	f103 0180 	add.w	r1, r3, #128	; 0x80
  2038f2:	9117      	str	r1, [sp, #92]	; 0x5c
  2038f4:	c907      	ldmia	r1, {r0, r1, r2}
  2038f6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2038fa:	ad41      	add	r5, sp, #260	; 0x104
  2038fc:	f103 018c 	add.w	r1, r3, #140	; 0x8c
  203900:	9118      	str	r1, [sp, #96]	; 0x60
  203902:	c907      	ldmia	r1, {r0, r1, r2}
  203904:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  203908:	f8b3 5098 	ldrh.w	r5, [r3, #152]	; 0x98
  20390c:	9511      	str	r5, [sp, #68]	; 0x44
  20390e:	f8ad 5110 	strh.w	r5, [sp, #272]	; 0x110
  203912:	ad45      	add	r5, sp, #276	; 0x114
  203914:	f103 019c 	add.w	r1, r3, #156	; 0x9c
  203918:	9119      	str	r1, [sp, #100]	; 0x64
  20391a:	c907      	ldmia	r1, {r0, r1, r2}
  20391c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  203920:	ad48      	add	r5, sp, #288	; 0x120
  203922:	f103 09a8 	add.w	r9, r3, #168	; 0xa8
  203926:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  20392a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20392e:	ad4b      	add	r5, sp, #300	; 0x12c
  203930:	f103 0eb4 	add.w	lr, r3, #180	; 0xb4
  203934:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
  203938:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  20393c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  203940:	ad4e      	add	r5, sp, #312	; 0x138
  203942:	f103 0ec0 	add.w	lr, r3, #192	; 0xc0
  203946:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
  20394a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  20394e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  203952:	ad51      	add	r5, sp, #324	; 0x144
  203954:	f103 0ecc 	add.w	lr, r3, #204	; 0xcc
  203958:	f8cd e070 	str.w	lr, [sp, #112]	; 0x70
  20395c:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  203960:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  203964:	ad54      	add	r5, sp, #336	; 0x150
  203966:	f103 08d8 	add.w	r8, r3, #216	; 0xd8
  20396a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
  20396e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  203972:	ad57      	add	r5, sp, #348	; 0x15c
  203974:	f103 0ce4 	add.w	ip, r3, #228	; 0xe4
  203978:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
  20397c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  203980:	f893 50f0 	ldrb.w	r5, [r3, #240]	; 0xf0
  203984:	9512      	str	r5, [sp, #72]	; 0x48
  203986:	f88d 5168 	strb.w	r5, [sp, #360]	; 0x168
  20398a:	ad5b      	add	r5, sp, #364	; 0x16c
  20398c:	f103 0ef4 	add.w	lr, r3, #244	; 0xf4
  203990:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  203994:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  203998:	ad5e      	add	r5, sp, #376	; 0x178
  20399a:	f503 7780 	add.w	r7, r3, #256	; 0x100
  20399e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
  2039a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2039a6:	ad61      	add	r5, sp, #388	; 0x184
  2039a8:	f503 7286 	add.w	r2, r3, #268	; 0x10c
  2039ac:	921d      	str	r2, [sp, #116]	; 0x74
  2039ae:	ca07      	ldmia	r2, {r0, r1, r2}
  2039b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2039b4:	4a67      	ldr	r2, [pc, #412]	; (203b54 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_+0x32c>)
  2039b6:	9221      	str	r2, [sp, #132]	; 0x84
  2039b8:	3214      	adds	r2, #20
  2039ba:	9223      	str	r2, [sp, #140]	; 0x8c
  2039bc:	f503 728c 	add.w	r2, r3, #280	; 0x118
  2039c0:	e892 0003 	ldmia.w	r2, {r0, r1}
  2039c4:	9064      	str	r0, [sp, #400]	; 0x190
  2039c6:	f8ad 1194 	strh.w	r1, [sp, #404]	; 0x194
  2039ca:	f503 758f 	add.w	r5, r3, #286	; 0x11e
  2039ce:	682a      	ldr	r2, [r5, #0]
  2039d0:	f8cd 2196 	str.w	r2, [sp, #406]	; 0x196
  2039d4:	88aa      	ldrh	r2, [r5, #4]
  2039d6:	f8ad 219a 	strh.w	r2, [sp, #410]	; 0x19a
  2039da:	f503 7292 	add.w	r2, r3, #292	; 0x124
  2039de:	e892 0003 	ldmia.w	r2, {r0, r1}
  2039e2:	9067      	str	r0, [sp, #412]	; 0x19c
  2039e4:	f8ad 11a0 	strh.w	r1, [sp, #416]	; 0x1a0
  2039e8:	f893 112a 	ldrb.w	r1, [r3, #298]	; 0x12a
  2039ec:	910b      	str	r1, [sp, #44]	; 0x2c
  2039ee:	f88d 11a2 	strb.w	r1, [sp, #418]	; 0x1a2
  2039f2:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
  2039f6:	9104      	str	r1, [sp, #16]
  2039f8:	f88d 11a8 	strb.w	r1, [sp, #424]	; 0x1a8
  2039fc:	f893 1131 	ldrb.w	r1, [r3, #305]	; 0x131
  203a00:	9105      	str	r1, [sp, #20]
  203a02:	f88d 11a9 	strb.w	r1, [sp, #425]	; 0x1a9
  203a06:	4a54      	ldr	r2, [pc, #336]	; (203b58 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_+0x330>)
  203a08:	9269      	str	r2, [sp, #420]	; 0x1a4
      __a = _GLIBCXX_MOVE(__b);
  203a0a:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
  203a0e:	9106      	str	r1, [sp, #24]
  203a10:	916b      	str	r1, [sp, #428]	; 0x1ac
      __b = _GLIBCXX_MOVE(__tmp);
  203a12:	2200      	movs	r2, #0
  203a14:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  203a18:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
  203a1c:	9107      	str	r1, [sp, #28]
  203a1e:	916c      	str	r1, [sp, #432]	; 0x1b0
      __b = _GLIBCXX_MOVE(__tmp);
  203a20:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  203a24:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
  203a28:	9108      	str	r1, [sp, #32]
  203a2a:	916d      	str	r1, [sp, #436]	; 0x1b4
      __b = _GLIBCXX_MOVE(__tmp);
  203a2c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  203a30:	7822      	ldrb	r2, [r4, #0]
  203a32:	701a      	strb	r2, [r3, #0]
  203a34:	7a22      	ldrb	r2, [r4, #8]
  203a36:	721a      	strb	r2, [r3, #8]
  203a38:	7a62      	ldrb	r2, [r4, #9]
  203a3a:	725a      	strb	r2, [r3, #9]
  203a3c:	8962      	ldrh	r2, [r4, #10]
  203a3e:	815a      	strh	r2, [r3, #10]
  203a40:	7c22      	ldrb	r2, [r4, #16]
  203a42:	741a      	strb	r2, [r3, #16]
  203a44:	7c62      	ldrb	r2, [r4, #17]
  203a46:	745a      	strb	r2, [r3, #17]
  203a48:	7e22      	ldrb	r2, [r4, #24]
  203a4a:	761a      	strb	r2, [r3, #24]
  203a4c:	f104 021c 	add.w	r2, r4, #28
  203a50:	ca07      	ldmia	r2, {r0, r1, r2}
  203a52:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  203a56:	f104 0228 	add.w	r2, r4, #40	; 0x28
  203a5a:	ca07      	ldmia	r2, {r0, r1, r2}
  203a5c:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
  203a60:	f104 0234 	add.w	r2, r4, #52	; 0x34
  203a64:	ca07      	ldmia	r2, {r0, r1, r2}
  203a66:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203a6a:	f104 0240 	add.w	r2, r4, #64	; 0x40
  203a6e:	ca07      	ldmia	r2, {r0, r1, r2}
  203a70:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  203a72:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203a76:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  203a7a:	ca07      	ldmia	r2, {r0, r1, r2}
  203a7c:	9e14      	ldr	r6, [sp, #80]	; 0x50
  203a7e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203a82:	f104 0258 	add.w	r2, r4, #88	; 0x58
  203a86:	ca07      	ldmia	r2, {r0, r1, r2}
  203a88:	9e15      	ldr	r6, [sp, #84]	; 0x54
  203a8a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203a8e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
  203a92:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  203a96:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  203a98:	669a      	str	r2, [r3, #104]	; 0x68
  203a9a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  203a9c:	66da      	str	r2, [r3, #108]	; 0x6c
  203a9e:	6f22      	ldr	r2, [r4, #112]	; 0x70
  203aa0:	671a      	str	r2, [r3, #112]	; 0x70
  203aa2:	f104 0274 	add.w	r2, r4, #116	; 0x74
  203aa6:	ca07      	ldmia	r2, {r0, r1, r2}
  203aa8:	9e16      	ldr	r6, [sp, #88]	; 0x58
  203aaa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203aae:	f104 0280 	add.w	r2, r4, #128	; 0x80
  203ab2:	ca07      	ldmia	r2, {r0, r1, r2}
  203ab4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  203ab6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203aba:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  203abe:	ca07      	ldmia	r2, {r0, r1, r2}
  203ac0:	9e18      	ldr	r6, [sp, #96]	; 0x60
  203ac2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203ac6:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
  203aca:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
  203ace:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  203ad2:	ca07      	ldmia	r2, {r0, r1, r2}
  203ad4:	9e19      	ldr	r6, [sp, #100]	; 0x64
  203ad6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203ada:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
  203ade:	ca07      	ldmia	r2, {r0, r1, r2}
  203ae0:	e889 0007 	stmia.w	r9, {r0, r1, r2}
  203ae4:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
  203ae8:	ca07      	ldmia	r2, {r0, r1, r2}
  203aea:	9e1a      	ldr	r6, [sp, #104]	; 0x68
  203aec:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203af0:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
  203af4:	ca07      	ldmia	r2, {r0, r1, r2}
  203af6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
  203af8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203afc:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
  203b00:	ca07      	ldmia	r2, {r0, r1, r2}
  203b02:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  203b04:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203b08:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
  203b0c:	ca07      	ldmia	r2, {r0, r1, r2}
  203b0e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
  203b12:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
  203b16:	ca07      	ldmia	r2, {r0, r1, r2}
  203b18:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  203b1c:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
  203b20:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  203b24:	f104 02f4 	add.w	r2, r4, #244	; 0xf4
  203b28:	ca07      	ldmia	r2, {r0, r1, r2}
  203b2a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203b2e:	f504 7280 	add.w	r2, r4, #256	; 0x100
  203b32:	ca07      	ldmia	r2, {r0, r1, r2}
  203b34:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  203b38:	f504 7286 	add.w	r2, r4, #268	; 0x10c
  203b3c:	ca07      	ldmia	r2, {r0, r1, r2}
  203b3e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  203b40:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  203b44:	f503 728c 	add.w	r2, r3, #280	; 0x118
  203b48:	f504 718b 	add.w	r1, r4, #278	; 0x116
  203b4c:	e006      	b.n	203b5c <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_+0x334>
  203b4e:	bf00      	nop
  203b50:	00216c1c 	.word	0x00216c1c
  203b54:	00216b90 	.word	0x00216b90
  203b58:	00216c54 	.word	0x00216c54
  203b5c:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  203b60:	f822 0b02 	strh.w	r0, [r2], #2
  203b64:	4295      	cmp	r5, r2
  203b66:	d1f9      	bne.n	203b5c <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_+0x334>
  203b68:	f503 728f 	add.w	r2, r3, #286	; 0x11e
  203b6c:	f504 718e 	add.w	r1, r4, #284	; 0x11c
  203b70:	f503 7592 	add.w	r5, r3, #292	; 0x124
  203b74:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  203b78:	f822 0b02 	strh.w	r0, [r2], #2
  203b7c:	4295      	cmp	r5, r2
  203b7e:	d1f9      	bne.n	203b74 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_+0x34c>
  203b80:	f503 7292 	add.w	r2, r3, #292	; 0x124
  203b84:	f504 7191 	add.w	r1, r4, #290	; 0x122
  203b88:	f503 7595 	add.w	r5, r3, #298	; 0x12a
  203b8c:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  203b90:	f822 0b02 	strh.w	r0, [r2], #2
  203b94:	4295      	cmp	r5, r2
  203b96:	d1f9      	bne.n	203b8c <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_+0x364>
  203b98:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
  203b9c:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
  203ba0:	f894 2130 	ldrb.w	r2, [r4, #304]	; 0x130
  203ba4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  203ba8:	f894 2131 	ldrb.w	r2, [r4, #305]	; 0x131
  203bac:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  203bb0:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  203bb4:	2200      	movs	r2, #0
  203bb6:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  203bba:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  203bbe:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  203bc2:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
  203bc6:	f8c3 1134 	str.w	r1, [r3, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  203bca:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  203bce:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  203bd2:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
  203bd6:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  203bda:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  203bde:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
      __a = _GLIBCXX_MOVE(__b);
  203be2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  203be6:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  203bea:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  203bee:	b108      	cbz	r0, 203bf4 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_+0x3cc>
  203bf0:	f010 fa3b 	bl	21406a <_ZdlPv>
  203bf4:	f89d 3000 	ldrb.w	r3, [sp]
  203bf8:	7023      	strb	r3, [r4, #0]
  203bfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  203bfe:	7223      	strb	r3, [r4, #8]
  203c00:	f89d 3008 	ldrb.w	r3, [sp, #8]
  203c04:	7263      	strb	r3, [r4, #9]
  203c06:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  203c0a:	8163      	strh	r3, [r4, #10]
  203c0c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  203c10:	7423      	strb	r3, [r4, #16]
  203c12:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  203c16:	7463      	strb	r3, [r4, #17]
  203c18:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
  203c1c:	7623      	strb	r3, [r4, #24]
  203c1e:	f104 031c 	add.w	r3, r4, #28
  203c22:	aa25      	add	r2, sp, #148	; 0x94
  203c24:	ca07      	ldmia	r2, {r0, r1, r2}
  203c26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203c2a:	f104 0328 	add.w	r3, r4, #40	; 0x28
  203c2e:	aa28      	add	r2, sp, #160	; 0xa0
  203c30:	ca07      	ldmia	r2, {r0, r1, r2}
  203c32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203c36:	f104 0334 	add.w	r3, r4, #52	; 0x34
  203c3a:	aa2b      	add	r2, sp, #172	; 0xac
  203c3c:	ca07      	ldmia	r2, {r0, r1, r2}
  203c3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203c42:	f104 0340 	add.w	r3, r4, #64	; 0x40
  203c46:	aa2e      	add	r2, sp, #184	; 0xb8
  203c48:	ca07      	ldmia	r2, {r0, r1, r2}
  203c4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203c4e:	f104 034c 	add.w	r3, r4, #76	; 0x4c
  203c52:	aa31      	add	r2, sp, #196	; 0xc4
  203c54:	ca07      	ldmia	r2, {r0, r1, r2}
  203c56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203c5a:	f104 0358 	add.w	r3, r4, #88	; 0x58
  203c5e:	aa34      	add	r2, sp, #208	; 0xd0
  203c60:	ca07      	ldmia	r2, {r0, r1, r2}
  203c62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203c66:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
  203c6a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  203c6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  203c70:	66a3      	str	r3, [r4, #104]	; 0x68
  203c72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  203c74:	66e3      	str	r3, [r4, #108]	; 0x6c
  203c76:	9b10      	ldr	r3, [sp, #64]	; 0x40
  203c78:	6723      	str	r3, [r4, #112]	; 0x70
  203c7a:	f104 0374 	add.w	r3, r4, #116	; 0x74
  203c7e:	aa3b      	add	r2, sp, #236	; 0xec
  203c80:	ca07      	ldmia	r2, {r0, r1, r2}
  203c82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203c86:	f104 0380 	add.w	r3, r4, #128	; 0x80
  203c8a:	aa3e      	add	r2, sp, #248	; 0xf8
  203c8c:	ca07      	ldmia	r2, {r0, r1, r2}
  203c8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203c92:	f104 038c 	add.w	r3, r4, #140	; 0x8c
  203c96:	aa41      	add	r2, sp, #260	; 0x104
  203c98:	ca07      	ldmia	r2, {r0, r1, r2}
  203c9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203c9e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  203ca2:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
  203ca6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
  203caa:	aa45      	add	r2, sp, #276	; 0x114
  203cac:	ca07      	ldmia	r2, {r0, r1, r2}
  203cae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203cb2:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
  203cb6:	aa48      	add	r2, sp, #288	; 0x120
  203cb8:	ca07      	ldmia	r2, {r0, r1, r2}
  203cba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203cbe:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
  203cc2:	aa4b      	add	r2, sp, #300	; 0x12c
  203cc4:	ca07      	ldmia	r2, {r0, r1, r2}
  203cc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203cca:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
  203cce:	aa4e      	add	r2, sp, #312	; 0x138
  203cd0:	ca07      	ldmia	r2, {r0, r1, r2}
  203cd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203cd6:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
  203cda:	aa51      	add	r2, sp, #324	; 0x144
  203cdc:	ca07      	ldmia	r2, {r0, r1, r2}
  203cde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203ce2:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
  203ce6:	aa54      	add	r2, sp, #336	; 0x150
  203ce8:	ca07      	ldmia	r2, {r0, r1, r2}
  203cea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203cee:	f104 03e4 	add.w	r3, r4, #228	; 0xe4
  203cf2:	aa57      	add	r2, sp, #348	; 0x15c
  203cf4:	ca07      	ldmia	r2, {r0, r1, r2}
  203cf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203cfa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
  203cfe:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
  203d02:	f104 03f4 	add.w	r3, r4, #244	; 0xf4
  203d06:	aa5b      	add	r2, sp, #364	; 0x16c
  203d08:	ca07      	ldmia	r2, {r0, r1, r2}
  203d0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203d0e:	f504 7380 	add.w	r3, r4, #256	; 0x100
  203d12:	aa5e      	add	r2, sp, #376	; 0x178
  203d14:	ca07      	ldmia	r2, {r0, r1, r2}
  203d16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203d1a:	f504 7386 	add.w	r3, r4, #268	; 0x10c
  203d1e:	aa61      	add	r2, sp, #388	; 0x184
  203d20:	ca07      	ldmia	r2, {r0, r1, r2}
  203d22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  203d26:	f8bd 3190 	ldrh.w	r3, [sp, #400]	; 0x190
  203d2a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
  203d2e:	f8bd 3192 	ldrh.w	r3, [sp, #402]	; 0x192
  203d32:	f8a4 311a 	strh.w	r3, [r4, #282]	; 0x11a
  203d36:	f8bd 3194 	ldrh.w	r3, [sp, #404]	; 0x194
  203d3a:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
  203d3e:	f8bd 3196 	ldrh.w	r3, [sp, #406]	; 0x196
  203d42:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
  203d46:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
  203d4a:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
  203d4e:	f8bd 319a 	ldrh.w	r3, [sp, #410]	; 0x19a
  203d52:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
  203d56:	f8bd 319c 	ldrh.w	r3, [sp, #412]	; 0x19c
  203d5a:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
  203d5e:	f8bd 319e 	ldrh.w	r3, [sp, #414]	; 0x19e
  203d62:	f8a4 3126 	strh.w	r3, [r4, #294]	; 0x126
  203d66:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
  203d6a:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
  203d6e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
  203d72:	f884 312a 	strb.w	r3, [r4, #298]	; 0x12a
  203d76:	f89d 3010 	ldrb.w	r3, [sp, #16]
  203d7a:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
  203d7e:	f89d 3014 	ldrb.w	r3, [sp, #20]
  203d82:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  203d86:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  203d8a:	9b06      	ldr	r3, [sp, #24]
  203d8c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  203d90:	2300      	movs	r3, #0
  203d92:	936b      	str	r3, [sp, #428]	; 0x1ac
      __a = _GLIBCXX_MOVE(__b);
  203d94:	9a07      	ldr	r2, [sp, #28]
  203d96:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  203d9a:	936c      	str	r3, [sp, #432]	; 0x1b0
      __a = _GLIBCXX_MOVE(__b);
  203d9c:	9a08      	ldr	r2, [sp, #32]
  203d9e:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  203da2:	936d      	str	r3, [sp, #436]	; 0x1b4
  203da4:	b108      	cbz	r0, 203daa <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_+0x582>
  203da6:	f010 f960 	bl	21406a <_ZdlPv>
    }
  203daa:	b06f      	add	sp, #444	; 0x1bc
  203dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00203db0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_>:
  // + is_heap and is_heap_until in C++0x.

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
	   typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first,
  203db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  203db4:	4682      	mov	sl, r0
  203db6:	4691      	mov	r9, r2
  203db8:	461e      	mov	r6, r3
  203dba:	4680      	mov	r8, r0
		_Distance __holeIndex, _Distance __topIndex, _Tp __value,
		_Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
  203dbc:	1e4d      	subs	r5, r1, #1
  203dbe:	bf48      	it	mi
  203dc0:	3501      	addmi	r5, #1
  203dc2:	106d      	asrs	r5, r5, #1
      __a = _GLIBCXX_MOVE(__b);
  203dc4:	2700      	movs	r7, #0
  203dc6:	e0ff      	b.n	203fc8 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_+0x218>
  203dc8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  203dcc:	0189      	lsls	r1, r1, #6
  203dce:	eb08 0301 	add.w	r3, r8, r1
  203dd2:	f808 2001 	strb.w	r2, [r8, r1]
  203dd6:	7a22      	ldrb	r2, [r4, #8]
  203dd8:	721a      	strb	r2, [r3, #8]
  203dda:	7a62      	ldrb	r2, [r4, #9]
  203ddc:	725a      	strb	r2, [r3, #9]
  203dde:	8962      	ldrh	r2, [r4, #10]
  203de0:	815a      	strh	r2, [r3, #10]
  203de2:	7c22      	ldrb	r2, [r4, #16]
  203de4:	741a      	strb	r2, [r3, #16]
  203de6:	7c62      	ldrb	r2, [r4, #17]
  203de8:	745a      	strb	r2, [r3, #17]
  203dea:	7e22      	ldrb	r2, [r4, #24]
  203dec:	761a      	strb	r2, [r3, #24]
  203dee:	f103 0e1c 	add.w	lr, r3, #28
  203df2:	f104 021c 	add.w	r2, r4, #28
  203df6:	ca07      	ldmia	r2, {r0, r1, r2}
  203df8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203dfc:	f103 0e28 	add.w	lr, r3, #40	; 0x28
  203e00:	f104 0228 	add.w	r2, r4, #40	; 0x28
  203e04:	ca07      	ldmia	r2, {r0, r1, r2}
  203e06:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203e0a:	f103 0e34 	add.w	lr, r3, #52	; 0x34
  203e0e:	f104 0234 	add.w	r2, r4, #52	; 0x34
  203e12:	ca07      	ldmia	r2, {r0, r1, r2}
  203e14:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203e18:	f103 0e40 	add.w	lr, r3, #64	; 0x40
  203e1c:	f104 0240 	add.w	r2, r4, #64	; 0x40
  203e20:	ca07      	ldmia	r2, {r0, r1, r2}
  203e22:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203e26:	f103 0e4c 	add.w	lr, r3, #76	; 0x4c
  203e2a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  203e2e:	ca07      	ldmia	r2, {r0, r1, r2}
  203e30:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203e34:	f103 0e58 	add.w	lr, r3, #88	; 0x58
  203e38:	f104 0258 	add.w	r2, r4, #88	; 0x58
  203e3c:	ca07      	ldmia	r2, {r0, r1, r2}
  203e3e:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203e42:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
  203e46:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  203e4a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  203e4c:	669a      	str	r2, [r3, #104]	; 0x68
  203e4e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  203e50:	66da      	str	r2, [r3, #108]	; 0x6c
  203e52:	6f22      	ldr	r2, [r4, #112]	; 0x70
  203e54:	671a      	str	r2, [r3, #112]	; 0x70
  203e56:	f103 0e74 	add.w	lr, r3, #116	; 0x74
  203e5a:	f104 0274 	add.w	r2, r4, #116	; 0x74
  203e5e:	ca07      	ldmia	r2, {r0, r1, r2}
  203e60:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203e64:	f103 0e80 	add.w	lr, r3, #128	; 0x80
  203e68:	f104 0280 	add.w	r2, r4, #128	; 0x80
  203e6c:	ca07      	ldmia	r2, {r0, r1, r2}
  203e6e:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203e72:	f103 0e8c 	add.w	lr, r3, #140	; 0x8c
  203e76:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  203e7a:	ca07      	ldmia	r2, {r0, r1, r2}
  203e7c:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203e80:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
  203e84:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
  203e88:	f103 0e9c 	add.w	lr, r3, #156	; 0x9c
  203e8c:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  203e90:	ca07      	ldmia	r2, {r0, r1, r2}
  203e92:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203e96:	f103 0ea8 	add.w	lr, r3, #168	; 0xa8
  203e9a:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
  203e9e:	ca07      	ldmia	r2, {r0, r1, r2}
  203ea0:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203ea4:	f103 0eb4 	add.w	lr, r3, #180	; 0xb4
  203ea8:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
  203eac:	ca07      	ldmia	r2, {r0, r1, r2}
  203eae:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203eb2:	f103 0ec0 	add.w	lr, r3, #192	; 0xc0
  203eb6:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
  203eba:	ca07      	ldmia	r2, {r0, r1, r2}
  203ebc:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203ec0:	f103 0ecc 	add.w	lr, r3, #204	; 0xcc
  203ec4:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
  203ec8:	ca07      	ldmia	r2, {r0, r1, r2}
  203eca:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203ece:	f103 0ed8 	add.w	lr, r3, #216	; 0xd8
  203ed2:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
  203ed6:	ca07      	ldmia	r2, {r0, r1, r2}
  203ed8:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203edc:	f103 0ee4 	add.w	lr, r3, #228	; 0xe4
  203ee0:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
  203ee4:	ca07      	ldmia	r2, {r0, r1, r2}
  203ee6:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203eea:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
  203eee:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  203ef2:	f103 0ef4 	add.w	lr, r3, #244	; 0xf4
  203ef6:	f104 02f4 	add.w	r2, r4, #244	; 0xf4
  203efa:	ca07      	ldmia	r2, {r0, r1, r2}
  203efc:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203f00:	f503 7e80 	add.w	lr, r3, #256	; 0x100
  203f04:	f504 7280 	add.w	r2, r4, #256	; 0x100
  203f08:	ca07      	ldmia	r2, {r0, r1, r2}
  203f0a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203f0e:	f503 7e86 	add.w	lr, r3, #268	; 0x10c
  203f12:	f504 7286 	add.w	r2, r4, #268	; 0x10c
  203f16:	ca07      	ldmia	r2, {r0, r1, r2}
  203f18:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  203f1c:	f503 728c 	add.w	r2, r3, #280	; 0x118
  203f20:	f504 718b 	add.w	r1, r4, #278	; 0x116
  203f24:	f503 7e8f 	add.w	lr, r3, #286	; 0x11e
  203f28:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  203f2c:	f822 0b02 	strh.w	r0, [r2], #2
  203f30:	4596      	cmp	lr, r2
  203f32:	d1f9      	bne.n	203f28 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_+0x178>
  203f34:	f503 728f 	add.w	r2, r3, #286	; 0x11e
  203f38:	f504 718e 	add.w	r1, r4, #284	; 0x11c
  203f3c:	f503 7e92 	add.w	lr, r3, #292	; 0x124
  203f40:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  203f44:	f822 0b02 	strh.w	r0, [r2], #2
  203f48:	4596      	cmp	lr, r2
  203f4a:	d1f9      	bne.n	203f40 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_+0x190>
  203f4c:	f503 7292 	add.w	r2, r3, #292	; 0x124
  203f50:	f504 7191 	add.w	r1, r4, #290	; 0x122
  203f54:	f503 7e95 	add.w	lr, r3, #298	; 0x12a
  203f58:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  203f5c:	f822 0b02 	strh.w	r0, [r2], #2
  203f60:	4572      	cmp	r2, lr
  203f62:	d1f9      	bne.n	203f58 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_+0x1a8>
  203f64:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
  203f68:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
  203f6c:	f894 2130 	ldrb.w	r2, [r4, #304]	; 0x130
  203f70:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  203f74:	f894 2131 	ldrb.w	r2, [r4, #305]	; 0x131
  203f78:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  203f7c:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  203f80:	f8c3 7134 	str.w	r7, [r3, #308]	; 0x134
  203f84:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
  203f88:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
  203f8c:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
  203f90:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  203f94:	f8c4 7134 	str.w	r7, [r4, #308]	; 0x134
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  203f98:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  203f9c:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
  203fa0:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  203fa4:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  203fa8:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
      __a = _GLIBCXX_MOVE(__b);
  203fac:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  203fb0:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  203fb4:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  203fb8:	b108      	cbz	r0, 203fbe <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_+0x20e>
  203fba:	f010 f856 	bl	21406a <_ZdlPv>
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
	{
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
	  __holeIndex = __parent;
	  __parent = (__holeIndex - 1) / 2;
  203fbe:	1e6b      	subs	r3, r5, #1
  203fc0:	bf48      	it	mi
  203fc2:	3301      	addmi	r3, #1
	  __holeIndex = __parent;
  203fc4:	4629      	mov	r1, r5
	  __parent = (__holeIndex - 1) / 2;
  203fc6:	105d      	asrs	r5, r3, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
  203fc8:	4549      	cmp	r1, r9
  203fca:	dd0a      	ble.n	203fe2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_+0x232>
  203fcc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  203fd0:	019b      	lsls	r3, r3, #6
  203fd2:	eb08 0403 	add.w	r4, r8, r3
		return this->slave_id_ < right.slave_id_;
  203fd6:	f818 2003 	ldrb.w	r2, [r8, r3]
  203fda:	7833      	ldrb	r3, [r6, #0]
  203fdc:	4293      	cmp	r3, r2
  203fde:	f73f aef3 	bgt.w	203dc8 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_+0x18>
  203fe2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  203fe6:	0189      	lsls	r1, r1, #6
  203fe8:	eb0a 0301 	add.w	r3, sl, r1
class Neuron {
  203fec:	7832      	ldrb	r2, [r6, #0]
  203fee:	f80a 2001 	strb.w	r2, [sl, r1]
  203ff2:	7a32      	ldrb	r2, [r6, #8]
  203ff4:	721a      	strb	r2, [r3, #8]
  203ff6:	7a72      	ldrb	r2, [r6, #9]
  203ff8:	725a      	strb	r2, [r3, #9]
  203ffa:	8972      	ldrh	r2, [r6, #10]
  203ffc:	815a      	strh	r2, [r3, #10]
  203ffe:	7c32      	ldrb	r2, [r6, #16]
  204000:	741a      	strb	r2, [r3, #16]
  204002:	7c72      	ldrb	r2, [r6, #17]
  204004:	745a      	strb	r2, [r3, #17]
  204006:	7e32      	ldrb	r2, [r6, #24]
  204008:	761a      	strb	r2, [r3, #24]
  20400a:	f103 041c 	add.w	r4, r3, #28
  20400e:	f106 021c 	add.w	r2, r6, #28
  204012:	ca07      	ldmia	r2, {r0, r1, r2}
  204014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204018:	f103 0428 	add.w	r4, r3, #40	; 0x28
  20401c:	f106 0228 	add.w	r2, r6, #40	; 0x28
  204020:	ca07      	ldmia	r2, {r0, r1, r2}
  204022:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204026:	f103 0434 	add.w	r4, r3, #52	; 0x34
  20402a:	f106 0234 	add.w	r2, r6, #52	; 0x34
  20402e:	ca07      	ldmia	r2, {r0, r1, r2}
  204030:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204034:	f103 0440 	add.w	r4, r3, #64	; 0x40
  204038:	f106 0240 	add.w	r2, r6, #64	; 0x40
  20403c:	ca07      	ldmia	r2, {r0, r1, r2}
  20403e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204042:	f103 044c 	add.w	r4, r3, #76	; 0x4c
  204046:	f106 024c 	add.w	r2, r6, #76	; 0x4c
  20404a:	ca07      	ldmia	r2, {r0, r1, r2}
  20404c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204050:	f103 0458 	add.w	r4, r3, #88	; 0x58
  204054:	f106 0258 	add.w	r2, r6, #88	; 0x58
  204058:	ca07      	ldmia	r2, {r0, r1, r2}
  20405a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20405e:	f896 2064 	ldrb.w	r2, [r6, #100]	; 0x64
  204062:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  204066:	6eb2      	ldr	r2, [r6, #104]	; 0x68
  204068:	669a      	str	r2, [r3, #104]	; 0x68
  20406a:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
  20406c:	66da      	str	r2, [r3, #108]	; 0x6c
  20406e:	6f32      	ldr	r2, [r6, #112]	; 0x70
  204070:	671a      	str	r2, [r3, #112]	; 0x70
  204072:	f103 0474 	add.w	r4, r3, #116	; 0x74
  204076:	f106 0274 	add.w	r2, r6, #116	; 0x74
  20407a:	ca07      	ldmia	r2, {r0, r1, r2}
  20407c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204080:	f103 0480 	add.w	r4, r3, #128	; 0x80
  204084:	f106 0280 	add.w	r2, r6, #128	; 0x80
  204088:	ca07      	ldmia	r2, {r0, r1, r2}
  20408a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20408e:	f103 048c 	add.w	r4, r3, #140	; 0x8c
  204092:	f106 028c 	add.w	r2, r6, #140	; 0x8c
  204096:	ca07      	ldmia	r2, {r0, r1, r2}
  204098:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20409c:	f8b6 2098 	ldrh.w	r2, [r6, #152]	; 0x98
  2040a0:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
  2040a4:	f103 049c 	add.w	r4, r3, #156	; 0x9c
  2040a8:	f106 029c 	add.w	r2, r6, #156	; 0x9c
  2040ac:	ca07      	ldmia	r2, {r0, r1, r2}
  2040ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2040b2:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
  2040b6:	f106 02a8 	add.w	r2, r6, #168	; 0xa8
  2040ba:	ca07      	ldmia	r2, {r0, r1, r2}
  2040bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2040c0:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
  2040c4:	f106 02b4 	add.w	r2, r6, #180	; 0xb4
  2040c8:	ca07      	ldmia	r2, {r0, r1, r2}
  2040ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2040ce:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
  2040d2:	f106 02c0 	add.w	r2, r6, #192	; 0xc0
  2040d6:	ca07      	ldmia	r2, {r0, r1, r2}
  2040d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2040dc:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
  2040e0:	f106 02cc 	add.w	r2, r6, #204	; 0xcc
  2040e4:	ca07      	ldmia	r2, {r0, r1, r2}
  2040e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2040ea:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
  2040ee:	f106 02d8 	add.w	r2, r6, #216	; 0xd8
  2040f2:	ca07      	ldmia	r2, {r0, r1, r2}
  2040f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2040f8:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
  2040fc:	f106 02e4 	add.w	r2, r6, #228	; 0xe4
  204100:	ca07      	ldmia	r2, {r0, r1, r2}
  204102:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204106:	f896 20f0 	ldrb.w	r2, [r6, #240]	; 0xf0
  20410a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  20410e:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
  204112:	f106 02f4 	add.w	r2, r6, #244	; 0xf4
  204116:	ca07      	ldmia	r2, {r0, r1, r2}
  204118:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20411c:	f503 7480 	add.w	r4, r3, #256	; 0x100
  204120:	f506 7280 	add.w	r2, r6, #256	; 0x100
  204124:	ca07      	ldmia	r2, {r0, r1, r2}
  204126:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20412a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
  20412e:	f506 7286 	add.w	r2, r6, #268	; 0x10c
  204132:	ca07      	ldmia	r2, {r0, r1, r2}
  204134:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204138:	f503 728c 	add.w	r2, r3, #280	; 0x118
  20413c:	f506 718b 	add.w	r1, r6, #278	; 0x116
  204140:	f503 748f 	add.w	r4, r3, #286	; 0x11e
  204144:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  204148:	f822 0b02 	strh.w	r0, [r2], #2
  20414c:	42a2      	cmp	r2, r4
  20414e:	d1f9      	bne.n	204144 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_+0x394>
  204150:	f503 728f 	add.w	r2, r3, #286	; 0x11e
  204154:	f506 718e 	add.w	r1, r6, #284	; 0x11c
  204158:	f503 7492 	add.w	r4, r3, #292	; 0x124
  20415c:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  204160:	f822 0b02 	strh.w	r0, [r2], #2
  204164:	4294      	cmp	r4, r2
  204166:	d1f9      	bne.n	20415c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_+0x3ac>
  204168:	f503 7292 	add.w	r2, r3, #292	; 0x124
  20416c:	f506 7191 	add.w	r1, r6, #290	; 0x122
  204170:	f503 7495 	add.w	r4, r3, #298	; 0x12a
  204174:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  204178:	f822 0b02 	strh.w	r0, [r2], #2
  20417c:	4294      	cmp	r4, r2
  20417e:	d1f9      	bne.n	204174 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_+0x3c4>
  204180:	f896 212a 	ldrb.w	r2, [r6, #298]	; 0x12a
  204184:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
  204188:	f896 2130 	ldrb.w	r2, [r6, #304]	; 0x130
  20418c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  204190:	f896 2131 	ldrb.w	r2, [r6, #305]	; 0x131
  204194:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  204198:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  20419c:	2200      	movs	r2, #0
  20419e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  2041a2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  2041a6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  2041aa:	f8d6 1134 	ldr.w	r1, [r6, #308]	; 0x134
  2041ae:	f8c3 1134 	str.w	r1, [r3, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  2041b2:	f8c6 2134 	str.w	r2, [r6, #308]	; 0x134
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  2041b6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  2041ba:	f8d6 1138 	ldr.w	r1, [r6, #312]	; 0x138
  2041be:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  2041c2:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  2041c6:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
      __a = _GLIBCXX_MOVE(__b);
  2041ca:	f8d6 113c 	ldr.w	r1, [r6, #316]	; 0x13c
  2041ce:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  2041d2:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
  2041d6:	b108      	cbz	r0, 2041dc <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_+0x42c>
  2041d8:	f00f ff47 	bl	21406a <_ZdlPv>
  2041dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

002041e0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_>:
    }

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
  2041e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2041e4:	b0d5      	sub	sp, #340	; 0x154
  2041e6:	4683      	mov	fp, r0
  2041e8:	9103      	str	r1, [sp, #12]
  2041ea:	4692      	mov	sl, r2
  2041ec:	461f      	mov	r7, r3
  2041ee:	4606      	mov	r6, r0
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
  2041f0:	f1b2 0901 	subs.w	r9, r2, #1
  2041f4:	bf48      	it	mi
  2041f6:	f109 0901 	addmi.w	r9, r9, #1
  2041fa:	ea4f 0969 	mov.w	r9, r9, asr #1
  2041fe:	9c03      	ldr	r4, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
  204200:	f04f 0800 	mov.w	r8, #0
  204204:	e02d      	b.n	204262 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x82>
  204206:	f89e 212a 	ldrb.w	r2, [lr, #298]	; 0x12a
  20420a:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
  20420e:	f89e 2130 	ldrb.w	r2, [lr, #304]	; 0x130
  204212:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  204216:	f89e 2131 	ldrb.w	r2, [lr, #305]	; 0x131
  20421a:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  20421e:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  204222:	f8c3 8134 	str.w	r8, [r3, #308]	; 0x134
  204226:	f8c3 8138 	str.w	r8, [r3, #312]	; 0x138
  20422a:	f8c3 813c 	str.w	r8, [r3, #316]	; 0x13c
  20422e:	f8de 2134 	ldr.w	r2, [lr, #308]	; 0x134
  204232:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  204236:	f8ce 8134 	str.w	r8, [lr, #308]	; 0x134
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  20423a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  20423e:	f8de 1138 	ldr.w	r1, [lr, #312]	; 0x138
  204242:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  204246:	f8ce 2138 	str.w	r2, [lr, #312]	; 0x138
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  20424a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
      __a = _GLIBCXX_MOVE(__b);
  20424e:	f8de 113c 	ldr.w	r1, [lr, #316]	; 0x13c
  204252:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  204256:	f8ce 213c 	str.w	r2, [lr, #316]	; 0x13c
  20425a:	b108      	cbz	r0, 204260 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x80>
  20425c:	f00f ff05 	bl	21406a <_ZdlPv>
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
  204260:	462c      	mov	r4, r5
      while (__secondChild < (__len - 1) / 2)
  204262:	454c      	cmp	r4, r9
  204264:	f280 80ea 	bge.w	20443c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x25c>
	{
	  __secondChild = 2 * (__secondChild + 1);
  204268:	1c63      	adds	r3, r4, #1
  20426a:	005d      	lsls	r5, r3, #1
	  if (__comp(__first + __secondChild,
  20426c:	1e6a      	subs	r2, r5, #1
		return this->slave_id_ < right.slave_id_;
  20426e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  204272:	0189      	lsls	r1, r1, #6
  204274:	5c71      	ldrb	r1, [r6, r1]
  204276:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  20427a:	019b      	lsls	r3, r3, #6
  20427c:	5cf3      	ldrb	r3, [r6, r3]
		     __first + (__secondChild - 1)))
	    __secondChild--;
  20427e:	4299      	cmp	r1, r3
  204280:	bfc8      	it	gt
  204282:	4615      	movgt	r5, r2
  204284:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  204288:	01a4      	lsls	r4, r4, #6
  20428a:	1933      	adds	r3, r6, r4
  20428c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
  204290:	0192      	lsls	r2, r2, #6
  204292:	eb06 0e02 	add.w	lr, r6, r2
class Neuron {
  204296:	5cb2      	ldrb	r2, [r6, r2]
  204298:	5532      	strb	r2, [r6, r4]
  20429a:	f89e 2008 	ldrb.w	r2, [lr, #8]
  20429e:	721a      	strb	r2, [r3, #8]
  2042a0:	f89e 2009 	ldrb.w	r2, [lr, #9]
  2042a4:	725a      	strb	r2, [r3, #9]
  2042a6:	f8be 200a 	ldrh.w	r2, [lr, #10]
  2042aa:	815a      	strh	r2, [r3, #10]
  2042ac:	f89e 2010 	ldrb.w	r2, [lr, #16]
  2042b0:	741a      	strb	r2, [r3, #16]
  2042b2:	f89e 2011 	ldrb.w	r2, [lr, #17]
  2042b6:	745a      	strb	r2, [r3, #17]
  2042b8:	f89e 2018 	ldrb.w	r2, [lr, #24]
  2042bc:	761a      	strb	r2, [r3, #24]
  2042be:	f103 041c 	add.w	r4, r3, #28
  2042c2:	f10e 021c 	add.w	r2, lr, #28
  2042c6:	ca07      	ldmia	r2, {r0, r1, r2}
  2042c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2042cc:	f103 0428 	add.w	r4, r3, #40	; 0x28
  2042d0:	f10e 0228 	add.w	r2, lr, #40	; 0x28
  2042d4:	ca07      	ldmia	r2, {r0, r1, r2}
  2042d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2042da:	f103 0434 	add.w	r4, r3, #52	; 0x34
  2042de:	f10e 0234 	add.w	r2, lr, #52	; 0x34
  2042e2:	ca07      	ldmia	r2, {r0, r1, r2}
  2042e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2042e8:	f103 0440 	add.w	r4, r3, #64	; 0x40
  2042ec:	f10e 0240 	add.w	r2, lr, #64	; 0x40
  2042f0:	ca07      	ldmia	r2, {r0, r1, r2}
  2042f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2042f6:	f103 044c 	add.w	r4, r3, #76	; 0x4c
  2042fa:	f10e 024c 	add.w	r2, lr, #76	; 0x4c
  2042fe:	ca07      	ldmia	r2, {r0, r1, r2}
  204300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204304:	f103 0458 	add.w	r4, r3, #88	; 0x58
  204308:	f10e 0258 	add.w	r2, lr, #88	; 0x58
  20430c:	ca07      	ldmia	r2, {r0, r1, r2}
  20430e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204312:	f89e 2064 	ldrb.w	r2, [lr, #100]	; 0x64
  204316:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  20431a:	f8de 2068 	ldr.w	r2, [lr, #104]	; 0x68
  20431e:	669a      	str	r2, [r3, #104]	; 0x68
  204320:	f8de 206c 	ldr.w	r2, [lr, #108]	; 0x6c
  204324:	66da      	str	r2, [r3, #108]	; 0x6c
  204326:	f8de 2070 	ldr.w	r2, [lr, #112]	; 0x70
  20432a:	671a      	str	r2, [r3, #112]	; 0x70
  20432c:	f103 0474 	add.w	r4, r3, #116	; 0x74
  204330:	f10e 0274 	add.w	r2, lr, #116	; 0x74
  204334:	ca07      	ldmia	r2, {r0, r1, r2}
  204336:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20433a:	f103 0480 	add.w	r4, r3, #128	; 0x80
  20433e:	f10e 0280 	add.w	r2, lr, #128	; 0x80
  204342:	ca07      	ldmia	r2, {r0, r1, r2}
  204344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204348:	f103 048c 	add.w	r4, r3, #140	; 0x8c
  20434c:	f10e 028c 	add.w	r2, lr, #140	; 0x8c
  204350:	ca07      	ldmia	r2, {r0, r1, r2}
  204352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204356:	f8be 2098 	ldrh.w	r2, [lr, #152]	; 0x98
  20435a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
  20435e:	f103 049c 	add.w	r4, r3, #156	; 0x9c
  204362:	f10e 029c 	add.w	r2, lr, #156	; 0x9c
  204366:	ca07      	ldmia	r2, {r0, r1, r2}
  204368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20436c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
  204370:	f10e 02a8 	add.w	r2, lr, #168	; 0xa8
  204374:	ca07      	ldmia	r2, {r0, r1, r2}
  204376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20437a:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
  20437e:	f10e 02b4 	add.w	r2, lr, #180	; 0xb4
  204382:	ca07      	ldmia	r2, {r0, r1, r2}
  204384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204388:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
  20438c:	f10e 02c0 	add.w	r2, lr, #192	; 0xc0
  204390:	ca07      	ldmia	r2, {r0, r1, r2}
  204392:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204396:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
  20439a:	f10e 02cc 	add.w	r2, lr, #204	; 0xcc
  20439e:	ca07      	ldmia	r2, {r0, r1, r2}
  2043a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2043a4:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
  2043a8:	f10e 02d8 	add.w	r2, lr, #216	; 0xd8
  2043ac:	ca07      	ldmia	r2, {r0, r1, r2}
  2043ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2043b2:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
  2043b6:	f10e 02e4 	add.w	r2, lr, #228	; 0xe4
  2043ba:	ca07      	ldmia	r2, {r0, r1, r2}
  2043bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2043c0:	f89e 20f0 	ldrb.w	r2, [lr, #240]	; 0xf0
  2043c4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  2043c8:	f103 04f4 	add.w	r4, r3, #244	; 0xf4
  2043cc:	f10e 02f4 	add.w	r2, lr, #244	; 0xf4
  2043d0:	ca07      	ldmia	r2, {r0, r1, r2}
  2043d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2043d6:	f503 7480 	add.w	r4, r3, #256	; 0x100
  2043da:	f50e 7280 	add.w	r2, lr, #256	; 0x100
  2043de:	ca07      	ldmia	r2, {r0, r1, r2}
  2043e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2043e4:	f503 7486 	add.w	r4, r3, #268	; 0x10c
  2043e8:	f50e 7286 	add.w	r2, lr, #268	; 0x10c
  2043ec:	ca07      	ldmia	r2, {r0, r1, r2}
  2043ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2043f2:	f503 728c 	add.w	r2, r3, #280	; 0x118
  2043f6:	f50e 718b 	add.w	r1, lr, #278	; 0x116
  2043fa:	f503 748f 	add.w	r4, r3, #286	; 0x11e
  2043fe:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  204402:	f822 0b02 	strh.w	r0, [r2], #2
  204406:	42a2      	cmp	r2, r4
  204408:	d1f9      	bne.n	2043fe <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x21e>
  20440a:	f503 728f 	add.w	r2, r3, #286	; 0x11e
  20440e:	f50e 718e 	add.w	r1, lr, #284	; 0x11c
  204412:	f503 7492 	add.w	r4, r3, #292	; 0x124
  204416:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  20441a:	f822 0b02 	strh.w	r0, [r2], #2
  20441e:	42a2      	cmp	r2, r4
  204420:	d1f9      	bne.n	204416 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x236>
  204422:	f503 7292 	add.w	r2, r3, #292	; 0x124
  204426:	f50e 7191 	add.w	r1, lr, #290	; 0x122
  20442a:	f503 7495 	add.w	r4, r3, #298	; 0x12a
  20442e:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  204432:	f822 0b02 	strh.w	r0, [r2], #2
  204436:	42a2      	cmp	r2, r4
  204438:	d1f9      	bne.n	20442e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x24e>
  20443a:	e6e4      	b.n	204206 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x26>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
	  __holeIndex = __secondChild;
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
  20443c:	f01a 0f01 	tst.w	sl, #1
  204440:	d108      	bne.n	204454 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x274>
  204442:	f1ba 0a02 	subs.w	sl, sl, #2
  204446:	bf48      	it	mi
  204448:	f10a 0a01 	addmi.w	sl, sl, #1
  20444c:	ebb4 0f6a 	cmp.w	r4, sl, asr #1
  204450:	f000 80ea 	beq.w	204628 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x448>
  204454:	783b      	ldrb	r3, [r7, #0]
  204456:	f88d 3010 	strb.w	r3, [sp, #16]
  20445a:	7a3b      	ldrb	r3, [r7, #8]
  20445c:	f88d 3018 	strb.w	r3, [sp, #24]
  204460:	7a7b      	ldrb	r3, [r7, #9]
  204462:	f88d 3019 	strb.w	r3, [sp, #25]
  204466:	4b6d      	ldr	r3, [pc, #436]	; (20461c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x43c>)
  204468:	9305      	str	r3, [sp, #20]
  20446a:	897b      	ldrh	r3, [r7, #10]
  20446c:	f8ad 301a 	strh.w	r3, [sp, #26]
  204470:	7c3b      	ldrb	r3, [r7, #16]
  204472:	f88d 3020 	strb.w	r3, [sp, #32]
  204476:	7c7b      	ldrb	r3, [r7, #17]
  204478:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
  20447c:	7e3b      	ldrb	r3, [r7, #24]
  20447e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  204482:	ab0b      	add	r3, sp, #44	; 0x2c
  204484:	f107 021c 	add.w	r2, r7, #28
  204488:	ca07      	ldmia	r2, {r0, r1, r2}
  20448a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20448e:	ab0e      	add	r3, sp, #56	; 0x38
  204490:	f107 0228 	add.w	r2, r7, #40	; 0x28
  204494:	ca07      	ldmia	r2, {r0, r1, r2}
  204496:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20449a:	ab11      	add	r3, sp, #68	; 0x44
  20449c:	f107 0234 	add.w	r2, r7, #52	; 0x34
  2044a0:	ca07      	ldmia	r2, {r0, r1, r2}
  2044a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2044a6:	ab14      	add	r3, sp, #80	; 0x50
  2044a8:	f107 0240 	add.w	r2, r7, #64	; 0x40
  2044ac:	ca07      	ldmia	r2, {r0, r1, r2}
  2044ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2044b2:	ab17      	add	r3, sp, #92	; 0x5c
  2044b4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
  2044b8:	ca07      	ldmia	r2, {r0, r1, r2}
  2044ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2044be:	ab1a      	add	r3, sp, #104	; 0x68
  2044c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
  2044c4:	ca07      	ldmia	r2, {r0, r1, r2}
  2044c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2044ca:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
  2044ce:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
  2044d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
  2044d4:	931e      	str	r3, [sp, #120]	; 0x78
  2044d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  2044d8:	931f      	str	r3, [sp, #124]	; 0x7c
  2044da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  2044dc:	9320      	str	r3, [sp, #128]	; 0x80
  2044de:	ab21      	add	r3, sp, #132	; 0x84
  2044e0:	f107 0274 	add.w	r2, r7, #116	; 0x74
  2044e4:	ca07      	ldmia	r2, {r0, r1, r2}
  2044e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2044ea:	ab24      	add	r3, sp, #144	; 0x90
  2044ec:	f107 0280 	add.w	r2, r7, #128	; 0x80
  2044f0:	ca07      	ldmia	r2, {r0, r1, r2}
  2044f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2044f6:	ab27      	add	r3, sp, #156	; 0x9c
  2044f8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
  2044fc:	ca07      	ldmia	r2, {r0, r1, r2}
  2044fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204502:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
  204506:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
  20450a:	ab2b      	add	r3, sp, #172	; 0xac
  20450c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
  204510:	ca07      	ldmia	r2, {r0, r1, r2}
  204512:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204516:	ab2e      	add	r3, sp, #184	; 0xb8
  204518:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
  20451c:	ca07      	ldmia	r2, {r0, r1, r2}
  20451e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204522:	ab31      	add	r3, sp, #196	; 0xc4
  204524:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
  204528:	ca07      	ldmia	r2, {r0, r1, r2}
  20452a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20452e:	ab34      	add	r3, sp, #208	; 0xd0
  204530:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
  204534:	ca07      	ldmia	r2, {r0, r1, r2}
  204536:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20453a:	ab37      	add	r3, sp, #220	; 0xdc
  20453c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
  204540:	ca07      	ldmia	r2, {r0, r1, r2}
  204542:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204546:	ab3a      	add	r3, sp, #232	; 0xe8
  204548:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
  20454c:	ca07      	ldmia	r2, {r0, r1, r2}
  20454e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204552:	ab3d      	add	r3, sp, #244	; 0xf4
  204554:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
  204558:	ca07      	ldmia	r2, {r0, r1, r2}
  20455a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20455e:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
  204562:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
  204566:	ab41      	add	r3, sp, #260	; 0x104
  204568:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
  20456c:	ca07      	ldmia	r2, {r0, r1, r2}
  20456e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204572:	ab44      	add	r3, sp, #272	; 0x110
  204574:	f507 7280 	add.w	r2, r7, #256	; 0x100
  204578:	ca07      	ldmia	r2, {r0, r1, r2}
  20457a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20457e:	ab47      	add	r3, sp, #284	; 0x11c
  204580:	f507 7286 	add.w	r2, r7, #268	; 0x10c
  204584:	ca07      	ldmia	r2, {r0, r1, r2}
  204586:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20458a:	4b25      	ldr	r3, [pc, #148]	; (204620 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x440>)
  20458c:	9307      	str	r3, [sp, #28]
  20458e:	3314      	adds	r3, #20
  204590:	9309      	str	r3, [sp, #36]	; 0x24
  204592:	f507 738c 	add.w	r3, r7, #280	; 0x118
  204596:	e893 0003 	ldmia.w	r3, {r0, r1}
  20459a:	904a      	str	r0, [sp, #296]	; 0x128
  20459c:	f8ad 112c 	strh.w	r1, [sp, #300]	; 0x12c
  2045a0:	f8d7 211e 	ldr.w	r2, [r7, #286]	; 0x11e
  2045a4:	f8cd 212e 	str.w	r2, [sp, #302]	; 0x12e
  2045a8:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
  2045ac:	f8ad 3132 	strh.w	r3, [sp, #306]	; 0x132
  2045b0:	f507 7392 	add.w	r3, r7, #292	; 0x124
  2045b4:	e893 0003 	ldmia.w	r3, {r0, r1}
  2045b8:	904d      	str	r0, [sp, #308]	; 0x134
  2045ba:	f8ad 1138 	strh.w	r1, [sp, #312]	; 0x138
  2045be:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
  2045c2:	f88d 313a 	strb.w	r3, [sp, #314]	; 0x13a
  2045c6:	f897 3130 	ldrb.w	r3, [r7, #304]	; 0x130
  2045ca:	f88d 3140 	strb.w	r3, [sp, #320]	; 0x140
  2045ce:	f897 3131 	ldrb.w	r3, [r7, #305]	; 0x131
  2045d2:	f88d 3141 	strb.w	r3, [sp, #321]	; 0x141
  2045d6:	4d13      	ldr	r5, [pc, #76]	; (204624 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x444>)
  2045d8:	954f      	str	r5, [sp, #316]	; 0x13c
      __a = _GLIBCXX_MOVE(__b);
  2045da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
  2045de:	9351      	str	r3, [sp, #324]	; 0x144
      __b = _GLIBCXX_MOVE(__tmp);
  2045e0:	2300      	movs	r3, #0
  2045e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  2045e6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
  2045ea:	9252      	str	r2, [sp, #328]	; 0x148
      __b = _GLIBCXX_MOVE(__tmp);
  2045ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  2045f0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
  2045f4:	9253      	str	r2, [sp, #332]	; 0x14c
      __b = _GLIBCXX_MOVE(__tmp);
  2045f6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	  __secondChild = 2 * (__secondChild + 1);
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
	}
      std::__push_heap(__first, __holeIndex, __topIndex, 
  2045fa:	f88d 3000 	strb.w	r3, [sp]
  2045fe:	ab04      	add	r3, sp, #16
  204600:	9a03      	ldr	r2, [sp, #12]
  204602:	4621      	mov	r1, r4
  204604:	4658      	mov	r0, fp
  204606:	f7ff fbd3 	bl	203db0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops14_Iter_less_valEEvT_T0_SB_T1_T2_>
  20460a:	954f      	str	r5, [sp, #316]	; 0x13c
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  20460c:	9851      	ldr	r0, [sp, #324]	; 0x144
	if (__p)
  20460e:	b108      	cbz	r0, 204614 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x434>
  204610:	f00f fd2b 	bl	21406a <_ZdlPv>
		       _GLIBCXX_MOVE(__value),
		       __gnu_cxx::__ops::__iter_comp_val(__comp));
    }
  204614:	b055      	add	sp, #340	; 0x154
  204616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  20461a:	bf00      	nop
  20461c:	00216c1c 	.word	0x00216c1c
  204620:	00216b90 	.word	0x00216b90
  204624:	00216c54 	.word	0x00216c54
  204628:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  20462c:	0192      	lsls	r2, r2, #6
  20462e:	eb0b 0302 	add.w	r3, fp, r2
	  __secondChild = 2 * (__secondChild + 1);
  204632:	0064      	lsls	r4, r4, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
  204634:	3401      	adds	r4, #1
  204636:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  20463a:	0189      	lsls	r1, r1, #6
  20463c:	eb0b 0501 	add.w	r5, fp, r1
  204640:	f81b 1001 	ldrb.w	r1, [fp, r1]
  204644:	f80b 1002 	strb.w	r1, [fp, r2]
  204648:	7a2a      	ldrb	r2, [r5, #8]
  20464a:	721a      	strb	r2, [r3, #8]
  20464c:	7a6a      	ldrb	r2, [r5, #9]
  20464e:	725a      	strb	r2, [r3, #9]
  204650:	896a      	ldrh	r2, [r5, #10]
  204652:	815a      	strh	r2, [r3, #10]
  204654:	7c2a      	ldrb	r2, [r5, #16]
  204656:	741a      	strb	r2, [r3, #16]
  204658:	7c6a      	ldrb	r2, [r5, #17]
  20465a:	745a      	strb	r2, [r3, #17]
  20465c:	7e2a      	ldrb	r2, [r5, #24]
  20465e:	761a      	strb	r2, [r3, #24]
  204660:	f103 061c 	add.w	r6, r3, #28
  204664:	f105 021c 	add.w	r2, r5, #28
  204668:	ca07      	ldmia	r2, {r0, r1, r2}
  20466a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  20466e:	f103 0628 	add.w	r6, r3, #40	; 0x28
  204672:	f105 0228 	add.w	r2, r5, #40	; 0x28
  204676:	ca07      	ldmia	r2, {r0, r1, r2}
  204678:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  20467c:	f103 0634 	add.w	r6, r3, #52	; 0x34
  204680:	f105 0234 	add.w	r2, r5, #52	; 0x34
  204684:	ca07      	ldmia	r2, {r0, r1, r2}
  204686:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  20468a:	f103 0640 	add.w	r6, r3, #64	; 0x40
  20468e:	f105 0240 	add.w	r2, r5, #64	; 0x40
  204692:	ca07      	ldmia	r2, {r0, r1, r2}
  204694:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204698:	f103 064c 	add.w	r6, r3, #76	; 0x4c
  20469c:	f105 024c 	add.w	r2, r5, #76	; 0x4c
  2046a0:	ca07      	ldmia	r2, {r0, r1, r2}
  2046a2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  2046a6:	f103 0658 	add.w	r6, r3, #88	; 0x58
  2046aa:	f105 0258 	add.w	r2, r5, #88	; 0x58
  2046ae:	ca07      	ldmia	r2, {r0, r1, r2}
  2046b0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  2046b4:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
  2046b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  2046bc:	6eaa      	ldr	r2, [r5, #104]	; 0x68
  2046be:	669a      	str	r2, [r3, #104]	; 0x68
  2046c0:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  2046c2:	66da      	str	r2, [r3, #108]	; 0x6c
  2046c4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  2046c6:	671a      	str	r2, [r3, #112]	; 0x70
  2046c8:	f103 0674 	add.w	r6, r3, #116	; 0x74
  2046cc:	f105 0274 	add.w	r2, r5, #116	; 0x74
  2046d0:	ca07      	ldmia	r2, {r0, r1, r2}
  2046d2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  2046d6:	f103 0680 	add.w	r6, r3, #128	; 0x80
  2046da:	f105 0280 	add.w	r2, r5, #128	; 0x80
  2046de:	ca07      	ldmia	r2, {r0, r1, r2}
  2046e0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  2046e4:	f103 068c 	add.w	r6, r3, #140	; 0x8c
  2046e8:	f105 028c 	add.w	r2, r5, #140	; 0x8c
  2046ec:	ca07      	ldmia	r2, {r0, r1, r2}
  2046ee:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  2046f2:	f8b5 2098 	ldrh.w	r2, [r5, #152]	; 0x98
  2046f6:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
  2046fa:	f103 069c 	add.w	r6, r3, #156	; 0x9c
  2046fe:	f105 029c 	add.w	r2, r5, #156	; 0x9c
  204702:	ca07      	ldmia	r2, {r0, r1, r2}
  204704:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204708:	f103 06a8 	add.w	r6, r3, #168	; 0xa8
  20470c:	f105 02a8 	add.w	r2, r5, #168	; 0xa8
  204710:	ca07      	ldmia	r2, {r0, r1, r2}
  204712:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204716:	f103 06b4 	add.w	r6, r3, #180	; 0xb4
  20471a:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
  20471e:	ca07      	ldmia	r2, {r0, r1, r2}
  204720:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204724:	f103 06c0 	add.w	r6, r3, #192	; 0xc0
  204728:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
  20472c:	ca07      	ldmia	r2, {r0, r1, r2}
  20472e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204732:	f103 06cc 	add.w	r6, r3, #204	; 0xcc
  204736:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
  20473a:	ca07      	ldmia	r2, {r0, r1, r2}
  20473c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204740:	f103 06d8 	add.w	r6, r3, #216	; 0xd8
  204744:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
  204748:	ca07      	ldmia	r2, {r0, r1, r2}
  20474a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  20474e:	f103 06e4 	add.w	r6, r3, #228	; 0xe4
  204752:	f105 02e4 	add.w	r2, r5, #228	; 0xe4
  204756:	ca07      	ldmia	r2, {r0, r1, r2}
  204758:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  20475c:	f895 20f0 	ldrb.w	r2, [r5, #240]	; 0xf0
  204760:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  204764:	f103 06f4 	add.w	r6, r3, #244	; 0xf4
  204768:	f105 02f4 	add.w	r2, r5, #244	; 0xf4
  20476c:	ca07      	ldmia	r2, {r0, r1, r2}
  20476e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204772:	f503 7680 	add.w	r6, r3, #256	; 0x100
  204776:	f505 7280 	add.w	r2, r5, #256	; 0x100
  20477a:	ca07      	ldmia	r2, {r0, r1, r2}
  20477c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204780:	f503 7686 	add.w	r6, r3, #268	; 0x10c
  204784:	f505 7286 	add.w	r2, r5, #268	; 0x10c
  204788:	ca07      	ldmia	r2, {r0, r1, r2}
  20478a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  20478e:	f503 728c 	add.w	r2, r3, #280	; 0x118
  204792:	f505 718b 	add.w	r1, r5, #278	; 0x116
  204796:	f503 768f 	add.w	r6, r3, #286	; 0x11e
  20479a:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  20479e:	f822 0b02 	strh.w	r0, [r2], #2
  2047a2:	42b2      	cmp	r2, r6
  2047a4:	d1f9      	bne.n	20479a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x5ba>
  2047a6:	f503 728f 	add.w	r2, r3, #286	; 0x11e
  2047aa:	f505 718e 	add.w	r1, r5, #284	; 0x11c
  2047ae:	f503 7692 	add.w	r6, r3, #292	; 0x124
  2047b2:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  2047b6:	f822 0b02 	strh.w	r0, [r2], #2
  2047ba:	4296      	cmp	r6, r2
  2047bc:	d1f9      	bne.n	2047b2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x5d2>
  2047be:	f503 7292 	add.w	r2, r3, #292	; 0x124
  2047c2:	f505 7191 	add.w	r1, r5, #290	; 0x122
  2047c6:	f503 7695 	add.w	r6, r3, #298	; 0x12a
  2047ca:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  2047ce:	f822 0b02 	strh.w	r0, [r2], #2
  2047d2:	4296      	cmp	r6, r2
  2047d4:	d1f9      	bne.n	2047ca <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x5ea>
  2047d6:	f895 212a 	ldrb.w	r2, [r5, #298]	; 0x12a
  2047da:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
  2047de:	f895 2130 	ldrb.w	r2, [r5, #304]	; 0x130
  2047e2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  2047e6:	f895 2131 	ldrb.w	r2, [r5, #305]	; 0x131
  2047ea:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  2047ee:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  2047f2:	2200      	movs	r2, #0
  2047f4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  2047f8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  2047fc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  204800:	f8d5 1134 	ldr.w	r1, [r5, #308]	; 0x134
  204804:	f8c3 1134 	str.w	r1, [r3, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  204808:	f8c5 2134 	str.w	r2, [r5, #308]	; 0x134
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  20480c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  204810:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
  204814:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  204818:	f8c5 2138 	str.w	r2, [r5, #312]	; 0x138
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  20481c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
      __a = _GLIBCXX_MOVE(__b);
  204820:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
  204824:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  204828:	f8c5 213c 	str.w	r2, [r5, #316]	; 0x13c
  20482c:	2800      	cmp	r0, #0
  20482e:	f43f ae11 	beq.w	204454 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x274>
  204832:	f00f fc1a 	bl	21406a <_ZdlPv>
  204836:	e60d      	b.n	204454 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_+0x274>

00204838 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_>:
	}
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  204838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  20483c:	f5ad 7d37 	sub.w	sp, sp, #732	; 0x2dc
  204840:	9013      	str	r0, [sp, #76]	; 0x4c
    { return __lhs.base() - __rhs.base(); }
  204842:	1a08      	subs	r0, r1, r0
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	  _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	  _DistanceType;

      if (__last - __first < 2)
  204844:	f5b0 7f20 	cmp.w	r0, #640	; 0x280
  204848:	f2c0 81d4 	blt.w	204bf4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x3bc>
  20484c:	1180      	asrs	r0, r0, #6
  20484e:	4909      	ldr	r1, [pc, #36]	; (204874 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x3c>)
  204850:	fb01 f300 	mul.w	r3, r1, r0
  204854:	9314      	str	r3, [sp, #80]	; 0x50
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
  204856:	3b02      	subs	r3, #2
  204858:	bf48      	it	mi
  20485a:	3301      	addmi	r3, #1
  20485c:	105b      	asrs	r3, r3, #1
  20485e:	9303      	str	r3, [sp, #12]
  204860:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  204864:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  204866:	eb02 1983 	add.w	r9, r2, r3, lsl #6
  20486a:	4b03      	ldr	r3, [pc, #12]	; (204878 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x40>)
  20486c:	3314      	adds	r3, #20
  20486e:	9315      	str	r3, [sp, #84]	; 0x54
  204870:	e00c      	b.n	20488c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x54>
  204872:	bf00      	nop
  204874:	cccccccd 	.word	0xcccccccd
  204878:	00216b90 	.word	0x00216b90
  20487c:	f5a9 79a0 	sub.w	r9, r9, #320	; 0x140
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
			     __comp);
	  if (__parent == 0)
  204880:	9b03      	ldr	r3, [sp, #12]
  204882:	2b00      	cmp	r3, #0
  204884:	f000 81b6 	beq.w	204bf4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x3bc>
	    return;
	  __parent--;
  204888:	3b01      	subs	r3, #1
  20488a:	9303      	str	r3, [sp, #12]
  20488c:	f899 b000 	ldrb.w	fp, [r9]
  204890:	f899 3008 	ldrb.w	r3, [r9, #8]
  204894:	9304      	str	r3, [sp, #16]
  204896:	f899 2009 	ldrb.w	r2, [r9, #9]
  20489a:	9205      	str	r2, [sp, #20]
  20489c:	f8b9 100a 	ldrh.w	r1, [r9, #10]
  2048a0:	9106      	str	r1, [sp, #24]
  2048a2:	f899 0010 	ldrb.w	r0, [r9, #16]
  2048a6:	900c      	str	r0, [sp, #48]	; 0x30
  2048a8:	f899 4011 	ldrb.w	r4, [r9, #17]
  2048ac:	940d      	str	r4, [sp, #52]	; 0x34
  2048ae:	f899 5018 	ldrb.w	r5, [r9, #24]
  2048b2:	950f      	str	r5, [sp, #60]	; 0x3c
  2048b4:	f109 031c 	add.w	r3, r9, #28
  2048b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  2048bc:	ae1d      	add	r6, sp, #116	; 0x74
  2048be:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  2048c2:	f109 0328 	add.w	r3, r9, #40	; 0x28
  2048c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  2048ca:	ae20      	add	r6, sp, #128	; 0x80
  2048cc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  2048d0:	f109 0334 	add.w	r3, r9, #52	; 0x34
  2048d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  2048d8:	ae23      	add	r6, sp, #140	; 0x8c
  2048da:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  2048de:	f109 0340 	add.w	r3, r9, #64	; 0x40
  2048e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  2048e6:	ae26      	add	r6, sp, #152	; 0x98
  2048e8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  2048ec:	f109 034c 	add.w	r3, r9, #76	; 0x4c
  2048f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  2048f4:	ae29      	add	r6, sp, #164	; 0xa4
  2048f6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  2048fa:	f109 0358 	add.w	r3, r9, #88	; 0x58
  2048fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  204902:	ae2c      	add	r6, sp, #176	; 0xb0
  204904:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204908:	f899 6064 	ldrb.w	r6, [r9, #100]	; 0x64
  20490c:	9610      	str	r6, [sp, #64]	; 0x40
  20490e:	f109 0374 	add.w	r3, r9, #116	; 0x74
  204912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  204916:	af33      	add	r7, sp, #204	; 0xcc
  204918:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  20491c:	f109 0380 	add.w	r3, r9, #128	; 0x80
  204920:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  204924:	af36      	add	r7, sp, #216	; 0xd8
  204926:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  20492a:	f109 038c 	add.w	r3, r9, #140	; 0x8c
  20492e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  204932:	af39      	add	r7, sp, #228	; 0xe4
  204934:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  204938:	f8b9 7098 	ldrh.w	r7, [r9, #152]	; 0x98
  20493c:	9711      	str	r7, [sp, #68]	; 0x44
  20493e:	f109 039c 	add.w	r3, r9, #156	; 0x9c
  204942:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  204946:	f10d 0ef4 	add.w	lr, sp, #244	; 0xf4
  20494a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  20494e:	f109 03a8 	add.w	r3, r9, #168	; 0xa8
  204952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  204956:	f50d 7e80 	add.w	lr, sp, #256	; 0x100
  20495a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  20495e:	f109 03b4 	add.w	r3, r9, #180	; 0xb4
  204962:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  204966:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
  20496a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  20496e:	f50d 7c8c 	add.w	ip, sp, #280	; 0x118
  204972:	f109 03c0 	add.w	r3, r9, #192	; 0xc0
  204976:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  20497a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  20497e:	f50d 7e92 	add.w	lr, sp, #292	; 0x124
  204982:	f109 03cc 	add.w	r3, r9, #204	; 0xcc
  204986:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  20498a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  20498e:	af4c      	add	r7, sp, #304	; 0x130
  204990:	f109 03d8 	add.w	r3, r9, #216	; 0xd8
  204994:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  204998:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  20499c:	ae4f      	add	r6, sp, #316	; 0x13c
  20499e:	f109 03e4 	add.w	r3, r9, #228	; 0xe4
  2049a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  2049a6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  2049aa:	f899 30f0 	ldrb.w	r3, [r9, #240]	; 0xf0
  2049ae:	9312      	str	r3, [sp, #72]	; 0x48
  2049b0:	ad53      	add	r5, sp, #332	; 0x14c
  2049b2:	f109 03f4 	add.w	r3, r9, #244	; 0xf4
  2049b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  2049ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  2049be:	ac56      	add	r4, sp, #344	; 0x158
  2049c0:	f509 7380 	add.w	r3, r9, #256	; 0x100
  2049c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  2049c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  2049cc:	ab59      	add	r3, sp, #356	; 0x164
  2049ce:	f509 7286 	add.w	r2, r9, #268	; 0x10c
  2049d2:	ca07      	ldmia	r2, {r0, r1, r2}
  2049d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  2049d8:	f50d 7ab8 	add.w	sl, sp, #368	; 0x170
  2049dc:	f8d9 0118 	ldr.w	r0, [r9, #280]	; 0x118
  2049e0:	905c      	str	r0, [sp, #368]	; 0x170
  2049e2:	f8b9 211c 	ldrh.w	r2, [r9, #284]	; 0x11c
  2049e6:	f8ad 2174 	strh.w	r2, [sp, #372]	; 0x174
  2049ea:	f8d9 111e 	ldr.w	r1, [r9, #286]	; 0x11e
  2049ee:	f8cd 1176 	str.w	r1, [sp, #374]	; 0x176
  2049f2:	f8b9 2122 	ldrh.w	r2, [r9, #290]	; 0x122
  2049f6:	f8ad 217a 	strh.w	r2, [sp, #378]	; 0x17a
  2049fa:	f50d 78be 	add.w	r8, sp, #380	; 0x17c
  2049fe:	f8d9 0124 	ldr.w	r0, [r9, #292]	; 0x124
  204a02:	905f      	str	r0, [sp, #380]	; 0x17c
  204a04:	f8b9 2128 	ldrh.w	r2, [r9, #296]	; 0x128
  204a08:	f8ad 2180 	strh.w	r2, [sp, #384]	; 0x180
  204a0c:	f899 212a 	ldrb.w	r2, [r9, #298]	; 0x12a
  204a10:	920e      	str	r2, [sp, #56]	; 0x38
  204a12:	f899 1130 	ldrb.w	r1, [r9, #304]	; 0x130
  204a16:	9107      	str	r1, [sp, #28]
  204a18:	f899 0131 	ldrb.w	r0, [r9, #305]	; 0x131
  204a1c:	9008      	str	r0, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
  204a1e:	f8d9 2134 	ldr.w	r2, [r9, #308]	; 0x134
  204a22:	9209      	str	r2, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
  204a24:	2200      	movs	r2, #0
  204a26:	f8c9 2134 	str.w	r2, [r9, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  204a2a:	f8d9 1138 	ldr.w	r1, [r9, #312]	; 0x138
  204a2e:	910a      	str	r1, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
  204a30:	f8c9 2138 	str.w	r2, [r9, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  204a34:	f8d9 013c 	ldr.w	r0, [r9, #316]	; 0x13c
  204a38:	900b      	str	r0, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
  204a3a:	f8c9 213c 	str.w	r2, [r9, #316]	; 0x13c
  204a3e:	f88d b198 	strb.w	fp, [sp, #408]	; 0x198
  204a42:	f89d b010 	ldrb.w	fp, [sp, #16]
  204a46:	f88d b1a0 	strb.w	fp, [sp, #416]	; 0x1a0
  204a4a:	f89d b014 	ldrb.w	fp, [sp, #20]
  204a4e:	f88d b1a1 	strb.w	fp, [sp, #417]	; 0x1a1
  204a52:	4a6a      	ldr	r2, [pc, #424]	; (204bfc <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x3c4>)
  204a54:	9267      	str	r2, [sp, #412]	; 0x19c
  204a56:	f8bd b018 	ldrh.w	fp, [sp, #24]
  204a5a:	f8ad b1a2 	strh.w	fp, [sp, #418]	; 0x1a2
  204a5e:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
  204a62:	f88d b1a8 	strb.w	fp, [sp, #424]	; 0x1a8
  204a66:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
  204a6a:	f88d b1a9 	strb.w	fp, [sp, #425]	; 0x1a9
  204a6e:	f89d b03c 	ldrb.w	fp, [sp, #60]	; 0x3c
  204a72:	f88d b1b0 	strb.w	fp, [sp, #432]	; 0x1b0
  204a76:	f50d 7bda 	add.w	fp, sp, #436	; 0x1b4
  204a7a:	aa1d      	add	r2, sp, #116	; 0x74
  204a7c:	ca07      	ldmia	r2, {r0, r1, r2}
  204a7e:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204a82:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
  204a86:	aa20      	add	r2, sp, #128	; 0x80
  204a88:	ca07      	ldmia	r2, {r0, r1, r2}
  204a8a:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204a8e:	f50d 7be6 	add.w	fp, sp, #460	; 0x1cc
  204a92:	aa23      	add	r2, sp, #140	; 0x8c
  204a94:	ca07      	ldmia	r2, {r0, r1, r2}
  204a96:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204a9a:	f50d 7bec 	add.w	fp, sp, #472	; 0x1d8
  204a9e:	aa26      	add	r2, sp, #152	; 0x98
  204aa0:	ca07      	ldmia	r2, {r0, r1, r2}
  204aa2:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204aa6:	f50d 7bf2 	add.w	fp, sp, #484	; 0x1e4
  204aaa:	aa29      	add	r2, sp, #164	; 0xa4
  204aac:	ca07      	ldmia	r2, {r0, r1, r2}
  204aae:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204ab2:	f50d 7bf8 	add.w	fp, sp, #496	; 0x1f0
  204ab6:	aa2c      	add	r2, sp, #176	; 0xb0
  204ab8:	ca07      	ldmia	r2, {r0, r1, r2}
  204aba:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204abe:	f89d b040 	ldrb.w	fp, [sp, #64]	; 0x40
  204ac2:	f88d b1fc 	strb.w	fp, [sp, #508]	; 0x1fc
  204ac6:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
  204aca:	9280      	str	r2, [sp, #512]	; 0x200
  204acc:	f8d9 206c 	ldr.w	r2, [r9, #108]	; 0x6c
  204ad0:	9281      	str	r2, [sp, #516]	; 0x204
  204ad2:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
  204ad6:	9282      	str	r2, [sp, #520]	; 0x208
  204ad8:	f50d 7b03 	add.w	fp, sp, #524	; 0x20c
  204adc:	aa33      	add	r2, sp, #204	; 0xcc
  204ade:	ca07      	ldmia	r2, {r0, r1, r2}
  204ae0:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204ae4:	f50d 7b06 	add.w	fp, sp, #536	; 0x218
  204ae8:	aa36      	add	r2, sp, #216	; 0xd8
  204aea:	ca07      	ldmia	r2, {r0, r1, r2}
  204aec:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204af0:	f50d 7b09 	add.w	fp, sp, #548	; 0x224
  204af4:	aa39      	add	r2, sp, #228	; 0xe4
  204af6:	ca07      	ldmia	r2, {r0, r1, r2}
  204af8:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204afc:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
  204b00:	f8ad b230 	strh.w	fp, [sp, #560]	; 0x230
  204b04:	f50d 7b0d 	add.w	fp, sp, #564	; 0x234
  204b08:	aa3d      	add	r2, sp, #244	; 0xf4
  204b0a:	ca07      	ldmia	r2, {r0, r1, r2}
  204b0c:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204b10:	f50d 7b10 	add.w	fp, sp, #576	; 0x240
  204b14:	aa40      	add	r2, sp, #256	; 0x100
  204b16:	ca07      	ldmia	r2, {r0, r1, r2}
  204b18:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204b1c:	f50d 7b13 	add.w	fp, sp, #588	; 0x24c
  204b20:	aa43      	add	r2, sp, #268	; 0x10c
  204b22:	ca07      	ldmia	r2, {r0, r1, r2}
  204b24:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204b28:	f50d 7b16 	add.w	fp, sp, #600	; 0x258
  204b2c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
  204b30:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204b34:	f50d 7c19 	add.w	ip, sp, #612	; 0x264
  204b38:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  204b3c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  204b40:	f50d 7e1c 	add.w	lr, sp, #624	; 0x270
  204b44:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
  204b48:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  204b4c:	af9f      	add	r7, sp, #636	; 0x27c
  204b4e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  204b52:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  204b56:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
  204b5a:	f88d 6288 	strb.w	r6, [sp, #648]	; 0x288
  204b5e:	aea3      	add	r6, sp, #652	; 0x28c
  204b60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  204b64:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204b68:	ada6      	add	r5, sp, #664	; 0x298
  204b6a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  204b6e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204b72:	aca9      	add	r4, sp, #676	; 0x2a4
  204b74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  204b78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  204b7c:	4b20      	ldr	r3, [pc, #128]	; (204c00 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x3c8>)
  204b7e:	9369      	str	r3, [sp, #420]	; 0x1a4
  204b80:	9b15      	ldr	r3, [sp, #84]	; 0x54
  204b82:	936b      	str	r3, [sp, #428]	; 0x1ac
  204b84:	e89a 0003 	ldmia.w	sl, {r0, r1}
  204b88:	90ac      	str	r0, [sp, #688]	; 0x2b0
  204b8a:	f8ad 12b4 	strh.w	r1, [sp, #692]	; 0x2b4
  204b8e:	f8dd 3176 	ldr.w	r3, [sp, #374]	; 0x176
  204b92:	f8cd 32b6 	str.w	r3, [sp, #694]	; 0x2b6
  204b96:	f8bd 317a 	ldrh.w	r3, [sp, #378]	; 0x17a
  204b9a:	f8ad 32ba 	strh.w	r3, [sp, #698]	; 0x2ba
  204b9e:	e898 0003 	ldmia.w	r8, {r0, r1}
  204ba2:	90af      	str	r0, [sp, #700]	; 0x2bc
  204ba4:	f8ad 12c0 	strh.w	r1, [sp, #704]	; 0x2c0
  204ba8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  204bac:	f88d 32c2 	strb.w	r3, [sp, #706]	; 0x2c2
  204bb0:	f89d 301c 	ldrb.w	r3, [sp, #28]
  204bb4:	f88d 32c8 	strb.w	r3, [sp, #712]	; 0x2c8
  204bb8:	f89d 3020 	ldrb.w	r3, [sp, #32]
  204bbc:	f88d 32c9 	strb.w	r3, [sp, #713]	; 0x2c9
  204bc0:	4c10      	ldr	r4, [pc, #64]	; (204c04 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x3cc>)
  204bc2:	94b1      	str	r4, [sp, #708]	; 0x2c4
      __a = _GLIBCXX_MOVE(__b);
  204bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  204bc6:	92b3      	str	r2, [sp, #716]	; 0x2cc
  204bc8:	990a      	ldr	r1, [sp, #40]	; 0x28
  204bca:	91b4      	str	r1, [sp, #720]	; 0x2d0
  204bcc:	980b      	ldr	r0, [sp, #44]	; 0x2c
  204bce:	90b5      	str	r0, [sp, #724]	; 0x2d4
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
  204bd0:	f04f 0300 	mov.w	r3, #0
  204bd4:	f88d 3000 	strb.w	r3, [sp]
  204bd8:	ab66      	add	r3, sp, #408	; 0x198
  204bda:	9a14      	ldr	r2, [sp, #80]	; 0x50
  204bdc:	9903      	ldr	r1, [sp, #12]
  204bde:	9813      	ldr	r0, [sp, #76]	; 0x4c
  204be0:	f7ff fafe 	bl	2041e0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_>
  204be4:	94b1      	str	r4, [sp, #708]	; 0x2c4
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  204be6:	98b3      	ldr	r0, [sp, #716]	; 0x2cc
	if (__p)
  204be8:	2800      	cmp	r0, #0
  204bea:	f43f ae47 	beq.w	20487c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x44>
  204bee:	f00f fa3c 	bl	21406a <_ZdlPv>
  204bf2:	e643      	b.n	20487c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_+0x44>
	}
    }
  204bf4:	f50d 7d37 	add.w	sp, sp, #732	; 0x2dc
  204bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  204bfc:	00216c1c 	.word	0x00216c1c
  204c00:	00216b90 	.word	0x00216b90
  204c04:	00216c54 	.word	0x00216c54

00204c08 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_SA_T0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  204c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  204c0c:	f5ad 7d43 	sub.w	sp, sp, #780	; 0x30c
  204c10:	4604      	mov	r4, r0
  204c12:	9116      	str	r1, [sp, #88]	; 0x58
  204c14:	4613      	mov	r3, r2
  204c16:	7812      	ldrb	r2, [r2, #0]
  204c18:	9203      	str	r2, [sp, #12]
  204c1a:	7a1a      	ldrb	r2, [r3, #8]
  204c1c:	9204      	str	r2, [sp, #16]
  204c1e:	7a5a      	ldrb	r2, [r3, #9]
  204c20:	9205      	str	r2, [sp, #20]
  204c22:	895a      	ldrh	r2, [r3, #10]
  204c24:	9206      	str	r2, [sp, #24]
  204c26:	7c1a      	ldrb	r2, [r3, #16]
  204c28:	920c      	str	r2, [sp, #48]	; 0x30
  204c2a:	7c5a      	ldrb	r2, [r3, #17]
  204c2c:	920d      	str	r2, [sp, #52]	; 0x34
  204c2e:	7e1a      	ldrb	r2, [r3, #24]
  204c30:	920f      	str	r2, [sp, #60]	; 0x3c
  204c32:	ad79      	add	r5, sp, #484	; 0x1e4
  204c34:	f103 0b1c 	add.w	fp, r3, #28
  204c38:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
  204c3c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204c40:	ad7c      	add	r5, sp, #496	; 0x1f0
  204c42:	f103 0a28 	add.w	sl, r3, #40	; 0x28
  204c46:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
  204c4a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204c4e:	ad7f      	add	r5, sp, #508	; 0x1fc
  204c50:	f103 0234 	add.w	r2, r3, #52	; 0x34
  204c54:	4616      	mov	r6, r2
  204c56:	ca07      	ldmia	r2, {r0, r1, r2}
  204c58:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204c5c:	ad82      	add	r5, sp, #520	; 0x208
  204c5e:	f103 0240 	add.w	r2, r3, #64	; 0x40
  204c62:	9217      	str	r2, [sp, #92]	; 0x5c
  204c64:	ca07      	ldmia	r2, {r0, r1, r2}
  204c66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204c6a:	ad85      	add	r5, sp, #532	; 0x214
  204c6c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
  204c70:	9218      	str	r2, [sp, #96]	; 0x60
  204c72:	ca07      	ldmia	r2, {r0, r1, r2}
  204c74:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204c78:	ad88      	add	r5, sp, #544	; 0x220
  204c7a:	f103 0258 	add.w	r2, r3, #88	; 0x58
  204c7e:	9219      	str	r2, [sp, #100]	; 0x64
  204c80:	ca07      	ldmia	r2, {r0, r1, r2}
  204c82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204c86:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
  204c8a:	9210      	str	r2, [sp, #64]	; 0x40
  204c8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  204c8e:	9211      	str	r2, [sp, #68]	; 0x44
  204c90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  204c92:	9212      	str	r2, [sp, #72]	; 0x48
  204c94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  204c96:	9213      	str	r2, [sp, #76]	; 0x4c
  204c98:	ad8f      	add	r5, sp, #572	; 0x23c
  204c9a:	f103 0274 	add.w	r2, r3, #116	; 0x74
  204c9e:	921a      	str	r2, [sp, #104]	; 0x68
  204ca0:	ca07      	ldmia	r2, {r0, r1, r2}
  204ca2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204ca6:	ad92      	add	r5, sp, #584	; 0x248
  204ca8:	f103 0180 	add.w	r1, r3, #128	; 0x80
  204cac:	911b      	str	r1, [sp, #108]	; 0x6c
  204cae:	c907      	ldmia	r1, {r0, r1, r2}
  204cb0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204cb4:	ad95      	add	r5, sp, #596	; 0x254
  204cb6:	f103 018c 	add.w	r1, r3, #140	; 0x8c
  204cba:	911c      	str	r1, [sp, #112]	; 0x70
  204cbc:	c907      	ldmia	r1, {r0, r1, r2}
  204cbe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204cc2:	f8b3 5098 	ldrh.w	r5, [r3, #152]	; 0x98
  204cc6:	9514      	str	r5, [sp, #80]	; 0x50
  204cc8:	ad99      	add	r5, sp, #612	; 0x264
  204cca:	f103 019c 	add.w	r1, r3, #156	; 0x9c
  204cce:	911d      	str	r1, [sp, #116]	; 0x74
  204cd0:	c907      	ldmia	r1, {r0, r1, r2}
  204cd2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204cd6:	ad9c      	add	r5, sp, #624	; 0x270
  204cd8:	f103 0ea8 	add.w	lr, r3, #168	; 0xa8
  204cdc:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
  204ce0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  204ce4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204ce8:	ad9f      	add	r5, sp, #636	; 0x27c
  204cea:	f103 0eb4 	add.w	lr, r3, #180	; 0xb4
  204cee:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
  204cf2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  204cf6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204cfa:	ada2      	add	r5, sp, #648	; 0x288
  204cfc:	f103 0ec0 	add.w	lr, r3, #192	; 0xc0
  204d00:	f8cd e080 	str.w	lr, [sp, #128]	; 0x80
  204d04:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  204d08:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204d0c:	ada5      	add	r5, sp, #660	; 0x294
  204d0e:	f103 09cc 	add.w	r9, r3, #204	; 0xcc
  204d12:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
  204d16:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204d1a:	ada8      	add	r5, sp, #672	; 0x2a0
  204d1c:	f103 08d8 	add.w	r8, r3, #216	; 0xd8
  204d20:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
  204d24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204d28:	adab      	add	r5, sp, #684	; 0x2ac
  204d2a:	f103 0ce4 	add.w	ip, r3, #228	; 0xe4
  204d2e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
  204d32:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204d36:	f893 50f0 	ldrb.w	r5, [r3, #240]	; 0xf0
  204d3a:	9515      	str	r5, [sp, #84]	; 0x54
  204d3c:	adaf      	add	r5, sp, #700	; 0x2bc
  204d3e:	f103 0ef4 	add.w	lr, r3, #244	; 0xf4
  204d42:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
  204d46:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204d4a:	adb2      	add	r5, sp, #712	; 0x2c8
  204d4c:	f503 7780 	add.w	r7, r3, #256	; 0x100
  204d50:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
  204d54:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204d58:	adb5      	add	r5, sp, #724	; 0x2d4
  204d5a:	f503 7286 	add.w	r2, r3, #268	; 0x10c
  204d5e:	9221      	str	r2, [sp, #132]	; 0x84
  204d60:	ca07      	ldmia	r2, {r0, r1, r2}
  204d62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  204d66:	f503 728c 	add.w	r2, r3, #280	; 0x118
  204d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
  204d6e:	90b8      	str	r0, [sp, #736]	; 0x2e0
  204d70:	f8ad 12e4 	strh.w	r1, [sp, #740]	; 0x2e4
  204d74:	f503 758f 	add.w	r5, r3, #286	; 0x11e
  204d78:	682a      	ldr	r2, [r5, #0]
  204d7a:	f8cd 22e6 	str.w	r2, [sp, #742]	; 0x2e6
  204d7e:	88aa      	ldrh	r2, [r5, #4]
  204d80:	f8ad 22ea 	strh.w	r2, [sp, #746]	; 0x2ea
  204d84:	f503 7292 	add.w	r2, r3, #292	; 0x124
  204d88:	e892 0003 	ldmia.w	r2, {r0, r1}
  204d8c:	90bb      	str	r0, [sp, #748]	; 0x2ec
  204d8e:	f8ad 12f0 	strh.w	r1, [sp, #752]	; 0x2f0
  204d92:	f893 112a 	ldrb.w	r1, [r3, #298]	; 0x12a
  204d96:	910e      	str	r1, [sp, #56]	; 0x38
  204d98:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
  204d9c:	9107      	str	r1, [sp, #28]
  204d9e:	f893 1131 	ldrb.w	r1, [r3, #305]	; 0x131
  204da2:	9108      	str	r1, [sp, #32]
  204da4:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
  204da8:	9109      	str	r1, [sp, #36]	; 0x24
      __b = _GLIBCXX_MOVE(__tmp);
  204daa:	2200      	movs	r2, #0
  204dac:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  204db0:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
  204db4:	910a      	str	r1, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
  204db6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  204dba:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
  204dbe:	910b      	str	r1, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
  204dc0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  204dc4:	7822      	ldrb	r2, [r4, #0]
  204dc6:	701a      	strb	r2, [r3, #0]
  204dc8:	7a22      	ldrb	r2, [r4, #8]
  204dca:	721a      	strb	r2, [r3, #8]
  204dcc:	7a62      	ldrb	r2, [r4, #9]
  204dce:	725a      	strb	r2, [r3, #9]
  204dd0:	8962      	ldrh	r2, [r4, #10]
  204dd2:	815a      	strh	r2, [r3, #10]
  204dd4:	7c22      	ldrb	r2, [r4, #16]
  204dd6:	741a      	strb	r2, [r3, #16]
  204dd8:	7c62      	ldrb	r2, [r4, #17]
  204dda:	745a      	strb	r2, [r3, #17]
  204ddc:	7e22      	ldrb	r2, [r4, #24]
  204dde:	761a      	strb	r2, [r3, #24]
  204de0:	f104 021c 	add.w	r2, r4, #28
  204de4:	ca07      	ldmia	r2, {r0, r1, r2}
  204de6:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
  204dea:	f104 0228 	add.w	r2, r4, #40	; 0x28
  204dee:	ca07      	ldmia	r2, {r0, r1, r2}
  204df0:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
  204df4:	f104 0234 	add.w	r2, r4, #52	; 0x34
  204df8:	ca07      	ldmia	r2, {r0, r1, r2}
  204dfa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204dfe:	f104 0240 	add.w	r2, r4, #64	; 0x40
  204e02:	ca07      	ldmia	r2, {r0, r1, r2}
  204e04:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  204e06:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204e0a:	f104 024c 	add.w	r2, r4, #76	; 0x4c
  204e0e:	ca07      	ldmia	r2, {r0, r1, r2}
  204e10:	9e18      	ldr	r6, [sp, #96]	; 0x60
  204e12:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204e16:	f104 0258 	add.w	r2, r4, #88	; 0x58
  204e1a:	ca07      	ldmia	r2, {r0, r1, r2}
  204e1c:	9e19      	ldr	r6, [sp, #100]	; 0x64
  204e1e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204e22:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
  204e26:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  204e2a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
  204e2c:	669a      	str	r2, [r3, #104]	; 0x68
  204e2e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  204e30:	66da      	str	r2, [r3, #108]	; 0x6c
  204e32:	6f22      	ldr	r2, [r4, #112]	; 0x70
  204e34:	671a      	str	r2, [r3, #112]	; 0x70
  204e36:	f104 0274 	add.w	r2, r4, #116	; 0x74
  204e3a:	ca07      	ldmia	r2, {r0, r1, r2}
  204e3c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
  204e3e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204e42:	f104 0280 	add.w	r2, r4, #128	; 0x80
  204e46:	ca07      	ldmia	r2, {r0, r1, r2}
  204e48:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
  204e4a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204e4e:	f104 028c 	add.w	r2, r4, #140	; 0x8c
  204e52:	ca07      	ldmia	r2, {r0, r1, r2}
  204e54:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  204e56:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204e5a:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
  204e5e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
  204e62:	f104 029c 	add.w	r2, r4, #156	; 0x9c
  204e66:	ca07      	ldmia	r2, {r0, r1, r2}
  204e68:	9e1d      	ldr	r6, [sp, #116]	; 0x74
  204e6a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204e6e:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
  204e72:	ca07      	ldmia	r2, {r0, r1, r2}
  204e74:	9e1e      	ldr	r6, [sp, #120]	; 0x78
  204e76:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204e7a:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
  204e7e:	ca07      	ldmia	r2, {r0, r1, r2}
  204e80:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
  204e82:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204e86:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
  204e8a:	ca07      	ldmia	r2, {r0, r1, r2}
  204e8c:	9e20      	ldr	r6, [sp, #128]	; 0x80
  204e8e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204e92:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
  204e96:	ca07      	ldmia	r2, {r0, r1, r2}
  204e98:	e889 0007 	stmia.w	r9, {r0, r1, r2}
  204e9c:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
  204ea0:	ca07      	ldmia	r2, {r0, r1, r2}
  204ea2:	e888 0007 	stmia.w	r8, {r0, r1, r2}
  204ea6:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
  204eaa:	ca07      	ldmia	r2, {r0, r1, r2}
  204eac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  204eb0:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
  204eb4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  204eb8:	f104 02f4 	add.w	r2, r4, #244	; 0xf4
  204ebc:	ca07      	ldmia	r2, {r0, r1, r2}
  204ebe:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  204ec2:	f504 7280 	add.w	r2, r4, #256	; 0x100
  204ec6:	ca07      	ldmia	r2, {r0, r1, r2}
  204ec8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  204ecc:	f504 7286 	add.w	r2, r4, #268	; 0x10c
  204ed0:	ca07      	ldmia	r2, {r0, r1, r2}
  204ed2:	9e21      	ldr	r6, [sp, #132]	; 0x84
  204ed4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  204ed8:	f503 728c 	add.w	r2, r3, #280	; 0x118
  204edc:	f504 718b 	add.w	r1, r4, #278	; 0x116
  204ee0:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  204ee4:	f822 0b02 	strh.w	r0, [r2], #2
  204ee8:	42aa      	cmp	r2, r5
  204eea:	d1f9      	bne.n	204ee0 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_SA_T0_+0x2d8>
  204eec:	f503 728f 	add.w	r2, r3, #286	; 0x11e
  204ef0:	f504 718e 	add.w	r1, r4, #284	; 0x11c
  204ef4:	f503 7592 	add.w	r5, r3, #292	; 0x124
  204ef8:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  204efc:	f822 0b02 	strh.w	r0, [r2], #2
  204f00:	42aa      	cmp	r2, r5
  204f02:	d1f9      	bne.n	204ef8 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_SA_T0_+0x2f0>
  204f04:	f503 7292 	add.w	r2, r3, #292	; 0x124
  204f08:	f504 7191 	add.w	r1, r4, #290	; 0x122
  204f0c:	f503 7595 	add.w	r5, r3, #298	; 0x12a
  204f10:	f931 0f02 	ldrsh.w	r0, [r1, #2]!
  204f14:	f822 0b02 	strh.w	r0, [r2], #2
  204f18:	42aa      	cmp	r2, r5
  204f1a:	d1f9      	bne.n	204f10 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_SA_T0_+0x308>
  204f1c:	f894 212a 	ldrb.w	r2, [r4, #298]	; 0x12a
  204f20:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
  204f24:	f894 2130 	ldrb.w	r2, [r4, #304]	; 0x130
  204f28:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  204f2c:	f894 2131 	ldrb.w	r2, [r4, #305]	; 0x131
  204f30:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  204f34:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
      __a = _GLIBCXX_MOVE(__b);
  204f38:	2200      	movs	r2, #0
  204f3a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  204f3e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  204f42:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  204f46:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
  204f4a:	f8c3 1134 	str.w	r1, [r3, #308]	; 0x134
      __b = _GLIBCXX_MOVE(__tmp);
  204f4e:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  204f52:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
      __a = _GLIBCXX_MOVE(__b);
  204f56:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
  204f5a:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
      __b = _GLIBCXX_MOVE(__tmp);
  204f5e:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
      _Tp __tmp = _GLIBCXX_MOVE(__a);
  204f62:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
      __a = _GLIBCXX_MOVE(__b);
  204f66:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  204f6a:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
      __b = _GLIBCXX_MOVE(__tmp);
  204f6e:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  204f72:	b108      	cbz	r0, 204f78 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_SA_T0_+0x370>
  204f74:	f00f f879 	bl	21406a <_ZdlPv>
  204f78:	9b16      	ldr	r3, [sp, #88]	; 0x58
  204f7a:	1b1d      	subs	r5, r3, r4
  204f7c:	11ad      	asrs	r5, r5, #6
  204f7e:	f89d 300c 	ldrb.w	r3, [sp, #12]
  204f82:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
  204f86:	f89d 3010 	ldrb.w	r3, [sp, #16]
  204f8a:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
  204f8e:	f89d 3014 	ldrb.w	r3, [sp, #20]
  204f92:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
  204f96:	4b62      	ldr	r3, [pc, #392]	; (205120 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_SA_T0_+0x518>)
  204f98:	9323      	str	r3, [sp, #140]	; 0x8c
  204f9a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  204f9e:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
  204fa2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
  204fa6:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
  204faa:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
  204fae:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
  204fb2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  204fb6:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
  204fba:	ab29      	add	r3, sp, #164	; 0xa4
  204fbc:	aa79      	add	r2, sp, #484	; 0x1e4
  204fbe:	ca07      	ldmia	r2, {r0, r1, r2}
  204fc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204fc4:	ab2c      	add	r3, sp, #176	; 0xb0
  204fc6:	aa7c      	add	r2, sp, #496	; 0x1f0
  204fc8:	ca07      	ldmia	r2, {r0, r1, r2}
  204fca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204fce:	ab2f      	add	r3, sp, #188	; 0xbc
  204fd0:	aa7f      	add	r2, sp, #508	; 0x1fc
  204fd2:	ca07      	ldmia	r2, {r0, r1, r2}
  204fd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204fd8:	ab32      	add	r3, sp, #200	; 0xc8
  204fda:	aa82      	add	r2, sp, #520	; 0x208
  204fdc:	ca07      	ldmia	r2, {r0, r1, r2}
  204fde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204fe2:	ab35      	add	r3, sp, #212	; 0xd4
  204fe4:	aa85      	add	r2, sp, #532	; 0x214
  204fe6:	ca07      	ldmia	r2, {r0, r1, r2}
  204fe8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204fec:	ab38      	add	r3, sp, #224	; 0xe0
  204fee:	aa88      	add	r2, sp, #544	; 0x220
  204ff0:	ca07      	ldmia	r2, {r0, r1, r2}
  204ff2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  204ff6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  204ffa:	f88d 30ec 	strb.w	r3, [sp, #236]	; 0xec
  204ffe:	9b11      	ldr	r3, [sp, #68]	; 0x44
  205000:	933c      	str	r3, [sp, #240]	; 0xf0
  205002:	9b12      	ldr	r3, [sp, #72]	; 0x48
  205004:	933d      	str	r3, [sp, #244]	; 0xf4
  205006:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  205008:	933e      	str	r3, [sp, #248]	; 0xf8
  20500a:	ab3f      	add	r3, sp, #252	; 0xfc
  20500c:	aa8f      	add	r2, sp, #572	; 0x23c
  20500e:	ca07      	ldmia	r2, {r0, r1, r2}
  205010:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  205014:	ab42      	add	r3, sp, #264	; 0x108
  205016:	aa92      	add	r2, sp, #584	; 0x248
  205018:	ca07      	ldmia	r2, {r0, r1, r2}
  20501a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20501e:	ab45      	add	r3, sp, #276	; 0x114
  205020:	aa95      	add	r2, sp, #596	; 0x254
  205022:	ca07      	ldmia	r2, {r0, r1, r2}
  205024:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  205028:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  20502c:	f8ad 3120 	strh.w	r3, [sp, #288]	; 0x120
  205030:	ab49      	add	r3, sp, #292	; 0x124
  205032:	aa99      	add	r2, sp, #612	; 0x264
  205034:	ca07      	ldmia	r2, {r0, r1, r2}
  205036:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20503a:	ab4c      	add	r3, sp, #304	; 0x130
  20503c:	aa9c      	add	r2, sp, #624	; 0x270
  20503e:	ca07      	ldmia	r2, {r0, r1, r2}
  205040:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  205044:	ab4f      	add	r3, sp, #316	; 0x13c
  205046:	aa9f      	add	r2, sp, #636	; 0x27c
  205048:	ca07      	ldmia	r2, {r0, r1, r2}
  20504a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20504e:	ab52      	add	r3, sp, #328	; 0x148
  205050:	aaa2      	add	r2, sp, #648	; 0x288
  205052:	ca07      	ldmia	r2, {r0, r1, r2}
  205054:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  205058:	ab55      	add	r3, sp, #340	; 0x154
  20505a:	aaa5      	add	r2, sp, #660	; 0x294
  20505c:	ca07      	ldmia	r2, {r0, r1, r2}
  20505e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  205062:	ab58      	add	r3, sp, #352	; 0x160
  205064:	aaa8      	add	r2, sp, #672	; 0x2a0
  205066:	ca07      	ldmia	r2, {r0, r1, r2}
  205068:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20506c:	ab5b      	add	r3, sp, #364	; 0x16c
  20506e:	aaab      	add	r2, sp, #684	; 0x2ac
  205070:	ca07      	ldmia	r2, {r0, r1, r2}
  205072:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  205076:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  20507a:	f88d 3178 	strb.w	r3, [sp, #376]	; 0x178
  20507e:	ab5f      	add	r3, sp, #380	; 0x17c
  205080:	aaaf      	add	r2, sp, #700	; 0x2bc
  205082:	ca07      	ldmia	r2, {r0, r1, r2}
  205084:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  205088:	ab62      	add	r3, sp, #392	; 0x188
  20508a:	aab2      	add	r2, sp, #712	; 0x2c8
  20508c:	ca07      	ldmia	r2, {r0, r1, r2}
  20508e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  205092:	ab65      	add	r3, sp, #404	; 0x194
  205094:	aab5      	add	r2, sp, #724	; 0x2d4
  205096:	ca07      	ldmia	r2, {r0, r1, r2}
  205098:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20509c:	4b21      	ldr	r3, [pc, #132]	; (205124 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_SA_T0_+0x51c>)
  20509e:	9325      	str	r3, [sp, #148]	; 0x94
  2050a0:	3314      	adds	r3, #20
  2050a2:	9327      	str	r3, [sp, #156]	; 0x9c
  2050a4:	aab8      	add	r2, sp, #736	; 0x2e0
  2050a6:	e892 0003 	ldmia.w	r2, {r0, r1}
  2050aa:	9068      	str	r0, [sp, #416]	; 0x1a0
  2050ac:	f8ad 11a4 	strh.w	r1, [sp, #420]	; 0x1a4
  2050b0:	abc2      	add	r3, sp, #776	; 0x308
  2050b2:	f853 2d22 	ldr.w	r2, [r3, #-34]!
  2050b6:	f8cd 21a6 	str.w	r2, [sp, #422]	; 0x1a6
  2050ba:	889b      	ldrh	r3, [r3, #4]
  2050bc:	f8ad 31aa 	strh.w	r3, [sp, #426]	; 0x1aa
  2050c0:	aabb      	add	r2, sp, #748	; 0x2ec
  2050c2:	e892 0003 	ldmia.w	r2, {r0, r1}
  2050c6:	906b      	str	r0, [sp, #428]	; 0x1ac
  2050c8:	f8ad 11b0 	strh.w	r1, [sp, #432]	; 0x1b0
  2050cc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  2050d0:	f88d 31b2 	strb.w	r3, [sp, #434]	; 0x1b2
  2050d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
  2050d8:	f88d 31b8 	strb.w	r3, [sp, #440]	; 0x1b8
  2050dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
  2050e0:	f88d 31b9 	strb.w	r3, [sp, #441]	; 0x1b9
  2050e4:	4e10      	ldr	r6, [pc, #64]	; (205128 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_SA_T0_+0x520>)
  2050e6:	966d      	str	r6, [sp, #436]	; 0x1b4
      __a = _GLIBCXX_MOVE(__b);
  2050e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  2050ea:	936f      	str	r3, [sp, #444]	; 0x1bc
  2050ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  2050ee:	9370      	str	r3, [sp, #448]	; 0x1c0
  2050f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  2050f2:	9371      	str	r3, [sp, #452]	; 0x1c4
      std::__adjust_heap(__first, _DistanceType(0),
  2050f4:	f04f 0300 	mov.w	r3, #0
  2050f8:	f88d 3000 	strb.w	r3, [sp]
  2050fc:	ab22      	add	r3, sp, #136	; 0x88
  2050fe:	4a0b      	ldr	r2, [pc, #44]	; (20512c <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_SA_T0_+0x524>)
  205100:	fb02 f205 	mul.w	r2, r2, r5
  205104:	2100      	movs	r1, #0
  205106:	4620      	mov	r0, r4
  205108:	f7ff f86a 	bl	2041e0 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiS2_NS0_5__ops15_Iter_less_iterEEvT_T0_SB_T1_T2_>
  20510c:	966d      	str	r6, [sp, #436]	; 0x1b4
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  20510e:	986f      	ldr	r0, [sp, #444]	; 0x1bc
	if (__p)
  205110:	b108      	cbz	r0, 205116 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_SA_T0_+0x50e>
  205112:	f00e ffaa 	bl	21406a <_ZdlPv>
    }
  205116:	f50d 7d43 	add.w	sp, sp, #780	; 0x30c
  20511a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  20511e:	bf00      	nop
  205120:	00216c1c 	.word	0x00216c1c
  205124:	00216b90 	.word	0x00216b90
  205128:	00216c54 	.word	0x00216c54
  20512c:	cccccccd 	.word	0xcccccccd

00205130 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
  205130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  205134:	b083      	sub	sp, #12
  205136:	9001      	str	r0, [sp, #4]
  205138:	4691      	mov	r9, r2
  20513a:	4688      	mov	r8, r1
  20513c:	460b      	mov	r3, r1
  20513e:	1a09      	subs	r1, r1, r0
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
  205140:	f5b1 5faa 	cmp.w	r1, #5440	; 0x1540
  205144:	db24      	blt.n	205190 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x60>
  205146:	4607      	mov	r7, r0
  205148:	4682      	mov	sl, r0
	{
	  if (__depth_limit == 0)
  20514a:	f1b9 0f00 	cmp.w	r9, #0
  20514e:	d005      	beq.n	20515c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x2c>
  205150:	f8df b118 	ldr.w	fp, [pc, #280]	; 20526c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x13c>
      { return __normal_iterator(_M_current + __n); }
  205154:	f500 72a0 	add.w	r2, r0, #320	; 0x140
  205158:	9200      	str	r2, [sp, #0]
  20515a:	e066      	b.n	20522a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0xfa>
      std::__make_heap(__first, __middle, __comp);
  20515c:	f04f 0200 	mov.w	r2, #0
  205160:	4641      	mov	r1, r8
  205162:	9c01      	ldr	r4, [sp, #4]
  205164:	4620      	mov	r0, r4
  205166:	f7ff fb67 	bl	204838 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_>
    { return __lhs.base() - __rhs.base(); }
  20516a:	eba8 0304 	sub.w	r3, r8, r4
  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare __comp)
    {
      while (__last - __first > 1)
  20516e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  205172:	db0d      	blt.n	205190 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x60>
	--_M_current;
  205174:	f5a8 78a0 	sub.w	r8, r8, #320	; 0x140
	{
	  --__last;
	  std::__pop_heap(__first, __last, __last, __comp);
  205178:	f04f 0300 	mov.w	r3, #0
  20517c:	4642      	mov	r2, r8
  20517e:	4641      	mov	r1, r8
  205180:	4638      	mov	r0, r7
  205182:	f7ff fd41 	bl	204c08 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_SA_T0_>
  205186:	eba8 0307 	sub.w	r3, r8, r7
      while (__last - __first > 1)
  20518a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  20518e:	daf1      	bge.n	205174 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x44>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
	  __last = __cut;
	}
    }
  205190:	b003      	add	sp, #12
  205192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      swap(*__a, *__b);
  205196:	4638      	mov	r0, r7
  205198:	f7fe fb46 	bl	203828 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_>
  20519c:	e00f      	b.n	2051be <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x8e>
  20519e:	9900      	ldr	r1, [sp, #0]
  2051a0:	4638      	mov	r0, r7
  2051a2:	f7fe fb41 	bl	203828 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_>
  2051a6:	e00a      	b.n	2051be <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x8e>
		return this->slave_id_ < right.slave_id_;
  2051a8:	f5a8 70a0 	sub.w	r0, r8, #320	; 0x140
  2051ac:	7800      	ldrb	r0, [r0, #0]
      else if (__comp(__a, __c))
  2051ae:	4282      	cmp	r2, r0
  2051b0:	db08      	blt.n	2051c4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x94>
      else if (__comp(__b, __c))
  2051b2:	4283      	cmp	r3, r0
  2051b4:	bfb8      	it	lt
  2051b6:	4621      	movlt	r1, r4
  2051b8:	4638      	mov	r0, r7
  2051ba:	f7fe fb35 	bl	203828 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_>
  2051be:	9d00      	ldr	r5, [sp, #0]
  2051c0:	4644      	mov	r4, r8
  2051c2:	e006      	b.n	2051d2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0xa2>
  2051c4:	9900      	ldr	r1, [sp, #0]
  2051c6:	4638      	mov	r0, r7
  2051c8:	f7fe fb2e 	bl	203828 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_>
  2051cc:	e7f7      	b.n	2051be <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x8e>
  2051ce:	f505 75a0 	add.w	r5, r5, #320	; 0x140
  2051d2:	462e      	mov	r6, r5
  2051d4:	7839      	ldrb	r1, [r7, #0]
  2051d6:	782b      	ldrb	r3, [r5, #0]
	  while (__comp(__first, __pivot))
  2051d8:	428b      	cmp	r3, r1
  2051da:	dbf8      	blt.n	2051ce <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x9e>
  2051dc:	f5a4 73a0 	sub.w	r3, r4, #320	; 0x140
  2051e0:	781a      	ldrb	r2, [r3, #0]
	  while (__comp(__pivot, __last))
  2051e2:	4291      	cmp	r1, r2
  2051e4:	da0e      	bge.n	205204 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0xd4>
  2051e6:	f5a4 7320 	sub.w	r3, r4, #640	; 0x280
  2051ea:	461c      	mov	r4, r3
  2051ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
  2051f0:	7822      	ldrb	r2, [r4, #0]
  2051f2:	4291      	cmp	r1, r2
  2051f4:	dbf9      	blt.n	2051ea <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0xba>
	  if (!(__first < __last))
  2051f6:	42a6      	cmp	r6, r4
  2051f8:	d206      	bcs.n	205208 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0xd8>
  2051fa:	4621      	mov	r1, r4
  2051fc:	4630      	mov	r0, r6
  2051fe:	f7fe fb13 	bl	203828 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_>
  205202:	e7e4      	b.n	2051ce <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x9e>
  205204:	461c      	mov	r4, r3
  205206:	e7f6      	b.n	2051f6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0xc6>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
  205208:	f04f 0300 	mov.w	r3, #0
  20520c:	464a      	mov	r2, r9
  20520e:	4641      	mov	r1, r8
  205210:	4630      	mov	r0, r6
  205212:	f7ff ff8d 	bl	205130 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_>
    { return __lhs.base() - __rhs.base(); }
  205216:	462b      	mov	r3, r5
  205218:	eba5 050a 	sub.w	r5, r5, sl
      while (__last - __first > int(_S_threshold))
  20521c:	f5b5 5faa 	cmp.w	r5, #5440	; 0x1540
  205220:	dbb6      	blt.n	205190 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x60>
  205222:	46b0      	mov	r8, r6
	  if (__depth_limit == 0)
  205224:	f1b9 0f00 	cmp.w	r9, #0
  205228:	d098      	beq.n	20515c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x2c>
	  --__depth_limit;
  20522a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  20522e:	eba3 030a 	sub.w	r3, r3, sl
  205232:	119b      	asrs	r3, r3, #6
  205234:	fb0b f303 	mul.w	r3, fp, r3
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
  205238:	2b00      	cmp	r3, #0
  20523a:	bfb8      	it	lt
  20523c:	3301      	addlt	r3, #1
  20523e:	105b      	asrs	r3, r3, #1
      { return __normal_iterator(_M_current + __n); }
  205240:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  205244:	019b      	lsls	r3, r3, #6
  205246:	18f9      	adds	r1, r7, r3
      { return __normal_iterator(_M_current - __n); }
  205248:	f5a8 74a0 	sub.w	r4, r8, #320	; 0x140
  20524c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
  205250:	5cfb      	ldrb	r3, [r7, r3]
      if (__comp(__a, __b))
  205252:	429a      	cmp	r2, r3
  205254:	daa8      	bge.n	2051a8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x78>
  205256:	7820      	ldrb	r0, [r4, #0]
	  if (__comp(__b, __c))
  205258:	4283      	cmp	r3, r0
  20525a:	db9c      	blt.n	205196 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x66>
	  else if (__comp(__a, __c))
  20525c:	4282      	cmp	r2, r0
  20525e:	da9e      	bge.n	20519e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x6e>
  205260:	4621      	mov	r1, r4
  205262:	4638      	mov	r0, r7
  205264:	f7fe fae0 	bl	203828 <_ZSt4swapI6NeuronENSt9enable_ifIXsrSt6__and_IJSt21is_move_constructibleIT_ESt18is_move_assignableIS4_EEE5valueEvE4typeERS4_SB_>
  205268:	e7a9      	b.n	2051be <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_+0x8e>
  20526a:	bf00      	nop
  20526c:	cccccccd 	.word	0xcccccccd

00205270 <_ZN14CANInitializer11initDevicesEv>:
{
  205270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  205274:	b083      	sub	sp, #12
  205276:	4606      	mov	r6, r0
	void setMessage(uint8_t message_id, uint8_t slave_id, uint32_t dlc, uint8_t* data){CAN::setMessage(m_device_id, message_id, slave_id, dlc, data);}
  205278:	7900      	ldrb	r0, [r0, #4]
  20527a:	2100      	movs	r1, #0
  20527c:	9100      	str	r1, [sp, #0]
  20527e:	460b      	mov	r3, r1
  205280:	220f      	movs	r2, #15
  205282:	f001 fd9f 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
  205286:	f001 fd97 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  20528a:	2101      	movs	r1, #1
  20528c:	f00a fec6 	bl	21001c <HAL_CAN_Transmit>
	HAL_Delay(200);
  205290:	20c8      	movs	r0, #200	; 0xc8
  205292:	f00a fb0d 	bl	20f8b0 <HAL_Delay>
	std::sort(neuron_.begin(), neuron_.end());
  205296:	68b3      	ldr	r3, [r6, #8]
      : _M_current(__i) { }
  205298:	681f      	ldr	r7, [r3, #0]
  20529a:	685d      	ldr	r5, [r3, #4]
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
	   _Compare __comp)
    {
      if (__first != __last)
  20529c:	42af      	cmp	r7, r5
  20529e:	d02c      	beq.n	2052fa <_ZN14CANInitializer11initDevicesEv+0x8a>
    { return __lhs.base() - __rhs.base(); }
  2052a0:	1bec      	subs	r4, r5, r7
  2052a2:	11a3      	asrs	r3, r4, #6
  2052a4:	4a2b      	ldr	r2, [pc, #172]	; (205354 <_ZN14CANInitializer11initDevicesEv+0xe4>)
  2052a6:	fb02 f203 	mul.w	r2, r2, r3

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
  2052aa:	fab2 f282 	clz	r2, r2
  2052ae:	f1c2 021f 	rsb	r2, r2, #31
	{
	  std::__introsort_loop(__first, __last,
  2052b2:	f04f 0300 	mov.w	r3, #0
  2052b6:	0052      	lsls	r2, r2, #1
  2052b8:	4629      	mov	r1, r5
  2052ba:	4638      	mov	r0, r7
  2052bc:	f7ff ff38 	bl	205130 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEEiNS0_5__ops15_Iter_less_iterEEvT_SA_T0_T1_>
      if (__last - __first > int(_S_threshold))
  2052c0:	f5b4 5faa 	cmp.w	r4, #5440	; 0x1540
  2052c4:	db13      	blt.n	2052ee <_ZN14CANInitializer11initDevicesEv+0x7e>
      { return __normal_iterator(_M_current + __n); }
  2052c6:	f507 54a0 	add.w	r4, r7, #5120	; 0x1400
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
  2052ca:	f04f 0200 	mov.w	r2, #0
  2052ce:	4621      	mov	r1, r4
  2052d0:	4638      	mov	r0, r7
  2052d2:	f7fd ff9b 	bl	20320c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
  2052d6:	42a5      	cmp	r5, r4
  2052d8:	d00f      	beq.n	2052fa <_ZN14CANInitializer11initDevicesEv+0x8a>
	std::__unguarded_linear_insert(__i,
  2052da:	f04f 0100 	mov.w	r1, #0
  2052de:	4620      	mov	r0, r4
  2052e0:	f7fd fcc2 	bl	202c68 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops14_Val_less_iterEEvT_T0_>
  2052e4:	f504 74a0 	add.w	r4, r4, #320	; 0x140
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
  2052e8:	42a5      	cmp	r5, r4
  2052ea:	d1f6      	bne.n	2052da <_ZN14CANInitializer11initDevicesEv+0x6a>
  2052ec:	e005      	b.n	2052fa <_ZN14CANInitializer11initDevicesEv+0x8a>
	std::__insertion_sort(__first, __last, __comp);
  2052ee:	f04f 0200 	mov.w	r2, #0
  2052f2:	4629      	mov	r1, r5
  2052f4:	4638      	mov	r0, r7
  2052f6:	f7fd ff89 	bl	20320c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIP6NeuronSt6vectorIS2_SaIS2_EEEENS0_5__ops15_Iter_less_iterEEvT_SA_T0_>
	for (unsigned int i = 0; i < neuron_.size(); i++) {
  2052fa:	68b3      	ldr	r3, [r6, #8]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2052fc:	681a      	ldr	r2, [r3, #0]
  2052fe:	685b      	ldr	r3, [r3, #4]
  205300:	1a9b      	subs	r3, r3, r2
  205302:	119b      	asrs	r3, r3, #6
  205304:	4913      	ldr	r1, [pc, #76]	; (205354 <_ZN14CANInitializer11initDevicesEv+0xe4>)
  205306:	fb01 f303 	mul.w	r3, r1, r3
  20530a:	b303      	cbz	r3, 20534e <_ZN14CANInitializer11initDevicesEv+0xde>
  20530c:	2400      	movs	r4, #0
  20530e:	4625      	mov	r5, r4
  205310:	46a0      	mov	r8, r4
  205312:	2701      	movs	r7, #1
  205314:	4689      	mov	r9, r1
  205316:	5d12      	ldrb	r2, [r2, r4]
  205318:	7930      	ldrb	r0, [r6, #4]
  20531a:	f8cd 8000 	str.w	r8, [sp]
  20531e:	4643      	mov	r3, r8
  205320:	4639      	mov	r1, r7
  205322:	f001 fd4f 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
  205326:	f001 fd47 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  20532a:	4639      	mov	r1, r7
  20532c:	f00a fe76 	bl	21001c <HAL_CAN_Transmit>
		HAL_Delay(200);
  205330:	20c8      	movs	r0, #200	; 0xc8
  205332:	f00a fabd 	bl	20f8b0 <HAL_Delay>
	for (unsigned int i = 0; i < neuron_.size(); i++) {
  205336:	3501      	adds	r5, #1
  205338:	68b3      	ldr	r3, [r6, #8]
  20533a:	681a      	ldr	r2, [r3, #0]
  20533c:	f504 74a0 	add.w	r4, r4, #320	; 0x140
  205340:	685b      	ldr	r3, [r3, #4]
  205342:	1a9b      	subs	r3, r3, r2
  205344:	119b      	asrs	r3, r3, #6
  205346:	fb09 f303 	mul.w	r3, r9, r3
  20534a:	429d      	cmp	r5, r3
  20534c:	d3e3      	bcc.n	205316 <_ZN14CANInitializer11initDevicesEv+0xa6>
}
  20534e:	b003      	add	sp, #12
  205350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  205354:	cccccccd 	.word	0xcccccccd

00205358 <_ZN8CANMotor8sendDataEv>:
 */

#include "can_motor.h"

void CANMotor::sendData()
{
  205358:	4770      	bx	lr

0020535a <_ZN8CANMotor19receiveDataCallbackEhhmPh>:

	*/
}

void CANMotor::receiveDataCallback(uint8_t slave_id, uint8_t message_id, uint32_t DLC, uint8_t* data)
{
  20535a:	4770      	bx	lr

0020535c <_ZN18CANMotorSendDevice19receiveDataCallbackEhhmPh>:
	setMessage(CAN::MESSAGEID_RECEIVE_PWM_6_11, CAN::BROADCAST_ID, 8, pwm_data);
	sendMessage(0);
}

void CANMotorSendDevice::receiveDataCallback(uint8_t slave_id, uint8_t message_id, uint32_t DLC, uint8_t* data)
{
  20535c:	4770      	bx	lr
	...

00205360 <_ZN18CANMotorSendDevice8sendDataEv>:
{
  205360:	b5f0      	push	{r4, r5, r6, r7, lr}
  205362:	b089      	sub	sp, #36	; 0x24
  205364:	4605      	mov	r5, r0
	uint8_t pwm_data[8] = {};
  205366:	2300      	movs	r3, #0
  205368:	9306      	str	r3, [sp, #24]
  20536a:	9307      	str	r3, [sp, #28]
	uint16_t motor_pwms[6] = {};
  20536c:	9303      	str	r3, [sp, #12]
  20536e:	9304      	str	r3, [sp, #16]
  205370:	9305      	str	r3, [sp, #20]
  205372:	6883      	ldr	r3, [r0, #8]
  205374:	68c2      	ldr	r2, [r0, #12]
  205376:	1ad2      	subs	r2, r2, r3
  205378:	1092      	asrs	r2, r2, #2
	unsigned int send_motor_num = std::min(static_cast<int>(can_motor_.size()), 6);
  20537a:	4616      	mov	r6, r2
  20537c:	2a06      	cmp	r2, #6
  20537e:	bfa8      	it	ge
  205380:	2606      	movge	r6, #6
	for (unsigned int i = 0; i < send_motor_num; i++) {
  205382:	b19e      	cbz	r6, 2053ac <_ZN18CANMotorSendDevice8sendDataEv+0x4c>
  205384:	4617      	mov	r7, r2
	if (__n >= this->size())
  205386:	b17a      	cbz	r2, 2053a8 <_ZN18CANMotorSendDevice8sendDataEv+0x48>
  205388:	3b04      	subs	r3, #4
  20538a:	a803      	add	r0, sp, #12
  20538c:	2100      	movs	r1, #0
	CANMotor(uint8_t slave_id) : CANDevice(CAN::DEVICEID_MOTOR, slave_id), m_pwm(0){}
	void sendData() override;
	void receiveDataCallback(uint8_t slave_id, uint8_t message_id, uint32_t DLC, uint8_t* data) override;
	void setPwm(uint16_t pwm){m_pwm = pwm;}
	uint16_t getPwm()const {return m_pwm;}
  20538e:	f853 4f04 	ldr.w	r4, [r3, #4]!
		motor_pwms[i] = can_motor_.at(i).get().getPwm();
  205392:	88e4      	ldrh	r4, [r4, #6]
  205394:	f820 4b02 	strh.w	r4, [r0], #2
	for (unsigned int i = 0; i < send_motor_num; i++) {
  205398:	3101      	adds	r1, #1
  20539a:	428e      	cmp	r6, r1
  20539c:	d006      	beq.n	2053ac <_ZN18CANMotorSendDevice8sendDataEv+0x4c>
  20539e:	42b9      	cmp	r1, r7
  2053a0:	d1f5      	bne.n	20538e <_ZN18CANMotorSendDevice8sendDataEv+0x2e>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  2053a2:	4850      	ldr	r0, [pc, #320]	; (2054e4 <_ZN18CANMotorSendDevice8sendDataEv+0x184>)
  2053a4:	f00f fd71 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  2053a8:	4611      	mov	r1, r2
  2053aa:	e7fa      	b.n	2053a2 <_ZN18CANMotorSendDevice8sendDataEv+0x42>
		pwm_data[0] = motor_pwms[0] & 0xFF;
  2053ac:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  2053b0:	f88d 2018 	strb.w	r2, [sp, #24]
		pwm_data[1] = ((motor_pwms[1] << 2) & 0xFC) | ((motor_pwms[0] >> 8) & 0x03);
  2053b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  2053b8:	f3c2 2201 	ubfx	r2, r2, #8, #2
  2053bc:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
  2053c0:	f88d 2019 	strb.w	r2, [sp, #25]
		pwm_data[2] = ((motor_pwms[2] << 4) & 0xF0) | ((motor_pwms[1] >> 6) & 0x0F);
  2053c4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  2053c8:	f3c3 1383 	ubfx	r3, r3, #6, #4
  2053cc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  2053d0:	f88d 301a 	strb.w	r3, [sp, #26]
		pwm_data[3] = ((motor_pwms[2] >> 4) & 0x3F);
  2053d4:	f3c2 1205 	ubfx	r2, r2, #4, #6
  2053d8:	f88d 201b 	strb.w	r2, [sp, #27]
		pwm_data[4] = motor_pwms[3] & 0xFF;
  2053dc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  2053e0:	f88d 201c 	strb.w	r2, [sp, #28]
		pwm_data[5] = ((motor_pwms[4] << 2) & 0xFC) | ((motor_pwms[3] >> 8) & 0x03);
  2053e4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  2053e8:	f3c2 2201 	ubfx	r2, r2, #8, #2
  2053ec:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
  2053f0:	f88d 201d 	strb.w	r2, [sp, #29]
		pwm_data[6] = ((motor_pwms[5] << 4) & 0xF0) | ((motor_pwms[4] >> 6) & 0x0F);
  2053f4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  2053f8:	f3c3 1383 	ubfx	r3, r3, #6, #4
  2053fc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  205400:	f88d 301e 	strb.w	r3, [sp, #30]
		pwm_data[7] = ((motor_pwms[5] >> 4) & 0x3F);
  205404:	f3c2 1205 	ubfx	r2, r2, #4, #6
  205408:	f88d 201f 	strb.w	r2, [sp, #31]
  20540c:	7928      	ldrb	r0, [r5, #4]
  20540e:	ab06      	add	r3, sp, #24
  205410:	9300      	str	r3, [sp, #0]
  205412:	2308      	movs	r3, #8
  205414:	220f      	movs	r2, #15
  205416:	2100      	movs	r1, #0
  205418:	f001 fcd4 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
  20541c:	f001 fccc 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  205420:	2100      	movs	r1, #0
  205422:	f00a fdfb 	bl	21001c <HAL_CAN_Transmit>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  205426:	68a8      	ldr	r0, [r5, #8]
  205428:	68ea      	ldr	r2, [r5, #12]
  20542a:	1a12      	subs	r2, r2, r0
  20542c:	1092      	asrs	r2, r2, #2
	if (can_motor_.size() <= 6) return;
  20542e:	2a06      	cmp	r2, #6
  205430:	d955      	bls.n	2054de <_ZN18CANMotorSendDevice8sendDataEv+0x17e>
	send_motor_num = std::min(static_cast<int>(can_motor_.size() - 6), 6);
  205432:	1f96      	subs	r6, r2, #6
  205434:	2e06      	cmp	r6, #6
  205436:	bfa8      	it	ge
  205438:	2606      	movge	r6, #6
	for (unsigned int i = 0; i < send_motor_num; i++) {
  20543a:	b19e      	cbz	r6, 205464 <_ZN18CANMotorSendDevice8sendDataEv+0x104>
  20543c:	3018      	adds	r0, #24
  20543e:	ac03      	add	r4, sp, #12
  205440:	3606      	adds	r6, #6
  205442:	1c57      	adds	r7, r2, #1
  205444:	2107      	movs	r1, #7
      operator _Tp&() const noexcept
      { return this->get(); }

      _Tp&
      get() const noexcept
      { return *_M_data; }
  205446:	f850 3b04 	ldr.w	r3, [r0], #4
		motor_pwms[i] = can_motor_.at(i + 6).get().getPwm();
  20544a:	88db      	ldrh	r3, [r3, #6]
  20544c:	f824 3b02 	strh.w	r3, [r4], #2
	for (unsigned int i = 0; i < send_motor_num; i++) {
  205450:	42b1      	cmp	r1, r6
  205452:	d007      	beq.n	205464 <_ZN18CANMotorSendDevice8sendDataEv+0x104>
  205454:	1c4b      	adds	r3, r1, #1
	if (__n >= this->size())
  205456:	42bb      	cmp	r3, r7
  205458:	d001      	beq.n	20545e <_ZN18CANMotorSendDevice8sendDataEv+0xfe>
  20545a:	4619      	mov	r1, r3
  20545c:	e7f3      	b.n	205446 <_ZN18CANMotorSendDevice8sendDataEv+0xe6>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  20545e:	4821      	ldr	r0, [pc, #132]	; (2054e4 <_ZN18CANMotorSendDevice8sendDataEv+0x184>)
  205460:	f00f fd13 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
		pwm_data[0] = motor_pwms[0] & 0xFF;
  205464:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  205468:	f88d 2018 	strb.w	r2, [sp, #24]
		pwm_data[1] = ((motor_pwms[1] << 2) & 0xFC) | ((motor_pwms[0] >> 8) & 0x03);
  20546c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  205470:	f3c2 2201 	ubfx	r2, r2, #8, #2
  205474:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
  205478:	f88d 2019 	strb.w	r2, [sp, #25]
		pwm_data[2] = ((motor_pwms[2] << 4) & 0xF0) | ((motor_pwms[1] >> 6) & 0x0F);
  20547c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  205480:	f3c3 1383 	ubfx	r3, r3, #6, #4
  205484:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  205488:	f88d 301a 	strb.w	r3, [sp, #26]
		pwm_data[3] = ((motor_pwms[2] >> 4) & 0x3F);
  20548c:	f3c2 1205 	ubfx	r2, r2, #4, #6
  205490:	f88d 201b 	strb.w	r2, [sp, #27]
		pwm_data[4] = motor_pwms[3] & 0xFF;
  205494:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  205498:	f88d 201c 	strb.w	r2, [sp, #28]
		pwm_data[5] = ((motor_pwms[4] << 2) & 0xFC) | ((motor_pwms[3] >> 8) & 0x03);
  20549c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  2054a0:	f3c2 2201 	ubfx	r2, r2, #8, #2
  2054a4:	ea42 0283 	orr.w	r2, r2, r3, lsl #2
  2054a8:	f88d 201d 	strb.w	r2, [sp, #29]
		pwm_data[6] = ((motor_pwms[5] << 4) & 0xF0) | ((motor_pwms[4] >> 6) & 0x0F);
  2054ac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  2054b0:	f3c3 1383 	ubfx	r3, r3, #6, #4
  2054b4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  2054b8:	f88d 301e 	strb.w	r3, [sp, #30]
		pwm_data[7] = ((motor_pwms[5] >> 4) & 0x3F);
  2054bc:	f3c2 1205 	ubfx	r2, r2, #4, #6
  2054c0:	f88d 201f 	strb.w	r2, [sp, #31]
  2054c4:	7928      	ldrb	r0, [r5, #4]
  2054c6:	ab06      	add	r3, sp, #24
  2054c8:	9300      	str	r3, [sp, #0]
  2054ca:	2308      	movs	r3, #8
  2054cc:	220f      	movs	r2, #15
  2054ce:	2101      	movs	r1, #1
  2054d0:	f001 fc78 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
  2054d4:	f001 fc70 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  2054d8:	2100      	movs	r1, #0
  2054da:	f00a fd9f 	bl	21001c <HAL_CAN_Transmit>
}
  2054de:	b009      	add	sp, #36	; 0x24
  2054e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  2054e2:	bf00      	nop
  2054e4:	00216d60 	.word	0x00216d60

002054e8 <_ZN8CANServo19receiveDataCallbackEhhmPh>:
	setMessage(CAN::MESSAGEID_RECEIVE_SERVO_ANGLE, m_slave_id, servo_.size() * 2, reinterpret_cast<uint8_t*>(target_angle));
	sendMessage(0);
}

void CANServo::receiveDataCallback(uint8_t slave_id, uint8_t message_id, uint32_t DLC, uint8_t* data)
{
  2054e8:	b4f0      	push	{r4, r5, r6, r7}
  2054ea:	9b04      	ldr	r3, [sp, #16]
	CANServoData servo_data = *(reinterpret_cast<CANServoData*>(data));
  2054ec:	881f      	ldrh	r7, [r3, #0]
  2054ee:	789e      	ldrb	r6, [r3, #2]
  2054f0:	78dd      	ldrb	r5, [r3, #3]
  2054f2:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  2054f6:	7999      	ldrb	r1, [r3, #6]
      { return *(this->_M_impl._M_start + __n); }
  2054f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  2054fc:	00d2      	lsls	r2, r2, #3
	servo_[message_id].present_position_ = servo_data.angle;
  2054fe:	6883      	ldr	r3, [r0, #8]
  205500:	4413      	add	r3, r2
  205502:	811f      	strh	r7, [r3, #8]
	servo_[message_id].present_temperature_ = servo_data.temperature;
  205504:	6883      	ldr	r3, [r0, #8]
  205506:	4413      	add	r3, r2
  205508:	749e      	strb	r6, [r3, #18]
	servo_[message_id].moving_ = servo_data.moving;
  20550a:	6883      	ldr	r3, [r0, #8]
  20550c:	4413      	add	r3, r2
  20550e:	74dd      	strb	r5, [r3, #19]
	servo_[message_id].present_current_ = servo_data.current;
  205510:	6883      	ldr	r3, [r0, #8]
  205512:	4413      	add	r3, r2
  205514:	81dc      	strh	r4, [r3, #14]
	servo_[message_id].error_ = servo_data.error;
  205516:	6883      	ldr	r3, [r0, #8]
  205518:	441a      	add	r2, r3
  20551a:	7511      	strb	r1, [r2, #20]
}
  20551c:	bcf0      	pop	{r4, r5, r6, r7}
  20551e:	4770      	bx	lr

00205520 <_ZN8CANServo8sendDataEv>:
{
  205520:	b5f0      	push	{r4, r5, r6, r7, lr}
  205522:	b085      	sub	sp, #20
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  205524:	6882      	ldr	r2, [r0, #8]
  205526:	68c3      	ldr	r3, [r0, #12]
  205528:	1a9b      	subs	r3, r3, r2
  20552a:	10db      	asrs	r3, r3, #3
  20552c:	4912      	ldr	r1, [pc, #72]	; (205578 <_ZN8CANServo8sendDataEv+0x58>)
  20552e:	fb01 f303 	mul.w	r3, r1, r3
	for (unsigned int i = 0 ; i < servo_.size(); i++) {
  205532:	b18b      	cbz	r3, 205558 <_ZN8CANServo8sendDataEv+0x38>
  205534:	ad02      	add	r5, sp, #8
  205536:	eb05 0743 	add.w	r7, r5, r3, lsl #1
		target_angle[i] = ((servo_[i].torque_enable_ ? 1 : 0) << 15) | (servo_[i].goal_position_ & 0xFFF);
  20553a:	4e10      	ldr	r6, [pc, #64]	; (20557c <_ZN8CANServo8sendDataEv+0x5c>)
  20553c:	7d91      	ldrb	r1, [r2, #22]
  20553e:	2900      	cmp	r1, #0
  205540:	bf14      	ite	ne
  205542:	4631      	movne	r1, r6
  205544:	2100      	moveq	r1, #0
  205546:	8954      	ldrh	r4, [r2, #10]
  205548:	f3c4 040b 	ubfx	r4, r4, #0, #12
  20554c:	4321      	orrs	r1, r4
  20554e:	f825 1b02 	strh.w	r1, [r5], #2
  205552:	3218      	adds	r2, #24
	for (unsigned int i = 0 ; i < servo_.size(); i++) {
  205554:	42bd      	cmp	r5, r7
  205556:	d1f1      	bne.n	20553c <_ZN8CANServo8sendDataEv+0x1c>
  205558:	7942      	ldrb	r2, [r0, #5]
  20555a:	7900      	ldrb	r0, [r0, #4]
  20555c:	a902      	add	r1, sp, #8
  20555e:	9100      	str	r1, [sp, #0]
  205560:	005b      	lsls	r3, r3, #1
  205562:	2100      	movs	r1, #0
  205564:	f001 fc2e 	bl	206dc4 <_ZN3CAN10setMessageEhhhmPh>
  205568:	f001 fc26 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  20556c:	2100      	movs	r1, #0
  20556e:	f00a fd55 	bl	21001c <HAL_CAN_Transmit>
}
  205572:	b005      	add	sp, #20
  205574:	bdf0      	pop	{r4, r5, r6, r7, pc}
  205576:	bf00      	nop
  205578:	aaaaaaab 	.word	0xaaaaaaab
  20557c:	ffff8000 	.word	0xffff8000

00205580 <_ZNK6hydrus14BoardConfigCmd9serializeEPh>:
      command(0),
      data_length(0), data(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  205580:	b430      	push	{r4, r5}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->command >> (8 * 0)) & 0xFF;
  205582:	7903      	ldrb	r3, [r0, #4]
  205584:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->command);
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
  205586:	6883      	ldr	r3, [r0, #8]
  205588:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
  20558a:	6883      	ldr	r3, [r0, #8]
  20558c:	0a1b      	lsrs	r3, r3, #8
  20558e:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
  205590:	8943      	ldrh	r3, [r0, #10]
  205592:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
  205594:	7ac3      	ldrb	r3, [r0, #11]
  205596:	710b      	strb	r3, [r1, #4]
      offset += sizeof(this->data_length);
      for( uint32_t i = 0; i < data_length; i++){
  205598:	6883      	ldr	r3, [r0, #8]
  20559a:	b1a3      	cbz	r3, 2055c6 <_ZNK6hydrus14BoardConfigCmd9serializeEPh+0x46>
  20559c:	2200      	movs	r2, #0
  20559e:	2405      	movs	r4, #5
      union {
        int32_t real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
  2055a0:	6903      	ldr	r3, [r0, #16]
  2055a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
  2055a6:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
  2055a8:	0a1d      	lsrs	r5, r3, #8
  2055aa:	718d      	strb	r5, [r1, #6]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
  2055ac:	0c1d      	lsrs	r5, r3, #16
  2055ae:	71cd      	strb	r5, [r1, #7]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
  2055b0:	0e1b      	lsrs	r3, r3, #24
  2055b2:	720b      	strb	r3, [r1, #8]
  2055b4:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < data_length; i++){
  2055b6:	3201      	adds	r2, #1
  2055b8:	3104      	adds	r1, #4
  2055ba:	6883      	ldr	r3, [r0, #8]
  2055bc:	4293      	cmp	r3, r2
  2055be:	d8ef      	bhi.n	2055a0 <_ZNK6hydrus14BoardConfigCmd9serializeEPh+0x20>
      offset += sizeof(this->data[i]);
      }
      return offset;
    }
  2055c0:	4620      	mov	r0, r4
  2055c2:	bc30      	pop	{r4, r5}
  2055c4:	4770      	bx	lr
      offset += sizeof(this->data_length);
  2055c6:	2405      	movs	r4, #5
      return offset;
  2055c8:	e7fa      	b.n	2055c0 <_ZNK6hydrus14BoardConfigCmd9serializeEPh+0x40>
	...

002055cc <_ZN6hydrus14BoardConfigCmd7getTypeEv>:
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int32_t));
      }
     return offset;
    }

    const char * getType(){ return "hydrus/BoardConfigCmd"; };
  2055cc:	4800      	ldr	r0, [pc, #0]	; (2055d0 <_ZN6hydrus14BoardConfigCmd7getTypeEv+0x4>)
  2055ce:	4770      	bx	lr
  2055d0:	00217198 	.word	0x00217198

002055d4 <_ZN6hydrus14BoardConfigCmd6getMD5Ev>:
    const char * getMD5(){ return "fe72e9366d604d0754f9495f10cd2281"; };
  2055d4:	4800      	ldr	r0, [pc, #0]	; (2055d8 <_ZN6hydrus14BoardConfigCmd6getMD5Ev+0x4>)
  2055d6:	4770      	bx	lr
  2055d8:	00217174 	.word	0x00217174

002055dc <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      return offset;
    }
  2055dc:	2000      	movs	r0, #0
  2055de:	4770      	bx	lr

002055e0 <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
     return offset;
    }
  2055e0:	2000      	movs	r0, #0
  2055e2:	4770      	bx	lr

002055e4 <_ZN8std_msgs5Empty7getTypeEv>:

    const char * getType(){ return "std_msgs/Empty"; };
  2055e4:	4800      	ldr	r0, [pc, #0]	; (2055e8 <_ZN8std_msgs5Empty7getTypeEv+0x4>)
  2055e6:	4770      	bx	lr
  2055e8:	002172bc 	.word	0x002172bc

002055ec <_ZN8std_msgs5Empty6getMD5Ev>:
    const char * getMD5(){ return "d41d8cd98f00b204e9800998ecf8427e"; };
  2055ec:	4800      	ldr	r0, [pc, #0]	; (2055f0 <_ZN8std_msgs5Empty6getMD5Ev+0x4>)
  2055ee:	4770      	bx	lr
  2055f0:	00217298 	.word	0x00217298

002055f4 <_ZNK6hydrus9ServoInfo9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->id >> (8 * 0)) & 0xFF;
  2055f4:	7903      	ldrb	r3, [r0, #4]
  2055f6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->id);
      *(outbuffer + offset + 0) = (this->p_gain >> (8 * 0)) & 0xFF;
  2055f8:	88c3      	ldrh	r3, [r0, #6]
  2055fa:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 1) = (this->p_gain >> (8 * 1)) & 0xFF;
  2055fc:	88c3      	ldrh	r3, [r0, #6]
  2055fe:	0a1b      	lsrs	r3, r3, #8
  205600:	708b      	strb	r3, [r1, #2]
      offset += sizeof(this->p_gain);
      *(outbuffer + offset + 0) = (this->i_gain >> (8 * 0)) & 0xFF;
  205602:	8903      	ldrh	r3, [r0, #8]
  205604:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 1) = (this->i_gain >> (8 * 1)) & 0xFF;
  205606:	8903      	ldrh	r3, [r0, #8]
  205608:	0a1b      	lsrs	r3, r3, #8
  20560a:	710b      	strb	r3, [r1, #4]
      offset += sizeof(this->i_gain);
      *(outbuffer + offset + 0) = (this->d_gain >> (8 * 0)) & 0xFF;
  20560c:	8943      	ldrh	r3, [r0, #10]
  20560e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 1) = (this->d_gain >> (8 * 1)) & 0xFF;
  205610:	8943      	ldrh	r3, [r0, #10]
  205612:	0a1b      	lsrs	r3, r3, #8
  205614:	718b      	strb	r3, [r1, #6]
      offset += sizeof(this->d_gain);
      *(outbuffer + offset + 0) = (this->profile_velocity >> (8 * 0)) & 0xFF;
  205616:	8983      	ldrh	r3, [r0, #12]
  205618:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 1) = (this->profile_velocity >> (8 * 1)) & 0xFF;
  20561a:	8983      	ldrh	r3, [r0, #12]
  20561c:	0a1b      	lsrs	r3, r3, #8
  20561e:	720b      	strb	r3, [r1, #8]
      offset += sizeof(this->profile_velocity);
      *(outbuffer + offset + 0) = (this->current_limit >> (8 * 0)) & 0xFF;
  205620:	89c3      	ldrh	r3, [r0, #14]
  205622:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 1) = (this->current_limit >> (8 * 1)) & 0xFF;
  205624:	89c3      	ldrh	r3, [r0, #14]
  205626:	0a1b      	lsrs	r3, r3, #8
  205628:	728b      	strb	r3, [r1, #10]
      offset += sizeof(this->current_limit);
      *(outbuffer + offset + 0) = (this->send_data_flag >> (8 * 0)) & 0xFF;
  20562a:	7c03      	ldrb	r3, [r0, #16]
  20562c:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->send_data_flag);
      return offset;
    }
  20562e:	200c      	movs	r0, #12
  205630:	4770      	bx	lr

00205632 <_ZN6hydrus9ServoInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->id =  ((uint8_t) (*(inbuffer + offset)));
  205632:	780b      	ldrb	r3, [r1, #0]
  205634:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->id);
      this->p_gain =  ((uint16_t) (*(inbuffer + offset)));
  205636:	784b      	ldrb	r3, [r1, #1]
  205638:	80c3      	strh	r3, [r0, #6]
      this->p_gain |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20563a:	788a      	ldrb	r2, [r1, #2]
  20563c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  205640:	80c3      	strh	r3, [r0, #6]
      offset += sizeof(this->p_gain);
      this->i_gain =  ((uint16_t) (*(inbuffer + offset)));
  205642:	78cb      	ldrb	r3, [r1, #3]
  205644:	8103      	strh	r3, [r0, #8]
      this->i_gain |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205646:	790a      	ldrb	r2, [r1, #4]
  205648:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20564c:	8103      	strh	r3, [r0, #8]
      offset += sizeof(this->i_gain);
      this->d_gain =  ((uint16_t) (*(inbuffer + offset)));
  20564e:	794b      	ldrb	r3, [r1, #5]
  205650:	8143      	strh	r3, [r0, #10]
      this->d_gain |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205652:	798a      	ldrb	r2, [r1, #6]
  205654:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  205658:	8143      	strh	r3, [r0, #10]
      offset += sizeof(this->d_gain);
      this->profile_velocity =  ((uint16_t) (*(inbuffer + offset)));
  20565a:	79cb      	ldrb	r3, [r1, #7]
  20565c:	8183      	strh	r3, [r0, #12]
      this->profile_velocity |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20565e:	7a0a      	ldrb	r2, [r1, #8]
  205660:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  205664:	8183      	strh	r3, [r0, #12]
      offset += sizeof(this->profile_velocity);
      this->current_limit =  ((uint16_t) (*(inbuffer + offset)));
  205666:	7a4b      	ldrb	r3, [r1, #9]
  205668:	81c3      	strh	r3, [r0, #14]
      this->current_limit |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20566a:	7a8a      	ldrb	r2, [r1, #10]
  20566c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  205670:	81c3      	strh	r3, [r0, #14]
      offset += sizeof(this->current_limit);
      this->send_data_flag =  ((uint8_t) (*(inbuffer + offset)));
  205672:	7acb      	ldrb	r3, [r1, #11]
  205674:	7403      	strb	r3, [r0, #16]
      offset += sizeof(this->send_data_flag);
     return offset;
    }
  205676:	200c      	movs	r0, #12
  205678:	4770      	bx	lr
	...

0020567c <_ZN6hydrus9ServoInfo7getTypeEv>:

    const char * getType(){ return "hydrus/ServoInfo"; };
  20567c:	4800      	ldr	r0, [pc, #0]	; (205680 <_ZN6hydrus9ServoInfo7getTypeEv+0x4>)
  20567e:	4770      	bx	lr
  205680:	00217284 	.word	0x00217284

00205684 <_ZN6hydrus9ServoInfo6getMD5Ev>:
    const char * getMD5(){ return "21668015db58f1904477ca53012db120"; };
  205684:	4800      	ldr	r0, [pc, #0]	; (205688 <_ZN6hydrus9ServoInfo6getMD5Ev+0x4>)
  205686:	4770      	bx	lr
  205688:	00217260 	.word	0x00217260

0020568c <_ZNK6hydrus9BoardInfo9serializeEPh>:
      imu_send_data_flag(0),
      servos_length(0), servos(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  20568c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->slave_id >> (8 * 0)) & 0xFF;
  205690:	7903      	ldrb	r3, [r0, #4]
  205692:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->slave_id);
      *(outbuffer + offset + 0) = (this->imu_send_data_flag >> (8 * 0)) & 0xFF;
  205694:	7943      	ldrb	r3, [r0, #5]
  205696:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->imu_send_data_flag);
      *(outbuffer + offset + 0) = (this->servos_length >> (8 * 0)) & 0xFF;
  205698:	6883      	ldr	r3, [r0, #8]
  20569a:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 1) = (this->servos_length >> (8 * 1)) & 0xFF;
  20569c:	6883      	ldr	r3, [r0, #8]
  20569e:	0a1b      	lsrs	r3, r3, #8
  2056a0:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 2) = (this->servos_length >> (8 * 2)) & 0xFF;
  2056a2:	8943      	ldrh	r3, [r0, #10]
  2056a4:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 3) = (this->servos_length >> (8 * 3)) & 0xFF;
  2056a6:	7ac3      	ldrb	r3, [r0, #11]
  2056a8:	714b      	strb	r3, [r1, #5]
      offset += sizeof(this->servos_length);
      for( uint32_t i = 0; i < servos_length; i++){
  2056aa:	6883      	ldr	r3, [r0, #8]
  2056ac:	b1a3      	cbz	r3, 2056d8 <_ZNK6hydrus9BoardInfo9serializeEPh+0x4c>
  2056ae:	4688      	mov	r8, r1
  2056b0:	4607      	mov	r7, r0
  2056b2:	2400      	movs	r4, #0
  2056b4:	4626      	mov	r6, r4
  2056b6:	2506      	movs	r5, #6
      offset += this->servos[i].serialize(outbuffer + offset);
  2056b8:	6a38      	ldr	r0, [r7, #32]
  2056ba:	5903      	ldr	r3, [r0, r4]
  2056bc:	681b      	ldr	r3, [r3, #0]
  2056be:	eb08 0105 	add.w	r1, r8, r5
  2056c2:	4420      	add	r0, r4
  2056c4:	4798      	blx	r3
  2056c6:	4405      	add	r5, r0
      for( uint32_t i = 0; i < servos_length; i++){
  2056c8:	3601      	adds	r6, #1
  2056ca:	3414      	adds	r4, #20
  2056cc:	68bb      	ldr	r3, [r7, #8]
  2056ce:	42b3      	cmp	r3, r6
  2056d0:	d8f2      	bhi.n	2056b8 <_ZNK6hydrus9BoardInfo9serializeEPh+0x2c>
      }
      return offset;
    }
  2056d2:	4628      	mov	r0, r5
  2056d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      offset += sizeof(this->servos_length);
  2056d8:	2506      	movs	r5, #6
      return offset;
  2056da:	e7fa      	b.n	2056d2 <_ZNK6hydrus9BoardInfo9serializeEPh+0x46>

002056dc <_ZN6hydrus9BoardInfo7getTypeEv>:
        memcpy( &(this->servos[i]), &(this->st_servos), sizeof(hydrus::ServoInfo));
      }
     return offset;
    }

    const char * getType(){ return "hydrus/BoardInfo"; };
  2056dc:	4800      	ldr	r0, [pc, #0]	; (2056e0 <_ZN6hydrus9BoardInfo7getTypeEv+0x4>)
  2056de:	4770      	bx	lr
  2056e0:	0021724c 	.word	0x0021724c

002056e4 <_ZN6hydrus9BoardInfo6getMD5Ev>:
    const char * getMD5(){ return "708e0e388afb111a2b0b76f6a0528c18"; };
  2056e4:	4800      	ldr	r0, [pc, #0]	; (2056e8 <_ZN6hydrus9BoardInfo6getMD5Ev+0x4>)
  2056e6:	4770      	bx	lr
  2056e8:	00217228 	.word	0x00217228

002056ec <_ZNK6hydrus10ServoState9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->index >> (8 * 0)) & 0xFF;
  2056ec:	7903      	ldrb	r3, [r0, #4]
  2056ee:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->index);
      *(outbuffer + offset + 0) = (this->angle >> (8 * 0)) & 0xFF;
  2056f0:	88c3      	ldrh	r3, [r0, #6]
  2056f2:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 1) = (this->angle >> (8 * 1)) & 0xFF;
  2056f4:	88c3      	ldrh	r3, [r0, #6]
  2056f6:	0a1b      	lsrs	r3, r3, #8
  2056f8:	708b      	strb	r3, [r1, #2]
      offset += sizeof(this->angle);
      *(outbuffer + offset + 0) = (this->temp >> (8 * 0)) & 0xFF;
  2056fa:	7a03      	ldrb	r3, [r0, #8]
  2056fc:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->temp);
      union {
        int16_t real;
        uint16_t base;
      } u_load;
      u_load.real = this->load;
  2056fe:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
      *(outbuffer + offset + 0) = (u_load.base >> (8 * 0)) & 0xFF;
  205702:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_load.base >> (8 * 1)) & 0xFF;
  205704:	f3c3 2307 	ubfx	r3, r3, #8, #8
  205708:	714b      	strb	r3, [r1, #5]
      offset += sizeof(this->load);
      *(outbuffer + offset + 0) = (this->error >> (8 * 0)) & 0xFF;
  20570a:	7b03      	ldrb	r3, [r0, #12]
  20570c:	718b      	strb	r3, [r1, #6]
      offset += sizeof(this->error);
      return offset;
    }
  20570e:	2007      	movs	r0, #7
  205710:	4770      	bx	lr

00205712 <_ZN6hydrus10ServoState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->index =  ((uint8_t) (*(inbuffer + offset)));
  205712:	780b      	ldrb	r3, [r1, #0]
  205714:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->index);
      this->angle =  ((uint16_t) (*(inbuffer + offset)));
  205716:	784b      	ldrb	r3, [r1, #1]
  205718:	80c3      	strh	r3, [r0, #6]
      this->angle |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20571a:	788a      	ldrb	r2, [r1, #2]
  20571c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  205720:	80c3      	strh	r3, [r0, #6]
      offset += sizeof(this->angle);
      this->temp =  ((uint8_t) (*(inbuffer + offset)));
  205722:	78cb      	ldrb	r3, [r1, #3]
  205724:	7203      	strb	r3, [r0, #8]
        int16_t real;
        uint16_t base;
      } u_load;
      u_load.base = 0;
      u_load.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_load.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205726:	794a      	ldrb	r2, [r1, #5]
  205728:	790b      	ldrb	r3, [r1, #4]
  20572a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->load = u_load.real;
  20572e:	8143      	strh	r3, [r0, #10]
      offset += sizeof(this->load);
      this->error =  ((uint8_t) (*(inbuffer + offset)));
  205730:	798b      	ldrb	r3, [r1, #6]
  205732:	7303      	strb	r3, [r0, #12]
      offset += sizeof(this->error);
     return offset;
    }
  205734:	2007      	movs	r0, #7
  205736:	4770      	bx	lr

00205738 <_ZN6hydrus10ServoState7getTypeEv>:

    const char * getType(){ return "hydrus/ServoState"; };
  205738:	4800      	ldr	r0, [pc, #0]	; (20573c <_ZN6hydrus10ServoState7getTypeEv+0x4>)
  20573a:	4770      	bx	lr
  20573c:	00217128 	.word	0x00217128

00205740 <_ZN6hydrus10ServoState6getMD5Ev>:
    const char * getMD5(){ return "be7ff99a68441fad6fcb1762168ca85d"; };
  205740:	4800      	ldr	r0, [pc, #0]	; (205744 <_ZN6hydrus10ServoState6getMD5Ev+0x4>)
  205742:	4770      	bx	lr
  205744:	00217104 	.word	0x00217104

00205748 <_ZNK6hydrus11ServoStates9serializeEPh>:
      stamp(),
      servos_length(0), servos(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  205748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
  20574a:	6843      	ldr	r3, [r0, #4]
  20574c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
  20574e:	6843      	ldr	r3, [r0, #4]
  205750:	0a1b      	lsrs	r3, r3, #8
  205752:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
  205754:	88c3      	ldrh	r3, [r0, #6]
  205756:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
  205758:	79c3      	ldrb	r3, [r0, #7]
  20575a:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
  20575c:	6883      	ldr	r3, [r0, #8]
  20575e:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
  205760:	6883      	ldr	r3, [r0, #8]
  205762:	0a1b      	lsrs	r3, r3, #8
  205764:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
  205766:	8943      	ldrh	r3, [r0, #10]
  205768:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
  20576a:	7ac3      	ldrb	r3, [r0, #11]
  20576c:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->stamp.nsec);
      *(outbuffer + offset + 0) = (this->servos_length >> (8 * 0)) & 0xFF;
  20576e:	68c3      	ldr	r3, [r0, #12]
  205770:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->servos_length >> (8 * 1)) & 0xFF;
  205772:	68c3      	ldr	r3, [r0, #12]
  205774:	0a1b      	lsrs	r3, r3, #8
  205776:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->servos_length >> (8 * 2)) & 0xFF;
  205778:	89c3      	ldrh	r3, [r0, #14]
  20577a:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->servos_length >> (8 * 3)) & 0xFF;
  20577c:	7bc3      	ldrb	r3, [r0, #15]
  20577e:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->servos_length);
      for( uint32_t i = 0; i < servos_length; i++){
  205780:	68c3      	ldr	r3, [r0, #12]
  205782:	b18b      	cbz	r3, 2057a8 <_ZNK6hydrus11ServoStates9serializeEPh+0x60>
  205784:	460f      	mov	r7, r1
  205786:	4605      	mov	r5, r0
  205788:	2400      	movs	r4, #0
  20578a:	260c      	movs	r6, #12
      offset += this->servos[i].serialize(outbuffer + offset);
  20578c:	0123      	lsls	r3, r4, #4
  20578e:	6a28      	ldr	r0, [r5, #32]
  205790:	58c2      	ldr	r2, [r0, r3]
  205792:	6812      	ldr	r2, [r2, #0]
  205794:	19b9      	adds	r1, r7, r6
  205796:	4418      	add	r0, r3
  205798:	4790      	blx	r2
  20579a:	4406      	add	r6, r0
      for( uint32_t i = 0; i < servos_length; i++){
  20579c:	3401      	adds	r4, #1
  20579e:	68eb      	ldr	r3, [r5, #12]
  2057a0:	42a3      	cmp	r3, r4
  2057a2:	d8f3      	bhi.n	20578c <_ZNK6hydrus11ServoStates9serializeEPh+0x44>
      }
      return offset;
    }
  2057a4:	4630      	mov	r0, r6
  2057a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      offset += sizeof(this->servos_length);
  2057a8:	260c      	movs	r6, #12
      return offset;
  2057aa:	e7fb      	b.n	2057a4 <_ZNK6hydrus11ServoStates9serializeEPh+0x5c>

002057ac <_ZN6hydrus11ServoStates7getTypeEv>:
        memcpy( &(this->servos[i]), &(this->st_servos), sizeof(hydrus::ServoState));
      }
     return offset;
    }

    const char * getType(){ return "hydrus/ServoStates"; };
  2057ac:	4800      	ldr	r0, [pc, #0]	; (2057b0 <_ZN6hydrus11ServoStates7getTypeEv+0x4>)
  2057ae:	4770      	bx	lr
  2057b0:	00217160 	.word	0x00217160

002057b4 <_ZN6hydrus11ServoStates6getMD5Ev>:
    const char * getMD5(){ return "6d1b17de249ae8c57df97782f91fe8e0"; };
  2057b4:	4800      	ldr	r0, [pc, #0]	; (2057b8 <_ZN6hydrus11ServoStates6getMD5Ev+0x4>)
  2057b6:	4770      	bx	lr
  2057b8:	0021713c 	.word	0x0021713c

002057bc <_ZNK6hydrus15ServoControlCmd9serializeEPh>:
      index_length(0), index(NULL),
      angles_length(0), angles(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  2057bc:	b430      	push	{r4, r5}
  2057be:	4603      	mov	r3, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->index_length >> (8 * 0)) & 0xFF;
  2057c0:	6842      	ldr	r2, [r0, #4]
  2057c2:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (this->index_length >> (8 * 1)) & 0xFF;
  2057c4:	6842      	ldr	r2, [r0, #4]
  2057c6:	0a12      	lsrs	r2, r2, #8
  2057c8:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (this->index_length >> (8 * 2)) & 0xFF;
  2057ca:	88c2      	ldrh	r2, [r0, #6]
  2057cc:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (this->index_length >> (8 * 3)) & 0xFF;
  2057ce:	79c2      	ldrb	r2, [r0, #7]
  2057d0:	70ca      	strb	r2, [r1, #3]
      offset += sizeof(this->index_length);
      for( uint32_t i = 0; i < index_length; i++){
  2057d2:	6842      	ldr	r2, [r0, #4]
  2057d4:	b352      	cbz	r2, 20582c <_ZNK6hydrus15ServoControlCmd9serializeEPh+0x70>
  2057d6:	1ccc      	adds	r4, r1, #3
  2057d8:	2200      	movs	r2, #0
      *(outbuffer + offset + 0) = (this->index[i] >> (8 * 0)) & 0xFF;
  2057da:	68d8      	ldr	r0, [r3, #12]
  2057dc:	5c80      	ldrb	r0, [r0, r2]
  2057de:	f804 0f01 	strb.w	r0, [r4, #1]!
  2057e2:	1d50      	adds	r0, r2, #5
      for( uint32_t i = 0; i < index_length; i++){
  2057e4:	3201      	adds	r2, #1
  2057e6:	685d      	ldr	r5, [r3, #4]
  2057e8:	4295      	cmp	r5, r2
  2057ea:	d8f6      	bhi.n	2057da <_ZNK6hydrus15ServoControlCmd9serializeEPh+0x1e>
      offset += sizeof(this->index[i]);
      }
      *(outbuffer + offset + 0) = (this->angles_length >> (8 * 0)) & 0xFF;
  2057ec:	180a      	adds	r2, r1, r0
  2057ee:	691c      	ldr	r4, [r3, #16]
  2057f0:	540c      	strb	r4, [r1, r0]
      *(outbuffer + offset + 1) = (this->angles_length >> (8 * 1)) & 0xFF;
  2057f2:	6919      	ldr	r1, [r3, #16]
  2057f4:	0a09      	lsrs	r1, r1, #8
  2057f6:	7051      	strb	r1, [r2, #1]
      *(outbuffer + offset + 2) = (this->angles_length >> (8 * 2)) & 0xFF;
  2057f8:	8a59      	ldrh	r1, [r3, #18]
  2057fa:	7091      	strb	r1, [r2, #2]
      *(outbuffer + offset + 3) = (this->angles_length >> (8 * 3)) & 0xFF;
  2057fc:	7cd9      	ldrb	r1, [r3, #19]
  2057fe:	70d1      	strb	r1, [r2, #3]
      offset += sizeof(this->angles_length);
  205800:	3004      	adds	r0, #4
      for( uint32_t i = 0; i < angles_length; i++){
  205802:	6919      	ldr	r1, [r3, #16]
  205804:	b181      	cbz	r1, 205828 <_ZNK6hydrus15ServoControlCmd9serializeEPh+0x6c>
  205806:	4611      	mov	r1, r2
  205808:	2200      	movs	r2, #0
      *(outbuffer + offset + 0) = (this->angles[i] >> (8 * 0)) & 0xFF;
  20580a:	699c      	ldr	r4, [r3, #24]
  20580c:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
  205810:	710c      	strb	r4, [r1, #4]
      *(outbuffer + offset + 1) = (this->angles[i] >> (8 * 1)) & 0xFF;
  205812:	699c      	ldr	r4, [r3, #24]
  205814:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
  205818:	0a24      	lsrs	r4, r4, #8
  20581a:	714c      	strb	r4, [r1, #5]
  20581c:	3002      	adds	r0, #2
      for( uint32_t i = 0; i < angles_length; i++){
  20581e:	3201      	adds	r2, #1
  205820:	3102      	adds	r1, #2
  205822:	691c      	ldr	r4, [r3, #16]
  205824:	4294      	cmp	r4, r2
  205826:	d8f0      	bhi.n	20580a <_ZNK6hydrus15ServoControlCmd9serializeEPh+0x4e>
      offset += sizeof(this->angles[i]);
      }
      return offset;
    }
  205828:	bc30      	pop	{r4, r5}
  20582a:	4770      	bx	lr
      offset += sizeof(this->index_length);
  20582c:	2004      	movs	r0, #4
  20582e:	e7dd      	b.n	2057ec <_ZNK6hydrus15ServoControlCmd9serializeEPh+0x30>

00205830 <_ZN6hydrus15ServoControlCmd7getTypeEv>:
        memcpy( &(this->angles[i]), &(this->st_angles), sizeof(uint16_t));
      }
     return offset;
    }

    const char * getType(){ return "hydrus/ServoControlCmd"; };
  205830:	4800      	ldr	r0, [pc, #0]	; (205834 <_ZN6hydrus15ServoControlCmd7getTypeEv+0x4>)
  205832:	4770      	bx	lr
  205834:	00217210 	.word	0x00217210

00205838 <_ZN6hydrus15ServoControlCmd6getMD5Ev>:
    const char * getMD5(){ return "43c65031eacc80fd6b5892b2e27c4273"; };
  205838:	4800      	ldr	r0, [pc, #0]	; (20583c <_ZN6hydrus15ServoControlCmd6getMD5Ev+0x4>)
  20583a:	4770      	bx	lr
  20583c:	002171ec 	.word	0x002171ec

00205840 <_ZNK6hydrus14ServoTorqueCmd9serializeEPh>:
      index_length(0), index(NULL),
      torque_enable_length(0), torque_enable(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  205840:	b430      	push	{r4, r5}
  205842:	4602      	mov	r2, r0
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->index_length >> (8 * 0)) & 0xFF;
  205844:	6843      	ldr	r3, [r0, #4]
  205846:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->index_length >> (8 * 1)) & 0xFF;
  205848:	6843      	ldr	r3, [r0, #4]
  20584a:	0a1b      	lsrs	r3, r3, #8
  20584c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->index_length >> (8 * 2)) & 0xFF;
  20584e:	88c3      	ldrh	r3, [r0, #6]
  205850:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->index_length >> (8 * 3)) & 0xFF;
  205852:	79c3      	ldrb	r3, [r0, #7]
  205854:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->index_length);
      for( uint32_t i = 0; i < index_length; i++){
  205856:	6843      	ldr	r3, [r0, #4]
  205858:	b32b      	cbz	r3, 2058a6 <_ZNK6hydrus14ServoTorqueCmd9serializeEPh+0x66>
  20585a:	1ccc      	adds	r4, r1, #3
  20585c:	2300      	movs	r3, #0
      *(outbuffer + offset + 0) = (this->index[i] >> (8 * 0)) & 0xFF;
  20585e:	68d0      	ldr	r0, [r2, #12]
  205860:	5cc0      	ldrb	r0, [r0, r3]
  205862:	f804 0f01 	strb.w	r0, [r4, #1]!
  205866:	1d58      	adds	r0, r3, #5
      for( uint32_t i = 0; i < index_length; i++){
  205868:	3301      	adds	r3, #1
  20586a:	6855      	ldr	r5, [r2, #4]
  20586c:	429d      	cmp	r5, r3
  20586e:	d8f6      	bhi.n	20585e <_ZNK6hydrus14ServoTorqueCmd9serializeEPh+0x1e>
      offset += sizeof(this->index[i]);
      }
      *(outbuffer + offset + 0) = (this->torque_enable_length >> (8 * 0)) & 0xFF;
  205870:	6913      	ldr	r3, [r2, #16]
  205872:	540b      	strb	r3, [r1, r0]
      *(outbuffer + offset + 1) = (this->torque_enable_length >> (8 * 1)) & 0xFF;
  205874:	180b      	adds	r3, r1, r0
  205876:	6914      	ldr	r4, [r2, #16]
  205878:	0a24      	lsrs	r4, r4, #8
  20587a:	705c      	strb	r4, [r3, #1]
      *(outbuffer + offset + 2) = (this->torque_enable_length >> (8 * 2)) & 0xFF;
  20587c:	8a54      	ldrh	r4, [r2, #18]
  20587e:	709c      	strb	r4, [r3, #2]
      *(outbuffer + offset + 3) = (this->torque_enable_length >> (8 * 3)) & 0xFF;
  205880:	7cd4      	ldrb	r4, [r2, #19]
  205882:	70dc      	strb	r4, [r3, #3]
      offset += sizeof(this->torque_enable_length);
  205884:	1d03      	adds	r3, r0, #4
  205886:	4618      	mov	r0, r3
      for( uint32_t i = 0; i < torque_enable_length; i++){
  205888:	6914      	ldr	r4, [r2, #16]
  20588a:	b154      	cbz	r4, 2058a2 <_ZNK6hydrus14ServoTorqueCmd9serializeEPh+0x62>
  20588c:	440b      	add	r3, r1
  20588e:	2400      	movs	r4, #0
      *(outbuffer + offset + 0) = (this->torque_enable[i] >> (8 * 0)) & 0xFF;
  205890:	6990      	ldr	r0, [r2, #24]
  205892:	5d00      	ldrb	r0, [r0, r4]
  205894:	f803 0b01 	strb.w	r0, [r3], #1
  205898:	1a58      	subs	r0, r3, r1
      for( uint32_t i = 0; i < torque_enable_length; i++){
  20589a:	3401      	adds	r4, #1
  20589c:	6915      	ldr	r5, [r2, #16]
  20589e:	42a5      	cmp	r5, r4
  2058a0:	d8f6      	bhi.n	205890 <_ZNK6hydrus14ServoTorqueCmd9serializeEPh+0x50>
      offset += sizeof(this->torque_enable[i]);
      }
      return offset;
    }
  2058a2:	bc30      	pop	{r4, r5}
  2058a4:	4770      	bx	lr
      offset += sizeof(this->index_length);
  2058a6:	2004      	movs	r0, #4
  2058a8:	e7e2      	b.n	205870 <_ZNK6hydrus14ServoTorqueCmd9serializeEPh+0x30>
	...

002058ac <_ZN6hydrus14ServoTorqueCmd7getTypeEv>:
        memcpy( &(this->torque_enable[i]), &(this->st_torque_enable), sizeof(uint8_t));
      }
     return offset;
    }

    const char * getType(){ return "hydrus/ServoTorqueCmd"; };
  2058ac:	4800      	ldr	r0, [pc, #0]	; (2058b0 <_ZN6hydrus14ServoTorqueCmd7getTypeEv+0x4>)
  2058ae:	4770      	bx	lr
  2058b0:	002171d4 	.word	0x002171d4

002058b4 <_ZN6hydrus14ServoTorqueCmd6getMD5Ev>:
    const char * getMD5(){ return "3bf69950d8290f79f2ce423f967a9338"; };
  2058b4:	4800      	ldr	r0, [pc, #0]	; (2058b8 <_ZN6hydrus14ServoTorqueCmd6getMD5Ev+0x4>)
  2058b6:	4770      	bx	lr
  2058b8:	002171b0 	.word	0x002171b0

002058bc <_ZN3ros10SubscriberIN6hydrus14BoardConfigCmdEvE15getEndpointTypeEv>:
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
  {
    return endpoint_;
  }
  2058bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  2058be:	4770      	bx	lr

002058c0 <_ZN3ros10SubscriberIN6hydrus14BoardConfigCmdEvE10getMsgTypeEv>:
  }
  2058c0:	4800      	ldr	r0, [pc, #0]	; (2058c4 <_ZN3ros10SubscriberIN6hydrus14BoardConfigCmdEvE10getMsgTypeEv+0x4>)
  2058c2:	4770      	bx	lr
  2058c4:	00217198 	.word	0x00217198

002058c8 <_ZN3ros10SubscriberIN6hydrus14BoardConfigCmdEvE9getMsgMD5Ev>:
  }
  2058c8:	4800      	ldr	r0, [pc, #0]	; (2058cc <_ZN3ros10SubscriberIN6hydrus14BoardConfigCmdEvE9getMsgMD5Ev+0x4>)
  2058ca:	4770      	bx	lr
  2058cc:	00217174 	.word	0x00217174

002058d0 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
  2058d0:	b508      	push	{r3, lr}
    this->cb_(msg);
  2058d2:	6903      	ldr	r3, [r0, #16]
  2058d4:	300c      	adds	r0, #12
  2058d6:	4798      	blx	r3
  2058d8:	bd08      	pop	{r3, pc}

002058da <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  }
  2058da:	6940      	ldr	r0, [r0, #20]
  2058dc:	4770      	bx	lr
	...

002058e0 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  }
  2058e0:	4800      	ldr	r0, [pc, #0]	; (2058e4 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv+0x4>)
  2058e2:	4770      	bx	lr
  2058e4:	002172bc 	.word	0x002172bc

002058e8 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  }
  2058e8:	4800      	ldr	r0, [pc, #0]	; (2058ec <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev+0x4>)
  2058ea:	4770      	bx	lr
  2058ec:	00217298 	.word	0x00217298

002058f0 <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE15getEndpointTypeEv>:
  }
  2058f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  2058f2:	4770      	bx	lr

002058f4 <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE10getMsgTypeEv>:
  }
  2058f4:	4800      	ldr	r0, [pc, #0]	; (2058f8 <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE10getMsgTypeEv+0x4>)
  2058f6:	4770      	bx	lr
  2058f8:	002171d4 	.word	0x002171d4

002058fc <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE9getMsgMD5Ev>:
  }
  2058fc:	4800      	ldr	r0, [pc, #0]	; (205900 <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE9getMsgMD5Ev+0x4>)
  2058fe:	4770      	bx	lr
  205900:	002171b0 	.word	0x002171b0

00205904 <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE15getEndpointTypeEv>:
  }
  205904:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  205906:	4770      	bx	lr

00205908 <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE10getMsgTypeEv>:
  }
  205908:	4800      	ldr	r0, [pc, #0]	; (20590c <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE10getMsgTypeEv+0x4>)
  20590a:	4770      	bx	lr
  20590c:	00217210 	.word	0x00217210

00205910 <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE9getMsgMD5Ev>:
  }
  205910:	4800      	ldr	r0, [pc, #0]	; (205914 <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE9getMsgMD5Ev+0x4>)
  205912:	4770      	bx	lr
  205914:	002171ec 	.word	0x002171ec

00205918 <_ZN5Spine20servoControlCallbackERKN6hydrus15ServoControlCmdE>:
		  board_info_pub_.publish(&board_info_msg_);
	  }
  }

  void servoControlCallback(const hydrus::ServoControlCmd& control_msg)
  {
  205918:	b538      	push	{r3, r4, r5, lr}
	  if (control_msg.index_length != control_msg.angles_length) return;
  20591a:	6843      	ldr	r3, [r0, #4]
  20591c:	6902      	ldr	r2, [r0, #16]
  20591e:	4293      	cmp	r3, r2
  205920:	d000      	beq.n	205924 <_ZN5Spine20servoControlCallbackERKN6hydrus15ServoControlCmdE+0xc>
  205922:	bd38      	pop	{r3, r4, r5, pc}
	  for (unsigned int i = 0; i < control_msg.index_length; i++) {
  205924:	2b00      	cmp	r3, #0
  205926:	d0fc      	beq.n	205922 <_ZN5Spine20servoControlCallbackERKN6hydrus15ServoControlCmdE+0xa>
		  servo_.at(control_msg.index[i]).get().setGoalPosition(control_msg.angles[i]);
  205928:	68c3      	ldr	r3, [r0, #12]
  20592a:	7819      	ldrb	r1, [r3, #0]
  20592c:	4b0c      	ldr	r3, [pc, #48]	; (205960 <_ZN5Spine20servoControlCallbackERKN6hydrus15ServoControlCmdE+0x48>)
  20592e:	681d      	ldr	r5, [r3, #0]
  205930:	685a      	ldr	r2, [r3, #4]
  205932:	1b52      	subs	r2, r2, r5
  205934:	1092      	asrs	r2, r2, #2
	if (__n >= this->size())
  205936:	4291      	cmp	r1, r2
  205938:	d20e      	bcs.n	205958 <_ZN5Spine20servoControlCallbackERKN6hydrus15ServoControlCmdE+0x40>
  20593a:	2300      	movs	r3, #0
  20593c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  205940:	6984      	ldr	r4, [r0, #24]
  205942:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
	void setGoalPosition(uint16_t goal_position) {goal_position_ = goal_position;}
  205946:	814c      	strh	r4, [r1, #10]
	  for (unsigned int i = 0; i < control_msg.index_length; i++) {
  205948:	3301      	adds	r3, #1
  20594a:	6841      	ldr	r1, [r0, #4]
  20594c:	4299      	cmp	r1, r3
  20594e:	d9e8      	bls.n	205922 <_ZN5Spine20servoControlCallbackERKN6hydrus15ServoControlCmdE+0xa>
		  servo_.at(control_msg.index[i]).get().setGoalPosition(control_msg.angles[i]);
  205950:	68c1      	ldr	r1, [r0, #12]
  205952:	5cc9      	ldrb	r1, [r1, r3]
  205954:	4291      	cmp	r1, r2
  205956:	d3f1      	bcc.n	20593c <_ZN5Spine20servoControlCallbackERKN6hydrus15ServoControlCmdE+0x24>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  205958:	4802      	ldr	r0, [pc, #8]	; (205964 <_ZN5Spine20servoControlCallbackERKN6hydrus15ServoControlCmdE+0x4c>)
  20595a:	f00f fa96 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  20595e:	bf00      	nop
  205960:	2000009c 	.word	0x2000009c
  205964:	00216d60 	.word	0x00216d60

00205968 <_ZN5Spine26servoTorqueControlCallbackERKN6hydrus14ServoTorqueCmdE>:
	  }
  }

  void servoTorqueControlCallback(const hydrus::ServoTorqueCmd& control_msg)
  {
  205968:	b538      	push	{r3, r4, r5, lr}
	  if (control_msg.index_length != control_msg.torque_enable_length) return;
  20596a:	6843      	ldr	r3, [r0, #4]
  20596c:	6902      	ldr	r2, [r0, #16]
  20596e:	4293      	cmp	r3, r2
  205970:	d000      	beq.n	205974 <_ZN5Spine26servoTorqueControlCallbackERKN6hydrus14ServoTorqueCmdE+0xc>
  205972:	bd38      	pop	{r3, r4, r5, pc}
	  for (unsigned int i = 0; i < control_msg.index_length; i++) {
  205974:	2b00      	cmp	r3, #0
  205976:	d0fc      	beq.n	205972 <_ZN5Spine26servoTorqueControlCallbackERKN6hydrus14ServoTorqueCmdE+0xa>
		  servo_.at(control_msg.index[i]).get().setTorqueEnable((control_msg.torque_enable[i] != 0) ? true : false);
  205978:	68c3      	ldr	r3, [r0, #12]
  20597a:	7819      	ldrb	r1, [r3, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  20597c:	4b12      	ldr	r3, [pc, #72]	; (2059c8 <_ZN5Spine26servoTorqueControlCallbackERKN6hydrus14ServoTorqueCmdE+0x60>)
  20597e:	681c      	ldr	r4, [r3, #0]
  205980:	685a      	ldr	r2, [r3, #4]
  205982:	1b12      	subs	r2, r2, r4
  205984:	1092      	asrs	r2, r2, #2
	if (__n >= this->size())
  205986:	4291      	cmp	r1, r2
  205988:	d218      	bcs.n	2059bc <_ZN5Spine26servoTorqueControlCallbackERKN6hydrus14ServoTorqueCmdE+0x54>
  20598a:	2300      	movs	r3, #0
  20598c:	f854 5021 	ldr.w	r5, [r4, r1, lsl #2]
  205990:	6981      	ldr	r1, [r0, #24]
  205992:	5cc9      	ldrb	r1, [r1, r3]
  205994:	3100      	adds	r1, #0
  205996:	bf18      	it	ne
  205998:	2101      	movne	r1, #1
  20599a:	75a9      	strb	r1, [r5, #22]

		  /* update the target angle */
		  servo_.at(control_msg.index[i]).get().setGoalPosition(servo_.at(control_msg.index[i]).get().getPresentPosition());
  20599c:	68c1      	ldr	r1, [r0, #12]
  20599e:	5cc9      	ldrb	r1, [r1, r3]
  2059a0:	4291      	cmp	r1, r2
  2059a2:	d20e      	bcs.n	2059c2 <_ZN5Spine26servoTorqueControlCallbackERKN6hydrus14ServoTorqueCmdE+0x5a>
  2059a4:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
  2059a8:	890d      	ldrh	r5, [r1, #8]
  2059aa:	814d      	strh	r5, [r1, #10]
	  for (unsigned int i = 0; i < control_msg.index_length; i++) {
  2059ac:	3301      	adds	r3, #1
  2059ae:	6841      	ldr	r1, [r0, #4]
  2059b0:	4299      	cmp	r1, r3
  2059b2:	d9de      	bls.n	205972 <_ZN5Spine26servoTorqueControlCallbackERKN6hydrus14ServoTorqueCmdE+0xa>
		  servo_.at(control_msg.index[i]).get().setTorqueEnable((control_msg.torque_enable[i] != 0) ? true : false);
  2059b4:	68c1      	ldr	r1, [r0, #12]
  2059b6:	5cc9      	ldrb	r1, [r1, r3]
  2059b8:	4291      	cmp	r1, r2
  2059ba:	d3e7      	bcc.n	20598c <_ZN5Spine26servoTorqueControlCallbackERKN6hydrus14ServoTorqueCmdE+0x24>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  2059bc:	4803      	ldr	r0, [pc, #12]	; (2059cc <_ZN5Spine26servoTorqueControlCallbackERKN6hydrus14ServoTorqueCmdE+0x64>)
  2059be:	f00f fa64 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  2059c2:	4802      	ldr	r0, [pc, #8]	; (2059cc <_ZN5Spine26servoTorqueControlCallbackERKN6hydrus14ServoTorqueCmdE+0x64>)
  2059c4:	f00f fa61 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  2059c8:	2000009c 	.word	0x2000009c
  2059cc:	00216d60 	.word	0x00216d60

002059d0 <_ZN18CANMotorSendDeviceD1Ev>:
};

class CANMotorSendDevice : public CANDevice
  2059d0:	b510      	push	{r4, lr}
  2059d2:	4604      	mov	r4, r0
  2059d4:	4b03      	ldr	r3, [pc, #12]	; (2059e4 <_ZN18CANMotorSendDeviceD1Ev+0x14>)
  2059d6:	6003      	str	r3, [r0, #0]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  2059d8:	6880      	ldr	r0, [r0, #8]
	if (__p)
  2059da:	b108      	cbz	r0, 2059e0 <_ZN18CANMotorSendDeviceD1Ev+0x10>
  2059dc:	f00e fb45 	bl	21406a <_ZdlPv>
  2059e0:	4620      	mov	r0, r4
  2059e2:	bd10      	pop	{r4, pc}
  2059e4:	00216c2c 	.word	0x00216c2c

002059e8 <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
  2059e8:	b510      	push	{r4, lr}
  2059ea:	4604      	mov	r4, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  2059ec:	6800      	ldr	r0, [r0, #0]
	if (__p)
  2059ee:	b108      	cbz	r0, 2059f4 <_ZNSt6vectorIfSaIfEED1Ev+0xc>
  2059f0:	f00e fb3b 	bl	21406a <_ZdlPv>
		      _M_get_Tp_allocator()); }
  2059f4:	4620      	mov	r0, r4
  2059f6:	bd10      	pop	{r4, pc}

002059f8 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
  2059f8:	b510      	push	{r4, lr}
  2059fa:	4604      	mov	r4, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  2059fc:	6800      	ldr	r0, [r0, #0]
	if (__p)
  2059fe:	b108      	cbz	r0, 205a04 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EED1Ev+0xc>
  205a00:	f00e fb33 	bl	21406a <_ZdlPv>
		      _M_get_Tp_allocator()); }
  205a04:	4620      	mov	r0, r4
  205a06:	bd10      	pop	{r4, pc}

00205a08 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE>:
	  for (unsigned int i = 0; i < slave_num_; i++) {
  205a08:	4b5c      	ldr	r3, [pc, #368]	; (205b7c <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x174>)
  205a0a:	7b1b      	ldrb	r3, [r3, #12]
  205a0c:	2b00      	cmp	r3, #0
  205a0e:	f000 80b4 	beq.w	205b7a <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x172>
  {
  205a12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  205a16:	b083      	sub	sp, #12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  205a18:	4b58      	ldr	r3, [pc, #352]	; (205b7c <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x174>)
  205a1a:	6919      	ldr	r1, [r3, #16]
  205a1c:	695b      	ldr	r3, [r3, #20]
  205a1e:	1a5b      	subs	r3, r3, r1
  205a20:	119b      	asrs	r3, r3, #6
  205a22:	4a57      	ldr	r2, [pc, #348]	; (205b80 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x178>)
  205a24:	fb02 f303 	mul.w	r3, r2, r3
	if (__n >= this->size())
  205a28:	b13b      	cbz	r3, 205a3a <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x32>
  205a2a:	f04f 0a00 	mov.w	sl, #0
  205a2e:	46d3      	mov	fp, sl
		  board_info_msg_.imu_send_data_flag = neuron.can_imu_.getSendDataFlag() ? 1 : 0;
  205a30:	f8df 8148 	ldr.w	r8, [pc, #328]	; 205b7c <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x174>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  205a34:	4e53      	ldr	r6, [pc, #332]	; (205b84 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x17c>)
      send_data_flag(0)
  205a36:	4f54      	ldr	r7, [pc, #336]	; (205b88 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x180>)
  205a38:	e02f      	b.n	205a9a <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x92>
  205a3a:	2200      	movs	r2, #0
	  for (unsigned int i = 0; i < slave_num_; i++) {
  205a3c:	4693      	mov	fp, r2
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  205a3e:	4659      	mov	r1, fp
  205a40:	4852      	ldr	r0, [pc, #328]	; (205b8c <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x184>)
  205a42:	f00f fa22 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
	  std::__throw_bad_alloc();
  205a46:	f00f fa14 	bl	214e72 <_ZSt17__throw_bad_allocv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  205a4a:	4622      	mov	r2, r4
  205a4c:	e086      	b.n	205b5c <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x154>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  205a4e:	f04f 0900 	mov.w	r9, #0
		  board_info_msg_.servos = servo_infos.data();
  205a52:	f8c8 903c 	str.w	r9, [r8, #60]	; 0x3c
    msg_(msg),
    endpoint_(endpoint) {};

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  205a56:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
  205a5a:	6803      	ldr	r3, [r0, #0]
  205a5c:	681b      	ldr	r3, [r3, #0]
  205a5e:	f108 021c 	add.w	r2, r8, #28
  205a62:	f8d8 1048 	ldr.w	r1, [r8, #72]	; 0x48
  205a66:	4798      	blx	r3
	if (__p)
  205a68:	f1b9 0f00 	cmp.w	r9, #0
  205a6c:	d002      	beq.n	205a74 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x6c>
      { ::operator delete(__p); }
  205a6e:	4648      	mov	r0, r9
  205a70:	f00e fafb 	bl	21406a <_ZdlPv>
	  for (unsigned int i = 0; i < slave_num_; i++) {
  205a74:	f10b 0b01 	add.w	fp, fp, #1
  205a78:	f898 300c 	ldrb.w	r3, [r8, #12]
  205a7c:	455b      	cmp	r3, fp
  205a7e:	d979      	bls.n	205b74 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x16c>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  205a80:	f8d8 1010 	ldr.w	r1, [r8, #16]
  205a84:	f8d8 3014 	ldr.w	r3, [r8, #20]
  205a88:	1a5b      	subs	r3, r3, r1
  205a8a:	119b      	asrs	r3, r3, #6
  205a8c:	4a3c      	ldr	r2, [pc, #240]	; (205b80 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x178>)
  205a8e:	fb02 f203 	mul.w	r2, r2, r3
  205a92:	f50a 7aa0 	add.w	sl, sl, #320	; 0x140
	if (__n >= this->size())
  205a96:	455a      	cmp	r2, fp
  205a98:	d9d1      	bls.n	205a3e <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x36>
      { return *(this->_M_impl._M_start + __n); }
  205a9a:	eb01 050a 	add.w	r5, r1, sl
		  board_info_msg_.imu_send_data_flag = neuron.can_imu_.getSendDataFlag() ? 1 : 0;
  205a9e:	f895 312a 	ldrb.w	r3, [r5, #298]	; 0x12a
  205aa2:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
	}

	uint8_t getSlaveId() const {return slave_id_;}
  205aa6:	f811 300a 	ldrb.w	r3, [r1, sl]
		  board_info_msg_.slave_id = neuron.getSlaveId();
  205aaa:	f888 3020 	strb.w	r3, [r8, #32]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  205aae:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
  205ab2:	f8d5 4134 	ldr.w	r4, [r5, #308]	; 0x134
  205ab6:	1b1c      	subs	r4, r3, r4
  205ab8:	10e4      	asrs	r4, r4, #3
  205aba:	fb06 f404 	mul.w	r4, r6, r4
		  board_info_msg_.servos_length = neuron.can_servo_.servo_.size();
  205abe:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  205ac2:	2c00      	cmp	r4, #0
  205ac4:	d0c3      	beq.n	205a4e <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x46>
	if (__n > this->max_size())
  205ac6:	4b32      	ldr	r3, [pc, #200]	; (205b90 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x188>)
  205ac8:	429c      	cmp	r4, r3
  205aca:	d8bc      	bhi.n	205a46 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x3e>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  205acc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
  205ad0:	009b      	lsls	r3, r3, #2
  205ad2:	9301      	str	r3, [sp, #4]
  205ad4:	4618      	mov	r0, r3
  205ad6:	f00e faf8 	bl	2140ca <_Znwj>
  205ada:	4681      	mov	r9, r0
  205adc:	4603      	mov	r3, r0
  205ade:	2200      	movs	r2, #0
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  205ae0:	b13b      	cbz	r3, 205af2 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0xea>
  205ae2:	601f      	str	r7, [r3, #0]
  205ae4:	711a      	strb	r2, [r3, #4]
  205ae6:	80da      	strh	r2, [r3, #6]
  205ae8:	811a      	strh	r2, [r3, #8]
  205aea:	815a      	strh	r2, [r3, #10]
  205aec:	819a      	strh	r2, [r3, #12]
  205aee:	81da      	strh	r2, [r3, #14]
  205af0:	741a      	strb	r2, [r3, #16]
	      for (; __n > 0; --__n, ++__cur)
  205af2:	3314      	adds	r3, #20
  205af4:	3c01      	subs	r4, #1
  205af6:	d1f3      	bne.n	205ae0 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0xd8>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  205af8:	9b01      	ldr	r3, [sp, #4]
  205afa:	109b      	asrs	r3, r3, #2
  205afc:	4a20      	ldr	r2, [pc, #128]	; (205b80 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x178>)
  205afe:	fb02 fe03 	mul.w	lr, r2, r3
		  for (unsigned int j = 0; j < servo_infos.size(); j++) {
  205b02:	f1be 0f00 	cmp.w	lr, #0
  205b06:	d0a4      	beq.n	205a52 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x4a>
  205b08:	f8d5 1134 	ldr.w	r1, [r5, #308]	; 0x134
  205b0c:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
  205b10:	1a5b      	subs	r3, r3, r1
  205b12:	10db      	asrs	r3, r3, #3
  205b14:	fb06 f303 	mul.w	r3, r6, r3
	if (__n >= this->size())
  205b18:	2b00      	cmp	r3, #0
  205b1a:	d096      	beq.n	205a4a <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x42>
  205b1c:	464b      	mov	r3, r9
  205b1e:	4620      	mov	r0, r4
      { return *(this->_M_impl._M_start + __n); }
  205b20:	180a      	adds	r2, r1, r0
	uint8_t getId() const {return id_;}
  205b22:	5c09      	ldrb	r1, [r1, r0]
			  servo_infos.at(j).id = s.getId();
  205b24:	7119      	strb	r1, [r3, #4]
	uint16_t getPGain() const {return p_gain_;}
  205b26:	8851      	ldrh	r1, [r2, #2]
			  servo_infos.at(j).p_gain = s.getPGain();
  205b28:	80d9      	strh	r1, [r3, #6]
	uint16_t getIGain() const {return i_gain_;}
  205b2a:	8891      	ldrh	r1, [r2, #4]
			  servo_infos.at(j).i_gain = s.getIGain();
  205b2c:	8119      	strh	r1, [r3, #8]
	uint16_t getDGain() const {return d_gain_;}
  205b2e:	88d1      	ldrh	r1, [r2, #6]
			  servo_infos.at(j).d_gain = s.getDGain();
  205b30:	8159      	strh	r1, [r3, #10]
	uint16_t getProfileVelocity() const {return profile_velocity_;}
  205b32:	8991      	ldrh	r1, [r2, #12]
			  servo_infos.at(j).profile_velocity = s.getProfileVelocity();
  205b34:	8199      	strh	r1, [r3, #12]
	uint16_t getCurrentLimit() const {return current_limit_;}
  205b36:	8a11      	ldrh	r1, [r2, #16]
			  servo_infos.at(j).current_limit = s.getCurrentLimit();
  205b38:	81d9      	strh	r1, [r3, #14]
			  servo_infos.at(j).send_data_flag = s.getSendDataFlag() ? 1 : 0;
  205b3a:	7d52      	ldrb	r2, [r2, #21]
  205b3c:	741a      	strb	r2, [r3, #16]
		  for (unsigned int j = 0; j < servo_infos.size(); j++) {
  205b3e:	3401      	adds	r4, #1
  205b40:	4574      	cmp	r4, lr
  205b42:	d086      	beq.n	205a52 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x4a>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  205b44:	f8d5 1134 	ldr.w	r1, [r5, #308]	; 0x134
  205b48:	f8d5 2138 	ldr.w	r2, [r5, #312]	; 0x138
  205b4c:	1a52      	subs	r2, r2, r1
  205b4e:	10d2      	asrs	r2, r2, #3
  205b50:	fb06 f202 	mul.w	r2, r6, r2
  205b54:	3018      	adds	r0, #24
  205b56:	3314      	adds	r3, #20
	if (__n >= this->size())
  205b58:	4294      	cmp	r4, r2
  205b5a:	d3e1      	bcc.n	205b20 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x118>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  205b5c:	4621      	mov	r1, r4
  205b5e:	480b      	ldr	r0, [pc, #44]	; (205b8c <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x184>)
  205b60:	f00f f993 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
	if (__p)
  205b64:	f1b9 0f00 	cmp.w	r9, #0
  205b68:	d002      	beq.n	205b70 <_ZN5Spine24boardInfoRequestCallbackERKN8std_msgs5EmptyE+0x168>
      { ::operator delete(__p); }
  205b6a:	4648      	mov	r0, r9
  205b6c:	f00e fa7d 	bl	21406a <_ZdlPv>
  205b70:	f00e fcfa 	bl	214568 <__cxa_end_cleanup>
  }
  205b74:	b003      	add	sp, #12
  205b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  205b7a:	4770      	bx	lr
  205b7c:	2000009c 	.word	0x2000009c
  205b80:	cccccccd 	.word	0xcccccccd
  205b84:	aaaaaaab 	.word	0xaaaaaaab
  205b88:	0021701c 	.word	0x0021701c
  205b8c:	00216d60 	.word	0x00216d60
  205b90:	0ccccccc 	.word	0x0ccccccc

00205b94 <_ZNSt6vectorI6NeuronSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
  205b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  205b96:	4607      	mov	r7, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  205b98:	6804      	ldr	r4, [r0, #0]
  205b9a:	6845      	ldr	r5, [r0, #4]
	  for (; __first != __last; ++__first)
  205b9c:	42ac      	cmp	r4, r5
  205b9e:	d00e      	beq.n	205bbe <_ZNSt6vectorI6NeuronSaIS0_EED1Ev+0x2a>
class CANServo : public CANDevice
  205ba0:	4e0a      	ldr	r6, [pc, #40]	; (205bcc <_ZNSt6vectorI6NeuronSaIS0_EED1Ev+0x38>)
  205ba2:	e003      	b.n	205bac <_ZNSt6vectorI6NeuronSaIS0_EED1Ev+0x18>
  205ba4:	f504 74a0 	add.w	r4, r4, #320	; 0x140
  205ba8:	42a5      	cmp	r5, r4
  205baa:	d008      	beq.n	205bbe <_ZNSt6vectorI6NeuronSaIS0_EED1Ev+0x2a>
  205bac:	f8c4 612c 	str.w	r6, [r4, #300]	; 0x12c
  205bb0:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
	if (__p)
  205bb4:	2800      	cmp	r0, #0
  205bb6:	d0f5      	beq.n	205ba4 <_ZNSt6vectorI6NeuronSaIS0_EED1Ev+0x10>
  205bb8:	f00e fa57 	bl	21406a <_ZdlPv>
  205bbc:	e7f2      	b.n	205ba4 <_ZNSt6vectorI6NeuronSaIS0_EED1Ev+0x10>
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
  205bbe:	6838      	ldr	r0, [r7, #0]
	if (__p)
  205bc0:	b108      	cbz	r0, 205bc6 <_ZNSt6vectorI6NeuronSaIS0_EED1Ev+0x32>
  205bc2:	f00e fa52 	bl	21406a <_ZdlPv>
		      _M_get_Tp_allocator()); }
  205bc6:	4638      	mov	r0, r7
  205bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  205bca:	bf00      	nop
  205bcc:	00216c54 	.word	0x00216c54

00205bd0 <_ZN5Spine19boardConfigCallbackERKN6hydrus14BoardConfigCmdE>:
	  }
  }

  void boardConfigCallback(const hydrus::BoardConfigCmd& config_msg)
  {
  205bd0:	b508      	push	{r3, lr}
	  can_idle_count_ = 2000;
  205bd2:	4b05      	ldr	r3, [pc, #20]	; (205be8 <_ZN5Spine19boardConfigCallbackERKN6hydrus14BoardConfigCmdE+0x18>)
  205bd4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
  205bd8:	655a      	str	r2, [r3, #84]	; 0x54
	  can_initializer_.configDevice(config_msg);
  205bda:	4601      	mov	r1, r0
  205bdc:	f103 0058 	add.w	r0, r3, #88	; 0x58
  205be0:	f7fc f958 	bl	201e94 <_ZN14CANInitializer12configDeviceERKN6hydrus14BoardConfigCmdE>
  205be4:	bd08      	pop	{r3, pc}
  205be6:	bf00      	nop
  205be8:	2000009c 	.word	0x2000009c

00205bec <_ZN6hydrus15ServoControlCmd11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  205bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  205bee:	4604      	mov	r4, r0
  205bf0:	460f      	mov	r7, r1
      uint32_t index_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  205bf2:	780b      	ldrb	r3, [r1, #0]
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  205bf4:	784a      	ldrb	r2, [r1, #1]
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  205bf6:	788d      	ldrb	r5, [r1, #2]
  205bf8:	042d      	lsls	r5, r5, #16
  205bfa:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  205bfe:	431d      	orrs	r5, r3
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  205c00:	78cb      	ldrb	r3, [r1, #3]
  205c02:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      if(index_lengthT > index_length)
  205c06:	6843      	ldr	r3, [r0, #4]
  205c08:	429d      	cmp	r5, r3
  205c0a:	d832      	bhi.n	205c72 <_ZN6hydrus15ServoControlCmd11deserializeEPh+0x86>
      index_length = index_lengthT;
  205c0c:	6065      	str	r5, [r4, #4]
      for( uint32_t i = 0; i < index_length; i++){
  205c0e:	2d00      	cmp	r5, #0
  205c10:	d035      	beq.n	205c7e <_ZN6hydrus15ServoControlCmd11deserializeEPh+0x92>
  205c12:	1cf9      	adds	r1, r7, #3
  205c14:	2300      	movs	r3, #0
      this->st_index =  ((uint8_t) (*(inbuffer + offset)));
  205c16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  205c1a:	7222      	strb	r2, [r4, #8]
  205c1c:	1d5e      	adds	r6, r3, #5
        memcpy( &(this->index[i]), &(this->st_index), sizeof(uint8_t));
  205c1e:	68e0      	ldr	r0, [r4, #12]
  205c20:	54c2      	strb	r2, [r0, r3]
      for( uint32_t i = 0; i < index_length; i++){
  205c22:	3301      	adds	r3, #1
  205c24:	6862      	ldr	r2, [r4, #4]
  205c26:	429a      	cmp	r2, r3
  205c28:	d8f5      	bhi.n	205c16 <_ZN6hydrus15ServoControlCmd11deserializeEPh+0x2a>
      uint32_t angles_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  205c2a:	19bd      	adds	r5, r7, r6
  205c2c:	5dbb      	ldrb	r3, [r7, r6]
      angles_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  205c2e:	786a      	ldrb	r2, [r5, #1]
      angles_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  205c30:	78af      	ldrb	r7, [r5, #2]
  205c32:	043f      	lsls	r7, r7, #16
  205c34:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
  205c38:	431f      	orrs	r7, r3
      angles_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  205c3a:	78eb      	ldrb	r3, [r5, #3]
  205c3c:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->angles_length);
  205c40:	3604      	adds	r6, #4
      if(angles_lengthT > angles_length)
  205c42:	6923      	ldr	r3, [r4, #16]
  205c44:	429f      	cmp	r7, r3
  205c46:	d81c      	bhi.n	205c82 <_ZN6hydrus15ServoControlCmd11deserializeEPh+0x96>
      angles_length = angles_lengthT;
  205c48:	6127      	str	r7, [r4, #16]
      for( uint32_t i = 0; i < angles_length; i++){
  205c4a:	b187      	cbz	r7, 205c6e <_ZN6hydrus15ServoControlCmd11deserializeEPh+0x82>
  205c4c:	462a      	mov	r2, r5
  205c4e:	2100      	movs	r1, #0
      this->st_angles =  ((uint16_t) (*(inbuffer + offset)));
  205c50:	7913      	ldrb	r3, [r2, #4]
  205c52:	82a3      	strh	r3, [r4, #20]
      this->st_angles |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205c54:	7950      	ldrb	r0, [r2, #5]
  205c56:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  205c5a:	82a3      	strh	r3, [r4, #20]
  205c5c:	3602      	adds	r6, #2
        memcpy( &(this->angles[i]), &(this->st_angles), sizeof(uint16_t));
  205c5e:	69a0      	ldr	r0, [r4, #24]
  205c60:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
      for( uint32_t i = 0; i < angles_length; i++){
  205c64:	3101      	adds	r1, #1
  205c66:	3202      	adds	r2, #2
  205c68:	6923      	ldr	r3, [r4, #16]
  205c6a:	428b      	cmp	r3, r1
  205c6c:	d8f0      	bhi.n	205c50 <_ZN6hydrus15ServoControlCmd11deserializeEPh+0x64>
    }
  205c6e:	4630      	mov	r0, r6
  205c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        this->index = (uint8_t*)realloc(this->index, index_lengthT * sizeof(uint8_t));
  205c72:	4629      	mov	r1, r5
  205c74:	68c0      	ldr	r0, [r0, #12]
  205c76:	f010 feb9 	bl	2169ec <realloc>
  205c7a:	60e0      	str	r0, [r4, #12]
  205c7c:	e7c6      	b.n	205c0c <_ZN6hydrus15ServoControlCmd11deserializeEPh+0x20>
      offset += sizeof(this->index_length);
  205c7e:	2604      	movs	r6, #4
  205c80:	e7d3      	b.n	205c2a <_ZN6hydrus15ServoControlCmd11deserializeEPh+0x3e>
        this->angles = (uint16_t*)realloc(this->angles, angles_lengthT * sizeof(uint16_t));
  205c82:	0079      	lsls	r1, r7, #1
  205c84:	69a0      	ldr	r0, [r4, #24]
  205c86:	f010 feb1 	bl	2169ec <realloc>
  205c8a:	61a0      	str	r0, [r4, #24]
  205c8c:	e7dc      	b.n	205c48 <_ZN6hydrus15ServoControlCmd11deserializeEPh+0x5c>

00205c8e <_ZN6hydrus14ServoTorqueCmd11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  205c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  205c92:	4604      	mov	r4, r0
  205c94:	460e      	mov	r6, r1
      uint32_t index_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  205c96:	780b      	ldrb	r3, [r1, #0]
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  205c98:	784a      	ldrb	r2, [r1, #1]
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  205c9a:	788d      	ldrb	r5, [r1, #2]
  205c9c:	042d      	lsls	r5, r5, #16
  205c9e:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  205ca2:	431d      	orrs	r5, r3
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  205ca4:	78cb      	ldrb	r3, [r1, #3]
  205ca6:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      if(index_lengthT > index_length)
  205caa:	6843      	ldr	r3, [r0, #4]
  205cac:	429d      	cmp	r5, r3
  205cae:	d835      	bhi.n	205d1c <_ZN6hydrus14ServoTorqueCmd11deserializeEPh+0x8e>
      index_length = index_lengthT;
  205cb0:	6065      	str	r5, [r4, #4]
      for( uint32_t i = 0; i < index_length; i++){
  205cb2:	2d00      	cmp	r5, #0
  205cb4:	d038      	beq.n	205d28 <_ZN6hydrus14ServoTorqueCmd11deserializeEPh+0x9a>
  205cb6:	1cf0      	adds	r0, r6, #3
  205cb8:	2300      	movs	r3, #0
      this->st_index =  ((uint8_t) (*(inbuffer + offset)));
  205cba:	f810 1f01 	ldrb.w	r1, [r0, #1]!
  205cbe:	7221      	strb	r1, [r4, #8]
  205cc0:	1d5a      	adds	r2, r3, #5
        memcpy( &(this->index[i]), &(this->st_index), sizeof(uint8_t));
  205cc2:	68e5      	ldr	r5, [r4, #12]
  205cc4:	54e9      	strb	r1, [r5, r3]
      for( uint32_t i = 0; i < index_length; i++){
  205cc6:	3301      	adds	r3, #1
  205cc8:	6861      	ldr	r1, [r4, #4]
  205cca:	4299      	cmp	r1, r3
  205ccc:	d8f5      	bhi.n	205cba <_ZN6hydrus14ServoTorqueCmd11deserializeEPh+0x2c>
      uint32_t torque_enable_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  205cce:	5cb1      	ldrb	r1, [r6, r2]
      torque_enable_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  205cd0:	18b3      	adds	r3, r6, r2
  205cd2:	7858      	ldrb	r0, [r3, #1]
      torque_enable_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  205cd4:	f893 8002 	ldrb.w	r8, [r3, #2]
  205cd8:	ea4f 4808 	mov.w	r8, r8, lsl #16
  205cdc:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
  205ce0:	ea48 0801 	orr.w	r8, r8, r1
      torque_enable_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  205ce4:	78db      	ldrb	r3, [r3, #3]
  205ce6:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
      offset += sizeof(this->torque_enable_length);
  205cea:	1d15      	adds	r5, r2, #4
  205cec:	462f      	mov	r7, r5
      if(torque_enable_lengthT > torque_enable_length)
  205cee:	6923      	ldr	r3, [r4, #16]
  205cf0:	4598      	cmp	r8, r3
  205cf2:	d81b      	bhi.n	205d2c <_ZN6hydrus14ServoTorqueCmd11deserializeEPh+0x9e>
      torque_enable_length = torque_enable_lengthT;
  205cf4:	f8c4 8010 	str.w	r8, [r4, #16]
      for( uint32_t i = 0; i < torque_enable_length; i++){
  205cf8:	f1b8 0f00 	cmp.w	r8, #0
  205cfc:	d00b      	beq.n	205d16 <_ZN6hydrus14ServoTorqueCmd11deserializeEPh+0x88>
  205cfe:	1973      	adds	r3, r6, r5
  205d00:	2200      	movs	r2, #0
      this->st_torque_enable =  ((uint8_t) (*(inbuffer + offset)));
  205d02:	f813 1b01 	ldrb.w	r1, [r3], #1
  205d06:	7521      	strb	r1, [r4, #20]
  205d08:	1b9f      	subs	r7, r3, r6
        memcpy( &(this->torque_enable[i]), &(this->st_torque_enable), sizeof(uint8_t));
  205d0a:	69a0      	ldr	r0, [r4, #24]
  205d0c:	5481      	strb	r1, [r0, r2]
      for( uint32_t i = 0; i < torque_enable_length; i++){
  205d0e:	3201      	adds	r2, #1
  205d10:	6921      	ldr	r1, [r4, #16]
  205d12:	4291      	cmp	r1, r2
  205d14:	d8f5      	bhi.n	205d02 <_ZN6hydrus14ServoTorqueCmd11deserializeEPh+0x74>
    }
  205d16:	4638      	mov	r0, r7
  205d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        this->index = (uint8_t*)realloc(this->index, index_lengthT * sizeof(uint8_t));
  205d1c:	4629      	mov	r1, r5
  205d1e:	68c0      	ldr	r0, [r0, #12]
  205d20:	f010 fe64 	bl	2169ec <realloc>
  205d24:	60e0      	str	r0, [r4, #12]
  205d26:	e7c3      	b.n	205cb0 <_ZN6hydrus14ServoTorqueCmd11deserializeEPh+0x22>
      offset += sizeof(this->index_length);
  205d28:	2204      	movs	r2, #4
  205d2a:	e7d0      	b.n	205cce <_ZN6hydrus14ServoTorqueCmd11deserializeEPh+0x40>
        this->torque_enable = (uint8_t*)realloc(this->torque_enable, torque_enable_lengthT * sizeof(uint8_t));
  205d2c:	4641      	mov	r1, r8
  205d2e:	69a0      	ldr	r0, [r4, #24]
  205d30:	f010 fe5c 	bl	2169ec <realloc>
  205d34:	61a0      	str	r0, [r4, #24]
  205d36:	e7dd      	b.n	205cf4 <_ZN6hydrus14ServoTorqueCmd11deserializeEPh+0x66>

00205d38 <_ZN6hydrus14BoardConfigCmd11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  205d38:	b570      	push	{r4, r5, r6, lr}
  205d3a:	4605      	mov	r5, r0
  205d3c:	460c      	mov	r4, r1
      this->command =  ((uint8_t) (*(inbuffer + offset)));
  205d3e:	780b      	ldrb	r3, [r1, #0]
  205d40:	7103      	strb	r3, [r0, #4]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  205d42:	784b      	ldrb	r3, [r1, #1]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  205d44:	788a      	ldrb	r2, [r1, #2]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  205d46:	78ce      	ldrb	r6, [r1, #3]
  205d48:	0436      	lsls	r6, r6, #16
  205d4a:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  205d4e:	431e      	orrs	r6, r3
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  205d50:	790b      	ldrb	r3, [r1, #4]
  205d52:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(data_lengthT > data_length)
  205d56:	6883      	ldr	r3, [r0, #8]
  205d58:	429e      	cmp	r6, r3
  205d5a:	d819      	bhi.n	205d90 <_ZN6hydrus14BoardConfigCmd11deserializeEPh+0x58>
      data_length = data_lengthT;
  205d5c:	60ae      	str	r6, [r5, #8]
      for( uint32_t i = 0; i < data_length; i++){
  205d5e:	b1ee      	cbz	r6, 205d9c <_ZN6hydrus14BoardConfigCmd11deserializeEPh+0x64>
  205d60:	4621      	mov	r1, r4
  205d62:	2200      	movs	r2, #0
  205d64:	2005      	movs	r0, #5
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205d66:	798c      	ldrb	r4, [r1, #6]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  205d68:	79cb      	ldrb	r3, [r1, #7]
  205d6a:	041b      	lsls	r3, r3, #16
  205d6c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  205d70:	794c      	ldrb	r4, [r1, #5]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  205d72:	4323      	orrs	r3, r4
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  205d74:	7a0c      	ldrb	r4, [r1, #8]
  205d76:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
      this->st_data = u_st_data.real;
  205d7a:	60eb      	str	r3, [r5, #12]
  205d7c:	3004      	adds	r0, #4
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int32_t));
  205d7e:	692c      	ldr	r4, [r5, #16]
  205d80:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
      for( uint32_t i = 0; i < data_length; i++){
  205d84:	3201      	adds	r2, #1
  205d86:	3104      	adds	r1, #4
  205d88:	68ab      	ldr	r3, [r5, #8]
  205d8a:	4293      	cmp	r3, r2
  205d8c:	d8eb      	bhi.n	205d66 <_ZN6hydrus14BoardConfigCmd11deserializeEPh+0x2e>
  205d8e:	bd70      	pop	{r4, r5, r6, pc}
        this->data = (int32_t*)realloc(this->data, data_lengthT * sizeof(int32_t));
  205d90:	00b1      	lsls	r1, r6, #2
  205d92:	6900      	ldr	r0, [r0, #16]
  205d94:	f010 fe2a 	bl	2169ec <realloc>
  205d98:	6128      	str	r0, [r5, #16]
  205d9a:	e7df      	b.n	205d5c <_ZN6hydrus14BoardConfigCmd11deserializeEPh+0x24>
      offset += sizeof(this->data_length);
  205d9c:	2005      	movs	r0, #5
    }
  205d9e:	bd70      	pop	{r4, r5, r6, pc}

00205da0 <_ZN6hydrus11ServoStates11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  205da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  205da4:	4604      	mov	r4, r0
  205da6:	460d      	mov	r5, r1
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
  205da8:	780b      	ldrb	r3, [r1, #0]
  205daa:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205dac:	784a      	ldrb	r2, [r1, #1]
  205dae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  205db2:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  205db4:	788a      	ldrb	r2, [r1, #2]
  205db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  205dba:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  205dbc:	78ca      	ldrb	r2, [r1, #3]
  205dbe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  205dc2:	6043      	str	r3, [r0, #4]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
  205dc4:	790b      	ldrb	r3, [r1, #4]
  205dc6:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205dc8:	794a      	ldrb	r2, [r1, #5]
  205dca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  205dce:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  205dd0:	798a      	ldrb	r2, [r1, #6]
  205dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  205dd6:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  205dd8:	79ca      	ldrb	r2, [r1, #7]
  205dda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  205dde:	6083      	str	r3, [r0, #8]
      uint32_t servos_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  205de0:	7a0b      	ldrb	r3, [r1, #8]
      servos_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  205de2:	7a4a      	ldrb	r2, [r1, #9]
      servos_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  205de4:	7a8e      	ldrb	r6, [r1, #10]
  205de6:	0436      	lsls	r6, r6, #16
  205de8:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  205dec:	431e      	orrs	r6, r3
      servos_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  205dee:	7acb      	ldrb	r3, [r1, #11]
  205df0:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(servos_lengthT > servos_length)
  205df4:	68c3      	ldr	r3, [r0, #12]
  205df6:	429e      	cmp	r6, r3
  205df8:	d833      	bhi.n	205e62 <_ZN6hydrus11ServoStates11deserializeEPh+0xc2>
      servos_length = servos_lengthT;
  205dfa:	60e6      	str	r6, [r4, #12]
      for( uint32_t i = 0; i < servos_length; i++){
  205dfc:	2e00      	cmp	r6, #0
  205dfe:	d036      	beq.n	205e6e <_ZN6hydrus11ServoStates11deserializeEPh+0xce>
  205e00:	4629      	mov	r1, r5
  205e02:	2500      	movs	r5, #0
  205e04:	200c      	movs	r0, #12
        memcpy( &(this->servos[i]), &(this->st_servos), sizeof(hydrus::ServoState));
  205e06:	f104 0210 	add.w	r2, r4, #16
      this->index =  ((uint8_t) (*(inbuffer + offset)));
  205e0a:	7b0b      	ldrb	r3, [r1, #12]
  205e0c:	7523      	strb	r3, [r4, #20]
      this->angle =  ((uint16_t) (*(inbuffer + offset)));
  205e0e:	7b4b      	ldrb	r3, [r1, #13]
  205e10:	82e3      	strh	r3, [r4, #22]
      this->angle |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205e12:	7b8e      	ldrb	r6, [r1, #14]
  205e14:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  205e18:	82e3      	strh	r3, [r4, #22]
      this->temp =  ((uint8_t) (*(inbuffer + offset)));
  205e1a:	7bcb      	ldrb	r3, [r1, #15]
  205e1c:	7623      	strb	r3, [r4, #24]
      u_load.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205e1e:	7c4e      	ldrb	r6, [r1, #17]
  205e20:	7c0b      	ldrb	r3, [r1, #16]
  205e22:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      this->load = u_load.real;
  205e26:	8363      	strh	r3, [r4, #26]
      this->error =  ((uint8_t) (*(inbuffer + offset)));
  205e28:	7c8b      	ldrb	r3, [r1, #18]
  205e2a:	7723      	strb	r3, [r4, #28]
      offset += this->st_servos.deserialize(inbuffer + offset);
  205e2c:	3007      	adds	r0, #7
        memcpy( &(this->servos[i]), &(this->st_servos), sizeof(hydrus::ServoState));
  205e2e:	012e      	lsls	r6, r5, #4
  205e30:	6a27      	ldr	r7, [r4, #32]
  205e32:	19bb      	adds	r3, r7, r6
  205e34:	f8d2 9000 	ldr.w	r9, [r2]
  205e38:	f8d2 8004 	ldr.w	r8, [r2, #4]
  205e3c:	f8d2 c008 	ldr.w	ip, [r2, #8]
  205e40:	f8d2 e00c 	ldr.w	lr, [r2, #12]
  205e44:	f847 9006 	str.w	r9, [r7, r6]
  205e48:	f8c3 8004 	str.w	r8, [r3, #4]
  205e4c:	f8c3 c008 	str.w	ip, [r3, #8]
  205e50:	f8c3 e00c 	str.w	lr, [r3, #12]
      for( uint32_t i = 0; i < servos_length; i++){
  205e54:	3501      	adds	r5, #1
  205e56:	3107      	adds	r1, #7
  205e58:	68e3      	ldr	r3, [r4, #12]
  205e5a:	42ab      	cmp	r3, r5
  205e5c:	d8d5      	bhi.n	205e0a <_ZN6hydrus11ServoStates11deserializeEPh+0x6a>
  205e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        this->servos = (hydrus::ServoState*)realloc(this->servos, servos_lengthT * sizeof(hydrus::ServoState));
  205e62:	0131      	lsls	r1, r6, #4
  205e64:	6a00      	ldr	r0, [r0, #32]
  205e66:	f010 fdc1 	bl	2169ec <realloc>
  205e6a:	6220      	str	r0, [r4, #32]
  205e6c:	e7c5      	b.n	205dfa <_ZN6hydrus11ServoStates11deserializeEPh+0x5a>
      offset += sizeof(this->servos_length);
  205e6e:	200c      	movs	r0, #12
    }
  205e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00205e74 <_ZN6hydrus9BoardInfo11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  205e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  205e78:	4604      	mov	r4, r0
  205e7a:	460e      	mov	r6, r1
      this->slave_id =  ((uint8_t) (*(inbuffer + offset)));
  205e7c:	780b      	ldrb	r3, [r1, #0]
  205e7e:	7103      	strb	r3, [r0, #4]
      this->imu_send_data_flag =  ((uint8_t) (*(inbuffer + offset)));
  205e80:	784b      	ldrb	r3, [r1, #1]
  205e82:	7143      	strb	r3, [r0, #5]
      uint32_t servos_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  205e84:	788b      	ldrb	r3, [r1, #2]
      servos_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  205e86:	78ca      	ldrb	r2, [r1, #3]
      servos_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  205e88:	790d      	ldrb	r5, [r1, #4]
  205e8a:	042d      	lsls	r5, r5, #16
  205e8c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  205e90:	431d      	orrs	r5, r3
      servos_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  205e92:	794b      	ldrb	r3, [r1, #5]
  205e94:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      if(servos_lengthT > servos_length)
  205e98:	6883      	ldr	r3, [r0, #8]
  205e9a:	429d      	cmp	r5, r3
  205e9c:	d848      	bhi.n	205f30 <_ZN6hydrus9BoardInfo11deserializeEPh+0xbc>
      servos_length = servos_lengthT;
  205e9e:	60a5      	str	r5, [r4, #8]
      for( uint32_t i = 0; i < servos_length; i++){
  205ea0:	2d00      	cmp	r5, #0
  205ea2:	d04d      	beq.n	205f40 <_ZN6hydrus9BoardInfo11deserializeEPh+0xcc>
  205ea4:	4631      	mov	r1, r6
  205ea6:	2500      	movs	r5, #0
  205ea8:	462e      	mov	r6, r5
  205eaa:	2006      	movs	r0, #6
        memcpy( &(this->servos[i]), &(this->st_servos), sizeof(hydrus::ServoInfo));
  205eac:	f104 030c 	add.w	r3, r4, #12
      this->id =  ((uint8_t) (*(inbuffer + offset)));
  205eb0:	798a      	ldrb	r2, [r1, #6]
  205eb2:	7422      	strb	r2, [r4, #16]
      this->p_gain =  ((uint16_t) (*(inbuffer + offset)));
  205eb4:	79ca      	ldrb	r2, [r1, #7]
  205eb6:	8262      	strh	r2, [r4, #18]
      this->p_gain |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205eb8:	7a0f      	ldrb	r7, [r1, #8]
  205eba:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  205ebe:	8262      	strh	r2, [r4, #18]
      this->i_gain =  ((uint16_t) (*(inbuffer + offset)));
  205ec0:	7a4a      	ldrb	r2, [r1, #9]
  205ec2:	82a2      	strh	r2, [r4, #20]
      this->i_gain |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205ec4:	7a8f      	ldrb	r7, [r1, #10]
  205ec6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  205eca:	82a2      	strh	r2, [r4, #20]
      this->d_gain =  ((uint16_t) (*(inbuffer + offset)));
  205ecc:	7aca      	ldrb	r2, [r1, #11]
  205ece:	82e2      	strh	r2, [r4, #22]
      this->d_gain |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205ed0:	7b0f      	ldrb	r7, [r1, #12]
  205ed2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  205ed6:	82e2      	strh	r2, [r4, #22]
      this->profile_velocity =  ((uint16_t) (*(inbuffer + offset)));
  205ed8:	7b4a      	ldrb	r2, [r1, #13]
  205eda:	8322      	strh	r2, [r4, #24]
      this->profile_velocity |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205edc:	7b8f      	ldrb	r7, [r1, #14]
  205ede:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  205ee2:	8322      	strh	r2, [r4, #24]
      this->current_limit =  ((uint16_t) (*(inbuffer + offset)));
  205ee4:	7bca      	ldrb	r2, [r1, #15]
  205ee6:	8362      	strh	r2, [r4, #26]
      this->current_limit |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205ee8:	7c0f      	ldrb	r7, [r1, #16]
  205eea:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  205eee:	8362      	strh	r2, [r4, #26]
      this->send_data_flag =  ((uint8_t) (*(inbuffer + offset)));
  205ef0:	7c4a      	ldrb	r2, [r1, #17]
  205ef2:	7722      	strb	r2, [r4, #28]
      offset += this->st_servos.deserialize(inbuffer + offset);
  205ef4:	300c      	adds	r0, #12
        memcpy( &(this->servos[i]), &(this->st_servos), sizeof(hydrus::ServoInfo));
  205ef6:	f8d4 e020 	ldr.w	lr, [r4, #32]
  205efa:	eb0e 0205 	add.w	r2, lr, r5
  205efe:	681f      	ldr	r7, [r3, #0]
  205f00:	f8d3 9004 	ldr.w	r9, [r3, #4]
  205f04:	f8d3 8008 	ldr.w	r8, [r3, #8]
  205f08:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  205f0c:	f84e 7005 	str.w	r7, [lr, r5]
  205f10:	f8c2 9004 	str.w	r9, [r2, #4]
  205f14:	f8c2 8008 	str.w	r8, [r2, #8]
  205f18:	f8c2 c00c 	str.w	ip, [r2, #12]
  205f1c:	691f      	ldr	r7, [r3, #16]
  205f1e:	6117      	str	r7, [r2, #16]
      for( uint32_t i = 0; i < servos_length; i++){
  205f20:	3601      	adds	r6, #1
  205f22:	310c      	adds	r1, #12
  205f24:	3514      	adds	r5, #20
  205f26:	68a2      	ldr	r2, [r4, #8]
  205f28:	42b2      	cmp	r2, r6
  205f2a:	d8c1      	bhi.n	205eb0 <_ZN6hydrus9BoardInfo11deserializeEPh+0x3c>
  205f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        this->servos = (hydrus::ServoInfo*)realloc(this->servos, servos_lengthT * sizeof(hydrus::ServoInfo));
  205f30:	eb05 0185 	add.w	r1, r5, r5, lsl #2
  205f34:	0089      	lsls	r1, r1, #2
  205f36:	6a00      	ldr	r0, [r0, #32]
  205f38:	f010 fd58 	bl	2169ec <realloc>
  205f3c:	6220      	str	r0, [r4, #32]
  205f3e:	e7ae      	b.n	205e9e <_ZN6hydrus9BoardInfo11deserializeEPh+0x2a>
      offset += sizeof(this->servos_length);
  205f40:	2006      	movs	r0, #6
    }
  205f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00205f46 <_ZN3ros10SubscriberIN6hydrus14BoardConfigCmdEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
  205f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  205f48:	4604      	mov	r4, r0
  205f4a:	460e      	mov	r6, r1
    msg.deserialize(data);
  205f4c:	f100 050c 	add.w	r5, r0, #12
      this->command =  ((uint8_t) (*(inbuffer + offset)));
  205f50:	780b      	ldrb	r3, [r1, #0]
  205f52:	7403      	strb	r3, [r0, #16]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  205f54:	784b      	ldrb	r3, [r1, #1]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  205f56:	788a      	ldrb	r2, [r1, #2]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  205f58:	78cf      	ldrb	r7, [r1, #3]
  205f5a:	043f      	lsls	r7, r7, #16
  205f5c:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
  205f60:	431f      	orrs	r7, r3
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  205f62:	790b      	ldrb	r3, [r1, #4]
  205f64:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      if(data_lengthT > data_length)
  205f68:	6943      	ldr	r3, [r0, #20]
  205f6a:	429f      	cmp	r7, r3
  205f6c:	d81a      	bhi.n	205fa4 <_ZN3ros10SubscriberIN6hydrus14BoardConfigCmdEvE8callbackEPh+0x5e>
      data_length = data_lengthT;
  205f6e:	6167      	str	r7, [r4, #20]
      for( uint32_t i = 0; i < data_length; i++){
  205f70:	b1a7      	cbz	r7, 205f9c <_ZN3ros10SubscriberIN6hydrus14BoardConfigCmdEvE8callbackEPh+0x56>
  205f72:	4631      	mov	r1, r6
  205f74:	2200      	movs	r2, #0
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  205f76:	7988      	ldrb	r0, [r1, #6]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  205f78:	79cb      	ldrb	r3, [r1, #7]
  205f7a:	041b      	lsls	r3, r3, #16
  205f7c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  205f80:	7948      	ldrb	r0, [r1, #5]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  205f82:	4303      	orrs	r3, r0
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  205f84:	7a08      	ldrb	r0, [r1, #8]
  205f86:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
      this->st_data = u_st_data.real;
  205f8a:	61a3      	str	r3, [r4, #24]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(int32_t));
  205f8c:	69e0      	ldr	r0, [r4, #28]
  205f8e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
      for( uint32_t i = 0; i < data_length; i++){
  205f92:	3201      	adds	r2, #1
  205f94:	3104      	adds	r1, #4
  205f96:	6963      	ldr	r3, [r4, #20]
  205f98:	4293      	cmp	r3, r2
  205f9a:	d8ec      	bhi.n	205f76 <_ZN3ros10SubscriberIN6hydrus14BoardConfigCmdEvE8callbackEPh+0x30>
    this->cb_(msg);
  205f9c:	6a23      	ldr	r3, [r4, #32]
  205f9e:	4628      	mov	r0, r5
  205fa0:	4798      	blx	r3
  205fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        this->data = (int32_t*)realloc(this->data, data_lengthT * sizeof(int32_t));
  205fa4:	00b9      	lsls	r1, r7, #2
  205fa6:	69c0      	ldr	r0, [r0, #28]
  205fa8:	f010 fd20 	bl	2169ec <realloc>
  205fac:	61e0      	str	r0, [r4, #28]
  205fae:	e7de      	b.n	205f6e <_ZN3ros10SubscriberIN6hydrus14BoardConfigCmdEvE8callbackEPh+0x28>

00205fb0 <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
  205fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  205fb2:	4604      	mov	r4, r0
  205fb4:	460f      	mov	r7, r1
    msg.deserialize(data);
  205fb6:	f100 060c 	add.w	r6, r0, #12
      uint32_t index_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  205fba:	780b      	ldrb	r3, [r1, #0]
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  205fbc:	784a      	ldrb	r2, [r1, #1]
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  205fbe:	788d      	ldrb	r5, [r1, #2]
  205fc0:	042d      	lsls	r5, r5, #16
  205fc2:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  205fc6:	431d      	orrs	r5, r3
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  205fc8:	78cb      	ldrb	r3, [r1, #3]
  205fca:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      if(index_lengthT > index_length)
  205fce:	6903      	ldr	r3, [r0, #16]
  205fd0:	429d      	cmp	r5, r3
  205fd2:	d830      	bhi.n	206036 <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE8callbackEPh+0x86>
      index_length = index_lengthT;
  205fd4:	6125      	str	r5, [r4, #16]
      for( uint32_t i = 0; i < index_length; i++){
  205fd6:	2d00      	cmp	r5, #0
  205fd8:	d033      	beq.n	206042 <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE8callbackEPh+0x92>
  205fda:	1cf9      	adds	r1, r7, #3
  205fdc:	2300      	movs	r3, #0
      this->st_index =  ((uint8_t) (*(inbuffer + offset)));
  205fde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  205fe2:	7522      	strb	r2, [r4, #20]
  205fe4:	1d5d      	adds	r5, r3, #5
        memcpy( &(this->index[i]), &(this->st_index), sizeof(uint8_t));
  205fe6:	69a0      	ldr	r0, [r4, #24]
  205fe8:	54c2      	strb	r2, [r0, r3]
      for( uint32_t i = 0; i < index_length; i++){
  205fea:	3301      	adds	r3, #1
  205fec:	6922      	ldr	r2, [r4, #16]
  205fee:	429a      	cmp	r2, r3
  205ff0:	d8f5      	bhi.n	205fde <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE8callbackEPh+0x2e>
      uint32_t torque_enable_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  205ff2:	5d79      	ldrb	r1, [r7, r5]
      torque_enable_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  205ff4:	197b      	adds	r3, r7, r5
  205ff6:	7858      	ldrb	r0, [r3, #1]
      torque_enable_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  205ff8:	789a      	ldrb	r2, [r3, #2]
  205ffa:	0412      	lsls	r2, r2, #16
  205ffc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  206000:	430a      	orrs	r2, r1
      torque_enable_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  206002:	1ceb      	adds	r3, r5, #3
  206004:	18fd      	adds	r5, r7, r3
  206006:	5cff      	ldrb	r7, [r7, r3]
  206008:	ea42 6707 	orr.w	r7, r2, r7, lsl #24
      if(torque_enable_lengthT > torque_enable_length)
  20600c:	69e3      	ldr	r3, [r4, #28]
  20600e:	429f      	cmp	r7, r3
  206010:	d819      	bhi.n	206046 <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE8callbackEPh+0x96>
      torque_enable_length = torque_enable_lengthT;
  206012:	61e7      	str	r7, [r4, #28]
      for( uint32_t i = 0; i < torque_enable_length; i++){
  206014:	b15f      	cbz	r7, 20602e <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE8callbackEPh+0x7e>
  206016:	4629      	mov	r1, r5
  206018:	2300      	movs	r3, #0
      this->st_torque_enable =  ((uint8_t) (*(inbuffer + offset)));
  20601a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  20601e:	f884 2020 	strb.w	r2, [r4, #32]
        memcpy( &(this->torque_enable[i]), &(this->st_torque_enable), sizeof(uint8_t));
  206022:	6a60      	ldr	r0, [r4, #36]	; 0x24
  206024:	54c2      	strb	r2, [r0, r3]
      for( uint32_t i = 0; i < torque_enable_length; i++){
  206026:	3301      	adds	r3, #1
  206028:	69e2      	ldr	r2, [r4, #28]
  20602a:	429a      	cmp	r2, r3
  20602c:	d8f5      	bhi.n	20601a <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE8callbackEPh+0x6a>
    this->cb_(msg);
  20602e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  206030:	4630      	mov	r0, r6
  206032:	4798      	blx	r3
  206034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        this->index = (uint8_t*)realloc(this->index, index_lengthT * sizeof(uint8_t));
  206036:	4629      	mov	r1, r5
  206038:	6980      	ldr	r0, [r0, #24]
  20603a:	f010 fcd7 	bl	2169ec <realloc>
  20603e:	61a0      	str	r0, [r4, #24]
  206040:	e7c8      	b.n	205fd4 <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE8callbackEPh+0x24>
      offset += sizeof(this->index_length);
  206042:	2504      	movs	r5, #4
  206044:	e7d5      	b.n	205ff2 <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE8callbackEPh+0x42>
        this->torque_enable = (uint8_t*)realloc(this->torque_enable, torque_enable_lengthT * sizeof(uint8_t));
  206046:	4639      	mov	r1, r7
  206048:	6a60      	ldr	r0, [r4, #36]	; 0x24
  20604a:	f010 fccf 	bl	2169ec <realloc>
  20604e:	6260      	str	r0, [r4, #36]	; 0x24
  206050:	e7df      	b.n	206012 <_ZN3ros10SubscriberIN6hydrus14ServoTorqueCmdEvE8callbackEPh+0x62>

00206052 <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
  206052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  206054:	4604      	mov	r4, r0
  206056:	460f      	mov	r7, r1
    msg.deserialize(data);
  206058:	f100 060c 	add.w	r6, r0, #12
      uint32_t index_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20605c:	780b      	ldrb	r3, [r1, #0]
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  20605e:	784a      	ldrb	r2, [r1, #1]
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  206060:	788d      	ldrb	r5, [r1, #2]
  206062:	042d      	lsls	r5, r5, #16
  206064:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  206068:	431d      	orrs	r5, r3
      index_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20606a:	78cb      	ldrb	r3, [r1, #3]
  20606c:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      if(index_lengthT > index_length)
  206070:	6903      	ldr	r3, [r0, #16]
  206072:	429d      	cmp	r5, r3
  206074:	d835      	bhi.n	2060e2 <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE8callbackEPh+0x90>
      index_length = index_lengthT;
  206076:	6125      	str	r5, [r4, #16]
      for( uint32_t i = 0; i < index_length; i++){
  206078:	2d00      	cmp	r5, #0
  20607a:	d038      	beq.n	2060ee <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE8callbackEPh+0x9c>
  20607c:	1cf9      	adds	r1, r7, #3
  20607e:	2300      	movs	r3, #0
      this->st_index =  ((uint8_t) (*(inbuffer + offset)));
  206080:	f811 2f01 	ldrb.w	r2, [r1, #1]!
  206084:	7522      	strb	r2, [r4, #20]
  206086:	f103 0e05 	add.w	lr, r3, #5
        memcpy( &(this->index[i]), &(this->st_index), sizeof(uint8_t));
  20608a:	69a0      	ldr	r0, [r4, #24]
  20608c:	54c2      	strb	r2, [r0, r3]
      for( uint32_t i = 0; i < index_length; i++){
  20608e:	3301      	adds	r3, #1
  206090:	6922      	ldr	r2, [r4, #16]
  206092:	429a      	cmp	r2, r3
  206094:	d8f4      	bhi.n	206080 <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE8callbackEPh+0x2e>
      uint32_t angles_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  206096:	eb07 050e 	add.w	r5, r7, lr
  20609a:	f817 300e 	ldrb.w	r3, [r7, lr]
      angles_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  20609e:	786a      	ldrb	r2, [r5, #1]
      angles_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  2060a0:	78af      	ldrb	r7, [r5, #2]
  2060a2:	043f      	lsls	r7, r7, #16
  2060a4:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
  2060a8:	431f      	orrs	r7, r3
      angles_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  2060aa:	78eb      	ldrb	r3, [r5, #3]
  2060ac:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      if(angles_lengthT > angles_length)
  2060b0:	69e3      	ldr	r3, [r4, #28]
  2060b2:	429f      	cmp	r7, r3
  2060b4:	d81e      	bhi.n	2060f4 <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE8callbackEPh+0xa2>
      angles_length = angles_lengthT;
  2060b6:	61e7      	str	r7, [r4, #28]
      for( uint32_t i = 0; i < angles_length; i++){
  2060b8:	b17f      	cbz	r7, 2060da <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE8callbackEPh+0x88>
  2060ba:	462a      	mov	r2, r5
  2060bc:	2100      	movs	r1, #0
      this->st_angles =  ((uint16_t) (*(inbuffer + offset)));
  2060be:	7913      	ldrb	r3, [r2, #4]
  2060c0:	8423      	strh	r3, [r4, #32]
      this->st_angles |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2060c2:	7950      	ldrb	r0, [r2, #5]
  2060c4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  2060c8:	8423      	strh	r3, [r4, #32]
        memcpy( &(this->angles[i]), &(this->st_angles), sizeof(uint16_t));
  2060ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
  2060cc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
      for( uint32_t i = 0; i < angles_length; i++){
  2060d0:	3101      	adds	r1, #1
  2060d2:	3202      	adds	r2, #2
  2060d4:	69e3      	ldr	r3, [r4, #28]
  2060d6:	428b      	cmp	r3, r1
  2060d8:	d8f1      	bhi.n	2060be <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE8callbackEPh+0x6c>
    this->cb_(msg);
  2060da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  2060dc:	4630      	mov	r0, r6
  2060de:	4798      	blx	r3
  2060e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        this->index = (uint8_t*)realloc(this->index, index_lengthT * sizeof(uint8_t));
  2060e2:	4629      	mov	r1, r5
  2060e4:	6980      	ldr	r0, [r0, #24]
  2060e6:	f010 fc81 	bl	2169ec <realloc>
  2060ea:	61a0      	str	r0, [r4, #24]
  2060ec:	e7c3      	b.n	206076 <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE8callbackEPh+0x24>
      offset += sizeof(this->index_length);
  2060ee:	f04f 0e04 	mov.w	lr, #4
  2060f2:	e7d0      	b.n	206096 <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE8callbackEPh+0x44>
        this->angles = (uint16_t*)realloc(this->angles, angles_lengthT * sizeof(uint16_t));
  2060f4:	0079      	lsls	r1, r7, #1
  2060f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  2060f8:	f010 fc78 	bl	2169ec <realloc>
  2060fc:	6260      	str	r0, [r4, #36]	; 0x24
  2060fe:	e7da      	b.n	2060b6 <_ZN3ros10SubscriberIN6hydrus15ServoControlCmdEvE8callbackEPh+0x64>

00206100 <_ZN5Spine4sendEv>:
  }

  void send()
  {
	static int send_board_index = 0;
	if (can_idle_count_ > 0) {
  206100:	4b1a      	ldr	r3, [pc, #104]	; (20616c <_ZN5Spine4sendEv+0x6c>)
  206102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  206104:	b11b      	cbz	r3, 20610e <_ZN5Spine4sendEv+0xe>
		can_idle_count_--;
  206106:	3b01      	subs	r3, #1
  206108:	4a18      	ldr	r2, [pc, #96]	; (20616c <_ZN5Spine4sendEv+0x6c>)
  20610a:	6553      	str	r3, [r2, #84]	; 0x54
		return;
  20610c:	4770      	bx	lr
  {
  20610e:	b510      	push	{r4, lr}
	}
	if(HAL_GetTick() % 2 == 0) {
  206110:	f009 fbc8 	bl	20f8a4 <HAL_GetTick>
  206114:	f010 0f01 	tst.w	r0, #1
  206118:	d000      	beq.n	20611c <_ZN5Spine4sendEv+0x1c>
  20611a:	bd10      	pop	{r4, pc}
	  can_motor_send_device_.sendData();
  20611c:	4c13      	ldr	r4, [pc, #76]	; (20616c <_ZN5Spine4sendEv+0x6c>)
  20611e:	f104 0064 	add.w	r0, r4, #100	; 0x64
  206122:	f7ff f91d 	bl	205360 <_ZN18CANMotorSendDevice8sendDataEv>
	  if (slave_num_ != 0) {
  206126:	7b23      	ldrb	r3, [r4, #12]
  206128:	2b00      	cmp	r3, #0
  20612a:	d0f6      	beq.n	20611a <_ZN5Spine4sendEv+0x1a>
		  neuron_.at(send_board_index).can_servo_.sendData();
  20612c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  20612e:	6920      	ldr	r0, [r4, #16]
  206130:	6962      	ldr	r2, [r4, #20]
  206132:	1a12      	subs	r2, r2, r0
  206134:	1192      	asrs	r2, r2, #6
  206136:	4b0e      	ldr	r3, [pc, #56]	; (206170 <_ZN5Spine4sendEv+0x70>)
  206138:	fb03 f202 	mul.w	r2, r3, r2
	if (__n >= this->size())
  20613c:	4291      	cmp	r1, r2
  20613e:	d212      	bcs.n	206166 <_ZN5Spine4sendEv+0x66>
      { return *(this->_M_impl._M_start + __n); }
  206140:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  206144:	eb00 1081 	add.w	r0, r0, r1, lsl #6
  206148:	f500 7096 	add.w	r0, r0, #300	; 0x12c
  20614c:	f7ff f9e8 	bl	205520 <_ZN8CANServo8sendDataEv>
		  send_board_index++;
  206150:	4a06      	ldr	r2, [pc, #24]	; (20616c <_ZN5Spine4sendEv+0x6c>)
  206152:	6f93      	ldr	r3, [r2, #120]	; 0x78
  206154:	3301      	adds	r3, #1
  206156:	6793      	str	r3, [r2, #120]	; 0x78
		  if (send_board_index == slave_num_) send_board_index = 0;
  206158:	7b12      	ldrb	r2, [r2, #12]
  20615a:	4293      	cmp	r3, r2
  20615c:	d1dd      	bne.n	20611a <_ZN5Spine4sendEv+0x1a>
  20615e:	2200      	movs	r2, #0
  206160:	4b02      	ldr	r3, [pc, #8]	; (20616c <_ZN5Spine4sendEv+0x6c>)
  206162:	679a      	str	r2, [r3, #120]	; 0x78
  206164:	e7d9      	b.n	20611a <_ZN5Spine4sendEv+0x1a>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  206166:	4803      	ldr	r0, [pc, #12]	; (206174 <_ZN5Spine4sendEv+0x74>)
  206168:	f00e fe8f 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  20616c:	2000009c 	.word	0x2000009c
  206170:	cccccccd 	.word	0xcccccccd
  206174:	00216d60 	.word	0x00216d60

00206178 <_ZN5Spine6updateEv>:
	  }
    }
  }

  void update(void)
  {
  206178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  20617c:	b082      	sub	sp, #8
    for (int i = 0; i < slave_num_; i++)
  20617e:	4b45      	ldr	r3, [pc, #276]	; (206294 <_ZN5Spine6updateEv+0x11c>)
  206180:	7b1b      	ldrb	r3, [r3, #12]
  206182:	b32b      	cbz	r3, 2061d0 <_ZN5Spine6updateEv+0x58>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206184:	4b43      	ldr	r3, [pc, #268]	; (206294 <_ZN5Spine6updateEv+0x11c>)
  206186:	6918      	ldr	r0, [r3, #16]
  206188:	695b      	ldr	r3, [r3, #20]
  20618a:	1a1b      	subs	r3, r3, r0
  20618c:	119b      	asrs	r3, r3, #6
  20618e:	4a42      	ldr	r2, [pc, #264]	; (206298 <_ZN5Spine6updateEv+0x120>)
  206190:	fb02 f303 	mul.w	r3, r2, r3
	if (__n >= this->size())
  206194:	b1cb      	cbz	r3, 2061ca <_ZN5Spine6updateEv+0x52>
  206196:	2500      	movs	r5, #0
  206198:	462c      	mov	r4, r5
  20619a:	4e3e      	ldr	r6, [pc, #248]	; (206294 <_ZN5Spine6updateEv+0x11c>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  20619c:	4617      	mov	r7, r2
      { return *(this->_M_impl._M_start + __n); }
  20619e:	4428      	add	r0, r5
      neuron_.at(i).can_imu_.update();
  2061a0:	3014      	adds	r0, #20
  2061a2:	f004 ffe1 	bl	20b168 <_ZN3IMU6updateEv>
    for (int i = 0; i < slave_num_; i++)
  2061a6:	3401      	adds	r4, #1
  2061a8:	7b33      	ldrb	r3, [r6, #12]
  2061aa:	42a3      	cmp	r3, r4
  2061ac:	dd10      	ble.n	2061d0 <_ZN5Spine6updateEv+0x58>
      neuron_.at(i).can_imu_.update();
  2061ae:	4621      	mov	r1, r4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2061b0:	6930      	ldr	r0, [r6, #16]
  2061b2:	6972      	ldr	r2, [r6, #20]
  2061b4:	1a12      	subs	r2, r2, r0
  2061b6:	1192      	asrs	r2, r2, #6
  2061b8:	fb07 f202 	mul.w	r2, r7, r2
  2061bc:	f505 75a0 	add.w	r5, r5, #320	; 0x140
	if (__n >= this->size())
  2061c0:	4294      	cmp	r4, r2
  2061c2:	d3ec      	bcc.n	20619e <_ZN5Spine6updateEv+0x26>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  2061c4:	4835      	ldr	r0, [pc, #212]	; (20629c <_ZN5Spine6updateEv+0x124>)
  2061c6:	f00e fe60 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2061ca:	2200      	movs	r2, #0
  2061cc:	4611      	mov	r1, r2
  2061ce:	e7f9      	b.n	2061c4 <_ZN5Spine6updateEv+0x4c>

    //convertGyroFromJointvalues();

    /* ros publish */
    uint32_t now_time = HAL_GetTick();
  2061d0:	f009 fb68 	bl	20f8a4 <HAL_GetTick>
  2061d4:	4604      	mov	r4, r0
    if( now_time - last_pub_time_ >= SERVO_PUB_INTERVAL)
  2061d6:	4b2f      	ldr	r3, [pc, #188]	; (206294 <_ZN5Spine6updateEv+0x11c>)
  2061d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  2061da:	1ac3      	subs	r3, r0, r3
  2061dc:	2b13      	cmp	r3, #19
  2061de:	d805      	bhi.n	2061ec <_ZN5Spine6updateEv+0x74>
#endif

        last_pub_time_ = now_time;
      }

    CANDeviceManager::tick(1);
  2061e0:	2001      	movs	r0, #1
  2061e2:	f000 fe15 	bl	206e10 <_ZN16CANDeviceManager4tickEi>
  }
  2061e6:	b002      	add	sp, #8
  2061e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	servo_state_msg_.stamp = nh_->now();
  2061ec:	4d29      	ldr	r5, [pc, #164]	; (206294 <_ZN5Spine6updateEv+0x11c>)
  2061ee:	f8d5 6080 	ldr.w	r6, [r5, #128]	; 0x80

  int publish(){
    return tx::publish();
  }

  uint32_t time(){return HAL_GetTick();}
  2061f2:	f009 fb57 	bl	20f8a4 <HAL_GetTick>

  Time now()
  {
    uint32_t ms = hardware_.time();
    Time current_time;
    current_time.sec = ms / 1000 + sec_offset;
  2061f6:	4b2a      	ldr	r3, [pc, #168]	; (2062a0 <_ZN5Spine6updateEv+0x128>)
  2061f8:	fba3 2300 	umull	r2, r3, r3, r0
  2061fc:	099b      	lsrs	r3, r3, #6
  2061fe:	68f2      	ldr	r2, [r6, #12]
  206200:	441a      	add	r2, r3
  206202:	9200      	str	r2, [sp, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
  206204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  206208:	fb02 0313 	mls	r3, r2, r3, r0
  20620c:	6932      	ldr	r2, [r6, #16]
  20620e:	4925      	ldr	r1, [pc, #148]	; (2062a4 <_ZN5Spine6updateEv+0x12c>)
  206210:	fb01 2303 	mla	r3, r1, r3, r2
  206214:	9301      	str	r3, [sp, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
  206216:	a901      	add	r1, sp, #4
  206218:	4668      	mov	r0, sp
  20621a:	f009 fad7 	bl	20f7cc <_ZN3ros16normalizeSecNSecERmS0_>
  20621e:	f105 0388 	add.w	r3, r5, #136	; 0x88
  206222:	e89d 0003 	ldmia.w	sp, {r0, r1}
  206226:	e883 0003 	stmia.w	r3, {r0, r1}
  20622a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
  20622e:	468c      	mov	ip, r1
  206230:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
  206234:	1a5b      	subs	r3, r3, r1
        for (unsigned int i = 0; i < servo_with_send_flag_.size(); i++)
  206236:	089b      	lsrs	r3, r3, #2
  206238:	d01f      	beq.n	20627a <_ZN5Spine6updateEv+0x102>
  20623a:	3904      	subs	r1, #4
  20623c:	2200      	movs	r2, #0
            servo_state_msg_.servos[i] = servo;
  20623e:	4628      	mov	r0, r5
  206240:	f851 3f04 	ldr.w	r3, [r1, #4]!
	uint8_t getIndex () const {return index_;}
  206244:	f893 8001 	ldrb.w	r8, [r3, #1]
	uint16_t getPresentPosition() const {return present_position_;}
  206248:	f8b3 e008 	ldrh.w	lr, [r3, #8]
	uint8_t getPresentTemperature() const {return present_temperature_;}
  20624c:	7c9f      	ldrb	r7, [r3, #18]
	int16_t getPresentCurrent() const {return present_current_;}
  20624e:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
	uint8_t getError() const {return error_;}
  206252:	7d1d      	ldrb	r5, [r3, #20]
  206254:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
  206258:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  class ServoState : public ros::Msg
  20625c:	f883 8004 	strb.w	r8, [r3, #4]
  206260:	f8a3 e006 	strh.w	lr, [r3, #6]
  206264:	721f      	strb	r7, [r3, #8]
  206266:	815e      	strh	r6, [r3, #10]
  206268:	731d      	strb	r5, [r3, #12]
        for (unsigned int i = 0; i < servo_with_send_flag_.size(); i++)
  20626a:	3201      	adds	r2, #1
  20626c:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
  206270:	eba3 030c 	sub.w	r3, r3, ip
  206274:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
  206278:	d3e2      	bcc.n	206240 <_ZN5Spine6updateEv+0xc8>
  20627a:	4d06      	ldr	r5, [pc, #24]	; (206294 <_ZN5Spine6updateEv+0x11c>)
  20627c:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
  206280:	6803      	ldr	r3, [r0, #0]
  206282:	681b      	ldr	r3, [r3, #0]
  206284:	f105 0284 	add.w	r2, r5, #132	; 0x84
  206288:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
  20628c:	4798      	blx	r3
        last_pub_time_ = now_time;
  20628e:	67ec      	str	r4, [r5, #124]	; 0x7c
  206290:	e7a6      	b.n	2061e0 <_ZN5Spine6updateEv+0x68>
  206292:	bf00      	nop
  206294:	2000009c 	.word	0x2000009c
  206298:	cccccccd 	.word	0xcccccccd
  20629c:	00216d60 	.word	0x00216d60
  2062a0:	10624dd3 	.word	0x10624dd3
  2062a4:	000f4240 	.word	0x000f4240

002062a8 <_ZN5Spine11setMotorPwmEth>:

  void setMotorPwm(uint16_t pwm, uint8_t motor)
  {
  2062a8:	b510      	push	{r4, lr}
  2062aa:	4a09      	ldr	r2, [pc, #36]	; (2062d0 <_ZN5Spine11setMotorPwmEth+0x28>)
  2062ac:	6913      	ldr	r3, [r2, #16]
  2062ae:	6952      	ldr	r2, [r2, #20]
  2062b0:	1ad2      	subs	r2, r2, r3
  2062b2:	1192      	asrs	r2, r2, #6
  2062b4:	4c07      	ldr	r4, [pc, #28]	; (2062d4 <_ZN5Spine11setMotorPwmEth+0x2c>)
  2062b6:	fb04 f202 	mul.w	r2, r4, r2
	if (__n >= this->size())
  2062ba:	4291      	cmp	r1, r2
  2062bc:	d205      	bcs.n	2062ca <_ZN5Spine11setMotorPwmEth+0x22>
	void setPwm(uint16_t pwm){m_pwm = pwm;}
  2062be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  2062c2:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  2062c6:	8148      	strh	r0, [r1, #10]
  2062c8:	bd10      	pop	{r4, pc}
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  2062ca:	4803      	ldr	r0, [pc, #12]	; (2062d8 <_ZN5Spine11setMotorPwmEth+0x30>)
  2062cc:	f00e fddd 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  2062d0:	2000009c 	.word	0x2000009c
  2062d4:	cccccccd 	.word	0xcccccccd
  2062d8:	00216d60 	.word	0x00216d60

002062dc <_ZN5Spine11getSlaveNumEv>:
  }

  uint8_t getSlaveNum()
  {
	  return slave_num_;
  }
  2062dc:	4b01      	ldr	r3, [pc, #4]	; (2062e4 <_ZN5Spine11getSlaveNumEv+0x8>)
  2062de:	7b18      	ldrb	r0, [r3, #12]
  2062e0:	4770      	bx	lr
  2062e2:	bf00      	nop
  2062e4:	2000009c 	.word	0x2000009c

002062e8 <_ZN5Spine11getUavModelEv>:

  int8_t getUavModel()
  {
	  return uav_model_;
  }
  2062e8:	4b01      	ldr	r3, [pc, #4]	; (2062f0 <_ZN5Spine11getUavModelEv+0x8>)
  2062ea:	f993 0000 	ldrsb.w	r0, [r3]
  2062ee:	4770      	bx	lr
  2062f0:	20000004 	.word	0x20000004

002062f4 <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  2062f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  2062f8:	4606      	mov	r6, r0
  2062fa:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2062fc:	6843      	ldr	r3, [r0, #4]
  2062fe:	6802      	ldr	r2, [r0, #0]
  206300:	1a9b      	subs	r3, r3, r2
  206302:	109b      	asrs	r3, r3, #2
      if (__a < __b)
  206304:	b173      	cbz	r3, 206324 <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x30>
	const size_type __len = size() + std::max(size(), __n);
  206306:	005f      	lsls	r7, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  206308:	42bb      	cmp	r3, r7
  20630a:	d802      	bhi.n	206312 <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x1e>
  20630c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
  206310:	d302      	bcc.n	206318 <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x24>
  206312:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
  206316:	e006      	b.n	206326 <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x32>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  206318:	b327      	cbz	r7, 206364 <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x70>
	if (__n > this->max_size())
  20631a:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
  20631e:	d302      	bcc.n	206326 <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x32>
	  std::__throw_bad_alloc();
  206320:	f00e fda7 	bl	214e72 <_ZSt17__throw_bad_allocv>
	const size_type __len = size() + std::max(size(), __n);
  206324:	2701      	movs	r7, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  206326:	00b8      	lsls	r0, r7, #2
  206328:	f00d fecf 	bl	2140ca <_Znwj>
  20632c:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  20632e:	f8d6 8000 	ldr.w	r8, [r6]
  206332:	6874      	ldr	r4, [r6, #4]
  206334:	eba4 0408 	sub.w	r4, r4, r8
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  206338:	f8d9 3000 	ldr.w	r3, [r9]
  20633c:	42e5      	cmn	r5, r4
  20633e:	bf18      	it	ne
  206340:	512b      	strne	r3, [r5, r4]
	  if (_Num)
  206342:	08a3      	lsrs	r3, r4, #2
  206344:	d111      	bne.n	20636a <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x76>
	    ++__new_finish;
  206346:	3404      	adds	r4, #4
  206348:	442c      	add	r4, r5
	if (__p)
  20634a:	f1b8 0f00 	cmp.w	r8, #0
  20634e:	d002      	beq.n	206356 <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x62>
      { ::operator delete(__p); }
  206350:	4640      	mov	r0, r8
  206352:	f00d fe8a 	bl	21406a <_ZdlPv>
	this->_M_impl._M_start = __new_start;
  206356:	6035      	str	r5, [r6, #0]
	this->_M_impl._M_finish = __new_finish;
  206358:	6074      	str	r4, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
  20635a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  20635e:	60b5      	str	r5, [r6, #8]
  206360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  206364:	2700      	movs	r7, #0
  206366:	463d      	mov	r5, r7
  206368:	e7e1      	b.n	20632e <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x3a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  20636a:	4622      	mov	r2, r4
  20636c:	4641      	mov	r1, r8
  20636e:	4628      	mov	r0, r5
  206370:	f010 fa76 	bl	216860 <memmove>
  206374:	e7e7      	b.n	206346 <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x52>

00206376 <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_>:
      vector<_Tp, _Alloc>::
  206376:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  20637a:	4606      	mov	r6, r0
  20637c:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  20637e:	6843      	ldr	r3, [r0, #4]
  206380:	6802      	ldr	r2, [r0, #0]
  206382:	1a9b      	subs	r3, r3, r2
  206384:	109b      	asrs	r3, r3, #2
      if (__a < __b)
  206386:	b173      	cbz	r3, 2063a6 <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_+0x30>
	const size_type __len = size() + std::max(size(), __n);
  206388:	005f      	lsls	r7, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  20638a:	42bb      	cmp	r3, r7
  20638c:	d802      	bhi.n	206394 <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_+0x1e>
  20638e:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
  206392:	d302      	bcc.n	20639a <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_+0x24>
  206394:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
  206398:	e006      	b.n	2063a8 <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_+0x32>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  20639a:	b327      	cbz	r7, 2063e6 <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_+0x70>
	if (__n > this->max_size())
  20639c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
  2063a0:	d302      	bcc.n	2063a8 <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_+0x32>
	  std::__throw_bad_alloc();
  2063a2:	f00e fd66 	bl	214e72 <_ZSt17__throw_bad_allocv>
	const size_type __len = size() + std::max(size(), __n);
  2063a6:	2701      	movs	r7, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  2063a8:	00b8      	lsls	r0, r7, #2
  2063aa:	f00d fe8e 	bl	2140ca <_Znwj>
  2063ae:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2063b0:	f8d6 8000 	ldr.w	r8, [r6]
  2063b4:	6874      	ldr	r4, [r6, #4]
  2063b6:	eba4 0408 	sub.w	r4, r4, r8
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  2063ba:	f8d9 2000 	ldr.w	r2, [r9]
  2063be:	192b      	adds	r3, r5, r4
  2063c0:	bf18      	it	ne
  2063c2:	601a      	strne	r2, [r3, #0]
	  if (_Num)
  2063c4:	08a3      	lsrs	r3, r4, #2
  2063c6:	d111      	bne.n	2063ec <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_+0x76>
	    ++__new_finish;
  2063c8:	3404      	adds	r4, #4
  2063ca:	442c      	add	r4, r5
	if (__p)
  2063cc:	f1b8 0f00 	cmp.w	r8, #0
  2063d0:	d002      	beq.n	2063d8 <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_+0x62>
      { ::operator delete(__p); }
  2063d2:	4640      	mov	r0, r8
  2063d4:	f00d fe49 	bl	21406a <_ZdlPv>
	this->_M_impl._M_start = __new_start;
  2063d8:	6035      	str	r5, [r6, #0]
	this->_M_impl._M_finish = __new_finish;
  2063da:	6074      	str	r4, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
  2063dc:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  2063e0:	60b5      	str	r5, [r6, #8]
  2063e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  2063e6:	2700      	movs	r7, #0
  2063e8:	463d      	mov	r5, r7
  2063ea:	e7e1      	b.n	2063b0 <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_+0x3a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  2063ec:	4622      	mov	r2, r4
  2063ee:	4641      	mov	r1, r8
  2063f0:	4628      	mov	r0, r5
  2063f2:	f010 fa35 	bl	216860 <memmove>
  2063f6:	e7e7      	b.n	2063c8 <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_+0x52>

002063f8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>:
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
  2063f8:	2900      	cmp	r1, #0
  2063fa:	d05e      	beq.n	2064ba <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xc2>
    vector<_Tp, _Alloc>::
  2063fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  206400:	460e      	mov	r6, r1
	{
	  if (size_type(this->_M_impl._M_end_of_storage
			- this->_M_impl._M_finish) >= __n)
  206402:	6844      	ldr	r4, [r0, #4]
  206404:	6883      	ldr	r3, [r0, #8]
  206406:	1b1b      	subs	r3, r3, r4
	  if (size_type(this->_M_impl._M_end_of_storage
  206408:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
  20640c:	d80b      	bhi.n	206426 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x2e>
  20640e:	460b      	mov	r3, r1
  206410:	4622      	mov	r2, r4
	*__first = __tmp;
  206412:	2100      	movs	r1, #0
  206414:	f842 1b04 	str.w	r1, [r2], #4
	   __niter > 0; --__niter, ++__first)
  206418:	3b01      	subs	r3, #1
  20641a:	d1fb      	bne.n	206414 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x1c>
	    {
	      this->_M_impl._M_finish =
  20641c:	eb04 0486 	add.w	r4, r4, r6, lsl #2
  206420:	6044      	str	r4, [r0, #4]
  206422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  206426:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206428:	6803      	ldr	r3, [r0, #0]
  20642a:	1ae3      	subs	r3, r4, r3
  20642c:	109b      	asrs	r3, r3, #2
	if (max_size() - size() < __n)
  20642e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  206432:	1ad2      	subs	r2, r2, r3
  206434:	428a      	cmp	r2, r1
  206436:	d30b      	bcc.n	206450 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x58>
	const size_type __len = size() + std::max(size(), __n);
  206438:	4299      	cmp	r1, r3
  20643a:	bf2c      	ite	cs
  20643c:	185c      	addcs	r4, r3, r1
  20643e:	18dc      	addcc	r4, r3, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  206440:	42a3      	cmp	r3, r4
  206442:	d802      	bhi.n	20644a <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x52>
  206444:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  206448:	d305      	bcc.n	206456 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x5e>
  20644a:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
  20644e:	e006      	b.n	20645e <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x66>
	  __throw_length_error(__N(__s));
  206450:	481a      	ldr	r0, [pc, #104]	; (2064bc <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xc4>)
  206452:	f00e fd14 	bl	214e7e <_ZSt20__throw_length_errorPKc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  206456:	b33c      	cbz	r4, 2064a8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xb0>
	if (__n > this->max_size())
  206458:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  20645c:	d222      	bcs.n	2064a4 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xac>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  20645e:	00a0      	lsls	r0, r4, #2
  206460:	f00d fe33 	bl	2140ca <_Znwj>
  206464:	4607      	mov	r7, r0
	      pointer __new_finish(__new_start);
	      __try
		{
		  __new_finish
		    = std::__uninitialized_move_if_noexcept_a
		    (this->_M_impl._M_start, this->_M_impl._M_finish,
  206466:	f8d5 8000 	ldr.w	r8, [r5]
	  const ptrdiff_t _Num = __last - __first;
  20646a:	686b      	ldr	r3, [r5, #4]
  20646c:	eba3 0908 	sub.w	r9, r3, r8
	  if (_Num)
  206470:	ea5f 0399 	movs.w	r3, r9, lsr #2
  206474:	d11b      	bne.n	2064ae <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0xb6>
	  return __result + _Num;
  206476:	44b9      	add	r9, r7
  206478:	464a      	mov	r2, r9
  20647a:	4633      	mov	r3, r6
	*__first = __tmp;
  20647c:	2100      	movs	r1, #0
  20647e:	f842 1b04 	str.w	r1, [r2], #4
	   __niter > 0; --__niter, ++__first)
  206482:	3b01      	subs	r3, #1
  206484:	d1fb      	bne.n	20647e <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x86>
  206486:	eb09 0686 	add.w	r6, r9, r6, lsl #2
	if (__p)
  20648a:	f1b8 0f00 	cmp.w	r8, #0
  20648e:	d002      	beq.n	206496 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x9e>
      { ::operator delete(__p); }
  206490:	4640      	mov	r0, r8
  206492:	f00d fdea 	bl	21406a <_ZdlPv>
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	      _M_deallocate(this->_M_impl._M_start,
			    this->_M_impl._M_end_of_storage
			    - this->_M_impl._M_start);
	      this->_M_impl._M_start = __new_start;
  206496:	602f      	str	r7, [r5, #0]
	      this->_M_impl._M_finish = __new_finish;
  206498:	606e      	str	r6, [r5, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
  20649a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
  20649e:	60ac      	str	r4, [r5, #8]
  2064a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	  std::__throw_bad_alloc();
  2064a4:	f00e fce5 	bl	214e72 <_ZSt17__throw_bad_allocv>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  2064a8:	2400      	movs	r4, #0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  2064aa:	4627      	mov	r7, r4
  2064ac:	e7db      	b.n	206466 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x6e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
  2064ae:	464a      	mov	r2, r9
  2064b0:	4641      	mov	r1, r8
  2064b2:	4638      	mov	r0, r7
  2064b4:	f010 f9d4 	bl	216860 <memmove>
  2064b8:	e7dd      	b.n	206476 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj+0x7e>
  2064ba:	4770      	bx	lr
  2064bc:	002172cc 	.word	0x002172cc

002064c0 <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  2064c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  2064c4:	4606      	mov	r6, r0
  2064c6:	4688      	mov	r8, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2064c8:	6843      	ldr	r3, [r0, #4]
  2064ca:	6802      	ldr	r2, [r0, #0]
  2064cc:	1a9b      	subs	r3, r3, r2
  2064ce:	109b      	asrs	r3, r3, #2
      if (__a < __b)
  2064d0:	b173      	cbz	r3, 2064f0 <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x30>
	const size_type __len = size() + std::max(size(), __n);
  2064d2:	005f      	lsls	r7, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  2064d4:	42bb      	cmp	r3, r7
  2064d6:	d802      	bhi.n	2064de <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x1e>
  2064d8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
  2064dc:	d302      	bcc.n	2064e4 <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x24>
  2064de:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
  2064e2:	e006      	b.n	2064f2 <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x32>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  2064e4:	b36f      	cbz	r7, 206542 <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x82>
	if (__n > this->max_size())
  2064e6:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
  2064ea:	d302      	bcc.n	2064f2 <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x32>
	  std::__throw_bad_alloc();
  2064ec:	f00e fcc1 	bl	214e72 <_ZSt17__throw_bad_allocv>
	const size_type __len = size() + std::max(size(), __n);
  2064f0:	2701      	movs	r7, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  2064f2:	00b8      	lsls	r0, r7, #2
  2064f4:	f00d fde9 	bl	2140ca <_Znwj>
  2064f8:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2064fa:	6874      	ldr	r4, [r6, #4]
  2064fc:	6830      	ldr	r0, [r6, #0]
  2064fe:	1a23      	subs	r3, r4, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  206500:	42dd      	cmn	r5, r3
  206502:	d002      	beq.n	20650a <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x4a>
  206504:	f8d8 2000 	ldr.w	r2, [r8]
  206508:	50ea      	str	r2, [r5, r3]
	      for (; __first != __last; ++__first, (void)++__cur)
  20650a:	4284      	cmp	r4, r0
  20650c:	d01c      	beq.n	206548 <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x88>
  20650e:	4603      	mov	r3, r0
  206510:	462a      	mov	r2, r5
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  206512:	b10a      	cbz	r2, 206518 <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x58>
  206514:	6819      	ldr	r1, [r3, #0]
  206516:	6011      	str	r1, [r2, #0]
	++_M_current;
  206518:	3304      	adds	r3, #4
  20651a:	3204      	adds	r2, #4
  20651c:	42a3      	cmp	r3, r4
  20651e:	d1f8      	bne.n	206512 <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x52>
  206520:	1d04      	adds	r4, r0, #4
  206522:	1b1c      	subs	r4, r3, r4
  206524:	f024 0403 	bic.w	r4, r4, #3
  206528:	3404      	adds	r4, #4
  20652a:	442c      	add	r4, r5
	    ++__new_finish;
  20652c:	3404      	adds	r4, #4
	if (__p)
  20652e:	b108      	cbz	r0, 206534 <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x74>
      { ::operator delete(__p); }
  206530:	f00d fd9b 	bl	21406a <_ZdlPv>
	this->_M_impl._M_start = __new_start;
  206534:	6035      	str	r5, [r6, #0]
	this->_M_impl._M_finish = __new_finish;
  206536:	6074      	str	r4, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
  206538:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  20653c:	60b5      	str	r5, [r6, #8]
  20653e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  206542:	2700      	movs	r7, #0
  206544:	463d      	mov	r5, r7
  206546:	e7d8      	b.n	2064fa <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x3a>
  206548:	462c      	mov	r4, r5
  20654a:	e7ef      	b.n	20652c <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x6c>

0020654c <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  20654c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  206550:	4606      	mov	r6, r0
  206552:	4688      	mov	r8, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206554:	6843      	ldr	r3, [r0, #4]
  206556:	6802      	ldr	r2, [r0, #0]
  206558:	1a9b      	subs	r3, r3, r2
  20655a:	109b      	asrs	r3, r3, #2
  20655c:	b173      	cbz	r3, 20657c <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x30>
	const size_type __len = size() + std::max(size(), __n);
  20655e:	005f      	lsls	r7, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  206560:	42bb      	cmp	r3, r7
  206562:	d802      	bhi.n	20656a <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x1e>
  206564:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
  206568:	d302      	bcc.n	206570 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x24>
  20656a:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
  20656e:	e006      	b.n	20657e <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x32>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  206570:	b36f      	cbz	r7, 2065ce <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x82>
	if (__n > this->max_size())
  206572:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
  206576:	d302      	bcc.n	20657e <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x32>
	  std::__throw_bad_alloc();
  206578:	f00e fc7b 	bl	214e72 <_ZSt17__throw_bad_allocv>
	const size_type __len = size() + std::max(size(), __n);
  20657c:	2701      	movs	r7, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  20657e:	00b8      	lsls	r0, r7, #2
  206580:	f00d fda3 	bl	2140ca <_Znwj>
  206584:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206586:	6874      	ldr	r4, [r6, #4]
  206588:	6830      	ldr	r0, [r6, #0]
  20658a:	1a23      	subs	r3, r4, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  20658c:	42dd      	cmn	r5, r3
  20658e:	d002      	beq.n	206596 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x4a>
  206590:	f8d8 2000 	ldr.w	r2, [r8]
  206594:	50ea      	str	r2, [r5, r3]
  206596:	4284      	cmp	r4, r0
  206598:	d01c      	beq.n	2065d4 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x88>
  20659a:	4603      	mov	r3, r0
  20659c:	462a      	mov	r2, r5
  20659e:	b10a      	cbz	r2, 2065a4 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x58>
  2065a0:	6819      	ldr	r1, [r3, #0]
  2065a2:	6011      	str	r1, [r2, #0]
  2065a4:	3304      	adds	r3, #4
  2065a6:	3204      	adds	r2, #4
  2065a8:	42a3      	cmp	r3, r4
  2065aa:	d1f8      	bne.n	20659e <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x52>
  2065ac:	1d04      	adds	r4, r0, #4
  2065ae:	1b1c      	subs	r4, r3, r4
  2065b0:	f024 0403 	bic.w	r4, r4, #3
  2065b4:	3404      	adds	r4, #4
  2065b6:	442c      	add	r4, r5
	    ++__new_finish;
  2065b8:	3404      	adds	r4, #4
	if (__p)
  2065ba:	b108      	cbz	r0, 2065c0 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x74>
      { ::operator delete(__p); }
  2065bc:	f00d fd55 	bl	21406a <_ZdlPv>
	this->_M_impl._M_start = __new_start;
  2065c0:	6035      	str	r5, [r6, #0]
	this->_M_impl._M_finish = __new_finish;
  2065c2:	6074      	str	r4, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
  2065c4:	eb05 0587 	add.w	r5, r5, r7, lsl #2
  2065c8:	60b5      	str	r5, [r6, #8]
  2065ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  2065ce:	2700      	movs	r7, #0
  2065d0:	463d      	mov	r5, r7
  2065d2:	e7d8      	b.n	206586 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x3a>
  2065d4:	462c      	mov	r4, r5
  2065d6:	e7ef      	b.n	2065b8 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_+0x6c>

002065d8 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE12emplace_backIJS2_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  2065d8:	b508      	push	{r3, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  2065da:	6843      	ldr	r3, [r0, #4]
  2065dc:	6882      	ldr	r2, [r0, #8]
  2065de:	4293      	cmp	r3, r2
  2065e0:	d006      	beq.n	2065f0 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE12emplace_backIJS2_EEEvDpOT_+0x18>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  2065e2:	b10b      	cbz	r3, 2065e8 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE12emplace_backIJS2_EEEvDpOT_+0x10>
  2065e4:	680a      	ldr	r2, [r1, #0]
  2065e6:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish;
  2065e8:	6843      	ldr	r3, [r0, #4]
  2065ea:	3304      	adds	r3, #4
  2065ec:	6043      	str	r3, [r0, #4]
  2065ee:	bd08      	pop	{r3, pc}
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
  2065f0:	f7ff ffac 	bl	20654c <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_>
  2065f4:	bd08      	pop	{r3, pc}
	...

002065f8 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft>:
  {
  2065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2065fc:	b089      	sub	sp, #36	; 0x24
  2065fe:	460c      	mov	r4, r1
  206600:	4615      	mov	r5, r2
    CANDeviceManager::init(hcan, GPIOx, GPIO_Pin);
  206602:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  206606:	4619      	mov	r1, r3
  206608:	f000 fbf6 	bl	206df8 <_ZN16CANDeviceManager4initEP17CAN_HandleTypeDefP12GPIO_TypeDeft>
    estimator_ = estimator;
  20660c:	4bc5      	ldr	r3, [pc, #788]	; (206924 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x32c>)
  20660e:	f8c3 50c8 	str.w	r5, [r3, #200]	; 0xc8
    nh_ = nh;
  206612:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  /* Register a new publisher */
  bool advertise(Publisher & p)
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
    {
      if (publishers[i] == 0) // empty slot
  206616:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  20661a:	b193      	cbz	r3, 206642 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x4a>
  20661c:	f504 7206 	add.w	r2, r4, #536	; 0x218
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  206620:	2301      	movs	r3, #1
      if (publishers[i] == 0) // empty slot
  206622:	f852 1f04 	ldr.w	r1, [r2, #4]!
  206626:	b169      	cbz	r1, 206644 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x4c>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  206628:	3301      	adds	r3, #1
  20662a:	2b14      	cmp	r3, #20
  20662c:	d1f9      	bne.n	206622 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x2a>
  20662e:	f504 7206 	add.w	r2, r4, #536	; 0x218
  206632:	2301      	movs	r3, #1
      if (publishers[i] == 0) // empty slot
  206634:	f852 1f04 	ldr.w	r1, [r2, #4]!
  206638:	b1a9      	cbz	r1, 206666 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x6e>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20663a:	3301      	adds	r3, #1
  20663c:	2b14      	cmp	r3, #20
  20663e:	d1f9      	bne.n	206634 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x3c>
  206640:	e01b      	b.n	20667a <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x82>
  206642:	2300      	movs	r3, #0
      {
        publishers[i] = &p;
  206644:	f103 0186 	add.w	r1, r3, #134	; 0x86
  206648:	4ab6      	ldr	r2, [pc, #728]	; (206924 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x32c>)
  20664a:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
  20664e:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
  206652:	3378      	adds	r3, #120	; 0x78
  206654:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        p.nh_ = this;
  206658:	f8c2 40c0 	str.w	r4, [r2, #192]	; 0xc0
      if (publishers[i] == 0) // empty slot
  20665c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  206660:	2b00      	cmp	r3, #0
  206662:	d1e4      	bne.n	20662e <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x36>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  206664:	2300      	movs	r3, #0
        publishers[i] = &p;
  206666:	f103 0186 	add.w	r1, r3, #134	; 0x86
  20666a:	4aae      	ldr	r2, [pc, #696]	; (206924 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x32c>)
  20666c:	f102 0040 	add.w	r0, r2, #64	; 0x40
  206670:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
  206674:	3378      	adds	r3, #120	; 0x78
  206676:	6493      	str	r3, [r2, #72]	; 0x48
        p.nh_ = this;
  206678:	64d4      	str	r4, [r2, #76]	; 0x4c
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
    {
      if (subscribers[i] == 0) // empty slot
  20667a:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
  20667e:	b323      	cbz	r3, 2066ca <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0xd2>
  206680:	f504 721a 	add.w	r2, r4, #616	; 0x268
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  206684:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  206686:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20668a:	b1f9      	cbz	r1, 2066cc <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0xd4>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20668c:	3301      	adds	r3, #1
  20668e:	2b14      	cmp	r3, #20
  206690:	d1f9      	bne.n	206686 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x8e>
  206692:	f504 721a 	add.w	r2, r4, #616	; 0x268
  206696:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  206698:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20669c:	b329      	cbz	r1, 2066ea <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0xf2>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20669e:	3301      	adds	r3, #1
  2066a0:	2b14      	cmp	r3, #20
  2066a2:	d1f9      	bne.n	206698 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0xa0>
  2066a4:	f504 721a 	add.w	r2, r4, #616	; 0x268
  2066a8:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  2066aa:	f852 1f04 	ldr.w	r1, [r2, #4]!
  2066ae:	b359      	cbz	r1, 206708 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x110>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  2066b0:	3301      	adds	r3, #1
  2066b2:	2b14      	cmp	r3, #20
  2066b4:	d1f9      	bne.n	2066aa <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0xb2>
  2066b6:	f504 721a 	add.w	r2, r4, #616	; 0x268
  2066ba:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  2066bc:	f852 1f04 	ldr.w	r1, [r2, #4]!
  2066c0:	b389      	cbz	r1, 206726 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x12e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  2066c2:	3301      	adds	r3, #1
  2066c4:	2b14      	cmp	r3, #20
  2066c6:	d1f9      	bne.n	2066bc <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0xc4>
  2066c8:	e037      	b.n	20673a <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x142>
  2066ca:	2300      	movs	r3, #0
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
  2066cc:	f103 019a 	add.w	r1, r3, #154	; 0x9a
  2066d0:	4a94      	ldr	r2, [pc, #592]	; (206924 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x32c>)
  2066d2:	f102 00cc 	add.w	r0, r2, #204	; 0xcc
  2066d6:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
        s.id_ = i + 100;
  2066da:	3364      	adds	r3, #100	; 0x64
  2066dc:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
      if (subscribers[i] == 0) // empty slot
  2066e0:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
  2066e4:	2b00      	cmp	r3, #0
  2066e6:	d1d4      	bne.n	206692 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x9a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  2066e8:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  2066ea:	f103 019a 	add.w	r1, r3, #154	; 0x9a
  2066ee:	4a8d      	ldr	r2, [pc, #564]	; (206924 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x32c>)
  2066f0:	f102 00fc 	add.w	r0, r2, #252	; 0xfc
  2066f4:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
        s.id_ = i + 100;
  2066f8:	3364      	adds	r3, #100	; 0x64
  2066fa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
      if (subscribers[i] == 0) // empty slot
  2066fe:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
  206702:	2b00      	cmp	r3, #0
  206704:	d1ce      	bne.n	2066a4 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0xac>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  206706:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  206708:	f103 019a 	add.w	r1, r3, #154	; 0x9a
  20670c:	4a85      	ldr	r2, [pc, #532]	; (206924 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x32c>)
  20670e:	f502 7096 	add.w	r0, r2, #300	; 0x12c
  206712:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
        s.id_ = i + 100;
  206716:	3364      	adds	r3, #100	; 0x64
  206718:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
      if (subscribers[i] == 0) // empty slot
  20671c:	f8d4 3268 	ldr.w	r3, [r4, #616]	; 0x268
  206720:	2b00      	cmp	r3, #0
  206722:	d1c8      	bne.n	2066b6 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0xbe>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  206724:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  206726:	f103 019a 	add.w	r1, r3, #154	; 0x9a
  20672a:	4a7e      	ldr	r2, [pc, #504]	; (206924 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x32c>)
  20672c:	f502 70a2 	add.w	r0, r2, #324	; 0x144
  206730:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
        s.id_ = i + 100;
  206734:	3364      	adds	r3, #100	; 0x64
  206736:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
    HAL_Delay(3000); //wait neuron initialization
  20673a:	f640 30b8 	movw	r0, #3000	; 0xbb8
  20673e:	f009 f8b7 	bl	20f8b0 <HAL_Delay>
    CANDeviceManager::addDevice(can_initializer_);
  206742:	4c78      	ldr	r4, [pc, #480]	; (206924 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x32c>)
  206744:	f104 0558 	add.w	r5, r4, #88	; 0x58
  206748:	4628      	mov	r0, r5
  20674a:	f000 fc41 	bl	206fd0 <_ZN16CANDeviceManager9addDeviceER9CANDevice>
    CANDeviceManager::Receive_IT();
  20674e:	f000 fb7f 	bl	206e50 <_ZN16CANDeviceManager10Receive_ITEv>
    can_initializer_.initDevices();
  206752:	4628      	mov	r0, r5
  206754:	f7fe fd8c 	bl	205270 <_ZN14CANInitializer11initDevicesEv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206758:	6920      	ldr	r0, [r4, #16]
  20675a:	6963      	ldr	r3, [r4, #20]
  20675c:	1a1b      	subs	r3, r3, r0
  20675e:	119b      	asrs	r3, r3, #6
  206760:	4a71      	ldr	r2, [pc, #452]	; (206928 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x330>)
  206762:	fb02 f303 	mul.w	r3, r2, r3
    for (unsigned int i = 0; i < neuron_.size(); i++) {
  206766:	2b00      	cmp	r3, #0
  206768:	f000 80e4 	beq.w	206934 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x33c>
  20676c:	2700      	movs	r7, #0
  20676e:	46ba      	mov	sl, r7
  206770:	4693      	mov	fp, r2
  206772:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 206930 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x338>
      { emplace_back(std::move(__x)); }
  206776:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
  20677a:	9301      	str	r3, [sp, #4]
  20677c:	e086      	b.n	20688c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x294>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  20677e:	4651      	mov	r1, sl
  206780:	486a      	ldr	r0, [pc, #424]	; (20692c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x334>)
  206782:	f00e fb82 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  206786:	a907      	add	r1, sp, #28
  206788:	f104 006c 	add.w	r0, r4, #108	; 0x6c
  20678c:	f7ff fe98 	bl	2064c0 <_ZNSt6vectorISt17reference_wrapperI8CANMotorESaIS2_EE19_M_emplace_back_auxIJS2_EEEvDpOT_>
  206790:	e096      	b.n	2068c0 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x2c8>
  206792:	4651      	mov	r1, sl
  206794:	4865      	ldr	r0, [pc, #404]	; (20692c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x334>)
  206796:	f00e fb78 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  20679a:	4651      	mov	r1, sl
  20679c:	4863      	ldr	r0, [pc, #396]	; (20692c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x334>)
  20679e:	f00e fb74 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
      { return *(this->_M_impl._M_start + __n); }
  2067a2:	443b      	add	r3, r7
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2067a4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
  2067a8:	3518      	adds	r5, #24
  2067aa:	1c71      	adds	r1, r6, #1
  2067ac:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
  2067b0:	1a9b      	subs	r3, r3, r2
  2067b2:	10db      	asrs	r3, r3, #3
  2067b4:	fb08 f303 	mul.w	r3, r8, r3
    	for (unsigned int j = 0; j < neuron_.at(i).can_servo_.servo_.size(); j++) {
  2067b8:	42b3      	cmp	r3, r6
  2067ba:	d95b      	bls.n	206874 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x27c>
  2067bc:	460e      	mov	r6, r1
  2067be:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
	void setIndex(uint8_t index) {index_ = index;}
  2067c2:	442a      	add	r2, r5
  2067c4:	6863      	ldr	r3, [r4, #4]
  2067c6:	6821      	ldr	r1, [r4, #0]
  2067c8:	1a5b      	subs	r3, r3, r1
  2067ca:	109b      	asrs	r3, r3, #2
    		neuron_.at(i).can_servo_.servo_.at(j).setIndex(servo_.size());
  2067cc:	7053      	strb	r3, [r2, #1]
  2067ce:	6923      	ldr	r3, [r4, #16]
  2067d0:	6962      	ldr	r2, [r4, #20]
  2067d2:	1ad2      	subs	r2, r2, r3
  2067d4:	1192      	asrs	r2, r2, #6
  2067d6:	fb0b f202 	mul.w	r2, fp, r2
	if (__n >= this->size())
  2067da:	4552      	cmp	r2, sl
  2067dc:	d93a      	bls.n	206854 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x25c>
      { return *(this->_M_impl._M_start + __n); }
  2067de:	443b      	add	r3, r7
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2067e0:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
  2067e4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
  2067e8:	1a52      	subs	r2, r2, r1
  2067ea:	10d2      	asrs	r2, r2, #3
  2067ec:	fb08 f202 	mul.w	r2, r8, r2
	if (__n >= this->size())
  2067f0:	454a      	cmp	r2, r9
  2067f2:	d933      	bls.n	20685c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x264>
      { return *(this->_M_impl._M_start + __n); }
  2067f4:	194b      	adds	r3, r1, r5
      : _M_data(std::__addressof(__indata))
  2067f6:	a908      	add	r1, sp, #32
  2067f8:	f841 3d0c 	str.w	r3, [r1, #-12]!
      { emplace_back(std::move(__x)); }
  2067fc:	4620      	mov	r0, r4
  2067fe:	f7ff feeb 	bl	2065d8 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE12emplace_backIJS2_EEEvDpOT_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206802:	6923      	ldr	r3, [r4, #16]
  206804:	6962      	ldr	r2, [r4, #20]
  206806:	1ad2      	subs	r2, r2, r3
  206808:	1192      	asrs	r2, r2, #6
  20680a:	fb0b f202 	mul.w	r2, fp, r2
	if (__n >= this->size())
  20680e:	4552      	cmp	r2, sl
  206810:	d928      	bls.n	206864 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x26c>
      { return *(this->_M_impl._M_start + __n); }
  206812:	19da      	adds	r2, r3, r7
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206814:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
  206818:	f8d2 2138 	ldr.w	r2, [r2, #312]	; 0x138
  20681c:	1a52      	subs	r2, r2, r1
  20681e:	10d2      	asrs	r2, r2, #3
  206820:	fb08 f202 	mul.w	r2, r8, r2
	if (__n >= this->size())
  206824:	454a      	cmp	r2, r9
  206826:	d921      	bls.n	20686c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x274>
      { return *(this->_M_impl._M_start + __n); }
  206828:	194a      	adds	r2, r1, r5
    		if (neuron_.at(i).can_servo_.servo_.at(j).getSendDataFlag()) {
  20682a:	7d51      	ldrb	r1, [r2, #21]
  20682c:	2900      	cmp	r1, #0
  20682e:	d0b8      	beq.n	2067a2 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x1aa>
  206830:	a908      	add	r1, sp, #32
  206832:	f841 2d08 	str.w	r2, [r1, #-8]!
      { emplace_back(std::move(__x)); }
  206836:	9801      	ldr	r0, [sp, #4]
  206838:	f7ff fece 	bl	2065d8 <_ZNSt6vectorISt17reference_wrapperI5ServoESaIS2_EE12emplace_backIJS2_EEEvDpOT_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  20683c:	6923      	ldr	r3, [r4, #16]
  20683e:	6962      	ldr	r2, [r4, #20]
  206840:	1ad2      	subs	r2, r2, r3
  206842:	1192      	asrs	r2, r2, #6
  206844:	fb0b f202 	mul.w	r2, fp, r2
	if (__n >= this->size())
  206848:	4552      	cmp	r2, sl
  20684a:	d8aa      	bhi.n	2067a2 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x1aa>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  20684c:	4651      	mov	r1, sl
  20684e:	4837      	ldr	r0, [pc, #220]	; (20692c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x334>)
  206850:	f00e fb1b 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  206854:	4651      	mov	r1, sl
  206856:	4835      	ldr	r0, [pc, #212]	; (20692c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x334>)
  206858:	f00e fb17 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  20685c:	4649      	mov	r1, r9
  20685e:	4833      	ldr	r0, [pc, #204]	; (20692c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x334>)
  206860:	f00e fb13 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  206864:	4651      	mov	r1, sl
  206866:	4831      	ldr	r0, [pc, #196]	; (20692c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x334>)
  206868:	f00e fb0f 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  20686c:	4649      	mov	r1, r9
  20686e:	482f      	ldr	r0, [pc, #188]	; (20692c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x334>)
  206870:	f00e fb0b 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
    for (unsigned int i = 0; i < neuron_.size(); i++) {
  206874:	f10a 0a01 	add.w	sl, sl, #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206878:	6920      	ldr	r0, [r4, #16]
  20687a:	6963      	ldr	r3, [r4, #20]
  20687c:	1a1b      	subs	r3, r3, r0
  20687e:	119b      	asrs	r3, r3, #6
  206880:	fb0b f303 	mul.w	r3, fp, r3
  206884:	f507 77a0 	add.w	r7, r7, #320	; 0x140
  206888:	459a      	cmp	sl, r3
  20688a:	d253      	bcs.n	206934 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x33c>
      { return *(this->_M_impl._M_start + __n); }
  20688c:	4438      	add	r0, r7
    	CANDeviceManager::addDevice(neuron_.at(i).can_motor_);
  20688e:	3004      	adds	r0, #4
  206890:	f000 fb9e 	bl	206fd0 <_ZN16CANDeviceManager9addDeviceER9CANDevice>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206894:	6921      	ldr	r1, [r4, #16]
  206896:	6963      	ldr	r3, [r4, #20]
  206898:	1a5a      	subs	r2, r3, r1
  20689a:	1192      	asrs	r2, r2, #6
  20689c:	fb0b f202 	mul.w	r2, fp, r2
	if (__n >= this->size())
  2068a0:	4552      	cmp	r2, sl
  2068a2:	f67f af6c 	bls.w	20677e <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x186>
      { return *(this->_M_impl._M_start + __n); }
  2068a6:	4439      	add	r1, r7
    	can_motor_send_device_.addMotor(neuron_.at(i).can_motor_);
  2068a8:	3104      	adds	r1, #4
  2068aa:	9107      	str	r1, [sp, #28]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  2068ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
  2068ae:	6f62      	ldr	r2, [r4, #116]	; 0x74
  2068b0:	4293      	cmp	r3, r2
  2068b2:	f43f af68 	beq.w	206786 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x18e>
  2068b6:	b103      	cbz	r3, 2068ba <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x2c2>
  2068b8:	6019      	str	r1, [r3, #0]
	    ++this->_M_impl._M_finish;
  2068ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
  2068bc:	3304      	adds	r3, #4
  2068be:	6723      	str	r3, [r4, #112]	; 0x70
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2068c0:	6920      	ldr	r0, [r4, #16]
  2068c2:	6963      	ldr	r3, [r4, #20]
  2068c4:	1a1a      	subs	r2, r3, r0
  2068c6:	1192      	asrs	r2, r2, #6
  2068c8:	fb0b f202 	mul.w	r2, fp, r2
	if (__n >= this->size())
  2068cc:	4552      	cmp	r2, sl
  2068ce:	f67f af60 	bls.w	206792 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x19a>
      { return *(this->_M_impl._M_start + __n); }
  2068d2:	4438      	add	r0, r7
    	CANDeviceManager::addDevice(neuron_.at(i).can_imu_);
  2068d4:	300c      	adds	r0, #12
  2068d6:	f000 fb7b 	bl	206fd0 <_ZN16CANDeviceManager9addDeviceER9CANDevice>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2068da:	6920      	ldr	r0, [r4, #16]
  2068dc:	6963      	ldr	r3, [r4, #20]
  2068de:	1a1a      	subs	r2, r3, r0
  2068e0:	1192      	asrs	r2, r2, #6
  2068e2:	fb0b f202 	mul.w	r2, fp, r2
	if (__n >= this->size())
  2068e6:	4552      	cmp	r2, sl
  2068e8:	f67f af57 	bls.w	20679a <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x1a2>
      { return *(this->_M_impl._M_start + __n); }
  2068ec:	4438      	add	r0, r7
    	CANDeviceManager::addDevice(neuron_.at(i).can_servo_);
  2068ee:	f500 7096 	add.w	r0, r0, #300	; 0x12c
  2068f2:	f000 fb6d 	bl	206fd0 <_ZN16CANDeviceManager9addDeviceER9CANDevice>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2068f6:	6923      	ldr	r3, [r4, #16]
  2068f8:	6962      	ldr	r2, [r4, #20]
  2068fa:	1ad2      	subs	r2, r2, r3
  2068fc:	1192      	asrs	r2, r2, #6
  2068fe:	fb0b f202 	mul.w	r2, fp, r2
	if (__n >= this->size())
  206902:	4552      	cmp	r2, sl
  206904:	d9a2      	bls.n	20684c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x254>
      { return *(this->_M_impl._M_start + __n); }
  206906:	443b      	add	r3, r7
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206908:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
  20690c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
  206910:	1a9b      	subs	r3, r3, r2
  206912:	10db      	asrs	r3, r3, #3
  206914:	fb08 f303 	mul.w	r3, r8, r3
    	for (unsigned int j = 0; j < neuron_.at(i).can_servo_.servo_.size(); j++) {
  206918:	2b00      	cmp	r3, #0
  20691a:	d0ab      	beq.n	206874 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x27c>
  20691c:	2601      	movs	r6, #1
  20691e:	2500      	movs	r5, #0
  206920:	e74d      	b.n	2067be <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x1c6>
  206922:	bf00      	nop
  206924:	2000009c 	.word	0x2000009c
  206928:	cccccccd 	.word	0xcccccccd
  20692c:	00216d60 	.word	0x00216d60
  206930:	aaaaaaab 	.word	0xaaaaaaab
    slave_num_ = neuron_.size();
  206934:	b2d8      	uxtb	r0, r3
  206936:	4982      	ldr	r1, [pc, #520]	; (206b40 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x548>)
  206938:	7308      	strb	r0, [r1, #12]
  20693a:	f8d1 20ac 	ldr.w	r2, [r1, #172]	; 0xac
  20693e:	f8d1 40a8 	ldr.w	r4, [r1, #168]	; 0xa8
  206942:	1b12      	subs	r2, r2, r4
  206944:	1094      	asrs	r4, r2, #2
  206946:	684a      	ldr	r2, [r1, #4]
  206948:	6809      	ldr	r1, [r1, #0]
  20694a:	1a52      	subs	r2, r2, r1
    uint8_t gimbal_servo_num = servo_.size() - servo_with_send_flag_.size();
  20694c:	ebc4 02a2 	rsb	r2, r4, r2, asr #2
      if(gimbal_servo_num == 0)
  206950:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  206954:	d105      	bne.n	206962 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x36a>
          if(slave_num_ < 6) uav_model_ = aerial_robot_base::UavInfo::HYDRUS; // less than hex
  206956:	2805      	cmp	r0, #5
  206958:	bfd4      	ite	le
  20695a:	2510      	movle	r5, #16
          else uav_model_ = aerial_robot_base::UavInfo::HYDRUS_XI;
  20695c:	2511      	movgt	r5, #17
  20695e:	4979      	ldr	r1, [pc, #484]	; (206b44 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x54c>)
  206960:	700d      	strb	r5, [r1, #0]
      if(gimbal_servo_num  == slave_num_)
  206962:	4290      	cmp	r0, r2
  206964:	d05d      	beq.n	206a22 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x42a>
      if(gimbal_servo_num  == 2 * slave_num_)
  206966:	b2db      	uxtb	r3, r3
  206968:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
  20696c:	d05d      	beq.n	206a2a <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x432>
    servo_state_msg_.servos_length = servo_with_send_flag_.size();
  20696e:	4b74      	ldr	r3, [pc, #464]	; (206b40 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x548>)
  206970:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
    servo_state_msg_.servos = new hydrus::ServoState[servo_with_send_flag_.size()];
  206974:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
  206978:	d25b      	bcs.n	206a32 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x43a>
  20697a:	0120      	lsls	r0, r4, #4
  20697c:	f00d fbb6 	bl	2140ec <_Znaj>
  206980:	1e62      	subs	r2, r4, #1
  206982:	d40b      	bmi.n	20699c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x3a4>
  206984:	4603      	mov	r3, r0
      error(0)
  206986:	4c70      	ldr	r4, [pc, #448]	; (206b48 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x550>)
  206988:	2100      	movs	r1, #0
  20698a:	601c      	str	r4, [r3, #0]
  20698c:	7119      	strb	r1, [r3, #4]
  20698e:	80d9      	strh	r1, [r3, #6]
  206990:	7219      	strb	r1, [r3, #8]
  206992:	8159      	strh	r1, [r3, #10]
  206994:	7319      	strb	r1, [r3, #12]
  206996:	3310      	adds	r3, #16
  206998:	3a01      	subs	r2, #1
  20699a:	d5f6      	bpl.n	20698a <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x392>
  20699c:	4b68      	ldr	r3, [pc, #416]	; (206b40 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x548>)
  20699e:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
    imu_weight_.resize(slave_num_ + 1);
  2069a2:	7b19      	ldrb	r1, [r3, #12]
  2069a4:	3101      	adds	r1, #1
  2069a6:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
  2069aa:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
  2069ae:	1a9b      	subs	r3, r3, r2
  2069b0:	109b      	asrs	r3, r3, #2
	if (__new_size > size())
  2069b2:	4299      	cmp	r1, r3
  2069b4:	d83f      	bhi.n	206a36 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x43e>
	else if (__new_size < size())
  2069b6:	4299      	cmp	r1, r3
  2069b8:	d204      	bcs.n	2069c4 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x3cc>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
  2069ba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
	this->_M_impl._M_finish = __pos;
  2069be:	4b60      	ldr	r3, [pc, #384]	; (206b40 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x548>)
  2069c0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
      { return *(this->_M_impl._M_start + __n); }
  2069c4:	4a5e      	ldr	r2, [pc, #376]	; (206b40 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x548>)
  2069c6:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
    imu_weight_[0] = 1.0;
  2069ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  2069ce:	6019      	str	r1, [r3, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2069d0:	f8d2 316c 	ldr.w	r3, [r2, #364]	; 0x16c
  2069d4:	f8d2 2170 	ldr.w	r2, [r2, #368]	; 0x170
  2069d8:	1ad2      	subs	r2, r2, r3
    for (uint i = 1; i < imu_weight_.size(); i++) imu_weight_[i] = 0.0;
  2069da:	2a07      	cmp	r2, #7
  2069dc:	d90e      	bls.n	2069fc <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x404>
  2069de:	2201      	movs	r2, #1
  2069e0:	2400      	movs	r4, #0
  2069e2:	4857      	ldr	r0, [pc, #348]	; (206b40 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x548>)
  2069e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  2069e8:	601c      	str	r4, [r3, #0]
  2069ea:	3201      	adds	r2, #1
  2069ec:	f8d0 316c 	ldr.w	r3, [r0, #364]	; 0x16c
  2069f0:	f8d0 1170 	ldr.w	r1, [r0, #368]	; 0x170
  2069f4:	1ac9      	subs	r1, r1, r3
  2069f6:	ebb2 0fa1 	cmp.w	r2, r1, asr #2
  2069fa:	d3f3      	bcc.n	2069e4 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x3ec>
    estimator_->getAttEstimator()->setImuWeight(0, imu_weight_[0]);
  2069fc:	6819      	ldr	r1, [r3, #0]
  2069fe:	4b50      	ldr	r3, [pc, #320]	; (206b40 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x548>)
      { return *(this->_M_impl._M_start + __n); }
  206a00:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
  206a04:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
	  imu_weights_.push_back(weight);
  }

  void setImuWeight(uint8_t index, float weight)
  {
	  imu_weights_[index] = weight;
  206a08:	6011      	str	r1, [r2, #0]
    for (int i = 0; i < slave_num_; i++) {
  206a0a:	7b1b      	ldrb	r3, [r3, #12]
  206a0c:	2b00      	cmp	r3, #0
  206a0e:	f000 8094 	beq.w	206b3a <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x542>
  206a12:	2700      	movs	r7, #0
  206a14:	463e      	mov	r6, r7
      HAL_Delay(100);
  206a16:	f04f 0a64 	mov.w	sl, #100	; 0x64
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206a1a:	4c49      	ldr	r4, [pc, #292]	; (206b40 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x548>)
  206a1c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 206b54 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x55c>
  206a20:	e056      	b.n	206ad0 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x4d8>
          uav_model_ = aerial_robot_base::UavInfo::HYDRUS_XI;
  206a22:	2011      	movs	r0, #17
  206a24:	4947      	ldr	r1, [pc, #284]	; (206b44 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x54c>)
  206a26:	7008      	strb	r0, [r1, #0]
  206a28:	e79d      	b.n	206966 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x36e>
          uav_model_ = aerial_robot_base::UavInfo::DRAGON;
  206a2a:	2220      	movs	r2, #32
  206a2c:	4b45      	ldr	r3, [pc, #276]	; (206b44 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x54c>)
  206a2e:	701a      	strb	r2, [r3, #0]
  206a30:	e79d      	b.n	20696e <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x376>
    servo_state_msg_.servos = new hydrus::ServoState[servo_with_send_flag_.size()];
  206a32:	f00d fb1c 	bl	21406e <__cxa_throw_bad_array_new_length>
	  _M_default_append(__new_size - size());
  206a36:	1ac9      	subs	r1, r1, r3
  206a38:	4844      	ldr	r0, [pc, #272]	; (206b4c <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x554>)
  206a3a:	f7ff fcdd 	bl	2063f8 <_ZNSt6vectorIfSaIfEE17_M_default_appendEj>
  206a3e:	e7c1      	b.n	2069c4 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x3cc>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  206a40:	4631      	mov	r1, r6
  206a42:	4843      	ldr	r0, [pc, #268]	; (206b50 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x558>)
  206a44:	f00e fa21 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  206a48:	4631      	mov	r1, r6
  206a4a:	4841      	ldr	r0, [pc, #260]	; (206b50 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x558>)
  206a4c:	f00e fa1d 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
      estimator_->getAttEstimator()->addImu(&(neuron_.at(i).can_imu_), imu_weight_[i + 1]);
  206a50:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206a54:	6923      	ldr	r3, [r4, #16]
  206a56:	6962      	ldr	r2, [r4, #20]
  206a58:	1ad2      	subs	r2, r2, r3
  206a5a:	1192      	asrs	r2, r2, #6
  206a5c:	fb08 f202 	mul.w	r2, r8, r2
	if (__n >= this->size())
  206a60:	2a02      	cmp	r2, #2
  206a62:	d956      	bls.n	206b12 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x51a>
      { return *(this->_M_impl._M_start + __n); }
  206a64:	443b      	add	r3, r7
  206a66:	3314      	adds	r3, #20
  206a68:	3601      	adds	r6, #1
  206a6a:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
  206a6e:	eb02 0286 	add.w	r2, r2, r6, lsl #2
  206a72:	6812      	ldr	r2, [r2, #0]
  206a74:	9303      	str	r3, [sp, #12]
  206a76:	9204      	str	r2, [sp, #16]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  206a78:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
  206a7c:	f8d5 10ec 	ldr.w	r1, [r5, #236]	; 0xec
  206a80:	428a      	cmp	r2, r1
  206a82:	d04a      	beq.n	206b1a <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x522>
  206a84:	b102      	cbz	r2, 206a88 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x490>
  206a86:	6013      	str	r3, [r2, #0]
	    ++this->_M_impl._M_finish;
  206a88:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
  206a8c:	3304      	adds	r3, #4
  206a8e:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  206a92:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
  206a96:	f8d5 20f8 	ldr.w	r2, [r5, #248]	; 0xf8
  206a9a:	4293      	cmp	r3, r2
  206a9c:	d043      	beq.n	206b26 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x52e>
  206a9e:	9a04      	ldr	r2, [sp, #16]
  206aa0:	b103      	cbz	r3, 206aa4 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x4ac>
  206aa2:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish;
  206aa4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
  206aa8:	3304      	adds	r3, #4
  206aaa:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206aae:	6920      	ldr	r0, [r4, #16]
  206ab0:	6963      	ldr	r3, [r4, #20]
  206ab2:	1a1a      	subs	r2, r3, r0
  206ab4:	1192      	asrs	r2, r2, #6
  206ab6:	fb08 f202 	mul.w	r2, r8, r2
	if (__n >= this->size())
  206aba:	4591      	cmp	r9, r2
  206abc:	d239      	bcs.n	206b32 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x53a>
      { return *(this->_M_impl._M_start + __n); }
  206abe:	4438      	add	r0, r7
      IMU_ROS_CMD::addImu(&(neuron_.at(i).can_imu_));
  206ac0:	3014      	adds	r0, #20
  206ac2:	f004 fec3 	bl	20b84c <_ZN11IMU_ROS_CMD6addImuEP3IMU>
  206ac6:	f507 77a0 	add.w	r7, r7, #320	; 0x140
    for (int i = 0; i < slave_num_; i++) {
  206aca:	7b23      	ldrb	r3, [r4, #12]
  206acc:	42b3      	cmp	r3, r6
  206ace:	dd34      	ble.n	206b3a <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x542>
      HAL_Delay(100);
  206ad0:	4650      	mov	r0, sl
  206ad2:	f008 feed 	bl	20f8b0 <HAL_Delay>
      neuron_.at(i).can_imu_.init();
  206ad6:	46b1      	mov	r9, r6
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206ad8:	6920      	ldr	r0, [r4, #16]
  206ada:	6963      	ldr	r3, [r4, #20]
  206adc:	1a1a      	subs	r2, r3, r0
  206ade:	1192      	asrs	r2, r2, #6
  206ae0:	fb08 f202 	mul.w	r2, r8, r2
	if (__n >= this->size())
  206ae4:	4296      	cmp	r6, r2
  206ae6:	d2ab      	bcs.n	206a40 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x448>
      { return *(this->_M_impl._M_start + __n); }
  206ae8:	4438      	add	r0, r7
  206aea:	3014      	adds	r0, #20
  206aec:	f004 f956 	bl	20ad9c <_ZN3IMU4initEv>
      if(i != baselink_) neuron_.at(i).can_imu_.setVirtualFrame(true);
  206af0:	2e02      	cmp	r6, #2
  206af2:	d0ad      	beq.n	206a50 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x458>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  206af4:	6923      	ldr	r3, [r4, #16]
  206af6:	6962      	ldr	r2, [r4, #20]
  206af8:	1ad2      	subs	r2, r2, r3
  206afa:	1192      	asrs	r2, r2, #6
  206afc:	fb08 f202 	mul.w	r2, r8, r2
	if (__n >= this->size())
  206b00:	4296      	cmp	r6, r2
  206b02:	d2a1      	bcs.n	206a48 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x450>
	void startAccCalib(){calibrate_acc_ = CALIBRATING_STEP;}
	void startMagCalib(){calibrate_mag_ = CALIBRATING_MAG_STEP;}
	void resetCalib(){acc_offset_.zero();mag_offset_.zero();}

	inline bool getVirtualFrame() {return virtual_frame_;}
	inline void setVirtualFrame(bool virtual_frame) { virtual_frame_ = virtual_frame;}
  206b04:	19da      	adds	r2, r3, r7
  206b06:	2101      	movs	r1, #1
  206b08:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
      estimator_->getAttEstimator()->addImu(&(neuron_.at(i).can_imu_), imu_weight_[i + 1]);
  206b0c:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
  206b10:	e7a8      	b.n	206a64 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x46c>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  206b12:	2102      	movs	r1, #2
  206b14:	480e      	ldr	r0, [pc, #56]	; (206b50 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x558>)
  206b16:	f00e f9b8 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
	  _M_emplace_back_aux(__x);
  206b1a:	a903      	add	r1, sp, #12
  206b1c:	f105 00e4 	add.w	r0, r5, #228	; 0xe4
  206b20:	f7ff fbe8 	bl	2062f4 <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_>
  206b24:	e7b5      	b.n	206a92 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x49a>
  206b26:	a904      	add	r1, sp, #16
  206b28:	f105 00f0 	add.w	r0, r5, #240	; 0xf0
  206b2c:	f7ff fc23 	bl	206376 <_ZNSt6vectorIfSaIfEE19_M_emplace_back_auxIJRKfEEEvDpOT_>
  206b30:	e7bd      	b.n	206aae <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x4b6>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
  206b32:	4649      	mov	r1, r9
  206b34:	4806      	ldr	r0, [pc, #24]	; (206b50 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft+0x558>)
  206b36:	f00e f9a8 	bl	214e8a <_ZSt24__throw_out_of_range_fmtPKcz>
  }
  206b3a:	b009      	add	sp, #36	; 0x24
  206b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  206b40:	2000009c 	.word	0x2000009c
  206b44:	20000004 	.word	0x20000004
  206b48:	0021704c 	.word	0x0021704c
  206b4c:	20000208 	.word	0x20000208
  206b50:	00216d60 	.word	0x00216d60
  206b54:	cccccccd 	.word	0xcccccccd

00206b58 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE>:
		  gyro_v[2] = gyro[2];
		  can_imu_[i+1].setGyroV(gyro_v);
	  }
	  */
  }
};
  206b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  206b5c:	4c68      	ldr	r4, [pc, #416]	; (206d00 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1a8>)
  206b5e:	2500      	movs	r5, #0
  206b60:	6125      	str	r5, [r4, #16]
  206b62:	6165      	str	r5, [r4, #20]
  206b64:	61a5      	str	r5, [r4, #24]
  	std::vector<Neuron> neuron_;
  206b66:	4e67      	ldr	r6, [pc, #412]	; (206d04 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1ac>)
  206b68:	f104 0710 	add.w	r7, r4, #16
  206b6c:	4632      	mov	r2, r6
  206b6e:	4966      	ldr	r1, [pc, #408]	; (206d08 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1b0>)
  206b70:	4638      	mov	r0, r7
  206b72:	f00d fa7f 	bl	214074 <__aeabi_atexit>
	CANDevice(uint8_t device_id, uint8_t slave_id):m_device_id(device_id), m_slave_id(slave_id){}
  206b76:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
  206b7a:	230f      	movs	r3, #15
  206b7c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
{
private:
	std::vector<std::reference_wrapper<CANMotor>> can_motor_;
public:
	CANMotorSendDevice():CANDevice(CAN::DEVICEID_MOTOR, CAN::BROADCAST_ID) {}
  206b80:	4b62      	ldr	r3, [pc, #392]	; (206d0c <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1b4>)
  206b82:	6663      	str	r3, [r4, #100]	; 0x64
  206b84:	66e5      	str	r5, [r4, #108]	; 0x6c
  206b86:	6725      	str	r5, [r4, #112]	; 0x70
  206b88:	6765      	str	r5, [r4, #116]	; 0x74
    CANMotorSendDevice can_motor_send_device_;
  206b8a:	4632      	mov	r2, r6
  206b8c:	4960      	ldr	r1, [pc, #384]	; (206d10 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1b8>)
  206b8e:	f104 0064 	add.w	r0, r4, #100	; 0x64
  206b92:	f00d fa6f 	bl	214074 <__aeabi_atexit>
  206b96:	6025      	str	r5, [r4, #0]
  206b98:	6065      	str	r5, [r4, #4]
  206b9a:	60a5      	str	r5, [r4, #8]
    std::vector<std::reference_wrapper<Servo>> servo_;
  206b9c:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 206d74 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x21c>
  206ba0:	4632      	mov	r2, r6
  206ba2:	4641      	mov	r1, r8
  206ba4:	4620      	mov	r0, r4
  206ba6:	f00d fa65 	bl	214074 <__aeabi_atexit>
  206baa:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
  206bae:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
  206bb2:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    std::vector<std::reference_wrapper<Servo>> servo_with_send_flag_;
  206bb6:	4632      	mov	r2, r6
  206bb8:	4641      	mov	r1, r8
  206bba:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
  206bbe:	f00d fa59 	bl	214074 <__aeabi_atexit>
  206bc2:	2307      	movs	r3, #7
  206bc4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  206bc8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
class CANInitializer : public CANDevice
{
private:
	std::vector<Neuron>& neuron_;
public:
	CANInitializer(std::vector<Neuron>& neuron):CANDevice(CAN::DEVICEID_INITIALIZER, CAN::MASTER_ID), neuron_(neuron){}
  206bcc:	4b51      	ldr	r3, [pc, #324]	; (206d14 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1bc>)
  206bce:	65a3      	str	r3, [r4, #88]	; 0x58
  206bd0:	6627      	str	r7, [r4, #96]	; 0x60
  206bd2:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  206bd6:	f8c4 5170 	str.w	r5, [r4, #368]	; 0x170
  206bda:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
    std::vector<float> imu_weight_;
  206bde:	4632      	mov	r2, r6
  206be0:	494d      	ldr	r1, [pc, #308]	; (206d18 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1c0>)
  206be2:	f504 70b6 	add.w	r0, r4, #364	; 0x16c
  206be6:	f00d fa45 	bl	214074 <__aeabi_atexit>
      servos_length(0), servos(NULL)
  206bea:	4b4c      	ldr	r3, [pc, #304]	; (206d1c <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1c4>)
  206bec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
  206bf0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  206bf4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  206bf8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  206bfc:	4b48      	ldr	r3, [pc, #288]	; (206d20 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1c8>)
  206bfe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  206c02:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
  206c06:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
  206c0a:	f884 509c 	strb.w	r5, [r4, #156]	; 0x9c
  206c0e:	f8a4 509e 	strh.w	r5, [r4, #158]	; 0x9e
  206c12:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
  206c16:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
    endpoint_(endpoint) {};
  206c1a:	4b42      	ldr	r3, [pc, #264]	; (206d24 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1cc>)
  206c1c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
  206c20:	f104 0384 	add.w	r3, r4, #132	; 0x84
  206c24:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  206c28:	f8c4 50c4 	str.w	r5, [r4, #196]	; 0xc4
      servos_length(0), servos(NULL)
  206c2c:	4b3e      	ldr	r3, [pc, #248]	; (206d28 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1d0>)
  206c2e:	61e3      	str	r3, [r4, #28]
  206c30:	f884 5020 	strb.w	r5, [r4, #32]
  206c34:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
  206c38:	6265      	str	r5, [r4, #36]	; 0x24
      send_data_flag(0)
  206c3a:	4b3c      	ldr	r3, [pc, #240]	; (206d2c <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1d4>)
  206c3c:	62a3      	str	r3, [r4, #40]	; 0x28
  206c3e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  206c42:	85e5      	strh	r5, [r4, #46]	; 0x2e
  206c44:	8625      	strh	r5, [r4, #48]	; 0x30
  206c46:	8665      	strh	r5, [r4, #50]	; 0x32
  206c48:	86a5      	strh	r5, [r4, #52]	; 0x34
  206c4a:	86e5      	strh	r5, [r4, #54]	; 0x36
  206c4c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  206c50:	63e5      	str	r5, [r4, #60]	; 0x3c
  206c52:	4b37      	ldr	r3, [pc, #220]	; (206d30 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1d8>)
  206c54:	6423      	str	r3, [r4, #64]	; 0x40
  206c56:	f104 031c 	add.w	r3, r4, #28
  206c5a:	6463      	str	r3, [r4, #68]	; 0x44
  206c5c:	6525      	str	r5, [r4, #80]	; 0x50
    endpoint_(endpoint)
  206c5e:	4b35      	ldr	r3, [pc, #212]	; (206d34 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1dc>)
  206c60:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      angles_length(0), angles(NULL)
  206c64:	4b34      	ldr	r3, [pc, #208]	; (206d38 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1e0>)
  206c66:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
  206c6a:	f8c4 50dc 	str.w	r5, [r4, #220]	; 0xdc
  206c6e:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
  206c72:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
  206c76:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
  206c7a:	4b30      	ldr	r3, [pc, #192]	; (206d3c <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1e4>)
  206c7c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
  206c80:	2301      	movs	r3, #1
  206c82:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
    topic_ = topic_name;
  206c86:	4a2e      	ldr	r2, [pc, #184]	; (206d40 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1e8>)
  206c88:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
    endpoint_(endpoint)
  206c8c:	4a2d      	ldr	r2, [pc, #180]	; (206d44 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1ec>)
  206c8e:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
      torque_enable_length(0), torque_enable(NULL)
  206c92:	4a2d      	ldr	r2, [pc, #180]	; (206d48 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1f0>)
  206c94:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
  206c98:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
  206c9c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
  206ca0:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
  206ca4:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
  206ca8:	4a28      	ldr	r2, [pc, #160]	; (206d4c <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1f4>)
  206caa:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
  206cae:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    topic_ = topic_name;
  206cb2:	4a27      	ldr	r2, [pc, #156]	; (206d50 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1f8>)
  206cb4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
    endpoint_(endpoint)
  206cb8:	4a26      	ldr	r2, [pc, #152]	; (206d54 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x1fc>)
  206cba:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
    {
  206cbe:	4a26      	ldr	r2, [pc, #152]	; (206d58 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x200>)
  206cc0:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
  206cc4:	4a25      	ldr	r2, [pc, #148]	; (206d5c <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x204>)
  206cc6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  206cca:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    topic_ = topic_name;
  206cce:	4a24      	ldr	r2, [pc, #144]	; (206d60 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x208>)
  206cd0:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    endpoint_(endpoint)
  206cd4:	4a23      	ldr	r2, [pc, #140]	; (206d64 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x20c>)
  206cd6:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
      data_length(0), data(NULL)
  206cda:	4a23      	ldr	r2, [pc, #140]	; (206d68 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x210>)
  206cdc:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
  206ce0:	f884 5154 	strb.w	r5, [r4, #340]	; 0x154
  206ce4:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  206ce8:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  206cec:	4a1f      	ldr	r2, [pc, #124]	; (206d6c <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x214>)
  206cee:	f8c4 2164 	str.w	r2, [r4, #356]	; 0x164
  206cf2:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
    topic_ = topic_name;
  206cf6:	4b1e      	ldr	r3, [pc, #120]	; (206d70 <_GLOBAL__sub_I__ZN5Spine21testRosseriveCallbackERKN8std_srvs14TriggerRequestERNS0_15TriggerResponseE+0x218>)
  206cf8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  206cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  206d00:	2000009c 	.word	0x2000009c
  206d04:	20000000 	.word	0x20000000
  206d08:	00205b95 	.word	0x00205b95
  206d0c:	00216c2c 	.word	0x00216c2c
  206d10:	002059d1 	.word	0x002059d1
  206d14:	00216bd0 	.word	0x00216bd0
  206d18:	002059e9 	.word	0x002059e9
  206d1c:	00217064 	.word	0x00217064
  206d20:	0021704c 	.word	0x0021704c
  206d24:	002172f0 	.word	0x002172f0
  206d28:	00217034 	.word	0x00217034
  206d2c:	0021701c 	.word	0x0021701c
  206d30:	00217300 	.word	0x00217300
  206d34:	002170ac 	.word	0x002170ac
  206d38:	0021707c 	.word	0x0021707c
  206d3c:	00205919 	.word	0x00205919
  206d40:	0021730c 	.word	0x0021730c
  206d44:	002170c4 	.word	0x002170c4
  206d48:	00217094 	.word	0x00217094
  206d4c:	00205969 	.word	0x00205969
  206d50:	00217324 	.word	0x00217324
  206d54:	002170dc 	.word	0x002170dc
  206d58:	00217004 	.word	0x00217004
  206d5c:	00205a09 	.word	0x00205a09
  206d60:	0021733c 	.word	0x0021733c
  206d64:	002170f4 	.word	0x002170f4
  206d68:	00216fec 	.word	0x00216fec
  206d6c:	00205bd1 	.word	0x00205bd1
  206d70:	0021734c 	.word	0x0021734c
  206d74:	002059f9 	.word	0x002059f9

00206d78 <_ZN3CAN4initEP17CAN_HandleTypeDef>:
		CanRxMsgTypeDef Can_re;
		CAN_HandleTypeDef* hcan_;
	}

	void init(CAN_HandleTypeDef* hcan)
	{
  206d78:	b500      	push	{lr}
  206d7a:	b08b      	sub	sp, #44	; 0x2c
		hcan_ = hcan;
  206d7c:	4a0d      	ldr	r2, [pc, #52]	; (206db4 <_ZN3CAN4initEP17CAN_HandleTypeDef+0x3c>)
  206d7e:	4611      	mov	r1, r2
  206d80:	f841 0b04 	str.w	r0, [r1], #4
		hcan_->pTxMsg = &Can_tx;
  206d84:	6301      	str	r1, [r0, #48]	; 0x30
		hcan_->pRxMsg = &Can_re;
  206d86:	f102 0120 	add.w	r1, r2, #32
  206d8a:	6341      	str	r1, [r0, #52]	; 0x34
		//default IDE and RTR type,
		hcan_->pTxMsg->RTR = CAN_RTR_DATA;
  206d8c:	2300      	movs	r3, #0
  206d8e:	6113      	str	r3, [r2, #16]
		hcan_->pTxMsg->IDE = CAN_ID_STD;
  206d90:	60d3      	str	r3, [r2, #12]
		hcan_->pRxMsg->FIFONumber = CAN_FIFO1;
  206d92:	2101      	movs	r1, #1
  206d94:	6411      	str	r1, [r2, #64]	; 0x40

		CAN_FilterConfTypeDef sFilterConfig;
		sFilterConfig.FilterNumber = 0;
  206d96:	9305      	str	r3, [sp, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
  206d98:	9306      	str	r3, [sp, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
  206d9a:	9107      	str	r1, [sp, #28]
		sFilterConfig.FilterIdHigh = 0x0000;
  206d9c:	9300      	str	r3, [sp, #0]
		sFilterConfig.FilterIdLow = 0x0000;
  206d9e:	9301      	str	r3, [sp, #4]
		sFilterConfig.FilterMaskIdHigh = 0x0000;
  206da0:	9302      	str	r3, [sp, #8]
		sFilterConfig.FilterMaskIdLow = 0x0000;
  206da2:	9303      	str	r3, [sp, #12]
		sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
  206da4:	9104      	str	r1, [sp, #16]
		sFilterConfig.FilterActivation = ENABLE;
  206da6:	9108      	str	r1, [sp, #32]
		HAL_CAN_ConfigFilter(hcan_, &sFilterConfig);
  206da8:	4669      	mov	r1, sp
  206daa:	f009 f809 	bl	20fdc0 <HAL_CAN_ConfigFilter>
	}
  206dae:	b00b      	add	sp, #44	; 0x2c
  206db0:	f85d fb04 	ldr.w	pc, [sp], #4
  206db4:	20000214 	.word	0x20000214

00206db8 <_ZN3CAN15getHcanInstanceEv>:

	CAN_HandleTypeDef* getHcanInstance()
	{
		return hcan_;
	}
  206db8:	4b01      	ldr	r3, [pc, #4]	; (206dc0 <_ZN3CAN15getHcanInstanceEv+0x8>)
  206dba:	6818      	ldr	r0, [r3, #0]
  206dbc:	4770      	bx	lr
  206dbe:	bf00      	nop
  206dc0:	20000214 	.word	0x20000214

00206dc4 <_ZN3CAN10setMessageEhhhmPh>:

	void setMessage(uint8_t device_id, uint8_t message_id, uint8_t slave_id, uint32_t dlc, uint8_t* data)
	{
  206dc4:	b538      	push	{r3, r4, r5, lr}
		hcan_->pTxMsg->StdId = (((device_id & ((1 << DEVICE_ID_LEN) - 1))  << (MESSAGE_ID_LEN + SLAVE_ID_LEN))) | ((message_id & ((1 << MESSAGE_ID_LEN) - 1)) << SLAVE_ID_LEN) | (slave_id & ((1 << SLAVE_ID_LEN) - 1));
  206dc6:	4c0b      	ldr	r4, [pc, #44]	; (206df4 <_ZN3CAN10setMessageEhhhmPh+0x30>)
  206dc8:	6825      	ldr	r5, [r4, #0]
  206dca:	6b2c      	ldr	r4, [r5, #48]	; 0x30
  206dcc:	0109      	lsls	r1, r1, #4
  206dce:	b2c9      	uxtb	r1, r1
  206dd0:	f002 020f 	and.w	r2, r2, #15
  206dd4:	4311      	orrs	r1, r2
  206dd6:	0200      	lsls	r0, r0, #8
  206dd8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  206ddc:	4301      	orrs	r1, r0
  206dde:	6021      	str	r1, [r4, #0]
		hcan_->pTxMsg->DLC = dlc;
  206de0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  206de2:	6113      	str	r3, [r2, #16]
		memcpy(hcan_->pTxMsg->Data, data, sizeof(uint8_t) * dlc);
  206de4:	6b28      	ldr	r0, [r5, #48]	; 0x30
  206de6:	461a      	mov	r2, r3
  206de8:	9904      	ldr	r1, [sp, #16]
  206dea:	3014      	adds	r0, #20
  206dec:	f00f fd2d 	bl	21684a <memcpy>
  206df0:	bd38      	pop	{r3, r4, r5, pc}
  206df2:	bf00      	nop
  206df4:	20000214 	.word	0x20000214

00206df8 <_ZN16CANDeviceManager4initEP17CAN_HandleTypeDefP12GPIO_TypeDeft>:
		GPIO_TypeDef* m_GPIOx;
		uint16_t m_GPIO_Pin;
	}

	void init(CAN_HandleTypeDef* hcan, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
	{
  206df8:	b538      	push	{r3, r4, r5, lr}
  206dfa:	460d      	mov	r5, r1
  206dfc:	4614      	mov	r4, r2
		CAN::init(hcan);
  206dfe:	f7ff ffbb 	bl	206d78 <_ZN3CAN4initEP17CAN_HandleTypeDef>
		m_GPIOx = GPIOx;
  206e02:	4b02      	ldr	r3, [pc, #8]	; (206e0c <_ZN16CANDeviceManager4initEP17CAN_HandleTypeDefP12GPIO_TypeDeft+0x14>)
  206e04:	601d      	str	r5, [r3, #0]
		m_GPIO_Pin = GPIO_Pin;
  206e06:	809c      	strh	r4, [r3, #4]
  206e08:	bd38      	pop	{r3, r4, r5, pc}
  206e0a:	bf00      	nop
  206e0c:	20000258 	.word	0x20000258

00206e10 <_ZN16CANDeviceManager4tickEi>:
	{
		can_device_list.insert(std::pair<int, CANDevice& >(makeCommunicationId(device.getDeviceId(), device.getSlaveId()), device));
	}

	void tick(int cycle /* ms */)
	{
  206e10:	b508      	push	{r3, lr}
		can_timeout_count++;
  206e12:	4a0e      	ldr	r2, [pc, #56]	; (206e4c <_ZN16CANDeviceManager4tickEi+0x3c>)
  206e14:	6893      	ldr	r3, [r2, #8]
  206e16:	3301      	adds	r3, #1
  206e18:	6093      	str	r3, [r2, #8]
		static int internal_count = 0;
		if (can_timeout_count <= CAN_MAX_TIMEOUT_COUNT) {
  206e1a:	2b64      	cmp	r3, #100	; 0x64
  206e1c:	dc0b      	bgt.n	206e36 <_ZN16CANDeviceManager4tickEi+0x26>
			internal_count++;
  206e1e:	4613      	mov	r3, r2
  206e20:	68d2      	ldr	r2, [r2, #12]
  206e22:	3201      	adds	r2, #1
  206e24:	60da      	str	r2, [r3, #12]
			if (internal_count == (1000 / cycle) - 1) {
  206e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  206e2a:	fb93 f0f0 	sdiv	r0, r3, r0
  206e2e:	3801      	subs	r0, #1
  206e30:	4282      	cmp	r2, r0
  206e32:	d001      	beq.n	206e38 <_ZN16CANDeviceManager4tickEi+0x28>
				internal_count = 0;
			}
			if (internal_count == 0) {
  206e34:	b11a      	cbz	r2, 206e3e <_ZN16CANDeviceManager4tickEi+0x2e>
  206e36:	bd08      	pop	{r3, pc}
				internal_count = 0;
  206e38:	2200      	movs	r2, #0
  206e3a:	4b04      	ldr	r3, [pc, #16]	; (206e4c <_ZN16CANDeviceManager4tickEi+0x3c>)
  206e3c:	60da      	str	r2, [r3, #12]
				HAL_GPIO_TogglePin(m_GPIOx, m_GPIO_Pin);
  206e3e:	4b03      	ldr	r3, [pc, #12]	; (206e4c <_ZN16CANDeviceManager4tickEi+0x3c>)
  206e40:	8899      	ldrh	r1, [r3, #4]
  206e42:	6818      	ldr	r0, [r3, #0]
  206e44:	f00a f826 	bl	210e94 <HAL_GPIO_TogglePin>
			}
		}
	}
  206e48:	e7f5      	b.n	206e36 <_ZN16CANDeviceManager4tickEi+0x26>
  206e4a:	bf00      	nop
  206e4c:	20000258 	.word	0x20000258

00206e50 <_ZN16CANDeviceManager10Receive_ITEv>:

	void Receive_IT()
	{
  206e50:	b508      	push	{r3, lr}
	}

	inline void Receive_IT()
	{
		HAL_CAN_Receive_IT(getHcanInstance(), CAN_FIFO1);
  206e52:	f7ff ffb1 	bl	206db8 <_ZN3CAN15getHcanInstanceEv>
  206e56:	2101      	movs	r1, #1
  206e58:	f009 f9c8 	bl	2101ec <HAL_CAN_Receive_IT>
  206e5c:	bd08      	pop	{r3, pc}

00206e5e <_ZN16CANDeviceManager27userReceiveMessagesCallbackEhhhmPh>:
	{

	}

	__weak void userReceiveMessagesCallback(uint8_t slave_id, uint8_t device_id, uint8_t message_id, uint32_t DLC, uint8_t* data)
	{
  206e5e:	4770      	bx	lr

00206e60 <HAL_CAN_RxCpltCallback>:

	}
}

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{
  206e60:	b5f0      	push	{r4, r5, r6, r7, lr}
  206e62:	b083      	sub	sp, #12
  206e64:	4607      	mov	r7, r0
	CANDeviceManager::can_timeout_count = 0;
  206e66:	2200      	movs	r2, #0
  206e68:	4b28      	ldr	r3, [pc, #160]	; (206f0c <HAL_CAN_RxCpltCallback+0xac>)
  206e6a:	609a      	str	r2, [r3, #8]
	CANDeviceManager::Receive_IT();
  206e6c:	f7ff fff0 	bl	206e50 <_ZN16CANDeviceManager10Receive_ITEv>
	}

	inline uint8_t getDeviceId(CAN_HandleTypeDef* hcan) {
		return static_cast<uint8_t>(((hcan->pRxMsg->StdId) >> (MESSAGE_ID_LEN + SLAVE_ID_LEN)) & ((1 << DEVICE_ID_LEN) - 1));
  206e70:	6b79      	ldr	r1, [r7, #52]	; 0x34
  206e72:	680a      	ldr	r2, [r1, #0]
  206e74:	f3c2 2302 	ubfx	r3, r2, #8, #3
	inline uint8_t getMessageId(CAN_HandleTypeDef* hcan) {
		return static_cast<uint8_t>(((hcan->pRxMsg->StdId) >> SLAVE_ID_LEN) & ((1 << MESSAGE_ID_LEN) - 1));
	}

	inline uint8_t getSlaveId(CAN_HandleTypeDef* hcan) {
		return static_cast<uint8_t>((hcan->pRxMsg->StdId) & ((1 << SLAVE_ID_LEN) - 1));
  206e78:	f002 0e0f 	and.w	lr, r2, #15
		return static_cast<int>((device_id << CAN::DEVICE_ID_LEN) | slave_id);
  206e7c:	00dc      	lsls	r4, r3, #3
	int communication_id = CANDeviceManager::makeCommunicationId(CAN::getDeviceId(hcan), CAN::getSlaveId(hcan));
	if (CAN::getDeviceId(hcan) == CAN::DEVICEID_INITIALIZER) { //special
  206e7e:	2b07      	cmp	r3, #7
		return static_cast<int>((device_id << CAN::DEVICE_ID_LEN) | slave_id);
  206e80:	bf18      	it	ne
  206e82:	ea44 040e 	orrne.w	r4, r4, lr

      _Const_Link_type
      _M_begin() const _GLIBCXX_NOEXCEPT
      {
	return static_cast<_Const_Link_type>
	  (this->_M_impl._M_header._M_parent);
  206e86:	4b21      	ldr	r3, [pc, #132]	; (206f0c <HAL_CAN_RxCpltCallback+0xac>)
  206e88:	699d      	ldr	r5, [r3, #24]
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
		   const _Key& __k) const
    {
      while (__x != 0)
  206e8a:	2d00      	cmp	r5, #0
  206e8c:	d038      	beq.n	206f00 <HAL_CAN_RxCpltCallback+0xa0>
  206e8e:	462b      	mov	r3, r5
  206e90:	4e1f      	ldr	r6, [pc, #124]	; (206f10 <HAL_CAN_RxCpltCallback+0xb0>)
  206e92:	e001      	b.n	206e98 <HAL_CAN_RxCpltCallback+0x38>
      { return static_cast<_Const_Link_type>(__x->_M_right); }
  206e94:	68db      	ldr	r3, [r3, #12]
      while (__x != 0)
  206e96:	b12b      	cbz	r3, 206ea4 <HAL_CAN_RxCpltCallback+0x44>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  206e98:	6918      	ldr	r0, [r3, #16]
  206e9a:	42a0      	cmp	r0, r4
  206e9c:	dbfa      	blt.n	206e94 <HAL_CAN_RxCpltCallback+0x34>
      { return static_cast<_Const_Link_type>(__x->_M_left); }
  206e9e:	461e      	mov	r6, r3
	  __y = __x, __x = _S_left(__x);
  206ea0:	689b      	ldr	r3, [r3, #8]
  206ea2:	e7f8      	b.n	206e96 <HAL_CAN_RxCpltCallback+0x36>
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k, 
					_S_key(__j._M_node))) ? end() : __j;
  206ea4:	4b1a      	ldr	r3, [pc, #104]	; (206f10 <HAL_CAN_RxCpltCallback+0xb0>)
  206ea6:	429e      	cmp	r6, r3
  206ea8:	d02a      	beq.n	206f00 <HAL_CAN_RxCpltCallback+0xa0>
	      || _M_impl._M_key_compare(__k, 
  206eaa:	6933      	ldr	r3, [r6, #16]
  206eac:	42a3      	cmp	r3, r4
  206eae:	dc27      	bgt.n	206f00 <HAL_CAN_RxCpltCallback+0xa0>
  206eb0:	462b      	mov	r3, r5
  206eb2:	4d17      	ldr	r5, [pc, #92]	; (206f10 <HAL_CAN_RxCpltCallback+0xb0>)
  206eb4:	e001      	b.n	206eba <HAL_CAN_RxCpltCallback+0x5a>
      { return static_cast<_Link_type>(__x->_M_right); }
  206eb6:	68db      	ldr	r3, [r3, #12]
      while (__x != 0)
  206eb8:	b12b      	cbz	r3, 206ec6 <HAL_CAN_RxCpltCallback+0x66>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
  206eba:	6918      	ldr	r0, [r3, #16]
  206ebc:	42a0      	cmp	r0, r4
  206ebe:	dbfa      	blt.n	206eb6 <HAL_CAN_RxCpltCallback+0x56>
      { return static_cast<_Link_type>(__x->_M_left); }
  206ec0:	461d      	mov	r5, r3
	  __y = __x, __x = _S_left(__x);
  206ec2:	689b      	ldr	r3, [r3, #8]
  206ec4:	e7f8      	b.n	206eb8 <HAL_CAN_RxCpltCallback+0x58>
       */
      mapped_type&
      at(const key_type& __k)
      {
	iterator __i = lower_bound(__k);
	if (__i == end() || key_comp()(__k, (*__i).first))
  206ec6:	4b12      	ldr	r3, [pc, #72]	; (206f10 <HAL_CAN_RxCpltCallback+0xb0>)
  206ec8:	429d      	cmp	r5, r3
  206eca:	d01b      	beq.n	206f04 <HAL_CAN_RxCpltCallback+0xa4>
  206ecc:	692b      	ldr	r3, [r5, #16]
  206ece:	42a3      	cmp	r3, r4
  206ed0:	dc18      	bgt.n	206f04 <HAL_CAN_RxCpltCallback+0xa4>
	  __throw_out_of_range(__N("map::at"));
	return (*__i).second;
  206ed2:	6968      	ldr	r0, [r5, #20]
		communication_id = CANDeviceManager::makeCommunicationId(CAN::getDeviceId(hcan), CAN::MASTER_ID);
	}
	if (CANDeviceManager::can_device_list.count(communication_id) == 0) return;
	CANDeviceManager::can_device_list.at(communication_id).receiveDataCallback(CAN::getSlaveId(hcan), CAN::getMessageId(hcan), CAN::getDlc(hcan), CAN::getData(hcan));
  206ed4:	690b      	ldr	r3, [r1, #16]
  206ed6:	6804      	ldr	r4, [r0, #0]
	inline uint32_t getDlc(CAN_HandleTypeDef* hcan) {
		return hcan->pRxMsg->DLC;
	}

	inline uint8_t* getData(CAN_HandleTypeDef* hcan) {
		return hcan->pRxMsg->Data;
  206ed8:	3114      	adds	r1, #20
  206eda:	9100      	str	r1, [sp, #0]
  206edc:	6864      	ldr	r4, [r4, #4]
  206ede:	f3c2 1203 	ubfx	r2, r2, #4, #4
  206ee2:	4671      	mov	r1, lr
  206ee4:	47a0      	blx	r4
		return static_cast<uint8_t>((hcan->pRxMsg->StdId) & ((1 << SLAVE_ID_LEN) - 1));
  206ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  206ee8:	6810      	ldr	r0, [r2, #0]
	CANDeviceManager::userReceiveMessagesCallback(CAN::getSlaveId(hcan), CAN::getDeviceId(hcan), CAN::getMessageId(hcan), CAN::getDlc(hcan), CAN::getData(hcan));
  206eea:	6913      	ldr	r3, [r2, #16]
		return hcan->pRxMsg->Data;
  206eec:	3214      	adds	r2, #20
  206eee:	9200      	str	r2, [sp, #0]
  206ef0:	f3c0 1203 	ubfx	r2, r0, #4, #4
  206ef4:	f3c0 2102 	ubfx	r1, r0, #8, #3
  206ef8:	f000 000f 	and.w	r0, r0, #15
  206efc:	f7ff ffaf 	bl	206e5e <_ZN16CANDeviceManager27userReceiveMessagesCallbackEhhhmPh>
}
  206f00:	b003      	add	sp, #12
  206f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  __throw_out_of_range(__N("map::at"));
  206f04:	4803      	ldr	r0, [pc, #12]	; (206f14 <HAL_CAN_RxCpltCallback+0xb4>)
  206f06:	f00d ffbd 	bl	214e84 <_ZSt20__throw_out_of_rangePKc>
  206f0a:	bf00      	nop
  206f0c:	20000258 	.word	0x20000258
  206f10:	2000026c 	.word	0x2000026c
  206f14:	0021735c 	.word	0x0021735c

00206f18 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  206f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  206f1c:	4605      	mov	r5, r0
  206f1e:	460c      	mov	r4, r1
  206f20:	4616      	mov	r6, r2
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
  206f22:	6888      	ldr	r0, [r1, #8]
      { return &this->_M_impl._M_header; }
  206f24:	1d0f      	adds	r7, r1, #4
      while (__x != 0)
  206f26:	b308      	cbz	r0, 206f6c <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x54>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
  206f28:	6811      	ldr	r1, [r2, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
  206f2a:	f04f 0c00 	mov.w	ip, #0
      { return static_cast<_Link_type>(__x->_M_left); }
  206f2e:	f04f 0e01 	mov.w	lr, #1
  206f32:	e003      	b.n	206f3c <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x24>
      { return static_cast<_Link_type>(__x->_M_right); }
  206f34:	68c3      	ldr	r3, [r0, #12]
  206f36:	4662      	mov	r2, ip
      while (__x != 0)
  206f38:	b133      	cbz	r3, 206f48 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x30>
  206f3a:	4618      	mov	r0, r3
	  __x = __comp ? _S_left(__x) : _S_right(__x);
  206f3c:	6903      	ldr	r3, [r0, #16]
  206f3e:	4299      	cmp	r1, r3
  206f40:	daf8      	bge.n	206f34 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x1c>
      { return static_cast<_Link_type>(__x->_M_left); }
  206f42:	6883      	ldr	r3, [r0, #8]
  206f44:	4672      	mov	r2, lr
  206f46:	e7f7      	b.n	206f38 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x20>
      if (__comp)
  206f48:	b942      	cbnz	r2, 206f5c <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x44>
  206f4a:	4680      	mov	r8, r0
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
  206f4c:	6902      	ldr	r2, [r0, #16]
  206f4e:	6833      	ldr	r3, [r6, #0]
  206f50:	429a      	cmp	r2, r3
  206f52:	db0e      	blt.n	206f72 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x5a>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
  206f54:	6028      	str	r0, [r5, #0]
  206f56:	2300      	movs	r3, #0
  206f58:	712b      	strb	r3, [r5, #4]
  206f5a:	e033      	b.n	206fc4 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0xac>
      if (__comp)
  206f5c:	4680      	mov	r8, r0
      { return iterator(this->_M_impl._M_header._M_left); }
  206f5e:	68e3      	ldr	r3, [r4, #12]
	  if (__j == begin())
  206f60:	4543      	cmp	r3, r8
  206f62:	d005      	beq.n	206f70 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x58>
	_M_node = _Rb_tree_decrement(_M_node);
  206f64:	4640      	mov	r0, r8
  206f66:	f00d ff20 	bl	214daa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
  206f6a:	e7ef      	b.n	206f4c <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x34>
      _Base_ptr __y = _M_end();
  206f6c:	46b8      	mov	r8, r7
  206f6e:	e7f6      	b.n	206f5e <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x46>
	  if (__j == begin())
  206f70:	4698      	mov	r8, r3
      if (__res.second)
  206f72:	f1b8 0f00 	cmp.w	r8, #0
  206f76:	d028      	beq.n	206fca <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0xb2>
	bool __insert_left = (__x != 0 || __p == _M_end()
  206f78:	4547      	cmp	r7, r8
  206f7a:	d009      	beq.n	206f90 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x78>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
  206f7c:	6832      	ldr	r2, [r6, #0]
  206f7e:	f8d8 3010 	ldr.w	r3, [r8, #16]
  206f82:	429a      	cmp	r2, r3
  206f84:	bfac      	ite	ge
  206f86:	f04f 0a00 	movge.w	sl, #0
  206f8a:	f04f 0a01 	movlt.w	sl, #1
  206f8e:	e001      	b.n	206f94 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x7c>
  206f90:	f04f 0a01 	mov.w	sl, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  206f94:	2018      	movs	r0, #24
  206f96:	f00d f898 	bl	2140ca <_Znwj>
  206f9a:	4681      	mov	r9, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  206f9c:	f110 0f10 	cmn.w	r0, #16
  206fa0:	d003      	beq.n	206faa <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x92>
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
  206fa2:	6833      	ldr	r3, [r6, #0]
  206fa4:	6103      	str	r3, [r0, #16]
  206fa6:	6873      	ldr	r3, [r6, #4]
  206fa8:	6143      	str	r3, [r0, #20]
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
  206faa:	463b      	mov	r3, r7
  206fac:	4642      	mov	r2, r8
  206fae:	4649      	mov	r1, r9
  206fb0:	4650      	mov	r0, sl
  206fb2:	f00d fefc 	bl	214dae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
  206fb6:	6963      	ldr	r3, [r4, #20]
  206fb8:	3301      	adds	r3, #1
  206fba:	6163      	str	r3, [r4, #20]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
  206fbc:	f8c5 9000 	str.w	r9, [r5]
  206fc0:	2301      	movs	r3, #1
  206fc2:	712b      	strb	r3, [r5, #4]
    }
  206fc4:	4628      	mov	r0, r5
  206fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  206fca:	2000      	movs	r0, #0
  206fcc:	e7c2      	b.n	206f54 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_+0x3c>
	...

00206fd0 <_ZN16CANDeviceManager9addDeviceER9CANDevice>:
	{
  206fd0:	b500      	push	{lr}
  206fd2:	b085      	sub	sp, #20
		return static_cast<int>((device_id << CAN::DEVICE_ID_LEN) | slave_id);
  206fd4:	7902      	ldrb	r2, [r0, #4]
  206fd6:	7943      	ldrb	r3, [r0, #5]
  206fd8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
       : first(std::forward<_U1>(__x)), second(__y) { }
  206fdc:	9302      	str	r3, [sp, #8]
  206fde:	9003      	str	r0, [sp, #12]
      template<typename _Pair, typename = typename
	       std::enable_if<std::is_constructible<value_type,
						    _Pair&&>::value>::type>
        std::pair<iterator, bool>
        insert(_Pair&& __x)
        { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }
  206fe0:	aa02      	add	r2, sp, #8
  206fe2:	4903      	ldr	r1, [pc, #12]	; (206ff0 <_ZN16CANDeviceManager9addDeviceER9CANDevice+0x20>)
  206fe4:	4668      	mov	r0, sp
  206fe6:	f7ff ff97 	bl	206f18 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE16_M_insert_uniqueIS0_IiS3_EEES0_ISt17_Rb_tree_iteratorIS4_EbEOT_>
	}
  206fea:	b005      	add	sp, #20
  206fec:	f85d fb04 	ldr.w	pc, [sp], #4
  206ff0:	20000268 	.word	0x20000268

00206ff4 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
  206ff4:	b570      	push	{r4, r5, r6, lr}
  206ff6:	4606      	mov	r6, r0
      while (__x != 0)
  206ff8:	460c      	mov	r4, r1
  206ffa:	b151      	cbz	r1, 207012 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x1e>
	  _M_erase(_S_right(__x));
  206ffc:	68e1      	ldr	r1, [r4, #12]
  206ffe:	4630      	mov	r0, r6
  207000:	f7ff fff8 	bl	206ff4 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
      { return static_cast<_Link_type>(__x->_M_left); }
  207004:	68a5      	ldr	r5, [r4, #8]
      { ::operator delete(__p); }
  207006:	4620      	mov	r0, r4
  207008:	f00d f82f 	bl	21406a <_ZdlPv>
	  __x = __y;
  20700c:	462c      	mov	r4, r5
      while (__x != 0)
  20700e:	2d00      	cmp	r5, #0
  207010:	d1f4      	bne.n	206ffc <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x8>
  207012:	bd70      	pop	{r4, r5, r6, pc}

00207014 <_ZNSt3mapIiR9CANDeviceSt4lessIiESaISt4pairIKiS1_EEED1Ev>:
    class map
  207014:	b510      	push	{r4, lr}
  207016:	4604      	mov	r4, r0
      { _M_erase(_M_begin()); }
  207018:	6881      	ldr	r1, [r0, #8]
  20701a:	f7ff ffeb 	bl	206ff4 <_ZNSt8_Rb_treeIiSt4pairIKiR9CANDeviceESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
  20701e:	4620      	mov	r0, r4
  207020:	bd10      	pop	{r4, pc}
	...

00207024 <_GLOBAL__sub_I__ZN16CANDeviceManager4initEP17CAN_HandleTypeDefP12GPIO_TypeDeft>:
}
  207024:	b508      	push	{r3, lr}
	    _M_node_count(0)
  207026:	4807      	ldr	r0, [pc, #28]	; (207044 <_GLOBAL__sub_I__ZN16CANDeviceManager4initEP17CAN_HandleTypeDefP12GPIO_TypeDeft+0x20>)
  207028:	f100 0314 	add.w	r3, r0, #20
  20702c:	2200      	movs	r2, #0
  20702e:	6142      	str	r2, [r0, #20]
  207030:	6182      	str	r2, [r0, #24]
  207032:	6242      	str	r2, [r0, #36]	; 0x24
	    this->_M_header._M_left = &this->_M_header;
  207034:	61c3      	str	r3, [r0, #28]
	    this->_M_header._M_right = &this->_M_header;
  207036:	6203      	str	r3, [r0, #32]
		std::map<int, CANDevice&> can_device_list;
  207038:	4a03      	ldr	r2, [pc, #12]	; (207048 <_GLOBAL__sub_I__ZN16CANDeviceManager4initEP17CAN_HandleTypeDefP12GPIO_TypeDeft+0x24>)
  20703a:	4904      	ldr	r1, [pc, #16]	; (20704c <_GLOBAL__sub_I__ZN16CANDeviceManager4initEP17CAN_HandleTypeDefP12GPIO_TypeDeft+0x28>)
  20703c:	3010      	adds	r0, #16
  20703e:	f00d f819 	bl	214074 <__aeabi_atexit>
  207042:	bd08      	pop	{r3, pc}
  207044:	20000258 	.word	0x20000258
  207048:	20000000 	.word	0x20000000
  20704c:	00207015 	.word	0x00207015

00207050 <_ZNK8std_msgs5UInt89serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
  207050:	7903      	ldrb	r3, [r0, #4]
  207052:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
      return offset;
    }
  207054:	2001      	movs	r0, #1
  207056:	4770      	bx	lr

00207058 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data =  ((uint8_t) (*(inbuffer + offset)));
  207058:	780b      	ldrb	r3, [r1, #0]
  20705a:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
  20705c:	2001      	movs	r0, #1
  20705e:	4770      	bx	lr

00207060 <_ZN8std_msgs5UInt87getTypeEv>:

    const char * getType(){ return "std_msgs/UInt8"; };
  207060:	4800      	ldr	r0, [pc, #0]	; (207064 <_ZN8std_msgs5UInt87getTypeEv+0x4>)
  207062:	4770      	bx	lr
  207064:	002173c0 	.word	0x002173c0

00207068 <_ZN8std_msgs5UInt86getMD5Ev>:
    const char * getMD5(){ return "7c8164229e7d2c17eb95e9231617fdee"; };
  207068:	4800      	ldr	r0, [pc, #0]	; (20706c <_ZN8std_msgs5UInt86getMD5Ev+0x4>)
  20706a:	4770      	bx	lr
  20706c:	0021739c 	.word	0x0021739c

00207070 <_ZNSt6vectorIN11FlashMemory12_GLOBAL__N_14DataESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
  207070:	b510      	push	{r4, lr}
  207072:	4604      	mov	r4, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  207074:	6800      	ldr	r0, [r0, #0]
	if (__p)
  207076:	b108      	cbz	r0, 20707c <_ZNSt6vectorIN11FlashMemory12_GLOBAL__N_14DataESaIS2_EED1Ev+0xc>
  207078:	f00c fff7 	bl	21406a <_ZdlPv>
		      _M_get_Tp_allocator()); }
  20707c:	4620      	mov	r0, r4
  20707e:	bd10      	pop	{r4, pc}

00207080 <_ZN11FlashMemory4initEmm>:
		uint32_t m_data_address, m_data_sector;
		constexpr int FLASH_TIMEOUT_VALUE = 50000; //50s
	}

	void init(uint32_t data_address, uint32_t data_sector){
		m_data_address = data_address;
  207080:	4b01      	ldr	r3, [pc, #4]	; (207088 <_ZN11FlashMemory4initEmm+0x8>)
  207082:	6018      	str	r0, [r3, #0]
		m_data_sector = data_sector;
  207084:	6059      	str	r1, [r3, #4]
  207086:	4770      	bx	lr
  207088:	20000280 	.word	0x20000280

0020708c <_ZN11FlashMemory8addValueEPvj>:
	}

	void addValue(void* ptr, size_t size){
  20708c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  20708e:	4a2d      	ldr	r2, [pc, #180]	; (207144 <_ZN11FlashMemory8addValueEPvj+0xb8>)
  207090:	68d3      	ldr	r3, [r2, #12]
  207092:	6912      	ldr	r2, [r2, #16]
  207094:	4293      	cmp	r3, r2
  207096:	d007      	beq.n	2070a8 <_ZN11FlashMemory8addValueEPvj+0x1c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  207098:	b10b      	cbz	r3, 20709e <_ZN11FlashMemory8addValueEPvj+0x12>
  20709a:	6018      	str	r0, [r3, #0]
  20709c:	6059      	str	r1, [r3, #4]
	    ++this->_M_impl._M_finish;
  20709e:	4a29      	ldr	r2, [pc, #164]	; (207144 <_ZN11FlashMemory8addValueEPvj+0xb8>)
  2070a0:	68d3      	ldr	r3, [r2, #12]
  2070a2:	3308      	adds	r3, #8
  2070a4:	60d3      	str	r3, [r2, #12]
  2070a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  2070a8:	460f      	mov	r7, r1
  2070aa:	4604      	mov	r4, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2070ac:	4a25      	ldr	r2, [pc, #148]	; (207144 <_ZN11FlashMemory8addValueEPvj+0xb8>)
  2070ae:	6892      	ldr	r2, [r2, #8]
  2070b0:	1a9b      	subs	r3, r3, r2
  2070b2:	10db      	asrs	r3, r3, #3
  2070b4:	b173      	cbz	r3, 2070d4 <_ZN11FlashMemory8addValueEPvj+0x48>
	const size_type __len = size() + std::max(size(), __n);
  2070b6:	005e      	lsls	r6, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  2070b8:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
  2070bc:	d201      	bcs.n	2070c2 <_ZN11FlashMemory8addValueEPvj+0x36>
  2070be:	42b3      	cmp	r3, r6
  2070c0:	d902      	bls.n	2070c8 <_ZN11FlashMemory8addValueEPvj+0x3c>
  2070c2:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
  2070c6:	e006      	b.n	2070d6 <_ZN11FlashMemory8addValueEPvj+0x4a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  2070c8:	b3b6      	cbz	r6, 207138 <_ZN11FlashMemory8addValueEPvj+0xac>
	if (__n > this->max_size())
  2070ca:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
  2070ce:	d302      	bcc.n	2070d6 <_ZN11FlashMemory8addValueEPvj+0x4a>
	  std::__throw_bad_alloc();
  2070d0:	f00d fecf 	bl	214e72 <_ZSt17__throw_bad_allocv>
	const size_type __len = size() + std::max(size(), __n);
  2070d4:	2601      	movs	r6, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  2070d6:	00f0      	lsls	r0, r6, #3
  2070d8:	f00c fff7 	bl	2140ca <_Znwj>
  2070dc:	4605      	mov	r5, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2070de:	4b19      	ldr	r3, [pc, #100]	; (207144 <_ZN11FlashMemory8addValueEPvj+0xb8>)
  2070e0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  2070e4:	f8d3 e008 	ldr.w	lr, [r3, #8]
  2070e8:	ebac 030e 	sub.w	r3, ip, lr
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  2070ec:	18ea      	adds	r2, r5, r3
  2070ee:	d001      	beq.n	2070f4 <_ZN11FlashMemory8addValueEPvj+0x68>
  2070f0:	50ec      	str	r4, [r5, r3]
  2070f2:	6057      	str	r7, [r2, #4]
  2070f4:	45f4      	cmp	ip, lr
  2070f6:	d022      	beq.n	20713e <_ZN11FlashMemory8addValueEPvj+0xb2>
  2070f8:	462a      	mov	r2, r5
  2070fa:	4673      	mov	r3, lr
  2070fc:	b11a      	cbz	r2, 207106 <_ZN11FlashMemory8addValueEPvj+0x7a>
  2070fe:	e893 0003 	ldmia.w	r3, {r0, r1}
  207102:	e882 0003 	stmia.w	r2, {r0, r1}
  207106:	3308      	adds	r3, #8
  207108:	3208      	adds	r2, #8
  20710a:	459c      	cmp	ip, r3
  20710c:	d1f6      	bne.n	2070fc <_ZN11FlashMemory8addValueEPvj+0x70>
  20710e:	f10e 0408 	add.w	r4, lr, #8
  207112:	1b1c      	subs	r4, r3, r4
  207114:	f024 0407 	bic.w	r4, r4, #7
  207118:	3408      	adds	r4, #8
  20711a:	442c      	add	r4, r5
	    ++__new_finish;
  20711c:	3408      	adds	r4, #8
	if (__p)
  20711e:	f1be 0f00 	cmp.w	lr, #0
  207122:	d002      	beq.n	20712a <_ZN11FlashMemory8addValueEPvj+0x9e>
      { ::operator delete(__p); }
  207124:	4670      	mov	r0, lr
  207126:	f00c ffa0 	bl	21406a <_ZdlPv>
	this->_M_impl._M_start = __new_start;
  20712a:	4b06      	ldr	r3, [pc, #24]	; (207144 <_ZN11FlashMemory8addValueEPvj+0xb8>)
  20712c:	609d      	str	r5, [r3, #8]
	this->_M_impl._M_finish = __new_finish;
  20712e:	60dc      	str	r4, [r3, #12]
	this->_M_impl._M_end_of_storage = __new_start + __len;
  207130:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
  207134:	611d      	str	r5, [r3, #16]
  207136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  207138:	2600      	movs	r6, #0
  20713a:	4635      	mov	r5, r6
  20713c:	e7cf      	b.n	2070de <_ZN11FlashMemory8addValueEPvj+0x52>
  20713e:	462c      	mov	r4, r5
  207140:	e7ec      	b.n	20711c <_ZN11FlashMemory8addValueEPvj+0x90>
  207142:	bf00      	nop
  207144:	20000280 	.word	0x20000280

00207148 <_ZN11FlashMemory4readEv>:
		Data tmp_data(ptr, size);
		data.push_back(tmp_data);
	}

	void read(){
  207148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		HAL_StatusTypeDef status = HAL_ERROR;
		status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
  20714a:	f24c 3050 	movw	r0, #50000	; 0xc350
  20714e:	f009 fca7 	bl	210aa0 <FLASH_WaitForLastOperation>

		uint32_t data_address = m_data_address;
		if (status == HAL_OK){
  207152:	b9d8      	cbnz	r0, 20718c <_ZN11FlashMemory4readEv+0x44>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  207154:	4a10      	ldr	r2, [pc, #64]	; (207198 <_ZN11FlashMemory4readEv+0x50>)
  207156:	6893      	ldr	r3, [r2, #8]
  207158:	68d2      	ldr	r2, [r2, #12]
  20715a:	1ad2      	subs	r2, r2, r3
			for (unsigned int i = 0; i != data.size(); i++){
  20715c:	08d2      	lsrs	r2, r2, #3
  20715e:	d015      	beq.n	20718c <_ZN11FlashMemory4readEv+0x44>
		uint32_t data_address = m_data_address;
  207160:	4a0d      	ldr	r2, [pc, #52]	; (207198 <_ZN11FlashMemory4readEv+0x50>)
  207162:	6816      	ldr	r6, [r2, #0]
  207164:	2400      	movs	r4, #0
      { return *(this->_M_impl._M_start + __n); }
  207166:	4617      	mov	r7, r2
  207168:	00e5      	lsls	r5, r4, #3
  20716a:	195a      	adds	r2, r3, r5
				memcpy(data[i].ptr, reinterpret_cast<void*>(data_address), data[i].size);
  20716c:	6852      	ldr	r2, [r2, #4]
  20716e:	4631      	mov	r1, r6
  207170:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  207174:	f00f fb69 	bl	21684a <memcpy>
  207178:	68bb      	ldr	r3, [r7, #8]
				data_address += data[i].size;
  20717a:	441d      	add	r5, r3
  20717c:	686a      	ldr	r2, [r5, #4]
  20717e:	4416      	add	r6, r2
			for (unsigned int i = 0; i != data.size(); i++){
  207180:	3401      	adds	r4, #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  207182:	68fa      	ldr	r2, [r7, #12]
  207184:	1ad2      	subs	r2, r2, r3
  207186:	ebb4 0fe2 	cmp.w	r4, r2, asr #3
  20718a:	d1ed      	bne.n	207168 <_ZN11FlashMemory4readEv+0x20>
			}
		}

		/* If the program operation is completed, disable the PG Bit */
	    FLASH->CR &= (~FLASH_CR_PG);
  20718c:	4a03      	ldr	r2, [pc, #12]	; (20719c <_ZN11FlashMemory4readEv+0x54>)
  20718e:	6913      	ldr	r3, [r2, #16]
  207190:	f023 0301 	bic.w	r3, r3, #1
  207194:	6113      	str	r3, [r2, #16]
  207196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  207198:	20000280 	.word	0x20000280
  20719c:	40023c00 	.word	0x40023c00

002071a0 <_ZN11FlashMemory5eraseEv>:
	}

	void erase(){
  2071a0:	b500      	push	{lr}
  2071a2:	b087      	sub	sp, #28
		HAL_StatusTypeDef r;

		r = HAL_FLASH_Unlock();
  2071a4:	f009 fc60 	bl	210a68 <HAL_FLASH_Unlock>
		if( r != HAL_OK ) return;
  2071a8:	b110      	cbz	r0, 2071b0 <_ZN11FlashMemory5eraseEv+0x10>
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;

		r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
		if ( r != HAL_OK ) return;
		r = HAL_FLASH_Lock();
	}
  2071aa:	b007      	add	sp, #28
  2071ac:	f85d fb04 	ldr.w	pc, [sp], #4
		uint32_t SectorError = 0;
  2071b0:	2300      	movs	r3, #0
  2071b2:	9301      	str	r3, [sp, #4]
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
  2071b4:	9302      	str	r3, [sp, #8]
		EraseInitStruct.Sector = m_data_sector;
  2071b6:	4b08      	ldr	r3, [pc, #32]	; (2071d8 <_ZN11FlashMemory5eraseEv+0x38>)
  2071b8:	685b      	ldr	r3, [r3, #4]
  2071ba:	9303      	str	r3, [sp, #12]
		EraseInitStruct.NbSectors = 1;
  2071bc:	2301      	movs	r3, #1
  2071be:	9304      	str	r3, [sp, #16]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
  2071c0:	2302      	movs	r3, #2
  2071c2:	9305      	str	r3, [sp, #20]
		r = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
  2071c4:	a901      	add	r1, sp, #4
  2071c6:	a802      	add	r0, sp, #8
  2071c8:	f009 fd1a 	bl	210c00 <HAL_FLASHEx_Erase>
		if ( r != HAL_OK ) return;
  2071cc:	2800      	cmp	r0, #0
  2071ce:	d1ec      	bne.n	2071aa <_ZN11FlashMemory5eraseEv+0xa>
		r = HAL_FLASH_Lock();
  2071d0:	f009 fc5c 	bl	210a8c <HAL_FLASH_Lock>
  2071d4:	e7e9      	b.n	2071aa <_ZN11FlashMemory5eraseEv+0xa>
  2071d6:	bf00      	nop
  2071d8:	20000280 	.word	0x20000280

002071dc <_ZN11FlashMemory5writeEv>:

	void write(){
  2071dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		HAL_StatusTypeDef r;

		r = HAL_FLASH_Unlock();
  2071e0:	f009 fc42 	bl	210a68 <HAL_FLASH_Unlock>
		if( r != HAL_OK ) return;
  2071e4:	bb68      	cbnz	r0, 207242 <_ZN11FlashMemory5writeEv+0x66>

		uint32_t data_address = m_data_address;
  2071e6:	4a18      	ldr	r2, [pc, #96]	; (207248 <_ZN11FlashMemory5writeEv+0x6c>)
  2071e8:	6815      	ldr	r5, [r2, #0]
  2071ea:	68d3      	ldr	r3, [r2, #12]
  2071ec:	6892      	ldr	r2, [r2, #8]
  2071ee:	1a9b      	subs	r3, r3, r2
		for (unsigned int i = 0; i != data.size(); i++){
  2071f0:	08db      	lsrs	r3, r3, #3
  2071f2:	d024      	beq.n	20723e <_ZN11FlashMemory5writeEv+0x62>
  2071f4:	f04f 0800 	mov.w	r8, #0
      { return *(this->_M_impl._M_start + __n); }
  2071f8:	4c13      	ldr	r4, [pc, #76]	; (207248 <_ZN11FlashMemory5writeEv+0x6c>)
			for (unsigned int j = 0; j != data[i].size; j++) {
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, data_address + j, *(static_cast<uint8_t*>(data[i].ptr) + j));
  2071fa:	4647      	mov	r7, r8
  2071fc:	ea4f 06c8 	mov.w	r6, r8, lsl #3
  207200:	68a3      	ldr	r3, [r4, #8]
  207202:	4433      	add	r3, r6
			for (unsigned int j = 0; j != data[i].size; j++) {
  207204:	685a      	ldr	r2, [r3, #4]
  207206:	b18a      	cbz	r2, 20722c <_ZN11FlashMemory5writeEv+0x50>
  207208:	f04f 0900 	mov.w	r9, #0
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, data_address + j, *(static_cast<uint8_t*>(data[i].ptr) + j));
  20720c:	681b      	ldr	r3, [r3, #0]
  20720e:	f813 2009 	ldrb.w	r2, [r3, r9]
  207212:	2300      	movs	r3, #0
  207214:	eb05 0109 	add.w	r1, r5, r9
  207218:	4638      	mov	r0, r7
  20721a:	f009 fc6b 	bl	210af4 <HAL_FLASH_Program>
			for (unsigned int j = 0; j != data[i].size; j++) {
  20721e:	f109 0901 	add.w	r9, r9, #1
  207222:	68a3      	ldr	r3, [r4, #8]
  207224:	4433      	add	r3, r6
  207226:	685a      	ldr	r2, [r3, #4]
  207228:	454a      	cmp	r2, r9
  20722a:	d1ef      	bne.n	20720c <_ZN11FlashMemory5writeEv+0x30>
			}
			data_address += data[i].size;
  20722c:	4415      	add	r5, r2
		for (unsigned int i = 0; i != data.size(); i++){
  20722e:	f108 0801 	add.w	r8, r8, #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  207232:	68e3      	ldr	r3, [r4, #12]
  207234:	68a2      	ldr	r2, [r4, #8]
  207236:	1a9b      	subs	r3, r3, r2
  207238:	ebb8 0fe3 	cmp.w	r8, r3, asr #3
  20723c:	d1de      	bne.n	2071fc <_ZN11FlashMemory5writeEv+0x20>
		}
		r = HAL_FLASH_Lock();
  20723e:	f009 fc25 	bl	210a8c <HAL_FLASH_Lock>
  207242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  207246:	bf00      	nop
  207248:	20000280 	.word	0x20000280

0020724c <_GLOBAL__sub_I__ZN11FlashMemory4initEmm>:
	}
}
  20724c:	b508      	push	{r3, lr}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  20724e:	4805      	ldr	r0, [pc, #20]	; (207264 <_GLOBAL__sub_I__ZN11FlashMemory4initEmm+0x18>)
  207250:	2300      	movs	r3, #0
  207252:	6083      	str	r3, [r0, #8]
  207254:	60c3      	str	r3, [r0, #12]
  207256:	6103      	str	r3, [r0, #16]
		std::vector<Data> data;
  207258:	4a03      	ldr	r2, [pc, #12]	; (207268 <_GLOBAL__sub_I__ZN11FlashMemory4initEmm+0x1c>)
  20725a:	4904      	ldr	r1, [pc, #16]	; (20726c <_GLOBAL__sub_I__ZN11FlashMemory4initEmm+0x20>)
  20725c:	3008      	adds	r0, #8
  20725e:	f00c ff09 	bl	214074 <__aeabi_atexit>
  207262:	bd08      	pop	{r3, pc}
  207264:	20000280 	.word	0x20000280
  207268:	20000000 	.word	0x20000000
  20726c:	00207071 	.word	0x00207071

00207270 <_ZNK8std_msgs7Float329serializeEPh>:
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
  207270:	6843      	ldr	r3, [r0, #4]
  207272:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
  207274:	0a1a      	lsrs	r2, r3, #8
  207276:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
  207278:	0c1a      	lsrs	r2, r3, #16
  20727a:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
  20727c:	0e1b      	lsrs	r3, r3, #24
  20727e:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data);
      return offset;
    }
  207280:	2004      	movs	r0, #4
  207282:	4770      	bx	lr

00207284 <_ZN8std_msgs7Float3211deserializeEPh>:
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207284:	784a      	ldrb	r2, [r1, #1]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207286:	788b      	ldrb	r3, [r1, #2]
  207288:	041b      	lsls	r3, r3, #16
  20728a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20728e:	780a      	ldrb	r2, [r1, #0]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207290:	4313      	orrs	r3, r2
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  207292:	78ca      	ldrb	r2, [r1, #3]
      this->data = u_data.real;
  207294:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  207298:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data);
     return offset;
    }
  20729a:	2004      	movs	r0, #4
  20729c:	4770      	bx	lr
	...

002072a0 <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
  2072a0:	4800      	ldr	r0, [pc, #0]	; (2072a4 <_ZN8std_msgs7Float327getTypeEv+0x4>)
  2072a2:	4770      	bx	lr
  2072a4:	00217ac8 	.word	0x00217ac8

002072a8 <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
  2072a8:	4800      	ldr	r0, [pc, #0]	; (2072ac <_ZN8std_msgs7Float326getMD5Ev+0x4>)
  2072aa:	4770      	bx	lr
  2072ac:	00217aa4 	.word	0x00217aa4

002072b0 <_ZNK17aerial_robot_base4Pwms9serializeEPh>:
    Pwms():
      motor_value_length(0), motor_value(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  2072b0:	b410      	push	{r4}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->motor_value_length >> (8 * 0)) & 0xFF;
  2072b2:	6843      	ldr	r3, [r0, #4]
  2072b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->motor_value_length >> (8 * 1)) & 0xFF;
  2072b6:	6843      	ldr	r3, [r0, #4]
  2072b8:	0a1b      	lsrs	r3, r3, #8
  2072ba:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->motor_value_length >> (8 * 2)) & 0xFF;
  2072bc:	88c3      	ldrh	r3, [r0, #6]
  2072be:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->motor_value_length >> (8 * 3)) & 0xFF;
  2072c0:	79c3      	ldrb	r3, [r0, #7]
  2072c2:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->motor_value_length);
      for( uint32_t i = 0; i < motor_value_length; i++){
  2072c4:	6843      	ldr	r3, [r0, #4]
  2072c6:	b1a3      	cbz	r3, 2072f2 <_ZNK17aerial_robot_base4Pwms9serializeEPh+0x42>
  2072c8:	2300      	movs	r3, #0
  2072ca:	2404      	movs	r4, #4
      *(outbuffer + offset + 0) = (this->motor_value[i] >> (8 * 0)) & 0xFF;
  2072cc:	68c2      	ldr	r2, [r0, #12]
  2072ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  2072d2:	710a      	strb	r2, [r1, #4]
      *(outbuffer + offset + 1) = (this->motor_value[i] >> (8 * 1)) & 0xFF;
  2072d4:	68c2      	ldr	r2, [r0, #12]
  2072d6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
  2072da:	0a12      	lsrs	r2, r2, #8
  2072dc:	714a      	strb	r2, [r1, #5]
  2072de:	3402      	adds	r4, #2
      for( uint32_t i = 0; i < motor_value_length; i++){
  2072e0:	3301      	adds	r3, #1
  2072e2:	3102      	adds	r1, #2
  2072e4:	6842      	ldr	r2, [r0, #4]
  2072e6:	429a      	cmp	r2, r3
  2072e8:	d8f0      	bhi.n	2072cc <_ZNK17aerial_robot_base4Pwms9serializeEPh+0x1c>
      offset += sizeof(this->motor_value[i]);
      }
      return offset;
    }
  2072ea:	4620      	mov	r0, r4
  2072ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  2072f0:	4770      	bx	lr
      offset += sizeof(this->motor_value_length);
  2072f2:	2404      	movs	r4, #4
      return offset;
  2072f4:	e7f9      	b.n	2072ea <_ZNK17aerial_robot_base4Pwms9serializeEPh+0x3a>
	...

002072f8 <_ZN17aerial_robot_base4Pwms7getTypeEv>:
        memcpy( &(this->motor_value[i]), &(this->st_motor_value), sizeof(uint16_t));
      }
     return offset;
    }

    const char * getType(){ return "aerial_robot_base/Pwms"; };
  2072f8:	4800      	ldr	r0, [pc, #0]	; (2072fc <_ZN17aerial_robot_base4Pwms7getTypeEv+0x4>)
  2072fa:	4770      	bx	lr
  2072fc:	002178a4 	.word	0x002178a4

00207300 <_ZN17aerial_robot_base4Pwms6getMD5Ev>:
    const char * getMD5(){ return "2c8c334b8b8efa66767058af395f7c74"; };
  207300:	4800      	ldr	r0, [pc, #0]	; (207304 <_ZN17aerial_robot_base4Pwms6getMD5Ev+0x4>)
  207302:	4770      	bx	lr
  207304:	00217880 	.word	0x00217880

00207308 <_ZNK17aerial_robot_msgs15FourAxisCommand9serializeEPh>:
      angles(),
      base_throttle_length(0), base_throttle(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  207308:	b4f0      	push	{r4, r5, r6, r7}
  20730a:	1d05      	adds	r5, r0, #4
  20730c:	460a      	mov	r2, r1
  20730e:	f100 0710 	add.w	r7, r0, #16
  207312:	460c      	mov	r4, r1
      for( uint32_t i = 0; i < 3; i++){
      union {
        float real;
        uint32_t base;
      } u_anglesi;
      u_anglesi.real = this->angles[i];
  207314:	f855 3b04 	ldr.w	r3, [r5], #4
      *(outbuffer + offset + 0) = (u_anglesi.base >> (8 * 0)) & 0xFF;
  207318:	7023      	strb	r3, [r4, #0]
      *(outbuffer + offset + 1) = (u_anglesi.base >> (8 * 1)) & 0xFF;
  20731a:	0a1e      	lsrs	r6, r3, #8
  20731c:	7066      	strb	r6, [r4, #1]
      *(outbuffer + offset + 2) = (u_anglesi.base >> (8 * 2)) & 0xFF;
  20731e:	0c1e      	lsrs	r6, r3, #16
  207320:	70a6      	strb	r6, [r4, #2]
      *(outbuffer + offset + 3) = (u_anglesi.base >> (8 * 3)) & 0xFF;
  207322:	0e1b      	lsrs	r3, r3, #24
  207324:	70e3      	strb	r3, [r4, #3]
  207326:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < 3; i++){
  207328:	42bd      	cmp	r5, r7
  20732a:	d1f3      	bne.n	207314 <_ZNK17aerial_robot_msgs15FourAxisCommand9serializeEPh+0xc>
      offset += sizeof(this->angles[i]);
      }
      *(outbuffer + offset + 0) = (this->base_throttle_length >> (8 * 0)) & 0xFF;
  20732c:	6903      	ldr	r3, [r0, #16]
  20732e:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (this->base_throttle_length >> (8 * 1)) & 0xFF;
  207330:	6903      	ldr	r3, [r0, #16]
  207332:	0a1b      	lsrs	r3, r3, #8
  207334:	734b      	strb	r3, [r1, #13]
      *(outbuffer + offset + 2) = (this->base_throttle_length >> (8 * 2)) & 0xFF;
  207336:	8a43      	ldrh	r3, [r0, #18]
  207338:	738b      	strb	r3, [r1, #14]
      *(outbuffer + offset + 3) = (this->base_throttle_length >> (8 * 3)) & 0xFF;
  20733a:	7cc3      	ldrb	r3, [r0, #19]
  20733c:	73cb      	strb	r3, [r1, #15]
      offset += sizeof(this->base_throttle_length);
      for( uint32_t i = 0; i < base_throttle_length; i++){
  20733e:	6903      	ldr	r3, [r0, #16]
  207340:	b1a3      	cbz	r3, 20736c <_ZNK17aerial_robot_msgs15FourAxisCommand9serializeEPh+0x64>
  207342:	2100      	movs	r1, #0
  207344:	2410      	movs	r4, #16
      union {
        float real;
        uint32_t base;
      } u_base_throttlei;
      u_base_throttlei.real = this->base_throttle[i];
  207346:	6983      	ldr	r3, [r0, #24]
      *(outbuffer + offset + 0) = (u_base_throttlei.base >> (8 * 0)) & 0xFF;
  207348:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  20734c:	7413      	strb	r3, [r2, #16]
      *(outbuffer + offset + 1) = (u_base_throttlei.base >> (8 * 1)) & 0xFF;
  20734e:	0a1d      	lsrs	r5, r3, #8
  207350:	7455      	strb	r5, [r2, #17]
      *(outbuffer + offset + 2) = (u_base_throttlei.base >> (8 * 2)) & 0xFF;
  207352:	0c1d      	lsrs	r5, r3, #16
  207354:	7495      	strb	r5, [r2, #18]
      *(outbuffer + offset + 3) = (u_base_throttlei.base >> (8 * 3)) & 0xFF;
  207356:	0e1b      	lsrs	r3, r3, #24
  207358:	74d3      	strb	r3, [r2, #19]
  20735a:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < base_throttle_length; i++){
  20735c:	3101      	adds	r1, #1
  20735e:	3204      	adds	r2, #4
  207360:	6903      	ldr	r3, [r0, #16]
  207362:	428b      	cmp	r3, r1
  207364:	d8ef      	bhi.n	207346 <_ZNK17aerial_robot_msgs15FourAxisCommand9serializeEPh+0x3e>
      offset += sizeof(this->base_throttle[i]);
      }
      return offset;
    }
  207366:	4620      	mov	r0, r4
  207368:	bcf0      	pop	{r4, r5, r6, r7}
  20736a:	4770      	bx	lr
      offset += sizeof(this->base_throttle_length);
  20736c:	2410      	movs	r4, #16
      return offset;
  20736e:	e7fa      	b.n	207366 <_ZNK17aerial_robot_msgs15FourAxisCommand9serializeEPh+0x5e>

00207370 <_ZN17aerial_robot_msgs15FourAxisCommand7getTypeEv>:
        memcpy( &(this->base_throttle[i]), &(this->st_base_throttle), sizeof(float));
      }
     return offset;
    }

    const char * getType(){ return "aerial_robot_msgs/FourAxisCommand"; };
  207370:	4800      	ldr	r0, [pc, #0]	; (207374 <_ZN17aerial_robot_msgs15FourAxisCommand7getTypeEv+0x4>)
  207372:	4770      	bx	lr
  207374:	002178e0 	.word	0x002178e0

00207378 <_ZN17aerial_robot_msgs15FourAxisCommand6getMD5Ev>:
    const char * getMD5(){ return "7358e7c9be3cfaa92377f4a91a2f3751"; };
  207378:	4800      	ldr	r0, [pc, #0]	; (20737c <_ZN17aerial_robot_msgs15FourAxisCommand6getMD5Ev+0x4>)
  20737a:	4770      	bx	lr
  20737c:	002178bc 	.word	0x002178bc

00207380 <_ZNK17aerial_robot_msgs16RollPitchYawTerm9serializeEPh>:
      int offset = 0;
      union {
        int16_t real;
        uint16_t base;
      } u_roll_p;
      u_roll_p.real = this->roll_p;
  207380:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      *(outbuffer + offset + 0) = (u_roll_p.base >> (8 * 0)) & 0xFF;
  207384:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_roll_p.base >> (8 * 1)) & 0xFF;
  207386:	f3c3 2307 	ubfx	r3, r3, #8, #8
  20738a:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->roll_p);
      union {
        int16_t real;
        uint16_t base;
      } u_roll_i;
      u_roll_i.real = this->roll_i;
  20738c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
      *(outbuffer + offset + 0) = (u_roll_i.base >> (8 * 0)) & 0xFF;
  207390:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 1) = (u_roll_i.base >> (8 * 1)) & 0xFF;
  207392:	f3c3 2307 	ubfx	r3, r3, #8, #8
  207396:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->roll_i);
      union {
        int16_t real;
        uint16_t base;
      } u_roll_d;
      u_roll_d.real = this->roll_d;
  207398:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
      *(outbuffer + offset + 0) = (u_roll_d.base >> (8 * 0)) & 0xFF;
  20739c:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_roll_d.base >> (8 * 1)) & 0xFF;
  20739e:	f3c3 2307 	ubfx	r3, r3, #8, #8
  2073a2:	714b      	strb	r3, [r1, #5]
      offset += sizeof(this->roll_d);
      union {
        int16_t real;
        uint16_t base;
      } u_pitch_p;
      u_pitch_p.real = this->pitch_p;
  2073a4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
      *(outbuffer + offset + 0) = (u_pitch_p.base >> (8 * 0)) & 0xFF;
  2073a8:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 1) = (u_pitch_p.base >> (8 * 1)) & 0xFF;
  2073aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
  2073ae:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->pitch_p);
      union {
        int16_t real;
        uint16_t base;
      } u_pitch_i;
      u_pitch_i.real = this->pitch_i;
  2073b0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
      *(outbuffer + offset + 0) = (u_pitch_i.base >> (8 * 0)) & 0xFF;
  2073b4:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_pitch_i.base >> (8 * 1)) & 0xFF;
  2073b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
  2073ba:	724b      	strb	r3, [r1, #9]
      offset += sizeof(this->pitch_i);
      union {
        int16_t real;
        uint16_t base;
      } u_pitch_d;
      u_pitch_d.real = this->pitch_d;
  2073bc:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
      *(outbuffer + offset + 0) = (u_pitch_d.base >> (8 * 0)) & 0xFF;
  2073c0:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 1) = (u_pitch_d.base >> (8 * 1)) & 0xFF;
  2073c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
  2073c6:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->pitch_d);
      union {
        int16_t real;
        uint16_t base;
      } u_yaw_d;
      u_yaw_d.real = this->yaw_d;
  2073c8:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
      *(outbuffer + offset + 0) = (u_yaw_d.base >> (8 * 0)) & 0xFF;
  2073cc:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_yaw_d.base >> (8 * 1)) & 0xFF;
  2073ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
  2073d2:	734b      	strb	r3, [r1, #13]
      offset += sizeof(this->yaw_d);
      return offset;
    }
  2073d4:	200e      	movs	r0, #14
  2073d6:	4770      	bx	lr

002073d8 <_ZN17aerial_robot_msgs16RollPitchYawTerm11deserializeEPh>:
        int16_t real;
        uint16_t base;
      } u_roll_p;
      u_roll_p.base = 0;
      u_roll_p.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_roll_p.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2073d8:	784a      	ldrb	r2, [r1, #1]
  2073da:	780b      	ldrb	r3, [r1, #0]
  2073dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->roll_p = u_roll_p.real;
  2073e0:	8083      	strh	r3, [r0, #4]
        int16_t real;
        uint16_t base;
      } u_roll_i;
      u_roll_i.base = 0;
      u_roll_i.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_roll_i.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2073e2:	78ca      	ldrb	r2, [r1, #3]
  2073e4:	788b      	ldrb	r3, [r1, #2]
  2073e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->roll_i = u_roll_i.real;
  2073ea:	80c3      	strh	r3, [r0, #6]
        int16_t real;
        uint16_t base;
      } u_roll_d;
      u_roll_d.base = 0;
      u_roll_d.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_roll_d.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2073ec:	794a      	ldrb	r2, [r1, #5]
  2073ee:	790b      	ldrb	r3, [r1, #4]
  2073f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->roll_d = u_roll_d.real;
  2073f4:	8103      	strh	r3, [r0, #8]
        int16_t real;
        uint16_t base;
      } u_pitch_p;
      u_pitch_p.base = 0;
      u_pitch_p.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_pitch_p.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2073f6:	79ca      	ldrb	r2, [r1, #7]
  2073f8:	798b      	ldrb	r3, [r1, #6]
  2073fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->pitch_p = u_pitch_p.real;
  2073fe:	8143      	strh	r3, [r0, #10]
        int16_t real;
        uint16_t base;
      } u_pitch_i;
      u_pitch_i.base = 0;
      u_pitch_i.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_pitch_i.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207400:	7a4a      	ldrb	r2, [r1, #9]
  207402:	7a0b      	ldrb	r3, [r1, #8]
  207404:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->pitch_i = u_pitch_i.real;
  207408:	8183      	strh	r3, [r0, #12]
        int16_t real;
        uint16_t base;
      } u_pitch_d;
      u_pitch_d.base = 0;
      u_pitch_d.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_pitch_d.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20740a:	7aca      	ldrb	r2, [r1, #11]
  20740c:	7a8b      	ldrb	r3, [r1, #10]
  20740e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->pitch_d = u_pitch_d.real;
  207412:	81c3      	strh	r3, [r0, #14]
        int16_t real;
        uint16_t base;
      } u_yaw_d;
      u_yaw_d.base = 0;
      u_yaw_d.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_yaw_d.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207414:	7b4a      	ldrb	r2, [r1, #13]
  207416:	7b0b      	ldrb	r3, [r1, #12]
  207418:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->yaw_d = u_yaw_d.real;
  20741c:	8203      	strh	r3, [r0, #16]
      offset += sizeof(this->yaw_d);
     return offset;
    }
  20741e:	200e      	movs	r0, #14
  207420:	4770      	bx	lr
	...

00207424 <_ZN17aerial_robot_msgs16RollPitchYawTerm7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/RollPitchYawTerm"; };
  207424:	4800      	ldr	r0, [pc, #0]	; (207428 <_ZN17aerial_robot_msgs16RollPitchYawTerm7getTypeEv+0x4>)
  207426:	4770      	bx	lr
  207428:	00217928 	.word	0x00217928

0020742c <_ZN17aerial_robot_msgs16RollPitchYawTerm6getMD5Ev>:
    const char * getMD5(){ return "14a179f5309ca5bc435eceedda0bcca3"; };
  20742c:	4800      	ldr	r0, [pc, #0]	; (207430 <_ZN17aerial_robot_msgs16RollPitchYawTerm6getMD5Ev+0x4>)
  20742e:	4770      	bx	lr
  207430:	00217904 	.word	0x00217904

00207434 <_ZNK17aerial_robot_msgs17RollPitchYawTerms9serializeEPh>:
    RollPitchYawTerms():
      motors_length(0), motors(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  207434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->motors_length >> (8 * 0)) & 0xFF;
  207438:	6843      	ldr	r3, [r0, #4]
  20743a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->motors_length >> (8 * 1)) & 0xFF;
  20743c:	6843      	ldr	r3, [r0, #4]
  20743e:	0a1b      	lsrs	r3, r3, #8
  207440:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->motors_length >> (8 * 2)) & 0xFF;
  207442:	88c3      	ldrh	r3, [r0, #6]
  207444:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->motors_length >> (8 * 3)) & 0xFF;
  207446:	79c3      	ldrb	r3, [r0, #7]
  207448:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->motors_length);
      for( uint32_t i = 0; i < motors_length; i++){
  20744a:	6843      	ldr	r3, [r0, #4]
  20744c:	b1a3      	cbz	r3, 207478 <_ZNK17aerial_robot_msgs17RollPitchYawTerms9serializeEPh+0x44>
  20744e:	4688      	mov	r8, r1
  207450:	4607      	mov	r7, r0
  207452:	2400      	movs	r4, #0
  207454:	4626      	mov	r6, r4
  207456:	2504      	movs	r5, #4
      offset += this->motors[i].serialize(outbuffer + offset);
  207458:	69f8      	ldr	r0, [r7, #28]
  20745a:	5903      	ldr	r3, [r0, r4]
  20745c:	681b      	ldr	r3, [r3, #0]
  20745e:	eb08 0105 	add.w	r1, r8, r5
  207462:	4420      	add	r0, r4
  207464:	4798      	blx	r3
  207466:	4405      	add	r5, r0
      for( uint32_t i = 0; i < motors_length; i++){
  207468:	3601      	adds	r6, #1
  20746a:	3414      	adds	r4, #20
  20746c:	687b      	ldr	r3, [r7, #4]
  20746e:	42b3      	cmp	r3, r6
  207470:	d8f2      	bhi.n	207458 <_ZNK17aerial_robot_msgs17RollPitchYawTerms9serializeEPh+0x24>
      }
      return offset;
    }
  207472:	4628      	mov	r0, r5
  207474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      offset += sizeof(this->motors_length);
  207478:	2504      	movs	r5, #4
      return offset;
  20747a:	e7fa      	b.n	207472 <_ZNK17aerial_robot_msgs17RollPitchYawTerms9serializeEPh+0x3e>

0020747c <_ZN17aerial_robot_msgs17RollPitchYawTerms7getTypeEv>:
        memcpy( &(this->motors[i]), &(this->st_motors), sizeof(aerial_robot_msgs::RollPitchYawTerm));
      }
     return offset;
    }

    const char * getType(){ return "aerial_robot_msgs/RollPitchYawTerms"; };
  20747c:	4800      	ldr	r0, [pc, #0]	; (207480 <_ZN17aerial_robot_msgs17RollPitchYawTerms7getTypeEv+0x4>)
  20747e:	4770      	bx	lr
  207480:	00217970 	.word	0x00217970

00207484 <_ZN17aerial_robot_msgs17RollPitchYawTerms6getMD5Ev>:
    const char * getMD5(){ return "e02c97843dff2be50cd609663998aa9e"; };
  207484:	4800      	ldr	r0, [pc, #0]	; (207488 <_ZN17aerial_robot_msgs17RollPitchYawTerms6getMD5Ev+0x4>)
  207486:	4770      	bx	lr
  207488:	0021794c 	.word	0x0021794c

0020748c <_ZNK17aerial_robot_msgs9MotorInfo9serializeEPh>:
      voltage(0),
      polynominal()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  20748c:	b410      	push	{r4}
      union {
        float real;
        uint32_t base;
      } u_voltage;
      u_voltage.real = this->voltage;
      *(outbuffer + offset + 0) = (u_voltage.base >> (8 * 0)) & 0xFF;
  20748e:	6843      	ldr	r3, [r0, #4]
  207490:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_voltage.base >> (8 * 1)) & 0xFF;
  207492:	0a1a      	lsrs	r2, r3, #8
  207494:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (u_voltage.base >> (8 * 2)) & 0xFF;
  207496:	0c1a      	lsrs	r2, r3, #16
  207498:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (u_voltage.base >> (8 * 3)) & 0xFF;
  20749a:	0e1b      	lsrs	r3, r3, #24
  20749c:	70cb      	strb	r3, [r1, #3]
  20749e:	f100 0208 	add.w	r2, r0, #8
  2074a2:	301c      	adds	r0, #28
      for( uint32_t i = 0; i < 5; i++){
      union {
        float real;
        uint32_t base;
      } u_polynominali;
      u_polynominali.real = this->polynominal[i];
  2074a4:	f852 3b04 	ldr.w	r3, [r2], #4
      *(outbuffer + offset + 0) = (u_polynominali.base >> (8 * 0)) & 0xFF;
  2074a8:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_polynominali.base >> (8 * 1)) & 0xFF;
  2074aa:	0a1c      	lsrs	r4, r3, #8
  2074ac:	714c      	strb	r4, [r1, #5]
      *(outbuffer + offset + 2) = (u_polynominali.base >> (8 * 2)) & 0xFF;
  2074ae:	0c1c      	lsrs	r4, r3, #16
  2074b0:	718c      	strb	r4, [r1, #6]
      *(outbuffer + offset + 3) = (u_polynominali.base >> (8 * 3)) & 0xFF;
  2074b2:	0e1b      	lsrs	r3, r3, #24
  2074b4:	71cb      	strb	r3, [r1, #7]
  2074b6:	3104      	adds	r1, #4
      for( uint32_t i = 0; i < 5; i++){
  2074b8:	4282      	cmp	r2, r0
  2074ba:	d1f3      	bne.n	2074a4 <_ZNK17aerial_robot_msgs9MotorInfo9serializeEPh+0x18>
      offset += sizeof(this->polynominal[i]);
      }
      return offset;
    }
  2074bc:	2018      	movs	r0, #24
  2074be:	f85d 4b04 	ldr.w	r4, [sp], #4
  2074c2:	4770      	bx	lr

002074c4 <_ZN17aerial_robot_msgs9MotorInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
  2074c4:	b410      	push	{r4}
        float real;
        uint32_t base;
      } u_voltage;
      u_voltage.base = 0;
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2074c6:	784a      	ldrb	r2, [r1, #1]
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2074c8:	788b      	ldrb	r3, [r1, #2]
  2074ca:	041b      	lsls	r3, r3, #16
  2074cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  2074d0:	780a      	ldrb	r2, [r1, #0]
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2074d2:	4313      	orrs	r3, r2
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  2074d4:	78ca      	ldrb	r2, [r1, #3]
      this->voltage = u_voltage.real;
  2074d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  2074da:	6043      	str	r3, [r0, #4]
  2074dc:	f100 0208 	add.w	r2, r0, #8
  2074e0:	301c      	adds	r0, #28
        float real;
        uint32_t base;
      } u_polynominali;
      u_polynominali.base = 0;
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2074e2:	794c      	ldrb	r4, [r1, #5]
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2074e4:	798b      	ldrb	r3, [r1, #6]
  2074e6:	041b      	lsls	r3, r3, #16
  2074e8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  2074ec:	790c      	ldrb	r4, [r1, #4]
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2074ee:	4323      	orrs	r3, r4
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  2074f0:	79cc      	ldrb	r4, [r1, #7]
      this->polynominal[i] = u_polynominali.real;
  2074f2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  2074f6:	f842 3b04 	str.w	r3, [r2], #4
  2074fa:	3104      	adds	r1, #4
      for( uint32_t i = 0; i < 5; i++){
  2074fc:	4282      	cmp	r2, r0
  2074fe:	d1f0      	bne.n	2074e2 <_ZN17aerial_robot_msgs9MotorInfo11deserializeEPh+0x1e>
      offset += sizeof(this->polynominal[i]);
      }
     return offset;
    }
  207500:	2018      	movs	r0, #24
  207502:	f85d 4b04 	ldr.w	r4, [sp], #4
  207506:	4770      	bx	lr

00207508 <_ZN17aerial_robot_msgs9MotorInfo7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/MotorInfo"; };
  207508:	4800      	ldr	r0, [pc, #0]	; (20750c <_ZN17aerial_robot_msgs9MotorInfo7getTypeEv+0x4>)
  20750a:	4770      	bx	lr
  20750c:	002179f8 	.word	0x002179f8

00207510 <_ZN17aerial_robot_msgs9MotorInfo6getMD5Ev>:
    const char * getMD5(){ return "7971ab19b3b338702f75846ee7d1e8f2"; };
  207510:	4800      	ldr	r0, [pc, #0]	; (207514 <_ZN17aerial_robot_msgs9MotorInfo6getMD5Ev+0x4>)
  207512:	4770      	bx	lr
  207514:	002179d4 	.word	0x002179d4

00207518 <_ZNK17aerial_robot_msgs7PwmInfo9serializeEPh>:
      pwm_conversion_mode(0),
      motor_info_length(0), motor_info(NULL)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  207518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      union {
        float real;
        uint32_t base;
      } u_min_thrust;
      u_min_thrust.real = this->min_thrust;
      *(outbuffer + offset + 0) = (u_min_thrust.base >> (8 * 0)) & 0xFF;
  20751c:	6843      	ldr	r3, [r0, #4]
  20751e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_min_thrust.base >> (8 * 1)) & 0xFF;
  207520:	0a1a      	lsrs	r2, r3, #8
  207522:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (u_min_thrust.base >> (8 * 2)) & 0xFF;
  207524:	0c1a      	lsrs	r2, r3, #16
  207526:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (u_min_thrust.base >> (8 * 3)) & 0xFF;
  207528:	0e1b      	lsrs	r3, r3, #24
  20752a:	70cb      	strb	r3, [r1, #3]
      union {
        float real;
        uint32_t base;
      } u_max_thrust;
      u_max_thrust.real = this->max_thrust;
      *(outbuffer + offset + 0) = (u_max_thrust.base >> (8 * 0)) & 0xFF;
  20752c:	6883      	ldr	r3, [r0, #8]
  20752e:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_max_thrust.base >> (8 * 1)) & 0xFF;
  207530:	0a1a      	lsrs	r2, r3, #8
  207532:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 2) = (u_max_thrust.base >> (8 * 2)) & 0xFF;
  207534:	0c1a      	lsrs	r2, r3, #16
  207536:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 3) = (u_max_thrust.base >> (8 * 3)) & 0xFF;
  207538:	0e1b      	lsrs	r3, r3, #24
  20753a:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_abs_max_pwm;
      u_abs_max_pwm.real = this->abs_max_pwm;
      *(outbuffer + offset + 0) = (u_abs_max_pwm.base >> (8 * 0)) & 0xFF;
  20753c:	68c3      	ldr	r3, [r0, #12]
  20753e:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_abs_max_pwm.base >> (8 * 1)) & 0xFF;
  207540:	0a1a      	lsrs	r2, r3, #8
  207542:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_abs_max_pwm.base >> (8 * 2)) & 0xFF;
  207544:	0c1a      	lsrs	r2, r3, #16
  207546:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_abs_max_pwm.base >> (8 * 3)) & 0xFF;
  207548:	0e1b      	lsrs	r3, r3, #24
  20754a:	72cb      	strb	r3, [r1, #11]
      union {
        float real;
        uint32_t base;
      } u_force_landing_thrust;
      u_force_landing_thrust.real = this->force_landing_thrust;
      *(outbuffer + offset + 0) = (u_force_landing_thrust.base >> (8 * 0)) & 0xFF;
  20754c:	6903      	ldr	r3, [r0, #16]
  20754e:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_force_landing_thrust.base >> (8 * 1)) & 0xFF;
  207550:	0a1a      	lsrs	r2, r3, #8
  207552:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 2) = (u_force_landing_thrust.base >> (8 * 2)) & 0xFF;
  207554:	0c1a      	lsrs	r2, r3, #16
  207556:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 3) = (u_force_landing_thrust.base >> (8 * 3)) & 0xFF;
  207558:	0e1b      	lsrs	r3, r3, #24
  20755a:	73cb      	strb	r3, [r1, #15]
      offset += sizeof(this->force_landing_thrust);
      *(outbuffer + offset + 0) = (this->pwm_conversion_mode >> (8 * 0)) & 0xFF;
  20755c:	7d03      	ldrb	r3, [r0, #20]
  20755e:	740b      	strb	r3, [r1, #16]
      offset += sizeof(this->pwm_conversion_mode);
      *(outbuffer + offset + 0) = (this->motor_info_length >> (8 * 0)) & 0xFF;
  207560:	6983      	ldr	r3, [r0, #24]
  207562:	744b      	strb	r3, [r1, #17]
      *(outbuffer + offset + 1) = (this->motor_info_length >> (8 * 1)) & 0xFF;
  207564:	6983      	ldr	r3, [r0, #24]
  207566:	0a1b      	lsrs	r3, r3, #8
  207568:	748b      	strb	r3, [r1, #18]
      *(outbuffer + offset + 2) = (this->motor_info_length >> (8 * 2)) & 0xFF;
  20756a:	8b43      	ldrh	r3, [r0, #26]
  20756c:	74cb      	strb	r3, [r1, #19]
      *(outbuffer + offset + 3) = (this->motor_info_length >> (8 * 3)) & 0xFF;
  20756e:	7ec3      	ldrb	r3, [r0, #27]
  207570:	750b      	strb	r3, [r1, #20]
      offset += sizeof(this->motor_info_length);
      for( uint32_t i = 0; i < motor_info_length; i++){
  207572:	6983      	ldr	r3, [r0, #24]
  207574:	b1a3      	cbz	r3, 2075a0 <_ZNK17aerial_robot_msgs7PwmInfo9serializeEPh+0x88>
  207576:	4688      	mov	r8, r1
  207578:	4605      	mov	r5, r0
  20757a:	2400      	movs	r4, #0
  20757c:	4627      	mov	r7, r4
  20757e:	2615      	movs	r6, #21
      offset += this->motor_info[i].serialize(outbuffer + offset);
  207580:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  207582:	5903      	ldr	r3, [r0, r4]
  207584:	681b      	ldr	r3, [r3, #0]
  207586:	eb08 0106 	add.w	r1, r8, r6
  20758a:	4420      	add	r0, r4
  20758c:	4798      	blx	r3
  20758e:	4406      	add	r6, r0
      for( uint32_t i = 0; i < motor_info_length; i++){
  207590:	3701      	adds	r7, #1
  207592:	341c      	adds	r4, #28
  207594:	69ab      	ldr	r3, [r5, #24]
  207596:	42bb      	cmp	r3, r7
  207598:	d8f2      	bhi.n	207580 <_ZNK17aerial_robot_msgs7PwmInfo9serializeEPh+0x68>
      }
      return offset;
    }
  20759a:	4630      	mov	r0, r6
  20759c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      offset += sizeof(this->motor_info_length);
  2075a0:	2615      	movs	r6, #21
      return offset;
  2075a2:	e7fa      	b.n	20759a <_ZNK17aerial_robot_msgs7PwmInfo9serializeEPh+0x82>

002075a4 <_ZN17aerial_robot_msgs7PwmInfo7getTypeEv>:
        memcpy( &(this->motor_info[i]), &(this->st_motor_info), sizeof(aerial_robot_msgs::MotorInfo));
      }
     return offset;
    }

    const char * getType(){ return "aerial_robot_msgs/PwmInfo"; };
  2075a4:	4800      	ldr	r0, [pc, #0]	; (2075a8 <_ZN17aerial_robot_msgs7PwmInfo7getTypeEv+0x4>)
  2075a6:	4770      	bx	lr
  2075a8:	002179b8 	.word	0x002179b8

002075ac <_ZN17aerial_robot_msgs7PwmInfo6getMD5Ev>:
    const char * getMD5(){ return "4952c7bf6220f4619676d14a2e9d87d8"; };
  2075ac:	4800      	ldr	r0, [pc, #0]	; (2075b0 <_ZN17aerial_robot_msgs7PwmInfo6getMD5Ev+0x4>)
  2075ae:	4770      	bx	lr
  2075b0:	00217994 	.word	0x00217994

002075b4 <_ZNK6hydrus24PMatrixPseudoInverseUnit9serializeEPh>:
      int offset = 0;
      union {
        int16_t real;
        uint16_t base;
      } u_r;
      u_r.real = this->r;
  2075b4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      *(outbuffer + offset + 0) = (u_r.base >> (8 * 0)) & 0xFF;
  2075b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_r.base >> (8 * 1)) & 0xFF;
  2075ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
  2075be:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->r);
      union {
        int16_t real;
        uint16_t base;
      } u_p;
      u_p.real = this->p;
  2075c0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
      *(outbuffer + offset + 0) = (u_p.base >> (8 * 0)) & 0xFF;
  2075c4:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 1) = (u_p.base >> (8 * 1)) & 0xFF;
  2075c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
  2075ca:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->p);
      union {
        int16_t real;
        uint16_t base;
      } u_y;
      u_y.real = this->y;
  2075cc:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
  2075d0:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
  2075d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
  2075d6:	714b      	strb	r3, [r1, #5]
      offset += sizeof(this->y);
      return offset;
    }
  2075d8:	2006      	movs	r0, #6
  2075da:	4770      	bx	lr

002075dc <_ZN6hydrus24PMatrixPseudoInverseUnit11deserializeEPh>:
        int16_t real;
        uint16_t base;
      } u_r;
      u_r.base = 0;
      u_r.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_r.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2075dc:	784a      	ldrb	r2, [r1, #1]
  2075de:	780b      	ldrb	r3, [r1, #0]
  2075e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->r = u_r.real;
  2075e4:	8083      	strh	r3, [r0, #4]
        int16_t real;
        uint16_t base;
      } u_p;
      u_p.base = 0;
      u_p.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_p.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2075e6:	78ca      	ldrb	r2, [r1, #3]
  2075e8:	788b      	ldrb	r3, [r1, #2]
  2075ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->p = u_p.real;
  2075ee:	80c3      	strh	r3, [r0, #6]
        int16_t real;
        uint16_t base;
      } u_y;
      u_y.base = 0;
      u_y.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_y.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2075f0:	794a      	ldrb	r2, [r1, #5]
  2075f2:	790b      	ldrb	r3, [r1, #4]
  2075f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      this->y = u_y.real;
  2075f8:	8103      	strh	r3, [r0, #8]
      offset += sizeof(this->y);
     return offset;
    }
  2075fa:	2006      	movs	r0, #6
  2075fc:	4770      	bx	lr
	...

00207600 <_ZN6hydrus24PMatrixPseudoInverseUnit7getTypeEv>:

    const char * getType(){ return "hydrus/PMatrixPseudoInverseUnit"; };
  207600:	4800      	ldr	r0, [pc, #0]	; (207604 <_ZN6hydrus24PMatrixPseudoInverseUnit7getTypeEv+0x4>)
  207602:	4770      	bx	lr
  207604:	00217a38 	.word	0x00217a38

00207608 <_ZN6hydrus24PMatrixPseudoInverseUnit6getMD5Ev>:
    const char * getMD5(){ return "e6b0d87fcb05dfbea906fb98758f7fec"; };
  207608:	4800      	ldr	r0, [pc, #0]	; (20760c <_ZN6hydrus24PMatrixPseudoInverseUnit6getMD5Ev+0x4>)
  20760a:	4770      	bx	lr
  20760c:	00217a14 	.word	0x00217a14

00207610 <_ZNK6hydrus31PMatrixPseudoInverseWithInertia9serializeEPh>:
      pseudo_inverse_length(0), pseudo_inverse(NULL),
      inertia()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  207610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  207614:	4606      	mov	r6, r0
  207616:	4688      	mov	r8, r1
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->pseudo_inverse_length >> (8 * 0)) & 0xFF;
  207618:	6843      	ldr	r3, [r0, #4]
  20761a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->pseudo_inverse_length >> (8 * 1)) & 0xFF;
  20761c:	6843      	ldr	r3, [r0, #4]
  20761e:	0a1b      	lsrs	r3, r3, #8
  207620:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->pseudo_inverse_length >> (8 * 2)) & 0xFF;
  207622:	88c3      	ldrh	r3, [r0, #6]
  207624:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->pseudo_inverse_length >> (8 * 3)) & 0xFF;
  207626:	79c3      	ldrb	r3, [r0, #7]
  207628:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->pseudo_inverse_length);
      for( uint32_t i = 0; i < pseudo_inverse_length; i++){
  20762a:	6843      	ldr	r3, [r0, #4]
  20762c:	b303      	cbz	r3, 207670 <_ZNK6hydrus31PMatrixPseudoInverseWithInertia9serializeEPh+0x60>
  20762e:	2500      	movs	r5, #0
  207630:	462f      	mov	r7, r5
  207632:	2404      	movs	r4, #4
      offset += this->pseudo_inverse[i].serialize(outbuffer + offset);
  207634:	6970      	ldr	r0, [r6, #20]
  207636:	5943      	ldr	r3, [r0, r5]
  207638:	681b      	ldr	r3, [r3, #0]
  20763a:	eb08 0104 	add.w	r1, r8, r4
  20763e:	4428      	add	r0, r5
  207640:	4798      	blx	r3
  207642:	4404      	add	r4, r0
      for( uint32_t i = 0; i < pseudo_inverse_length; i++){
  207644:	3701      	adds	r7, #1
  207646:	350c      	adds	r5, #12
  207648:	6873      	ldr	r3, [r6, #4]
  20764a:	42bb      	cmp	r3, r7
  20764c:	d8f2      	bhi.n	207634 <_ZNK6hydrus31PMatrixPseudoInverseWithInertia9serializeEPh+0x24>
  20764e:	f106 0218 	add.w	r2, r6, #24
  207652:	4620      	mov	r0, r4
  207654:	4444      	add	r4, r8
  207656:	3624      	adds	r6, #36	; 0x24
      for( uint32_t i = 0; i < 6; i++){
      union {
        int16_t real;
        uint16_t base;
      } u_inertiai;
      u_inertiai.real = this->inertia[i];
  207658:	f932 3b02 	ldrsh.w	r3, [r2], #2
      *(outbuffer + offset + 0) = (u_inertiai.base >> (8 * 0)) & 0xFF;
  20765c:	7023      	strb	r3, [r4, #0]
      *(outbuffer + offset + 1) = (u_inertiai.base >> (8 * 1)) & 0xFF;
  20765e:	f3c3 2307 	ubfx	r3, r3, #8, #8
  207662:	7063      	strb	r3, [r4, #1]
  207664:	3402      	adds	r4, #2
      for( uint32_t i = 0; i < 6; i++){
  207666:	42b2      	cmp	r2, r6
  207668:	d1f6      	bne.n	207658 <_ZNK6hydrus31PMatrixPseudoInverseWithInertia9serializeEPh+0x48>
      offset += sizeof(this->inertia[i]);
      }
      return offset;
    }
  20766a:	300c      	adds	r0, #12
  20766c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      offset += sizeof(this->pseudo_inverse_length);
  207670:	2404      	movs	r4, #4
  207672:	e7ec      	b.n	20764e <_ZNK6hydrus31PMatrixPseudoInverseWithInertia9serializeEPh+0x3e>

00207674 <_ZN6hydrus31PMatrixPseudoInverseWithInertia7getTypeEv>:
      offset += sizeof(this->inertia[i]);
      }
     return offset;
    }

    const char * getType(){ return "hydrus/PMatrixPseudoInverseWithInertia"; };
  207674:	4800      	ldr	r0, [pc, #0]	; (207678 <_ZN6hydrus31PMatrixPseudoInverseWithInertia7getTypeEv+0x4>)
  207676:	4770      	bx	lr
  207678:	00217a7c 	.word	0x00217a7c

0020767c <_ZN6hydrus31PMatrixPseudoInverseWithInertia6getMD5Ev>:
    const char * getMD5(){ return "e67a441fd1d34930b8789fd5b10a7fe7"; };
  20767c:	4800      	ldr	r0, [pc, #0]	; (207680 <_ZN6hydrus31PMatrixPseudoInverseWithInertia6getMD5Ev+0x4>)
  20767e:	4770      	bx	lr
  207680:	00217a58 	.word	0x00217a58

00207684 <_ZN18AttitudeController15rpyGainCallbackERKN17aerial_robot_msgs17RollPitchYawTermsE>:

  //ROS_ERROR("[d_board]: min_thrust: %f, max_thrust: %f, min_duty: %f, max_duty: %f, abs_max_duty: %f", min_thrust_, max_thrust_, min_duty_, max_duty_, abs_max_duty_);
}

void AttitudeController::rpyGainCallback( const aerial_robot_msgs::RollPitchYawTerms &gain_msg)
{
  207684:	b410      	push	{r4}
  if(motor_number_ == 0) return; //not be activated
  207686:	f890 419d 	ldrb.w	r4, [r0, #413]	; 0x19d
  20768a:	b114      	cbz	r4, 207692 <_ZN18AttitudeController15rpyGainCallbackERKN17aerial_robot_msgs17RollPitchYawTermsE+0xe>
    {
      if(motor_number_ > 0) ROS_ERROR("rpy gain: motor number is not identical between fc:%d and pc:%d", motor_number_, (int)gain_msg.motors.size());
      return;
    }
#else
  if(gain_msg.motors_length != motor_number_) return;
  20768c:	684b      	ldr	r3, [r1, #4]
  20768e:	42a3      	cmp	r3, r4
  207690:	d002      	beq.n	207698 <_ZN18AttitudeController15rpyGainCallbackERKN17aerial_robot_msgs17RollPitchYawTermsE+0x14>
      p_lqi_gain_[i][Y] = gain_msg.motors[i].pitch_p / 1000.0f;
      i_lqi_gain_[i][Y] = gain_msg.motors[i].pitch_i / 1000.0f;
      d_lqi_gain_[i][Y] = gain_msg.motors[i].pitch_d / 1000.0f;
      d_lqi_gain_[i][Z] = gain_msg.motors[i].yaw_d / 1000.0f;
    }
}
  207692:	f85d 4b04 	ldr.w	r4, [sp], #4
  207696:	4770      	bx	lr
  for(int i = 0; i < motor_number_; i++)
  207698:	2c00      	cmp	r4, #0
  20769a:	d0fa      	beq.n	207692 <_ZN18AttitudeController15rpyGainCallbackERKN17aerial_robot_msgs17RollPitchYawTermsE+0xe>
  20769c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  2076a0:	00a4      	lsls	r4, r4, #2
  2076a2:	2300      	movs	r3, #0
      p_lqi_gain_[i][X] = gain_msg.motors[i].roll_p / 1000.0f;
  2076a4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 20775c <_ZN18AttitudeController15rpyGainCallbackERKN17aerial_robot_msgs17RollPitchYawTermsE+0xd8>
  2076a8:	69ca      	ldr	r2, [r1, #28]
  2076aa:	441a      	add	r2, r3
  2076ac:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
  2076b0:	ee07 2a10 	vmov	s14, r2
  2076b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  2076b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  2076bc:	edc0 6a8b 	vstr	s13, [r0, #556]	; 0x22c
      i_lqi_gain_[i][X] = gain_msg.motors[i].roll_i / 1000.0f;
  2076c0:	69ca      	ldr	r2, [r1, #28]
  2076c2:	441a      	add	r2, r3
  2076c4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  2076c8:	ee07 2a10 	vmov	s14, r2
  2076cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  2076d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
  2076d4:	edc0 6aa9 	vstr	s13, [r0, #676]	; 0x2a4
      d_lqi_gain_[i][X] = gain_msg.motors[i].roll_d / 1000.0f;
  2076d8:	69ca      	ldr	r2, [r1, #28]
  2076da:	441a      	add	r2, r3
  2076dc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  2076e0:	ee07 2a10 	vmov	s14, r2
  2076e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  2076e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  2076ec:	edc0 6ac7 	vstr	s13, [r0, #796]	; 0x31c
      p_lqi_gain_[i][Y] = gain_msg.motors[i].pitch_p / 1000.0f;
  2076f0:	69ca      	ldr	r2, [r1, #28]
  2076f2:	441a      	add	r2, r3
  2076f4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
  2076f8:	ee07 2a10 	vmov	s14, r2
  2076fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  207700:	eec7 6a27 	vdiv.f32	s13, s14, s15
  207704:	edc0 6a8c 	vstr	s13, [r0, #560]	; 0x230
      i_lqi_gain_[i][Y] = gain_msg.motors[i].pitch_i / 1000.0f;
  207708:	69ca      	ldr	r2, [r1, #28]
  20770a:	441a      	add	r2, r3
  20770c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
  207710:	ee07 2a10 	vmov	s14, r2
  207714:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  207718:	eec7 6a27 	vdiv.f32	s13, s14, s15
  20771c:	edc0 6aaa 	vstr	s13, [r0, #680]	; 0x2a8
      d_lqi_gain_[i][Y] = gain_msg.motors[i].pitch_d / 1000.0f;
  207720:	69ca      	ldr	r2, [r1, #28]
  207722:	441a      	add	r2, r3
  207724:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
  207728:	ee07 2a10 	vmov	s14, r2
  20772c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  207730:	eec7 6a27 	vdiv.f32	s13, s14, s15
  207734:	edc0 6ac8 	vstr	s13, [r0, #800]	; 0x320
      d_lqi_gain_[i][Z] = gain_msg.motors[i].yaw_d / 1000.0f;
  207738:	69ca      	ldr	r2, [r1, #28]
  20773a:	441a      	add	r2, r3
  20773c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
  207740:	ee07 2a10 	vmov	s14, r2
  207744:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  207748:	eec7 6a27 	vdiv.f32	s13, s14, s15
  20774c:	edc0 6ac9 	vstr	s13, [r0, #804]	; 0x324
  207750:	3314      	adds	r3, #20
  207752:	300c      	adds	r0, #12
  for(int i = 0; i < motor_number_; i++)
  207754:	42a3      	cmp	r3, r4
  207756:	d1a7      	bne.n	2076a8 <_ZN18AttitudeController15rpyGainCallbackERKN17aerial_robot_msgs17RollPitchYawTermsE+0x24>
  207758:	e79b      	b.n	207692 <_ZN18AttitudeController15rpyGainCallbackERKN17aerial_robot_msgs17RollPitchYawTermsE+0xe>
  20775a:	bf00      	nop
  20775c:	447a0000 	.word	0x447a0000

00207760 <_ZN18AttitudeController15pwmTestCallbackERKN8std_msgs7Float32E>:

void AttitudeController::pwmTestCallback(const std_msgs::Float32& pwm_msg)
{
  pwm_test_flag_ = true;
  207760:	2301      	movs	r3, #1
  207762:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
  start_control_flag_ = true;
  207766:	f880 319e 	strb.w	r3, [r0, #414]	; 0x19e
  pwm_test_value_ = pwm_msg.data; //2000ms
  20776a:	684b      	ldr	r3, [r1, #4]
  20776c:	f200 502c 	addw	r0, r0, #1324	; 0x52c
  207770:	6003      	str	r3, [r0, #0]
  207772:	4770      	bx	lr

00207774 <_ZN18AttitudeController22pMatrixInertiaCallbackERKN6hydrus31PMatrixPseudoInverseWithInertiaE>:
}


void AttitudeController::pMatrixInertiaCallback(const hydrus::PMatrixPseudoInverseWithInertia& msg)
{
  207774:	b430      	push	{r4, r5}
    {
      if(motor_number_ > 0) ROS_ERROR("p matrix pseudo inverse and inertia commnd: motor number is not identical between fc and pc");
      return;
    }
#else
  if(msg.pseudo_inverse_length != motor_number_) return;
  207776:	f890 519d 	ldrb.w	r5, [r0, #413]	; 0x19d
  20777a:	684b      	ldr	r3, [r1, #4]
  20777c:	42ab      	cmp	r3, r5
  20777e:	d001      	beq.n	207784 <_ZN18AttitudeController22pMatrixInertiaCallbackERKN6hydrus31PMatrixPseudoInverseWithInertiaE+0x10>

  /* inertia */
  inertia_ = Matrix3f(msg.inertia[0] * 0.001f, msg.inertia[3] * 0.001f, msg.inertia[5] * 0.001f,
                      msg.inertia[3] * 0.001f, msg.inertia[1] * 0.001f, msg.inertia[4] * 0.001f,
                      msg.inertia[5] * 0.001f, msg.inertia[4] * 0.001f, msg.inertia[2] * 0.001f);
}
  207780:	bc30      	pop	{r4, r5}
  207782:	4770      	bx	lr
  for(int i = 0; i < motor_number_; i ++)
  207784:	b36d      	cbz	r5, 2077e2 <_ZN18AttitudeController22pMatrixInertiaCallbackERKN6hydrus31PMatrixPseudoInverseWithInertiaE+0x6e>
  207786:	4603      	mov	r3, r0
  207788:	eb00 1505 	add.w	r5, r0, r5, lsl #4
  20778c:	2200      	movs	r2, #0
      p_matrix_pseudo_inverse_[i][0] = msg.pseudo_inverse[i].r / 1000.0f;
  20778e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 207890 <_ZN18AttitudeController22pMatrixInertiaCallbackERKN6hydrus31PMatrixPseudoInverseWithInertiaE+0x11c>
  207792:	694c      	ldr	r4, [r1, #20]
  207794:	4414      	add	r4, r2
  207796:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
  20779a:	ee07 4a90 	vmov	s15, r4
  20779e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  2077a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
  2077a6:	edc3 6af9 	vstr	s13, [r3, #996]	; 0x3e4
      p_matrix_pseudo_inverse_[i][1] = msg.pseudo_inverse[i].p / 1000.0f;
  2077aa:	694c      	ldr	r4, [r1, #20]
  2077ac:	4414      	add	r4, r2
  2077ae:	f9b4 4006 	ldrsh.w	r4, [r4, #6]
  2077b2:	ee07 4a90 	vmov	s15, r4
  2077b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  2077ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
  2077be:	edc3 6afa 	vstr	s13, [r3, #1000]	; 0x3e8
      p_matrix_pseudo_inverse_[i][2] = msg.pseudo_inverse[i].y / 1000.0f;
  2077c2:	694c      	ldr	r4, [r1, #20]
  2077c4:	4414      	add	r4, r2
  2077c6:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  2077ca:	ee07 4a90 	vmov	s15, r4
  2077ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  2077d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
  2077d6:	edc3 6afb 	vstr	s13, [r3, #1004]	; 0x3ec
  2077da:	320c      	adds	r2, #12
  2077dc:	3310      	adds	r3, #16
  for(int i = 0; i < motor_number_; i ++)
  2077de:	42ab      	cmp	r3, r5
  2077e0:	d1d7      	bne.n	207792 <_ZN18AttitudeController22pMatrixInertiaCallbackERKN6hydrus31PMatrixPseudoInverseWithInertiaE+0x1e>
  inertia_ = Matrix3f(msg.inertia[0] * 0.001f, msg.inertia[3] * 0.001f, msg.inertia[5] * 0.001f,
  2077e2:	f9b1 301e 	ldrsh.w	r3, [r1, #30]
  2077e6:	ee06 3a90 	vmov	s13, r3
  2077ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  2077ee:	ed9f 6a29 	vldr	s12, [pc, #164]	; 207894 <_ZN18AttitudeController22pMatrixInertiaCallbackERKN6hydrus31PMatrixPseudoInverseWithInertiaE+0x120>
  2077f2:	ee66 6a86 	vmul.f32	s13, s13, s12
  2077f6:	f9b1 3022 	ldrsh.w	r3, [r1, #34]	; 0x22
  2077fa:	ee07 3a10 	vmov	s14, r3
  2077fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  207802:	ee27 7a06 	vmul.f32	s14, s14, s12
  207806:	f9b1 301a 	ldrsh.w	r3, [r1, #26]
  20780a:	ee05 3a10 	vmov	s10, r3
  20780e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
  207812:	ee25 5a06 	vmul.f32	s10, s10, s12
  207816:	f9b1 3020 	ldrsh.w	r3, [r1, #32]
  20781a:	ee07 3a90 	vmov	s15, r3
  20781e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  207822:	ee67 7a86 	vmul.f32	s15, s15, s12
  207826:	f9b1 301c 	ldrsh.w	r3, [r1, #28]
  20782a:	ee05 3a90 	vmov	s11, r3
  20782e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
  207832:	ee65 5a86 	vmul.f32	s11, s11, s12
  207836:	f200 4384 	addw	r3, r0, #1156	; 0x484
  20783a:	f9b1 2018 	ldrsh.w	r2, [r1, #24]
  20783e:	ee04 2a90 	vmov	s9, r2
  207842:	eef8 4ae4 	vcvt.f32.s32	s9, s9
  207846:	ee24 6a86 	vmul.f32	s12, s9, s12
  20784a:	ed83 6a00 	vstr	s12, [r3]
  20784e:	f500 6391 	add.w	r3, r0, #1160	; 0x488
  207852:	edc3 6a00 	vstr	s13, [r3]
  207856:	f200 438c 	addw	r3, r0, #1164	; 0x48c
  20785a:	ed83 7a00 	vstr	s14, [r3]
  20785e:	f500 6392 	add.w	r3, r0, #1168	; 0x490
  207862:	edc3 6a00 	vstr	s13, [r3]
  207866:	f200 4394 	addw	r3, r0, #1172	; 0x494
  20786a:	ed83 5a00 	vstr	s10, [r3]
  20786e:	f500 6393 	add.w	r3, r0, #1176	; 0x498
  207872:	edc3 7a00 	vstr	s15, [r3]
  207876:	f200 439c 	addw	r3, r0, #1180	; 0x49c
  20787a:	ed83 7a00 	vstr	s14, [r3]
  20787e:	f500 6394 	add.w	r3, r0, #1184	; 0x4a0
  207882:	edc3 7a00 	vstr	s15, [r3]
  207886:	f200 40a4 	addw	r0, r0, #1188	; 0x4a4
  20788a:	edc0 5a00 	vstr	s11, [r0]
  20788e:	e777      	b.n	207780 <_ZN18AttitudeController22pMatrixInertiaCallbackERKN6hydrus31PMatrixPseudoInverseWithInertiaE+0xc>
  207890:	447a0000 	.word	0x447a0000
  207894:	3a83126f 	.word	0x3a83126f

00207898 <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE15getEndpointTypeEv>:
  }
  207898:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  20789a:	4770      	bx	lr

0020789c <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE10getMsgTypeEv>:
  }
  20789c:	4800      	ldr	r0, [pc, #0]	; (2078a0 <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE10getMsgTypeEv+0x4>)
  20789e:	4770      	bx	lr
  2078a0:	00217a7c 	.word	0x00217a7c

002078a4 <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE9getMsgMD5Ev>:
  }
  2078a4:	4800      	ldr	r0, [pc, #0]	; (2078a8 <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE9getMsgMD5Ev+0x4>)
  2078a6:	4770      	bx	lr
  2078a8:	00217a58 	.word	0x00217a58

002078ac <_ZN3ros10SubscriberIN8std_msgs7Float32E18AttitudeControllerE8callbackEPh>:
  virtual void callback(unsigned char* data)
  2078ac:	b510      	push	{r4, lr}
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2078ae:	784a      	ldrb	r2, [r1, #1]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2078b0:	788b      	ldrb	r3, [r1, #2]
  2078b2:	041b      	lsls	r3, r3, #16
  2078b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  2078b8:	780a      	ldrb	r2, [r1, #0]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2078ba:	4313      	orrs	r3, r2
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  2078bc:	78ca      	ldrb	r2, [r1, #3]
      this->data = u_data.real;
  2078be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  2078c2:	6103      	str	r3, [r0, #16]
    (obj_->*cb_)(msg);
  2078c4:	6983      	ldr	r3, [r0, #24]
  2078c6:	f013 0f01 	tst.w	r3, #1
  2078ca:	d00b      	beq.n	2078e4 <_ZN3ros10SubscriberIN8std_msgs7Float32E18AttitudeControllerE8callbackEPh+0x38>
  2078cc:	105a      	asrs	r2, r3, #1
  2078ce:	69c1      	ldr	r1, [r0, #28]
  2078d0:	5889      	ldr	r1, [r1, r2]
  2078d2:	6942      	ldr	r2, [r0, #20]
  2078d4:	588a      	ldr	r2, [r1, r2]
  2078d6:	69c4      	ldr	r4, [r0, #28]
  2078d8:	f100 010c 	add.w	r1, r0, #12
  2078dc:	eb04 0063 	add.w	r0, r4, r3, asr #1
  2078e0:	4790      	blx	r2
  2078e2:	bd10      	pop	{r4, pc}
  2078e4:	6942      	ldr	r2, [r0, #20]
  2078e6:	e7f6      	b.n	2078d6 <_ZN3ros10SubscriberIN8std_msgs7Float32E18AttitudeControllerE8callbackEPh+0x2a>

002078e8 <_ZN3ros10SubscriberIN8std_msgs7Float32E18AttitudeControllerE15getEndpointTypeEv>:
  }
  2078e8:	6a00      	ldr	r0, [r0, #32]
  2078ea:	4770      	bx	lr

002078ec <_ZN3ros10SubscriberIN8std_msgs7Float32E18AttitudeControllerE10getMsgTypeEv>:
  }
  2078ec:	4800      	ldr	r0, [pc, #0]	; (2078f0 <_ZN3ros10SubscriberIN8std_msgs7Float32E18AttitudeControllerE10getMsgTypeEv+0x4>)
  2078ee:	4770      	bx	lr
  2078f0:	00217ac8 	.word	0x00217ac8

002078f4 <_ZN3ros10SubscriberIN8std_msgs7Float32E18AttitudeControllerE9getMsgMD5Ev>:
  }
  2078f4:	4800      	ldr	r0, [pc, #0]	; (2078f8 <_ZN3ros10SubscriberIN8std_msgs7Float32E18AttitudeControllerE9getMsgMD5Ev+0x4>)
  2078f6:	4770      	bx	lr
  2078f8:	00217aa4 	.word	0x00217aa4

002078fc <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE15getEndpointTypeEv>:
  }
  2078fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  2078fe:	4770      	bx	lr

00207900 <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE10getMsgTypeEv>:
  }
  207900:	4800      	ldr	r0, [pc, #0]	; (207904 <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE10getMsgTypeEv+0x4>)
  207902:	4770      	bx	lr
  207904:	00217970 	.word	0x00217970

00207908 <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE9getMsgMD5Ev>:
  }
  207908:	4800      	ldr	r0, [pc, #0]	; (20790c <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE9getMsgMD5Ev+0x4>)
  20790a:	4770      	bx	lr
  20790c:	0021794c 	.word	0x0021794c

00207910 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE15getEndpointTypeEv>:
  }
  207910:	6d40      	ldr	r0, [r0, #84]	; 0x54
  207912:	4770      	bx	lr

00207914 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE10getMsgTypeEv>:
  }
  207914:	4800      	ldr	r0, [pc, #0]	; (207918 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE10getMsgTypeEv+0x4>)
  207916:	4770      	bx	lr
  207918:	002179b8 	.word	0x002179b8

0020791c <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE9getMsgMD5Ev>:
  }
  20791c:	4800      	ldr	r0, [pc, #0]	; (207920 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE9getMsgMD5Ev+0x4>)
  20791e:	4770      	bx	lr
  207920:	00217994 	.word	0x00217994

00207924 <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE15getEndpointTypeEv>:
  }
  207924:	6b40      	ldr	r0, [r0, #52]	; 0x34
  207926:	4770      	bx	lr

00207928 <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE10getMsgTypeEv>:
  }
  207928:	4800      	ldr	r0, [pc, #0]	; (20792c <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE10getMsgTypeEv+0x4>)
  20792a:	4770      	bx	lr
  20792c:	002178e0 	.word	0x002178e0

00207930 <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE9getMsgMD5Ev>:
  }
  207930:	4800      	ldr	r0, [pc, #0]	; (207934 <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE9getMsgMD5Ev+0x4>)
  207932:	4770      	bx	lr
  207934:	002178bc 	.word	0x002178bc

00207938 <_ZN17aerial_robot_base4Pwms11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  207938:	b570      	push	{r4, r5, r6, lr}
  20793a:	4605      	mov	r5, r0
  20793c:	460c      	mov	r4, r1
      uint32_t motor_value_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20793e:	780b      	ldrb	r3, [r1, #0]
      motor_value_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  207940:	784a      	ldrb	r2, [r1, #1]
      motor_value_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  207942:	788e      	ldrb	r6, [r1, #2]
  207944:	0436      	lsls	r6, r6, #16
  207946:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  20794a:	431e      	orrs	r6, r3
      motor_value_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20794c:	78cb      	ldrb	r3, [r1, #3]
  20794e:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(motor_value_lengthT > motor_value_length)
  207952:	6843      	ldr	r3, [r0, #4]
  207954:	429e      	cmp	r6, r3
  207956:	d814      	bhi.n	207982 <_ZN17aerial_robot_base4Pwms11deserializeEPh+0x4a>
      motor_value_length = motor_value_lengthT;
  207958:	606e      	str	r6, [r5, #4]
      for( uint32_t i = 0; i < motor_value_length; i++){
  20795a:	b1c6      	cbz	r6, 20798e <_ZN17aerial_robot_base4Pwms11deserializeEPh+0x56>
  20795c:	4621      	mov	r1, r4
  20795e:	2200      	movs	r2, #0
  207960:	2004      	movs	r0, #4
      this->st_motor_value =  ((uint16_t) (*(inbuffer + offset)));
  207962:	790b      	ldrb	r3, [r1, #4]
  207964:	812b      	strh	r3, [r5, #8]
      this->st_motor_value |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207966:	794c      	ldrb	r4, [r1, #5]
  207968:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  20796c:	812b      	strh	r3, [r5, #8]
  20796e:	3002      	adds	r0, #2
        memcpy( &(this->motor_value[i]), &(this->st_motor_value), sizeof(uint16_t));
  207970:	68ec      	ldr	r4, [r5, #12]
  207972:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
      for( uint32_t i = 0; i < motor_value_length; i++){
  207976:	3201      	adds	r2, #1
  207978:	3102      	adds	r1, #2
  20797a:	686b      	ldr	r3, [r5, #4]
  20797c:	4293      	cmp	r3, r2
  20797e:	d8f0      	bhi.n	207962 <_ZN17aerial_robot_base4Pwms11deserializeEPh+0x2a>
  207980:	bd70      	pop	{r4, r5, r6, pc}
        this->motor_value = (uint16_t*)realloc(this->motor_value, motor_value_lengthT * sizeof(uint16_t));
  207982:	0071      	lsls	r1, r6, #1
  207984:	68c0      	ldr	r0, [r0, #12]
  207986:	f00f f831 	bl	2169ec <realloc>
  20798a:	60e8      	str	r0, [r5, #12]
  20798c:	e7e4      	b.n	207958 <_ZN17aerial_robot_base4Pwms11deserializeEPh+0x20>
      offset += sizeof(this->motor_value_length);
  20798e:	2004      	movs	r0, #4
    }
  207990:	bd70      	pop	{r4, r5, r6, pc}

00207992 <_ZN17aerial_robot_msgs15FourAxisCommand11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  207992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  207994:	4605      	mov	r5, r0
  207996:	460c      	mov	r4, r1
  207998:	3004      	adds	r0, #4
  20799a:	f105 0710 	add.w	r7, r5, #16
  20799e:	460a      	mov	r2, r1
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2079a0:	7856      	ldrb	r6, [r2, #1]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2079a2:	7893      	ldrb	r3, [r2, #2]
  2079a4:	041b      	lsls	r3, r3, #16
  2079a6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  2079aa:	7816      	ldrb	r6, [r2, #0]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2079ac:	4333      	orrs	r3, r6
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  2079ae:	78d6      	ldrb	r6, [r2, #3]
      this->angles[i] = u_anglesi.real;
  2079b0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
  2079b4:	f840 3b04 	str.w	r3, [r0], #4
  2079b8:	3204      	adds	r2, #4
      for( uint32_t i = 0; i < 3; i++){
  2079ba:	42b8      	cmp	r0, r7
  2079bc:	d1f0      	bne.n	2079a0 <_ZN17aerial_robot_msgs15FourAxisCommand11deserializeEPh+0xe>
      uint32_t base_throttle_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  2079be:	7b0b      	ldrb	r3, [r1, #12]
      base_throttle_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  2079c0:	7b4a      	ldrb	r2, [r1, #13]
      base_throttle_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  2079c2:	7b8e      	ldrb	r6, [r1, #14]
  2079c4:	0436      	lsls	r6, r6, #16
  2079c6:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  2079ca:	431e      	orrs	r6, r3
      base_throttle_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  2079cc:	7bcb      	ldrb	r3, [r1, #15]
  2079ce:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(base_throttle_lengthT > base_throttle_length)
  2079d2:	692b      	ldr	r3, [r5, #16]
  2079d4:	429e      	cmp	r6, r3
  2079d6:	d818      	bhi.n	207a0a <_ZN17aerial_robot_msgs15FourAxisCommand11deserializeEPh+0x78>
      base_throttle_length = base_throttle_lengthT;
  2079d8:	612e      	str	r6, [r5, #16]
      for( uint32_t i = 0; i < base_throttle_length; i++){
  2079da:	b1e6      	cbz	r6, 207a16 <_ZN17aerial_robot_msgs15FourAxisCommand11deserializeEPh+0x84>
  2079dc:	2200      	movs	r2, #0
  2079de:	2010      	movs	r0, #16
      u_st_base_throttle.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2079e0:	7c61      	ldrb	r1, [r4, #17]
      u_st_base_throttle.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2079e2:	7ca3      	ldrb	r3, [r4, #18]
  2079e4:	041b      	lsls	r3, r3, #16
  2079e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_base_throttle.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  2079ea:	7c21      	ldrb	r1, [r4, #16]
      u_st_base_throttle.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2079ec:	430b      	orrs	r3, r1
      u_st_base_throttle.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  2079ee:	7ce1      	ldrb	r1, [r4, #19]
  2079f0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_base_throttle = u_st_base_throttle.real;
  2079f4:	616b      	str	r3, [r5, #20]
  2079f6:	3004      	adds	r0, #4
        memcpy( &(this->base_throttle[i]), &(this->st_base_throttle), sizeof(float));
  2079f8:	69a9      	ldr	r1, [r5, #24]
  2079fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < base_throttle_length; i++){
  2079fe:	3201      	adds	r2, #1
  207a00:	3404      	adds	r4, #4
  207a02:	692b      	ldr	r3, [r5, #16]
  207a04:	4293      	cmp	r3, r2
  207a06:	d8eb      	bhi.n	2079e0 <_ZN17aerial_robot_msgs15FourAxisCommand11deserializeEPh+0x4e>
  207a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        this->base_throttle = (float*)realloc(this->base_throttle, base_throttle_lengthT * sizeof(float));
  207a0a:	00b1      	lsls	r1, r6, #2
  207a0c:	69a8      	ldr	r0, [r5, #24]
  207a0e:	f00e ffed 	bl	2169ec <realloc>
  207a12:	61a8      	str	r0, [r5, #24]
  207a14:	e7e0      	b.n	2079d8 <_ZN17aerial_robot_msgs15FourAxisCommand11deserializeEPh+0x46>
      offset += sizeof(this->base_throttle_length);
  207a16:	2010      	movs	r0, #16
    }
  207a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00207a1a <_ZN6hydrus31PMatrixPseudoInverseWithInertia11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  207a1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  207a1e:	4604      	mov	r4, r0
  207a20:	460d      	mov	r5, r1
      uint32_t pseudo_inverse_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  207a22:	780b      	ldrb	r3, [r1, #0]
      pseudo_inverse_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  207a24:	784a      	ldrb	r2, [r1, #1]
      pseudo_inverse_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  207a26:	788e      	ldrb	r6, [r1, #2]
  207a28:	0436      	lsls	r6, r6, #16
  207a2a:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  207a2e:	431e      	orrs	r6, r3
      pseudo_inverse_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  207a30:	78cb      	ldrb	r3, [r1, #3]
  207a32:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(pseudo_inverse_lengthT > pseudo_inverse_length)
  207a36:	6843      	ldr	r3, [r0, #4]
  207a38:	429e      	cmp	r6, r3
  207a3a:	d842      	bhi.n	207ac2 <_ZN6hydrus31PMatrixPseudoInverseWithInertia11deserializeEPh+0xa8>
      pseudo_inverse_length = pseudo_inverse_lengthT;
  207a3c:	6066      	str	r6, [r4, #4]
      for( uint32_t i = 0; i < pseudo_inverse_length; i++){
  207a3e:	2e00      	cmp	r6, #0
  207a40:	d047      	beq.n	207ad2 <_ZN6hydrus31PMatrixPseudoInverseWithInertia11deserializeEPh+0xb8>
  207a42:	462b      	mov	r3, r5
  207a44:	2200      	movs	r2, #0
  207a46:	4617      	mov	r7, r2
  207a48:	2104      	movs	r1, #4
        memcpy( &(this->pseudo_inverse[i]), &(this->st_pseudo_inverse), sizeof(hydrus::PMatrixPseudoInverseUnit));
  207a4a:	f104 0608 	add.w	r6, r4, #8
      u_r.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207a4e:	f893 e005 	ldrb.w	lr, [r3, #5]
  207a52:	7918      	ldrb	r0, [r3, #4]
  207a54:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
      this->r = u_r.real;
  207a58:	81a0      	strh	r0, [r4, #12]
      u_p.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207a5a:	f893 e007 	ldrb.w	lr, [r3, #7]
  207a5e:	7998      	ldrb	r0, [r3, #6]
  207a60:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
      this->p = u_p.real;
  207a64:	81e0      	strh	r0, [r4, #14]
      u_y.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207a66:	f893 e009 	ldrb.w	lr, [r3, #9]
  207a6a:	7a18      	ldrb	r0, [r3, #8]
  207a6c:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
      this->y = u_y.real;
  207a70:	8220      	strh	r0, [r4, #16]
      offset += this->st_pseudo_inverse.deserialize(inbuffer + offset);
  207a72:	3106      	adds	r1, #6
        memcpy( &(this->pseudo_inverse[i]), &(this->st_pseudo_inverse), sizeof(hydrus::PMatrixPseudoInverseUnit));
  207a74:	f8d4 e014 	ldr.w	lr, [r4, #20]
  207a78:	eb0e 0002 	add.w	r0, lr, r2
  207a7c:	f8d6 9000 	ldr.w	r9, [r6]
  207a80:	f8d6 8004 	ldr.w	r8, [r6, #4]
  207a84:	f8d6 c008 	ldr.w	ip, [r6, #8]
  207a88:	f84e 9002 	str.w	r9, [lr, r2]
  207a8c:	f8c0 8004 	str.w	r8, [r0, #4]
  207a90:	f8c0 c008 	str.w	ip, [r0, #8]
      for( uint32_t i = 0; i < pseudo_inverse_length; i++){
  207a94:	3701      	adds	r7, #1
  207a96:	3306      	adds	r3, #6
  207a98:	320c      	adds	r2, #12
  207a9a:	6860      	ldr	r0, [r4, #4]
  207a9c:	42b8      	cmp	r0, r7
  207a9e:	d8d6      	bhi.n	207a4e <_ZN6hydrus31PMatrixPseudoInverseWithInertia11deserializeEPh+0x34>
  207aa0:	4608      	mov	r0, r1
  207aa2:	4429      	add	r1, r5
  207aa4:	f104 0218 	add.w	r2, r4, #24
  207aa8:	3424      	adds	r4, #36	; 0x24
      u_inertiai.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207aaa:	784d      	ldrb	r5, [r1, #1]
  207aac:	f811 3b02 	ldrb.w	r3, [r1], #2
  207ab0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
      this->inertia[i] = u_inertiai.real;
  207ab4:	f822 3b02 	strh.w	r3, [r2], #2
      for( uint32_t i = 0; i < 6; i++){
  207ab8:	42a2      	cmp	r2, r4
  207aba:	d1f6      	bne.n	207aaa <_ZN6hydrus31PMatrixPseudoInverseWithInertia11deserializeEPh+0x90>
    }
  207abc:	300c      	adds	r0, #12
  207abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        this->pseudo_inverse = (hydrus::PMatrixPseudoInverseUnit*)realloc(this->pseudo_inverse, pseudo_inverse_lengthT * sizeof(hydrus::PMatrixPseudoInverseUnit));
  207ac2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
  207ac6:	0089      	lsls	r1, r1, #2
  207ac8:	6940      	ldr	r0, [r0, #20]
  207aca:	f00e ff8f 	bl	2169ec <realloc>
  207ace:	6160      	str	r0, [r4, #20]
  207ad0:	e7b4      	b.n	207a3c <_ZN6hydrus31PMatrixPseudoInverseWithInertia11deserializeEPh+0x22>
      offset += sizeof(this->pseudo_inverse_length);
  207ad2:	2104      	movs	r1, #4
  207ad4:	e7e4      	b.n	207aa0 <_ZN6hydrus31PMatrixPseudoInverseWithInertia11deserializeEPh+0x86>
	...

00207ad8 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE>:
{
  207ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  207adc:	ed2d 8b02 	vpush	{d8}
  if(!start_control_flag_ || force_landing_flag_) return; //do not receive command
  207ae0:	f890 319e 	ldrb.w	r3, [r0, #414]	; 0x19e
  207ae4:	2b00      	cmp	r3, #0
  207ae6:	f000 8082 	beq.w	207bee <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x116>
  207aea:	f890 31a1 	ldrb.w	r3, [r0, #417]	; 0x1a1
  207aee:	2b00      	cmp	r3, #0
  207af0:	d17d      	bne.n	207bee <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x116>
  if(!failsafe_) failsafe_ = true;
  207af2:	f890 3530 	ldrb.w	r3, [r0, #1328]	; 0x530
  207af6:	b913      	cbnz	r3, 207afe <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x26>
  207af8:	2301      	movs	r3, #1
  207afa:	f880 3530 	strb.w	r3, [r0, #1328]	; 0x530
  207afe:	460d      	mov	r5, r1
  207b00:	4604      	mov	r4, r0
  flight_command_last_stamp_ = HAL_GetTick();
  207b02:	f007 fecf 	bl	20f8a4 <HAL_GetTick>
  207b06:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
  target_angle_[X] = cmd_msg.angles[0];
  207b0a:	edd5 7a01 	vldr	s15, [r5, #4]
  207b0e:	edc4 7a69 	vstr	s15, [r4, #420]	; 0x1a4
  target_angle_[Y] = cmd_msg.angles[1];
  207b12:	ed95 8a02 	vldr	s16, [r5, #8]
  207b16:	ed84 8a6a 	vstr	s16, [r4, #424]	; 0x1a8
  if(fabs(target_angle_[X]) > MAX_TILT_ANGLE || fabs(target_angle_[Y]) > MAX_TILT_ANGLE )
  207b1a:	eef0 7ae7 	vabs.f32	s15, s15
  207b1e:	ee17 0a90 	vmov	r0, s15
  207b22:	f7f8 fce7 	bl	2004f4 <__aeabi_f2d>
  207b26:	a35a      	add	r3, pc, #360	; (adr r3, 207c90 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x1b8>)
  207b28:	e9d3 2300 	ldrd	r2, r3, [r3]
  207b2c:	f7f8 ffc6 	bl	200abc <__aeabi_dcmpgt>
  207b30:	2800      	cmp	r0, #0
  207b32:	d159      	bne.n	207be8 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x110>
  207b34:	eef0 7ac8 	vabs.f32	s15, s16
  207b38:	ee17 0a90 	vmov	r0, s15
  207b3c:	f7f8 fcda 	bl	2004f4 <__aeabi_f2d>
  207b40:	a353      	add	r3, pc, #332	; (adr r3, 207c90 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x1b8>)
  207b42:	e9d3 2300 	ldrd	r2, r3, [r3]
  207b46:	f7f8 ffb9 	bl	200abc <__aeabi_dcmpgt>
  207b4a:	2800      	cmp	r0, #0
  207b4c:	d14c      	bne.n	207be8 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x110>
  if(lqi_mode_)
  207b4e:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
  207b52:	2b00      	cmp	r3, #0
  207b54:	d04f      	beq.n	207bf6 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x11e>
      if(cmd_msg.base_throttle_length != motor_number_) return;
  207b56:	f894 619d 	ldrb.w	r6, [r4, #413]	; 0x19d
  207b5a:	692b      	ldr	r3, [r5, #16]
  207b5c:	42b3      	cmp	r3, r6
  207b5e:	d146      	bne.n	207bee <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x116>
      float min_thrust = max_thrust_;
  207b60:	f204 5304 	addw	r3, r4, #1284	; 0x504
  207b64:	681f      	ldr	r7, [r3, #0]
      float max_thrust = min_thrust_;
  207b66:	f504 63a1 	add.w	r3, r4, #1288	; 0x508
  207b6a:	ed93 7a00 	vldr	s14, [r3]
      for(int i = 0; i < motor_number_; i++)
  207b6e:	2e00      	cmp	r6, #0
  207b70:	d06e      	beq.n	207c50 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x178>
          if(cmd_msg.base_throttle[i] > max_thrust) max_thrust = cmd_msg.base_throttle[i];
  207b72:	69ab      	ldr	r3, [r5, #24]
  207b74:	00b6      	lsls	r6, r6, #2
  207b76:	199a      	adds	r2, r3, r6
  207b78:	ee06 7a90 	vmov	s13, r7
  207b7c:	ecf3 7a01 	vldmia	r3!, {s15}
  207b80:	eef4 7a47 	vcmp.f32	s15, s14
  207b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  207b88:	bfc8      	it	gt
  207b8a:	eeb0 7a67 	vmovgt.f32	s14, s15
          if(cmd_msg.base_throttle[i] < min_thrust) min_thrust = cmd_msg.base_throttle[i];
  207b8e:	eef4 7a66 	vcmp.f32	s15, s13
  207b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  207b96:	bf48      	it	mi
  207b98:	eef0 6a67 	vmovmi.f32	s13, s15
      for(int i = 0; i < motor_number_; i++)
  207b9c:	429a      	cmp	r2, r3
  207b9e:	d1ed      	bne.n	207b7c <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0xa4>
      if(max_thrust - min_thrust > max_thrust_ * 0.9)
  207ba0:	ee77 7a66 	vsub.f32	s15, s14, s13
  207ba4:	ee17 0a90 	vmov	r0, s15
  207ba8:	f7f8 fca4 	bl	2004f4 <__aeabi_f2d>
  207bac:	4680      	mov	r8, r0
  207bae:	4689      	mov	r9, r1
  207bb0:	4638      	mov	r0, r7
  207bb2:	f7f8 fc9f 	bl	2004f4 <__aeabi_f2d>
  207bb6:	a338      	add	r3, pc, #224	; (adr r3, 207c98 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x1c0>)
  207bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
  207bbc:	f7f8 fcee 	bl	20059c <__aeabi_dmul>
  207bc0:	4602      	mov	r2, r0
  207bc2:	460b      	mov	r3, r1
  207bc4:	4640      	mov	r0, r8
  207bc6:	4649      	mov	r1, r9
  207bc8:	f7f8 ff78 	bl	200abc <__aeabi_dcmpgt>
  207bcc:	2800      	cmp	r0, #0
  207bce:	d159      	bne.n	207c84 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x1ac>
  207bd0:	f504 7065 	add.w	r0, r4, #916	; 0x394
  207bd4:	2300      	movs	r3, #0
        base_throttle_term_[i] = cmd_msg.base_throttle[i];
  207bd6:	69aa      	ldr	r2, [r5, #24]
  207bd8:	441a      	add	r2, r3
  207bda:	6812      	ldr	r2, [r2, #0]
  207bdc:	f840 2b04 	str.w	r2, [r0], #4
  207be0:	3304      	adds	r3, #4
      for(int i = 0; i < motor_number_; i++)
  207be2:	429e      	cmp	r6, r3
  207be4:	d1f7      	bne.n	207bd6 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0xfe>
  207be6:	e002      	b.n	207bee <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x116>
      force_landing_flag_ = true;
  207be8:	2301      	movs	r3, #1
  207bea:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
}
  207bee:	ecbd 8b02 	vpop	{d8}
  207bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      switch (uav_model_)
  207bf6:	f994 319c 	ldrsb.w	r3, [r4, #412]	; 0x19c
  207bfa:	2b00      	cmp	r3, #0
  207bfc:	d1f7      	bne.n	207bee <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x116>
            if(abs(cmd_msg.angles[Z]) + cmd_msg.base_throttle[Z]  > max_thrust_ ||
  207bfe:	ed95 7a03 	vldr	s14, [r5, #12]
#endif

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
  207c02:	eef0 6ac7 	vabs.f32	s13, s14
  207c06:	69ab      	ldr	r3, [r5, #24]
  207c08:	edd3 7a02 	vldr	s15, [r3, #8]
  207c0c:	ee76 5aa7 	vadd.f32	s11, s13, s15
  207c10:	f204 5304 	addw	r3, r4, #1284	; 0x504
  207c14:	ed93 6a00 	vldr	s12, [r3]
  207c18:	eef4 5ac6 	vcmpe.f32	s11, s12
  207c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  207c20:	dc12      	bgt.n	207c48 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x170>
               -abs(cmd_msg.angles[Z]) + cmd_msg.base_throttle[Z]  < min_thrust_)
  207c22:	ee77 7ae6 	vsub.f32	s15, s15, s13
  207c26:	f504 63a1 	add.w	r3, r4, #1288	; 0x508
            if(abs(cmd_msg.angles[Z]) + cmd_msg.base_throttle[Z]  > max_thrust_ ||
  207c2a:	edd3 6a00 	vldr	s13, [r3]
  207c2e:	eef4 7ae6 	vcmpe.f32	s15, s13
  207c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  207c36:	d407      	bmi.n	207c48 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x170>
            target_angle_[Z] = cmd_msg.angles[Z];
  207c38:	ed84 7a6b 	vstr	s14, [r4, #428]	; 0x1ac
            target_thrust_[Z] = cmd_msg.base_throttle[0]; //no good name
  207c3c:	69ab      	ldr	r3, [r5, #24]
  207c3e:	681b      	ldr	r3, [r3, #0]
  207c40:	f504 6096 	add.w	r0, r4, #1200	; 0x4b0
  207c44:	6003      	str	r3, [r0, #0]
            break;
  207c46:	e7d2      	b.n	207bee <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x116>
                force_landing_flag_ = true;
  207c48:	2301      	movs	r3, #1
  207c4a:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
                break;
  207c4e:	e7ce      	b.n	207bee <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x116>
      if(max_thrust - min_thrust > max_thrust_ * 0.9)
  207c50:	ee07 7a90 	vmov	s15, r7
  207c54:	ee77 7a67 	vsub.f32	s15, s14, s15
  207c58:	ee17 0a90 	vmov	r0, s15
  207c5c:	f7f8 fc4a 	bl	2004f4 <__aeabi_f2d>
  207c60:	4680      	mov	r8, r0
  207c62:	4689      	mov	r9, r1
  207c64:	4638      	mov	r0, r7
  207c66:	f7f8 fc45 	bl	2004f4 <__aeabi_f2d>
  207c6a:	a30b      	add	r3, pc, #44	; (adr r3, 207c98 <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x1c0>)
  207c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
  207c70:	f7f8 fc94 	bl	20059c <__aeabi_dmul>
  207c74:	4602      	mov	r2, r0
  207c76:	460b      	mov	r3, r1
  207c78:	4640      	mov	r0, r8
  207c7a:	4649      	mov	r1, r9
  207c7c:	f7f8 ff1e 	bl	200abc <__aeabi_dcmpgt>
  207c80:	2800      	cmp	r0, #0
  207c82:	d0b4      	beq.n	207bee <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x116>
          force_landing_flag_ = true;
  207c84:	2301      	movs	r3, #1
  207c86:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
          return;
  207c8a:	e7b0      	b.n	207bee <_ZN18AttitudeController23fourAxisCommandCallbackERKN17aerial_robot_msgs15FourAxisCommandE+0x116>
  207c8c:	f3af 8000 	nop.w
  207c90:	b851eb85 	.word	0xb851eb85
  207c94:	3fdb851e 	.word	0x3fdb851e
  207c98:	cccccccd 	.word	0xcccccccd
  207c9c:	3feccccc 	.word	0x3feccccc

00207ca0 <_ZN17aerial_robot_msgs17RollPitchYawTerms11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  207ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  207ca4:	4604      	mov	r4, r0
  207ca6:	460e      	mov	r6, r1
      uint32_t motors_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  207ca8:	780b      	ldrb	r3, [r1, #0]
      motors_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  207caa:	784a      	ldrb	r2, [r1, #1]
      motors_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  207cac:	788d      	ldrb	r5, [r1, #2]
  207cae:	042d      	lsls	r5, r5, #16
  207cb0:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  207cb4:	431d      	orrs	r5, r3
      motors_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  207cb6:	78cb      	ldrb	r3, [r1, #3]
  207cb8:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      if(motors_lengthT > motors_length)
  207cbc:	6843      	ldr	r3, [r0, #4]
  207cbe:	429d      	cmp	r5, r3
  207cc0:	d849      	bhi.n	207d56 <_ZN17aerial_robot_msgs17RollPitchYawTerms11deserializeEPh+0xb6>
      motors_length = motors_lengthT;
  207cc2:	6065      	str	r5, [r4, #4]
      for( uint32_t i = 0; i < motors_length; i++){
  207cc4:	2d00      	cmp	r5, #0
  207cc6:	d04e      	beq.n	207d66 <_ZN17aerial_robot_msgs17RollPitchYawTerms11deserializeEPh+0xc6>
  207cc8:	4631      	mov	r1, r6
  207cca:	2500      	movs	r5, #0
  207ccc:	462f      	mov	r7, r5
  207cce:	2004      	movs	r0, #4
        memcpy( &(this->motors[i]), &(this->st_motors), sizeof(aerial_robot_msgs::RollPitchYawTerm));
  207cd0:	f104 0308 	add.w	r3, r4, #8
      u_roll_p.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207cd4:	794e      	ldrb	r6, [r1, #5]
  207cd6:	790a      	ldrb	r2, [r1, #4]
  207cd8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      this->roll_p = u_roll_p.real;
  207cdc:	81a2      	strh	r2, [r4, #12]
      u_roll_i.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207cde:	79ce      	ldrb	r6, [r1, #7]
  207ce0:	798a      	ldrb	r2, [r1, #6]
  207ce2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      this->roll_i = u_roll_i.real;
  207ce6:	81e2      	strh	r2, [r4, #14]
      u_roll_d.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207ce8:	7a4e      	ldrb	r6, [r1, #9]
  207cea:	7a0a      	ldrb	r2, [r1, #8]
  207cec:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      this->roll_d = u_roll_d.real;
  207cf0:	8222      	strh	r2, [r4, #16]
      u_pitch_p.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207cf2:	7ace      	ldrb	r6, [r1, #11]
  207cf4:	7a8a      	ldrb	r2, [r1, #10]
  207cf6:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      this->pitch_p = u_pitch_p.real;
  207cfa:	8262      	strh	r2, [r4, #18]
      u_pitch_i.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207cfc:	7b4e      	ldrb	r6, [r1, #13]
  207cfe:	7b0a      	ldrb	r2, [r1, #12]
  207d00:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      this->pitch_i = u_pitch_i.real;
  207d04:	82a2      	strh	r2, [r4, #20]
      u_pitch_d.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207d06:	7bce      	ldrb	r6, [r1, #15]
  207d08:	7b8a      	ldrb	r2, [r1, #14]
  207d0a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      this->pitch_d = u_pitch_d.real;
  207d0e:	82e2      	strh	r2, [r4, #22]
      u_yaw_d.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207d10:	7c4e      	ldrb	r6, [r1, #17]
  207d12:	7c0a      	ldrb	r2, [r1, #16]
  207d14:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      this->yaw_d = u_yaw_d.real;
  207d18:	8322      	strh	r2, [r4, #24]
      offset += this->st_motors.deserialize(inbuffer + offset);
  207d1a:	300e      	adds	r0, #14
        memcpy( &(this->motors[i]), &(this->st_motors), sizeof(aerial_robot_msgs::RollPitchYawTerm));
  207d1c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
  207d20:	eb0e 0205 	add.w	r2, lr, r5
  207d24:	681e      	ldr	r6, [r3, #0]
  207d26:	f8d3 9004 	ldr.w	r9, [r3, #4]
  207d2a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  207d2e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  207d32:	f84e 6005 	str.w	r6, [lr, r5]
  207d36:	f8c2 9004 	str.w	r9, [r2, #4]
  207d3a:	f8c2 8008 	str.w	r8, [r2, #8]
  207d3e:	f8c2 c00c 	str.w	ip, [r2, #12]
  207d42:	691e      	ldr	r6, [r3, #16]
  207d44:	6116      	str	r6, [r2, #16]
      for( uint32_t i = 0; i < motors_length; i++){
  207d46:	3701      	adds	r7, #1
  207d48:	310e      	adds	r1, #14
  207d4a:	3514      	adds	r5, #20
  207d4c:	6862      	ldr	r2, [r4, #4]
  207d4e:	42ba      	cmp	r2, r7
  207d50:	d8c0      	bhi.n	207cd4 <_ZN17aerial_robot_msgs17RollPitchYawTerms11deserializeEPh+0x34>
  207d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        this->motors = (aerial_robot_msgs::RollPitchYawTerm*)realloc(this->motors, motors_lengthT * sizeof(aerial_robot_msgs::RollPitchYawTerm));
  207d56:	eb05 0185 	add.w	r1, r5, r5, lsl #2
  207d5a:	0089      	lsls	r1, r1, #2
  207d5c:	69c0      	ldr	r0, [r0, #28]
  207d5e:	f00e fe45 	bl	2169ec <realloc>
  207d62:	61e0      	str	r0, [r4, #28]
  207d64:	e7ad      	b.n	207cc2 <_ZN17aerial_robot_msgs17RollPitchYawTerms11deserializeEPh+0x22>
      offset += sizeof(this->motors_length);
  207d66:	2004      	movs	r0, #4
    }
  207d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00207d6c <_ZN17aerial_robot_msgs7PwmInfo11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  207d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  207d70:	4604      	mov	r4, r0
  207d72:	460d      	mov	r5, r1
      u_min_thrust.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207d74:	784a      	ldrb	r2, [r1, #1]
      u_min_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207d76:	788b      	ldrb	r3, [r1, #2]
  207d78:	041b      	lsls	r3, r3, #16
  207d7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_min_thrust.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  207d7e:	780a      	ldrb	r2, [r1, #0]
      u_min_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207d80:	4313      	orrs	r3, r2
      u_min_thrust.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  207d82:	78ca      	ldrb	r2, [r1, #3]
      this->min_thrust = u_min_thrust.real;
  207d84:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  207d88:	6043      	str	r3, [r0, #4]
      u_max_thrust.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207d8a:	794a      	ldrb	r2, [r1, #5]
      u_max_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207d8c:	798b      	ldrb	r3, [r1, #6]
  207d8e:	041b      	lsls	r3, r3, #16
  207d90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_max_thrust.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  207d94:	790a      	ldrb	r2, [r1, #4]
      u_max_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207d96:	4313      	orrs	r3, r2
      u_max_thrust.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  207d98:	79ca      	ldrb	r2, [r1, #7]
      this->max_thrust = u_max_thrust.real;
  207d9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  207d9e:	6083      	str	r3, [r0, #8]
      u_abs_max_pwm.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207da0:	7a4a      	ldrb	r2, [r1, #9]
      u_abs_max_pwm.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207da2:	7a8b      	ldrb	r3, [r1, #10]
  207da4:	041b      	lsls	r3, r3, #16
  207da6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_abs_max_pwm.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  207daa:	7a0a      	ldrb	r2, [r1, #8]
      u_abs_max_pwm.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207dac:	4313      	orrs	r3, r2
      u_abs_max_pwm.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  207dae:	7aca      	ldrb	r2, [r1, #11]
      this->abs_max_pwm = u_abs_max_pwm.real;
  207db0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  207db4:	60c3      	str	r3, [r0, #12]
      u_force_landing_thrust.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207db6:	7b4a      	ldrb	r2, [r1, #13]
      u_force_landing_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207db8:	7b8b      	ldrb	r3, [r1, #14]
  207dba:	041b      	lsls	r3, r3, #16
  207dbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_force_landing_thrust.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  207dc0:	7b0a      	ldrb	r2, [r1, #12]
      u_force_landing_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207dc2:	4313      	orrs	r3, r2
      u_force_landing_thrust.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  207dc4:	7bca      	ldrb	r2, [r1, #15]
      this->force_landing_thrust = u_force_landing_thrust.real;
  207dc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  207dca:	6103      	str	r3, [r0, #16]
      this->pwm_conversion_mode =  ((uint8_t) (*(inbuffer + offset)));
  207dcc:	7c0b      	ldrb	r3, [r1, #16]
  207dce:	7503      	strb	r3, [r0, #20]
      uint32_t motor_info_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  207dd0:	7c4b      	ldrb	r3, [r1, #17]
      motor_info_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  207dd2:	7c8a      	ldrb	r2, [r1, #18]
      motor_info_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  207dd4:	7cce      	ldrb	r6, [r1, #19]
  207dd6:	0436      	lsls	r6, r6, #16
  207dd8:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  207ddc:	431e      	orrs	r6, r3
      motor_info_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  207dde:	7d0b      	ldrb	r3, [r1, #20]
  207de0:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(motor_info_lengthT > motor_info_length)
  207de4:	6983      	ldr	r3, [r0, #24]
  207de6:	429e      	cmp	r6, r3
  207de8:	d80c      	bhi.n	207e04 <_ZN17aerial_robot_msgs7PwmInfo11deserializeEPh+0x98>
      motor_info_length = motor_info_lengthT;
  207dea:	61a6      	str	r6, [r4, #24]
      for( uint32_t i = 0; i < motor_info_length; i++){
  207dec:	2e00      	cmp	r6, #0
  207dee:	d056      	beq.n	207e9e <_ZN17aerial_robot_msgs7PwmInfo11deserializeEPh+0x132>
  207df0:	3515      	adds	r5, #21
  207df2:	f04f 0e00 	mov.w	lr, #0
  207df6:	46f4      	mov	ip, lr
  207df8:	2015      	movs	r0, #21
      offset += this->st_motor_info.deserialize(inbuffer + offset);
  207dfa:	f104 061c 	add.w	r6, r4, #28
  207dfe:	f104 0738 	add.w	r7, r4, #56	; 0x38
  207e02:	e028      	b.n	207e56 <_ZN17aerial_robot_msgs7PwmInfo11deserializeEPh+0xea>
        this->motor_info = (aerial_robot_msgs::MotorInfo*)realloc(this->motor_info, motor_info_lengthT * sizeof(aerial_robot_msgs::MotorInfo));
  207e04:	ebc6 01c6 	rsb	r1, r6, r6, lsl #3
  207e08:	0089      	lsls	r1, r1, #2
  207e0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  207e0c:	f00e fdee 	bl	2169ec <realloc>
  207e10:	63a0      	str	r0, [r4, #56]	; 0x38
  207e12:	e7ea      	b.n	207dea <_ZN17aerial_robot_msgs7PwmInfo11deserializeEPh+0x7e>
      offset += this->st_motor_info.deserialize(inbuffer + offset);
  207e14:	3018      	adds	r0, #24
        memcpy( &(this->motor_info[i]), &(this->st_motor_info), sizeof(aerial_robot_msgs::MotorInfo));
  207e16:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
  207e1a:	eb09 030e 	add.w	r3, r9, lr
  207e1e:	f8d6 8000 	ldr.w	r8, [r6]
  207e22:	6871      	ldr	r1, [r6, #4]
  207e24:	68b2      	ldr	r2, [r6, #8]
  207e26:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  207e2a:	f849 800e 	str.w	r8, [r9, lr]
  207e2e:	6059      	str	r1, [r3, #4]
  207e30:	609a      	str	r2, [r3, #8]
  207e32:	f8c3 a00c 	str.w	sl, [r3, #12]
  207e36:	f8d6 8010 	ldr.w	r8, [r6, #16]
  207e3a:	6971      	ldr	r1, [r6, #20]
  207e3c:	69b2      	ldr	r2, [r6, #24]
  207e3e:	f8c3 8010 	str.w	r8, [r3, #16]
  207e42:	6159      	str	r1, [r3, #20]
  207e44:	619a      	str	r2, [r3, #24]
      for( uint32_t i = 0; i < motor_info_length; i++){
  207e46:	f10c 0c01 	add.w	ip, ip, #1
  207e4a:	3518      	adds	r5, #24
  207e4c:	f10e 0e1c 	add.w	lr, lr, #28
  207e50:	69a3      	ldr	r3, [r4, #24]
  207e52:	4563      	cmp	r3, ip
  207e54:	d921      	bls.n	207e9a <_ZN17aerial_robot_msgs7PwmInfo11deserializeEPh+0x12e>
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207e56:	786a      	ldrb	r2, [r5, #1]
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207e58:	78ab      	ldrb	r3, [r5, #2]
  207e5a:	041b      	lsls	r3, r3, #16
  207e5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  207e60:	782a      	ldrb	r2, [r5, #0]
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207e62:	4313      	orrs	r3, r2
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  207e64:	78ea      	ldrb	r2, [r5, #3]
      this->voltage = u_voltage.real;
  207e66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  207e6a:	6223      	str	r3, [r4, #32]
  207e6c:	f104 0124 	add.w	r1, r4, #36	; 0x24
  207e70:	462a      	mov	r2, r5
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207e72:	f892 8005 	ldrb.w	r8, [r2, #5]
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207e76:	7993      	ldrb	r3, [r2, #6]
  207e78:	041b      	lsls	r3, r3, #16
  207e7a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  207e7e:	f892 8004 	ldrb.w	r8, [r2, #4]
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  207e82:	ea43 0308 	orr.w	r3, r3, r8
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  207e86:	f892 8007 	ldrb.w	r8, [r2, #7]
      this->polynominal[i] = u_polynominali.real;
  207e8a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  207e8e:	f841 3b04 	str.w	r3, [r1], #4
  207e92:	3204      	adds	r2, #4
      for( uint32_t i = 0; i < 5; i++){
  207e94:	42b9      	cmp	r1, r7
  207e96:	d1ec      	bne.n	207e72 <_ZN17aerial_robot_msgs7PwmInfo11deserializeEPh+0x106>
  207e98:	e7bc      	b.n	207e14 <_ZN17aerial_robot_msgs7PwmInfo11deserializeEPh+0xa8>
  207e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      offset += sizeof(this->motor_info_length);
  207e9e:	2015      	movs	r0, #21
    }
  207ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00207ea4 <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE8callbackEPh>:
  virtual void callback(unsigned char* data)
  207ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  207ea8:	4604      	mov	r4, r0
  207eaa:	460f      	mov	r7, r1
    msg.deserialize(data);
  207eac:	f100 0a0c 	add.w	sl, r0, #12
      uint32_t motors_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  207eb0:	780b      	ldrb	r3, [r1, #0]
      motors_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  207eb2:	784a      	ldrb	r2, [r1, #1]
      motors_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  207eb4:	788d      	ldrb	r5, [r1, #2]
  207eb6:	042d      	lsls	r5, r5, #16
  207eb8:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
  207ebc:	431d      	orrs	r5, r3
      motors_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  207ebe:	78cb      	ldrb	r3, [r1, #3]
  207ec0:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
      if(motors_lengthT > motors_length)
  207ec4:	6903      	ldr	r3, [r0, #16]
  207ec6:	429d      	cmp	r5, r3
  207ec8:	d852      	bhi.n	207f70 <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE8callbackEPh+0xcc>
      motors_length = motors_lengthT;
  207eca:	6125      	str	r5, [r4, #16]
      for( uint32_t i = 0; i < motors_length; i++){
  207ecc:	2d00      	cmp	r5, #0
  207ece:	d03f      	beq.n	207f50 <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE8callbackEPh+0xac>
  207ed0:	4639      	mov	r1, r7
  207ed2:	2000      	movs	r0, #0
  207ed4:	4607      	mov	r7, r0
        memcpy( &(this->motors[i]), &(this->st_motors), sizeof(aerial_robot_msgs::RollPitchYawTerm));
  207ed6:	f104 0314 	add.w	r3, r4, #20
      u_roll_p.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207eda:	794d      	ldrb	r5, [r1, #5]
  207edc:	790a      	ldrb	r2, [r1, #4]
  207ede:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      this->roll_p = u_roll_p.real;
  207ee2:	8322      	strh	r2, [r4, #24]
      u_roll_i.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207ee4:	79cd      	ldrb	r5, [r1, #7]
  207ee6:	798a      	ldrb	r2, [r1, #6]
  207ee8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      this->roll_i = u_roll_i.real;
  207eec:	8362      	strh	r2, [r4, #26]
      u_roll_d.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207eee:	7a4d      	ldrb	r5, [r1, #9]
  207ef0:	7a0a      	ldrb	r2, [r1, #8]
  207ef2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      this->roll_d = u_roll_d.real;
  207ef6:	83a2      	strh	r2, [r4, #28]
      u_pitch_p.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207ef8:	7acd      	ldrb	r5, [r1, #11]
  207efa:	7a8a      	ldrb	r2, [r1, #10]
  207efc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      this->pitch_p = u_pitch_p.real;
  207f00:	83e2      	strh	r2, [r4, #30]
      u_pitch_i.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207f02:	7b4d      	ldrb	r5, [r1, #13]
  207f04:	7b0a      	ldrb	r2, [r1, #12]
  207f06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      this->pitch_i = u_pitch_i.real;
  207f0a:	8422      	strh	r2, [r4, #32]
      u_pitch_d.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207f0c:	7bcd      	ldrb	r5, [r1, #15]
  207f0e:	7b8a      	ldrb	r2, [r1, #14]
  207f10:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      this->pitch_d = u_pitch_d.real;
  207f14:	8462      	strh	r2, [r4, #34]	; 0x22
      u_yaw_d.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207f16:	7c4d      	ldrb	r5, [r1, #17]
  207f18:	7c0a      	ldrb	r2, [r1, #16]
  207f1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      this->yaw_d = u_yaw_d.real;
  207f1e:	84a2      	strh	r2, [r4, #36]	; 0x24
  207f20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  207f22:	1832      	adds	r2, r6, r0
  207f24:	681d      	ldr	r5, [r3, #0]
  207f26:	f8d3 9004 	ldr.w	r9, [r3, #4]
  207f2a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  207f2e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  207f32:	5035      	str	r5, [r6, r0]
  207f34:	f8c2 9004 	str.w	r9, [r2, #4]
  207f38:	f8c2 8008 	str.w	r8, [r2, #8]
  207f3c:	f8c2 c00c 	str.w	ip, [r2, #12]
  207f40:	691d      	ldr	r5, [r3, #16]
  207f42:	6115      	str	r5, [r2, #16]
      for( uint32_t i = 0; i < motors_length; i++){
  207f44:	3701      	adds	r7, #1
  207f46:	310e      	adds	r1, #14
  207f48:	3014      	adds	r0, #20
  207f4a:	6922      	ldr	r2, [r4, #16]
  207f4c:	42ba      	cmp	r2, r7
  207f4e:	d8c4      	bhi.n	207eda <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE8callbackEPh+0x36>
    (obj_->*cb_)(msg);
  207f50:	6b23      	ldr	r3, [r4, #48]	; 0x30
  207f52:	f013 0f01 	tst.w	r3, #1
  207f56:	d013      	beq.n	207f80 <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE8callbackEPh+0xdc>
  207f58:	105a      	asrs	r2, r3, #1
  207f5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  207f5c:	5889      	ldr	r1, [r1, r2]
  207f5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  207f60:	588a      	ldr	r2, [r1, r2]
  207f62:	6b60      	ldr	r0, [r4, #52]	; 0x34
  207f64:	4651      	mov	r1, sl
  207f66:	eb00 0063 	add.w	r0, r0, r3, asr #1
  207f6a:	4790      	blx	r2
  207f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        this->motors = (aerial_robot_msgs::RollPitchYawTerm*)realloc(this->motors, motors_lengthT * sizeof(aerial_robot_msgs::RollPitchYawTerm));
  207f70:	eb05 0185 	add.w	r1, r5, r5, lsl #2
  207f74:	0089      	lsls	r1, r1, #2
  207f76:	6a80      	ldr	r0, [r0, #40]	; 0x28
  207f78:	f00e fd38 	bl	2169ec <realloc>
  207f7c:	62a0      	str	r0, [r4, #40]	; 0x28
  207f7e:	e7a4      	b.n	207eca <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE8callbackEPh+0x26>
  207f80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  207f82:	e7ee      	b.n	207f62 <_ZN3ros10SubscriberIN17aerial_robot_msgs17RollPitchYawTermsE18AttitudeControllerE8callbackEPh+0xbe>

00207f84 <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE8callbackEPh>:
  virtual void callback(unsigned char* data)
  207f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  207f88:	4604      	mov	r4, r0
  207f8a:	460d      	mov	r5, r1
    msg.deserialize(data);
  207f8c:	f100 0b0c 	add.w	fp, r0, #12
      uint32_t pseudo_inverse_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  207f90:	780b      	ldrb	r3, [r1, #0]
      pseudo_inverse_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  207f92:	784a      	ldrb	r2, [r1, #1]
      pseudo_inverse_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  207f94:	788f      	ldrb	r7, [r1, #2]
  207f96:	043f      	lsls	r7, r7, #16
  207f98:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
  207f9c:	431f      	orrs	r7, r3
      pseudo_inverse_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  207f9e:	78cb      	ldrb	r3, [r1, #3]
  207fa0:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      if(pseudo_inverse_lengthT > pseudo_inverse_length)
  207fa4:	6903      	ldr	r3, [r0, #16]
  207fa6:	429f      	cmp	r7, r3
  207fa8:	d84e      	bhi.n	208048 <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE8callbackEPh+0xc4>
      pseudo_inverse_length = pseudo_inverse_lengthT;
  207faa:	6127      	str	r7, [r4, #16]
      for( uint32_t i = 0; i < pseudo_inverse_length; i++){
  207fac:	2f00      	cmp	r7, #0
  207fae:	d053      	beq.n	208058 <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE8callbackEPh+0xd4>
  207fb0:	462b      	mov	r3, r5
  207fb2:	2200      	movs	r2, #0
  207fb4:	2104      	movs	r1, #4
  207fb6:	4696      	mov	lr, r2
        memcpy( &(this->pseudo_inverse[i]), &(this->st_pseudo_inverse), sizeof(hydrus::PMatrixPseudoInverseUnit));
  207fb8:	f104 0714 	add.w	r7, r4, #20
      u_r.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207fbc:	f893 c005 	ldrb.w	ip, [r3, #5]
  207fc0:	7918      	ldrb	r0, [r3, #4]
  207fc2:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
      this->r = u_r.real;
  207fc6:	8320      	strh	r0, [r4, #24]
      u_p.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207fc8:	f893 c007 	ldrb.w	ip, [r3, #7]
  207fcc:	7998      	ldrb	r0, [r3, #6]
  207fce:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
      this->p = u_p.real;
  207fd2:	8360      	strh	r0, [r4, #26]
      u_y.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  207fd4:	f893 c009 	ldrb.w	ip, [r3, #9]
  207fd8:	7a18      	ldrb	r0, [r3, #8]
  207fda:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
      this->y = u_y.real;
  207fde:	83a0      	strh	r0, [r4, #28]
      offset += this->st_pseudo_inverse.deserialize(inbuffer + offset);
  207fe0:	3106      	adds	r1, #6
        memcpy( &(this->pseudo_inverse[i]), &(this->st_pseudo_inverse), sizeof(hydrus::PMatrixPseudoInverseUnit));
  207fe2:	6a26      	ldr	r6, [r4, #32]
  207fe4:	18b0      	adds	r0, r6, r2
  207fe6:	f8d7 a000 	ldr.w	sl, [r7]
  207fea:	f8d7 9004 	ldr.w	r9, [r7, #4]
  207fee:	f8d7 8008 	ldr.w	r8, [r7, #8]
  207ff2:	f846 a002 	str.w	sl, [r6, r2]
  207ff6:	f8c0 9004 	str.w	r9, [r0, #4]
  207ffa:	f8c0 8008 	str.w	r8, [r0, #8]
      for( uint32_t i = 0; i < pseudo_inverse_length; i++){
  207ffe:	f10e 0e01 	add.w	lr, lr, #1
  208002:	3306      	adds	r3, #6
  208004:	320c      	adds	r2, #12
  208006:	6920      	ldr	r0, [r4, #16]
  208008:	4570      	cmp	r0, lr
  20800a:	d8d7      	bhi.n	207fbc <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE8callbackEPh+0x38>
  20800c:	4429      	add	r1, r5
  20800e:	f104 0224 	add.w	r2, r4, #36	; 0x24
  208012:	f104 0530 	add.w	r5, r4, #48	; 0x30
      u_inertiai.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  208016:	7848      	ldrb	r0, [r1, #1]
  208018:	f811 3b02 	ldrb.w	r3, [r1], #2
  20801c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
      this->inertia[i] = u_inertiai.real;
  208020:	f822 3b02 	strh.w	r3, [r2], #2
      for( uint32_t i = 0; i < 6; i++){
  208024:	42aa      	cmp	r2, r5
  208026:	d1f6      	bne.n	208016 <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE8callbackEPh+0x92>
    (obj_->*cb_)(msg);
  208028:	6b63      	ldr	r3, [r4, #52]	; 0x34
  20802a:	f013 0f01 	tst.w	r3, #1
  20802e:	d015      	beq.n	20805c <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE8callbackEPh+0xd8>
  208030:	105a      	asrs	r2, r3, #1
  208032:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  208034:	5889      	ldr	r1, [r1, r2]
  208036:	6b22      	ldr	r2, [r4, #48]	; 0x30
  208038:	588a      	ldr	r2, [r1, r2]
  20803a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  20803c:	4659      	mov	r1, fp
  20803e:	eb00 0063 	add.w	r0, r0, r3, asr #1
  208042:	4790      	blx	r2
  208044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        this->pseudo_inverse = (hydrus::PMatrixPseudoInverseUnit*)realloc(this->pseudo_inverse, pseudo_inverse_lengthT * sizeof(hydrus::PMatrixPseudoInverseUnit));
  208048:	eb07 0147 	add.w	r1, r7, r7, lsl #1
  20804c:	0089      	lsls	r1, r1, #2
  20804e:	6a00      	ldr	r0, [r0, #32]
  208050:	f00e fccc 	bl	2169ec <realloc>
  208054:	6220      	str	r0, [r4, #32]
  208056:	e7a8      	b.n	207faa <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE8callbackEPh+0x26>
      offset += sizeof(this->pseudo_inverse_length);
  208058:	2104      	movs	r1, #4
  20805a:	e7d7      	b.n	20800c <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE8callbackEPh+0x88>
  20805c:	6b22      	ldr	r2, [r4, #48]	; 0x30
  20805e:	e7ec      	b.n	20803a <_ZN3ros10SubscriberIN6hydrus31PMatrixPseudoInverseWithInertiaE18AttitudeControllerE8callbackEPh+0xb6>

00208060 <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE8callbackEPh>:
  virtual void callback(unsigned char* data)
  208060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  208062:	4605      	mov	r5, r0
    msg.deserialize(data);
  208064:	f100 060c 	add.w	r6, r0, #12
  208068:	460c      	mov	r4, r1
  20806a:	3010      	adds	r0, #16
  20806c:	f105 0e1c 	add.w	lr, r5, #28
  208070:	460a      	mov	r2, r1
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  208072:	7857      	ldrb	r7, [r2, #1]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  208074:	7893      	ldrb	r3, [r2, #2]
  208076:	041b      	lsls	r3, r3, #16
  208078:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20807c:	7817      	ldrb	r7, [r2, #0]
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20807e:	433b      	orrs	r3, r7
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  208080:	78d7      	ldrb	r7, [r2, #3]
      this->angles[i] = u_anglesi.real;
  208082:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
  208086:	f840 3b04 	str.w	r3, [r0], #4
  20808a:	3204      	adds	r2, #4
      for( uint32_t i = 0; i < 3; i++){
  20808c:	4570      	cmp	r0, lr
  20808e:	d1f0      	bne.n	208072 <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE8callbackEPh+0x12>
      uint32_t base_throttle_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  208090:	7b0b      	ldrb	r3, [r1, #12]
      base_throttle_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  208092:	7b4a      	ldrb	r2, [r1, #13]
      base_throttle_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  208094:	7b8f      	ldrb	r7, [r1, #14]
  208096:	043f      	lsls	r7, r7, #16
  208098:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
  20809c:	431f      	orrs	r7, r3
      base_throttle_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20809e:	7bcb      	ldrb	r3, [r1, #15]
  2080a0:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      if(base_throttle_lengthT > base_throttle_length)
  2080a4:	69eb      	ldr	r3, [r5, #28]
  2080a6:	429f      	cmp	r7, r3
  2080a8:	d824      	bhi.n	2080f4 <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE8callbackEPh+0x94>
      base_throttle_length = base_throttle_lengthT;
  2080aa:	61ef      	str	r7, [r5, #28]
      for( uint32_t i = 0; i < base_throttle_length; i++){
  2080ac:	b19f      	cbz	r7, 2080d6 <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE8callbackEPh+0x76>
  2080ae:	2200      	movs	r2, #0
      u_st_base_throttle.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2080b0:	7c61      	ldrb	r1, [r4, #17]
      u_st_base_throttle.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2080b2:	7ca3      	ldrb	r3, [r4, #18]
  2080b4:	041b      	lsls	r3, r3, #16
  2080b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_base_throttle.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  2080ba:	7c21      	ldrb	r1, [r4, #16]
      u_st_base_throttle.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2080bc:	430b      	orrs	r3, r1
      u_st_base_throttle.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  2080be:	7ce1      	ldrb	r1, [r4, #19]
  2080c0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_base_throttle = u_st_base_throttle.real;
  2080c4:	622b      	str	r3, [r5, #32]
        memcpy( &(this->base_throttle[i]), &(this->st_base_throttle), sizeof(float));
  2080c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
  2080c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      for( uint32_t i = 0; i < base_throttle_length; i++){
  2080cc:	3201      	adds	r2, #1
  2080ce:	3404      	adds	r4, #4
  2080d0:	69eb      	ldr	r3, [r5, #28]
  2080d2:	4293      	cmp	r3, r2
  2080d4:	d8ec      	bhi.n	2080b0 <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE8callbackEPh+0x50>
    (obj_->*cb_)(msg);
  2080d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  2080d8:	f013 0f01 	tst.w	r3, #1
  2080dc:	d010      	beq.n	208100 <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE8callbackEPh+0xa0>
  2080de:	105a      	asrs	r2, r3, #1
  2080e0:	6b29      	ldr	r1, [r5, #48]	; 0x30
  2080e2:	5889      	ldr	r1, [r1, r2]
  2080e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  2080e6:	588a      	ldr	r2, [r1, r2]
  2080e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
  2080ea:	4631      	mov	r1, r6
  2080ec:	eb00 0063 	add.w	r0, r0, r3, asr #1
  2080f0:	4790      	blx	r2
  2080f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        this->base_throttle = (float*)realloc(this->base_throttle, base_throttle_lengthT * sizeof(float));
  2080f4:	00b9      	lsls	r1, r7, #2
  2080f6:	6a68      	ldr	r0, [r5, #36]	; 0x24
  2080f8:	f00e fc78 	bl	2169ec <realloc>
  2080fc:	6268      	str	r0, [r5, #36]	; 0x24
  2080fe:	e7d4      	b.n	2080aa <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE8callbackEPh+0x4a>
  208100:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  208102:	e7f1      	b.n	2080e8 <_ZN3ros10SubscriberIN17aerial_robot_msgs15FourAxisCommandE18AttitudeControllerE8callbackEPh+0x88>

00208104 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE8callbackEPh>:
  virtual void callback(unsigned char* data)
  208104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  208108:	4604      	mov	r4, r0
  20810a:	460e      	mov	r6, r1
    msg.deserialize(data);
  20810c:	f100 090c 	add.w	r9, r0, #12
      u_min_thrust.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  208110:	784a      	ldrb	r2, [r1, #1]
      u_min_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  208112:	788b      	ldrb	r3, [r1, #2]
  208114:	041b      	lsls	r3, r3, #16
  208116:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_min_thrust.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20811a:	780a      	ldrb	r2, [r1, #0]
      u_min_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20811c:	4313      	orrs	r3, r2
      u_min_thrust.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20811e:	78ca      	ldrb	r2, [r1, #3]
      this->min_thrust = u_min_thrust.real;
  208120:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  208124:	6103      	str	r3, [r0, #16]
      u_max_thrust.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  208126:	794a      	ldrb	r2, [r1, #5]
      u_max_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  208128:	798b      	ldrb	r3, [r1, #6]
  20812a:	041b      	lsls	r3, r3, #16
  20812c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_max_thrust.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  208130:	790a      	ldrb	r2, [r1, #4]
      u_max_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  208132:	4313      	orrs	r3, r2
      u_max_thrust.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  208134:	79ca      	ldrb	r2, [r1, #7]
      this->max_thrust = u_max_thrust.real;
  208136:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20813a:	6143      	str	r3, [r0, #20]
      u_abs_max_pwm.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20813c:	7a4a      	ldrb	r2, [r1, #9]
      u_abs_max_pwm.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20813e:	7a8b      	ldrb	r3, [r1, #10]
  208140:	041b      	lsls	r3, r3, #16
  208142:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_abs_max_pwm.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  208146:	7a0a      	ldrb	r2, [r1, #8]
      u_abs_max_pwm.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  208148:	4313      	orrs	r3, r2
      u_abs_max_pwm.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20814a:	7aca      	ldrb	r2, [r1, #11]
      this->abs_max_pwm = u_abs_max_pwm.real;
  20814c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  208150:	6183      	str	r3, [r0, #24]
      u_force_landing_thrust.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  208152:	7b4a      	ldrb	r2, [r1, #13]
      u_force_landing_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  208154:	7b8b      	ldrb	r3, [r1, #14]
  208156:	041b      	lsls	r3, r3, #16
  208158:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_force_landing_thrust.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20815c:	7b0a      	ldrb	r2, [r1, #12]
      u_force_landing_thrust.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20815e:	4313      	orrs	r3, r2
      u_force_landing_thrust.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  208160:	7bca      	ldrb	r2, [r1, #15]
      this->force_landing_thrust = u_force_landing_thrust.real;
  208162:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  208166:	61c3      	str	r3, [r0, #28]
      this->pwm_conversion_mode =  ((uint8_t) (*(inbuffer + offset)));
  208168:	7c0b      	ldrb	r3, [r1, #16]
  20816a:	f880 3020 	strb.w	r3, [r0, #32]
      uint32_t motor_info_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20816e:	7c4b      	ldrb	r3, [r1, #17]
      motor_info_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  208170:	7c8a      	ldrb	r2, [r1, #18]
      motor_info_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  208172:	7ccf      	ldrb	r7, [r1, #19]
  208174:	043f      	lsls	r7, r7, #16
  208176:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
  20817a:	431f      	orrs	r7, r3
      motor_info_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20817c:	7d0b      	ldrb	r3, [r1, #20]
  20817e:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      if(motor_info_lengthT > motor_info_length)
  208182:	6a43      	ldr	r3, [r0, #36]	; 0x24
  208184:	429f      	cmp	r7, r3
  208186:	d80c      	bhi.n	2081a2 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE8callbackEPh+0x9e>
      motor_info_length = motor_info_lengthT;
  208188:	6267      	str	r7, [r4, #36]	; 0x24
      for( uint32_t i = 0; i < motor_info_length; i++){
  20818a:	2f00      	cmp	r7, #0
  20818c:	d052      	beq.n	208234 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE8callbackEPh+0x130>
  20818e:	f106 0015 	add.w	r0, r6, #21
  208192:	f04f 0e00 	mov.w	lr, #0
  208196:	46f4      	mov	ip, lr
      offset += this->st_motor_info.deserialize(inbuffer + offset);
  208198:	f104 0628 	add.w	r6, r4, #40	; 0x28
  20819c:	f104 0744 	add.w	r7, r4, #68	; 0x44
  2081a0:	e026      	b.n	2081f0 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE8callbackEPh+0xec>
        this->motor_info = (aerial_robot_msgs::MotorInfo*)realloc(this->motor_info, motor_info_lengthT * sizeof(aerial_robot_msgs::MotorInfo));
  2081a2:	ebc7 01c7 	rsb	r1, r7, r7, lsl #3
  2081a6:	0089      	lsls	r1, r1, #2
  2081a8:	6c40      	ldr	r0, [r0, #68]	; 0x44
  2081aa:	f00e fc1f 	bl	2169ec <realloc>
  2081ae:	6460      	str	r0, [r4, #68]	; 0x44
  2081b0:	e7ea      	b.n	208188 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE8callbackEPh+0x84>
        memcpy( &(this->motor_info[i]), &(this->st_motor_info), sizeof(aerial_robot_msgs::MotorInfo));
  2081b2:	6c65      	ldr	r5, [r4, #68]	; 0x44
  2081b4:	eb05 030e 	add.w	r3, r5, lr
  2081b8:	f8d6 8000 	ldr.w	r8, [r6]
  2081bc:	6871      	ldr	r1, [r6, #4]
  2081be:	68b2      	ldr	r2, [r6, #8]
  2081c0:	f8d6 a00c 	ldr.w	sl, [r6, #12]
  2081c4:	f845 800e 	str.w	r8, [r5, lr]
  2081c8:	6059      	str	r1, [r3, #4]
  2081ca:	609a      	str	r2, [r3, #8]
  2081cc:	f8c3 a00c 	str.w	sl, [r3, #12]
  2081d0:	f8d6 8010 	ldr.w	r8, [r6, #16]
  2081d4:	6971      	ldr	r1, [r6, #20]
  2081d6:	69b2      	ldr	r2, [r6, #24]
  2081d8:	f8c3 8010 	str.w	r8, [r3, #16]
  2081dc:	6159      	str	r1, [r3, #20]
  2081de:	619a      	str	r2, [r3, #24]
      for( uint32_t i = 0; i < motor_info_length; i++){
  2081e0:	f10c 0c01 	add.w	ip, ip, #1
  2081e4:	3018      	adds	r0, #24
  2081e6:	f10e 0e1c 	add.w	lr, lr, #28
  2081ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
  2081ec:	4563      	cmp	r3, ip
  2081ee:	d921      	bls.n	208234 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE8callbackEPh+0x130>
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  2081f0:	7842      	ldrb	r2, [r0, #1]
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2081f2:	7883      	ldrb	r3, [r0, #2]
  2081f4:	041b      	lsls	r3, r3, #16
  2081f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  2081fa:	7802      	ldrb	r2, [r0, #0]
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  2081fc:	4313      	orrs	r3, r2
      u_voltage.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  2081fe:	78c2      	ldrb	r2, [r0, #3]
      this->voltage = u_voltage.real;
  208200:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  208204:	62e3      	str	r3, [r4, #44]	; 0x2c
  208206:	f104 0130 	add.w	r1, r4, #48	; 0x30
  20820a:	4602      	mov	r2, r0
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20820c:	f892 8005 	ldrb.w	r8, [r2, #5]
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  208210:	7993      	ldrb	r3, [r2, #6]
  208212:	041b      	lsls	r3, r3, #16
  208214:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  208218:	f892 8004 	ldrb.w	r8, [r2, #4]
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20821c:	ea43 0308 	orr.w	r3, r3, r8
      u_polynominali.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  208220:	f892 8007 	ldrb.w	r8, [r2, #7]
      this->polynominal[i] = u_polynominali.real;
  208224:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
  208228:	f841 3b04 	str.w	r3, [r1], #4
  20822c:	3204      	adds	r2, #4
      for( uint32_t i = 0; i < 5; i++){
  20822e:	42b9      	cmp	r1, r7
  208230:	d1ec      	bne.n	20820c <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE8callbackEPh+0x108>
  208232:	e7be      	b.n	2081b2 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE8callbackEPh+0xae>
    (obj_->*cb_)(msg);
  208234:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  208236:	f013 0f01 	tst.w	r3, #1
  20823a:	d00b      	beq.n	208254 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE8callbackEPh+0x150>
  20823c:	105a      	asrs	r2, r3, #1
  20823e:	6d21      	ldr	r1, [r4, #80]	; 0x50
  208240:	5889      	ldr	r1, [r1, r2]
  208242:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  208244:	588a      	ldr	r2, [r1, r2]
  208246:	6d20      	ldr	r0, [r4, #80]	; 0x50
  208248:	4649      	mov	r1, r9
  20824a:	eb00 0063 	add.w	r0, r0, r3, asr #1
  20824e:	4790      	blx	r2
  208250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  208254:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  208256:	e7f6      	b.n	208246 <_ZN3ros10SubscriberIN17aerial_robot_msgs7PwmInfoE18AttitudeControllerE8callbackEPh+0x142>

00208258 <_ZN18AttitudeControllerC1Ev>:
  208258:	4b74      	ldr	r3, [pc, #464]	; (20842c <_ZN18AttitudeControllerC1Ev+0x1d4>)
  20825a:	60c3      	str	r3, [r0, #12]
  p_matrix_pseudo_inverse_inertia_sub_("/p_matrix_pseudo_inverse_inertia", &AttitudeController::pMatrixInertiaCallback, this)
  20825c:	f100 0334 	add.w	r3, r0, #52	; 0x34
  208260:	6103      	str	r3, [r0, #16]
  208262:	2300      	movs	r3, #0
  208264:	61c3      	str	r3, [r0, #28]
  208266:	4a72      	ldr	r2, [pc, #456]	; (208430 <_ZN18AttitudeControllerC1Ev+0x1d8>)
  208268:	6202      	str	r2, [r0, #32]
  20826a:	f100 0244 	add.w	r2, r0, #68	; 0x44
  20826e:	6242      	str	r2, [r0, #36]	; 0x24
  208270:	6303      	str	r3, [r0, #48]	; 0x30
      motor_value_length(0), motor_value(NULL)
  208272:	4a70      	ldr	r2, [pc, #448]	; (208434 <_ZN18AttitudeControllerC1Ev+0x1dc>)
  208274:	6342      	str	r2, [r0, #52]	; 0x34
  208276:	6383      	str	r3, [r0, #56]	; 0x38
  208278:	6403      	str	r3, [r0, #64]	; 0x40
      motors_length(0), motors(NULL)
  20827a:	4a6f      	ldr	r2, [pc, #444]	; (208438 <_ZN18AttitudeControllerC1Ev+0x1e0>)
  20827c:	6442      	str	r2, [r0, #68]	; 0x44
  20827e:	6483      	str	r3, [r0, #72]	; 0x48
      yaw_d(0)
  208280:	4a6e      	ldr	r2, [pc, #440]	; (20843c <_ZN18AttitudeControllerC1Ev+0x1e4>)
  208282:	64c2      	str	r2, [r0, #76]	; 0x4c
  208284:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  208288:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  20828c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
  208290:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  208294:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
  208298:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  20829c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  2082a0:	6603      	str	r3, [r0, #96]	; 0x60
    endpoint_(endpoint)
  2082a2:	4a67      	ldr	r2, [pc, #412]	; (208440 <_ZN18AttitudeControllerC1Ev+0x1e8>)
  2082a4:	6642      	str	r2, [r0, #100]	; 0x64
      base_throttle_length(0), base_throttle(NULL)
  2082a6:	4a67      	ldr	r2, [pc, #412]	; (208444 <_ZN18AttitudeControllerC1Ev+0x1ec>)
  2082a8:	6702      	str	r2, [r0, #112]	; 0x70
  2082aa:	2200      	movs	r2, #0
  2082ac:	6742      	str	r2, [r0, #116]	; 0x74
  2082ae:	6782      	str	r2, [r0, #120]	; 0x78
  2082b0:	67c2      	str	r2, [r0, #124]	; 0x7c
  2082b2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  2082b6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  2082ba:	4963      	ldr	r1, [pc, #396]	; (208448 <_ZN18AttitudeControllerC1Ev+0x1f0>)
  2082bc:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  2082c0:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  2082c4:	f8c0 0094 	str.w	r0, [r0, #148]	; 0x94
  2082c8:	2101      	movs	r1, #1
  2082ca:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    topic_ = topic_name;
  2082ce:	495f      	ldr	r1, [pc, #380]	; (20844c <_ZN18AttitudeControllerC1Ev+0x1f4>)
  2082d0:	66c1      	str	r1, [r0, #108]	; 0x6c
    endpoint_(endpoint)
  2082d2:	495f      	ldr	r1, [pc, #380]	; (208450 <_ZN18AttitudeControllerC1Ev+0x1f8>)
  2082d4:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
      motor_info_length(0), motor_info(NULL)
  2082d8:	495e      	ldr	r1, [pc, #376]	; (208454 <_ZN18AttitudeControllerC1Ev+0x1fc>)
  2082da:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
  2082de:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
  2082e2:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  2082e6:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  2082ea:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
  2082ee:	f880 30bc 	strb.w	r3, [r0, #188]	; 0xbc
  2082f2:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
      polynominal()
  2082f6:	4b58      	ldr	r3, [pc, #352]	; (208458 <_ZN18AttitudeControllerC1Ev+0x200>)
  2082f8:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
  2082fc:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
  208300:	f100 03cc 	add.w	r3, r0, #204	; 0xcc
  208304:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
  208308:	f843 2b04 	str.w	r2, [r3], #4
  20830c:	428b      	cmp	r3, r1
  20830e:	d1fb      	bne.n	208308 <_ZN18AttitudeControllerC1Ev+0xb0>
  208310:	2300      	movs	r3, #0
  208312:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
  208316:	4a51      	ldr	r2, [pc, #324]	; (20845c <_ZN18AttitudeControllerC1Ev+0x204>)
  208318:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  20831c:	f8c0 30e8 	str.w	r3, [r0, #232]	; 0xe8
  208320:	f8c0 00ec 	str.w	r0, [r0, #236]	; 0xec
  208324:	2201      	movs	r2, #1
  208326:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
    topic_ = topic_name;
  20832a:	494d      	ldr	r1, [pc, #308]	; (208460 <_ZN18AttitudeControllerC1Ev+0x208>)
  20832c:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
    endpoint_(endpoint)
  208330:	494c      	ldr	r1, [pc, #304]	; (208464 <_ZN18AttitudeControllerC1Ev+0x20c>)
  208332:	f8c0 10f4 	str.w	r1, [r0, #244]	; 0xf4
  208336:	4940      	ldr	r1, [pc, #256]	; (208438 <_ZN18AttitudeControllerC1Ev+0x1e0>)
  208338:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
  20833c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
  208340:	493e      	ldr	r1, [pc, #248]	; (20843c <_ZN18AttitudeControllerC1Ev+0x1e4>)
  208342:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
  208346:	f8a0 310c 	strh.w	r3, [r0, #268]	; 0x10c
  20834a:	f8a0 310e 	strh.w	r3, [r0, #270]	; 0x10e
  20834e:	f8a0 3110 	strh.w	r3, [r0, #272]	; 0x110
  208352:	f8a0 3112 	strh.w	r3, [r0, #274]	; 0x112
  208356:	f8a0 3114 	strh.w	r3, [r0, #276]	; 0x114
  20835a:	f8a0 3116 	strh.w	r3, [r0, #278]	; 0x116
  20835e:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
  208362:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
  208366:	4940      	ldr	r1, [pc, #256]	; (208468 <_ZN18AttitudeControllerC1Ev+0x210>)
  208368:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
  20836c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
  208370:	f8c0 0128 	str.w	r0, [r0, #296]	; 0x128
  208374:	f8c0 212c 	str.w	r2, [r0, #300]	; 0x12c
    topic_ = topic_name;
  208378:	493c      	ldr	r1, [pc, #240]	; (20846c <_ZN18AttitudeControllerC1Ev+0x214>)
  20837a:	f8c0 10fc 	str.w	r1, [r0, #252]	; 0xfc
    endpoint_(endpoint)
  20837e:	493c      	ldr	r1, [pc, #240]	; (208470 <_ZN18AttitudeControllerC1Ev+0x218>)
  208380:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
      data(0)
  208384:	493b      	ldr	r1, [pc, #236]	; (208474 <_ZN18AttitudeControllerC1Ev+0x21c>)
  208386:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
  20838a:	2100      	movs	r1, #0
  20838c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
  208390:	4939      	ldr	r1, [pc, #228]	; (208478 <_ZN18AttitudeControllerC1Ev+0x220>)
  208392:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
  208396:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  20839a:	f8c0 014c 	str.w	r0, [r0, #332]	; 0x14c
  20839e:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
    topic_ = topic_name;
  2083a2:	4a36      	ldr	r2, [pc, #216]	; (20847c <_ZN18AttitudeControllerC1Ev+0x224>)
  2083a4:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
    endpoint_(endpoint)
  2083a8:	4a35      	ldr	r2, [pc, #212]	; (208480 <_ZN18AttitudeControllerC1Ev+0x228>)
  2083aa:	f8c0 2154 	str.w	r2, [r0, #340]	; 0x154
      inertia()
  2083ae:	4a35      	ldr	r2, [pc, #212]	; (208484 <_ZN18AttitudeControllerC1Ev+0x22c>)
  2083b0:	f8c0 2160 	str.w	r2, [r0, #352]	; 0x160
  2083b4:	f8c0 3164 	str.w	r3, [r0, #356]	; 0x164
      y(0)
  2083b8:	4a33      	ldr	r2, [pc, #204]	; (208488 <_ZN18AttitudeControllerC1Ev+0x230>)
  2083ba:	f8c0 2168 	str.w	r2, [r0, #360]	; 0x168
  2083be:	f8a0 316c 	strh.w	r3, [r0, #364]	; 0x16c
  2083c2:	f8a0 316e 	strh.w	r3, [r0, #366]	; 0x16e
  2083c6:	f8a0 3170 	strh.w	r3, [r0, #368]	; 0x170
  2083ca:	f8c0 3174 	str.w	r3, [r0, #372]	; 0x174
  2083ce:	f500 73bc 	add.w	r3, r0, #376	; 0x178
  2083d2:	f500 71c2 	add.w	r1, r0, #388	; 0x184
  2083d6:	2200      	movs	r2, #0
  2083d8:	f823 2b02 	strh.w	r2, [r3], #2
  2083dc:	4299      	cmp	r1, r3
  2083de:	d1fb      	bne.n	2083d8 <_ZN18AttitudeControllerC1Ev+0x180>
  2083e0:	4b2a      	ldr	r3, [pc, #168]	; (20848c <_ZN18AttitudeControllerC1Ev+0x234>)
  2083e2:	f8c0 3184 	str.w	r3, [r0, #388]	; 0x184
  2083e6:	2200      	movs	r2, #0
  2083e8:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
  2083ec:	f8c0 018c 	str.w	r0, [r0, #396]	; 0x18c
  2083f0:	2301      	movs	r3, #1
  2083f2:	f8c0 3190 	str.w	r3, [r0, #400]	; 0x190
    topic_ = topic_name;
  2083f6:	4b26      	ldr	r3, [pc, #152]	; (208490 <_ZN18AttitudeControllerC1Ev+0x238>)
  2083f8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
public:
    T        x, y, z;

    // trivial ctor
    Vector3<T>() {
        x = y = z = 0;
  2083fc:	f200 4184 	addw	r1, r0, #1156	; 0x484
  208400:	2300      	movs	r3, #0
  208402:	608b      	str	r3, [r1, #8]
  208404:	604b      	str	r3, [r1, #4]
  208406:	600b      	str	r3, [r1, #0]
  208408:	f500 6192 	add.w	r1, r0, #1168	; 0x490
  20840c:	608b      	str	r3, [r1, #8]
  20840e:	604b      	str	r3, [r1, #4]
  208410:	600b      	str	r3, [r1, #0]
  208412:	f200 419c 	addw	r1, r0, #1180	; 0x49c
  208416:	608b      	str	r3, [r1, #8]
  208418:	604b      	str	r3, [r1, #4]
  20841a:	600b      	str	r3, [r1, #0]
  20841c:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
  208420:	f8c0 2518 	str.w	r2, [r0, #1304]	; 0x518
  208424:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
}
  208428:	4770      	bx	lr
  20842a:	bf00      	nop
  20842c:	00217adc 	.word	0x00217adc
  208430:	00217ae8 	.word	0x00217ae8
  208434:	00217750 	.word	0x00217750
  208438:	00217798 	.word	0x00217798
  20843c:	00217780 	.word	0x00217780
  208440:	00217810 	.word	0x00217810
  208444:	00217768 	.word	0x00217768
  208448:	00207ad9 	.word	0x00207ad9
  20844c:	00217af8 	.word	0x00217af8
  208450:	00217828 	.word	0x00217828
  208454:	002177c8 	.word	0x002177c8
  208458:	002177b0 	.word	0x002177b0
  20845c:	002092f9 	.word	0x002092f9
  208460:	00217b18 	.word	0x00217b18
  208464:	00217840 	.word	0x00217840
  208468:	00207685 	.word	0x00207685
  20846c:	00217b24 	.word	0x00217b24
  208470:	00217858 	.word	0x00217858
  208474:	00217738 	.word	0x00217738
  208478:	00207761 	.word	0x00207761
  20847c:	00217b30 	.word	0x00217b30
  208480:	00217870 	.word	0x00217870
  208484:	002177f8 	.word	0x002177f8
  208488:	002177e0 	.word	0x002177e0
  20848c:	00207775 	.word	0x00207775
  208490:	00217b3c 	.word	0x00217b3c

00208494 <_ZN18AttitudeController16inversionMappingEv>:
  switch (uav_model_)
  208494:	f990 319c 	ldrsb.w	r3, [r0, #412]	; 0x19c
  208498:	2b00      	cmp	r3, #0
  20849a:	d159      	bne.n	208550 <_ZN18AttitudeController16inversionMappingEv+0xbc>
        if(motor_number_ == 4)
  20849c:	f890 319d 	ldrb.w	r3, [r0, #413]	; 0x19d
  2084a0:	2b04      	cmp	r3, #4
  2084a2:	d056      	beq.n	208552 <_ZN18AttitudeController16inversionMappingEv+0xbe>
        if(motor_number_ == 6)
  2084a4:	2b06      	cmp	r3, #6
  2084a6:	d153      	bne.n	208550 <_ZN18AttitudeController16inversionMappingEv+0xbc>
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  2084a8:	edd0 6a6e 	vldr	s13, [r0, #440]	; 0x1b8
  2084ac:	edd0 3a6f 	vldr	s7, [r0, #444]	; 0x1bc
  2084b0:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
  2084b4:	ee63 5aa5 	vmul.f32	s11, s7, s11
  2084b8:	ee75 5aa6 	vadd.f32	s11, s11, s13
  2084bc:	ed90 7a70 	vldr	s14, [r0, #448]	; 0x1c0
  2084c0:	eddf 7a3a 	vldr	s15, [pc, #232]	; 2085ac <_ZN18AttitudeController16inversionMappingEv+0x118>
  2084c4:	ee67 4a27 	vmul.f32	s9, s14, s15
  2084c8:	ed90 5a71 	vldr	s10, [r0, #452]	; 0x1c4
            target_thrust_[0] = underActuatedInversion(-0.5 ,0.866, +1);  //REAR_R
  2084cc:	f500 6395 	add.w	r3, r0, #1192	; 0x4a8
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  2084d0:	ee75 7aa4 	vadd.f32	s15, s11, s9
  2084d4:	ee77 7a85 	vadd.f32	s15, s15, s10
            target_thrust_[0] = underActuatedInversion(-0.5 ,0.866, +1);  //REAR_R
  2084d8:	edc3 7a00 	vstr	s15, [r3]
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  2084dc:	ed9f 4a34 	vldr	s8, [pc, #208]	; 2085b0 <_ZN18AttitudeController16inversionMappingEv+0x11c>
  2084e0:	ee27 4a04 	vmul.f32	s8, s14, s8
            target_thrust_[1] = underActuatedInversion(-1, 0, -1);        //MIDDLE_R
  2084e4:	f200 43ac 	addw	r3, r0, #1196	; 0x4ac
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  2084e8:	ee36 6ae3 	vsub.f32	s12, s13, s7
  2084ec:	ee36 6a04 	vadd.f32	s12, s12, s8
  2084f0:	ee36 6a45 	vsub.f32	s12, s12, s10
            target_thrust_[1] = underActuatedInversion(-1, 0, -1);        //MIDDLE_R
  2084f4:	ed83 6a00 	vstr	s12, [r3]
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  2084f8:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 2085b4 <_ZN18AttitudeController16inversionMappingEv+0x120>
  2084fc:	ee27 6a06 	vmul.f32	s12, s14, s12
            target_thrust_[2] = underActuatedInversion(-0.5, -0.866, +1); //FRONT_R
  208500:	f500 6396 	add.w	r3, r0, #1200	; 0x4b0
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  208504:	ee76 5a25 	vadd.f32	s11, s12, s11
  208508:	ee75 5a85 	vadd.f32	s11, s11, s10
            target_thrust_[2] = underActuatedInversion(-0.5, -0.866, +1); //FRONT_R
  20850c:	edc3 5a00 	vstr	s11, [r3]
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  208510:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  208514:	ee23 7a87 	vmul.f32	s14, s7, s14
  208518:	ee77 7a26 	vadd.f32	s15, s14, s13
            target_thrust_[3] = underActuatedInversion(+0.5 ,-0.866, -1); //FRONT_L
  20851c:	f200 43b4 	addw	r3, r0, #1204	; 0x4b4
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  208520:	ee37 7a86 	vadd.f32	s14, s15, s12
  208524:	ee37 7a45 	vsub.f32	s14, s14, s10
            target_thrust_[3] = underActuatedInversion(+0.5 ,-0.866, -1); //FRONT_L
  208528:	ed83 7a00 	vstr	s14, [r3]
            target_thrust_[4] = underActuatedInversion(+1, 0, +1);        //MIDDLE_L
  20852c:	f500 6397 	add.w	r3, r0, #1208	; 0x4b8
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  208530:	ee76 6aa3 	vadd.f32	s13, s13, s7
  208534:	ee76 6a84 	vadd.f32	s13, s13, s8
  208538:	ee76 6a85 	vadd.f32	s13, s13, s10
            target_thrust_[4] = underActuatedInversion(+1, 0, +1);        //MIDDLE_L
  20853c:	edc3 6a00 	vstr	s13, [r3]
            target_thrust_[5] = underActuatedInversion(+0.5, 0.866,-1);   //REAR_L
  208540:	f200 40bc 	addw	r0, r0, #1212	; 0x4bc
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  208544:	ee77 7aa4 	vadd.f32	s15, s15, s9
  208548:	ee77 7ac5 	vsub.f32	s15, s15, s10
            target_thrust_[5] = underActuatedInversion(+0.5, 0.866,-1);   //REAR_L
  20854c:	edc0 7a00 	vstr	s15, [r0]
  208550:	4770      	bx	lr
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  208552:	edd0 7a6e 	vldr	s15, [r0, #440]	; 0x1b8
  208556:	ed90 5a6f 	vldr	s10, [r0, #444]	; 0x1bc
  20855a:	ee37 7ac5 	vsub.f32	s14, s15, s10
  20855e:	ed90 6a70 	vldr	s12, [r0, #448]	; 0x1c0
  208562:	edd0 6a71 	vldr	s13, [r0, #452]	; 0x1c4
            target_thrust_[0] = underActuatedInversion(-1,+1,+1); //REAR_R
  208566:	f500 6395 	add.w	r3, r0, #1192	; 0x4a8
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  20856a:	ee77 5a06 	vadd.f32	s11, s14, s12
  20856e:	ee75 5aa6 	vadd.f32	s11, s11, s13
            target_thrust_[0] = underActuatedInversion(-1,+1,+1); //REAR_R
  208572:	edc3 5a00 	vstr	s11, [r3]
            target_thrust_[1] = underActuatedInversion(-1,-1,-1); //FRONT_R
  208576:	f200 43ac 	addw	r3, r0, #1196	; 0x4ac
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  20857a:	ee37 7a46 	vsub.f32	s14, s14, s12
  20857e:	ee37 7a66 	vsub.f32	s14, s14, s13
            target_thrust_[1] = underActuatedInversion(-1,-1,-1); //FRONT_R
  208582:	ed83 7a00 	vstr	s14, [r3]
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  208586:	ee77 7a85 	vadd.f32	s15, s15, s10
            target_thrust_[2] = underActuatedInversion(+1,-1,+1); //FRONT_L
  20858a:	f500 6396 	add.w	r3, r0, #1200	; 0x4b0
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  20858e:	ee37 7ac6 	vsub.f32	s14, s15, s12
  208592:	ee37 7a26 	vadd.f32	s14, s14, s13
            target_thrust_[2] = underActuatedInversion(+1,-1,+1); //FRONT_L
  208596:	ed83 7a00 	vstr	s14, [r3]
            target_thrust_[3] = underActuatedInversion(+1,+1,-1); //REAR_L
  20859a:	f200 40b4 	addw	r0, r0, #1204	; 0x4b4
          return target_cog_force_[Z] + target_cog_torque_[X] * x  + target_cog_torque_[Y] * y + target_cog_torque_[Z] * z;
  20859e:	ee77 7a86 	vadd.f32	s15, s15, s12
  2085a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
            target_thrust_[3] = underActuatedInversion(+1,+1,-1); //REAR_L
  2085a6:	edc0 7a00 	vstr	s15, [r0]
  2085aa:	4770      	bx	lr
  2085ac:	3f5db22d 	.word	0x3f5db22d
  2085b0:	00000000 	.word	0x00000000
  2085b4:	bf5db22d 	.word	0xbf5db22d

002085b8 <_ZN18AttitudeController5resetEv>:
{
  2085b8:	b570      	push	{r4, r5, r6, lr}
  2085ba:	4605      	mov	r5, r0
  2085bc:	f500 6395 	add.w	r3, r0, #1192	; 0x4a8
  2085c0:	f500 619a 	add.w	r1, r0, #1232	; 0x4d0
  2085c4:	460a      	mov	r2, r1
      target_thrust_[i] = 0;
  2085c6:	2400      	movs	r4, #0
      target_pwm_[i] = IDLE_DUTY;
  2085c8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
      target_thrust_[i] = 0;
  2085cc:	f843 4b04 	str.w	r4, [r3], #4
      target_pwm_[i] = IDLE_DUTY;
  2085d0:	f842 0b04 	str.w	r0, [r2], #4
  for(int i = 0; i < MAX_MOTOR_NUMBER; i++)
  2085d4:	428b      	cmp	r3, r1
  2085d6:	d1f9      	bne.n	2085cc <_ZN18AttitudeController5resetEv+0x14>
  2085d8:	f505 74d2 	add.w	r4, r5, #420	; 0x1a4
  2085dc:	f505 76d8 	add.w	r6, r5, #432	; 0x1b0
      target_angle_[i] = 0;
  2085e0:	2200      	movs	r2, #0
  2085e2:	f505 706f 	add.w	r0, r5, #956	; 0x3bc
  2085e6:	f844 2b04 	str.w	r2, [r4], #4
      target_cog_force_[i] = 0;
  2085ea:	60a2      	str	r2, [r4, #8]
      target_cog_torque_[i] = 0;
  2085ec:	6162      	str	r2, [r4, #20]
      error_angle_i_[i] = 0;
  2085ee:	66a2      	str	r2, [r4, #104]	; 0x68
  2085f0:	f505 7365 	add.w	r3, r5, #916	; 0x394
  2085f4:	4601      	mov	r1, r0
          base_throttle_term_[j] = 0;
  2085f6:	f843 2b04 	str.w	r2, [r3], #4
          motor_rpy_force_[j] = 0;
  2085fa:	f841 2b04 	str.w	r2, [r1], #4
      for(int j = 0; j < MAX_MOTOR_NUMBER; j++)
  2085fe:	4283      	cmp	r3, r0
  208600:	d1f9      	bne.n	2085f6 <_ZN18AttitudeController5resetEv+0x3e>
  for(int i = 0; i < 3; i++)
  208602:	42b4      	cmp	r4, r6
  208604:	d1ef      	bne.n	2085e6 <_ZN18AttitudeController5resetEv+0x2e>
  integrate_flag_ = false;
  208606:	2300      	movs	r3, #0
  208608:	f885 31a0 	strb.w	r3, [r5, #416]	; 0x1a0
  failsafe_ = false;
  20860c:	f885 3530 	strb.w	r3, [r5, #1328]	; 0x530
  flight_command_last_stamp_ = HAL_GetTick();
  208610:	f007 f948 	bl	20f8a4 <HAL_GetTick>
  208614:	f8c5 0534 	str.w	r0, [r5, #1332]	; 0x534
  208618:	bd70      	pop	{r4, r5, r6, pc}
	...

0020861c <_ZN18AttitudeController8baseInitEv>:
{
  20861c:	b538      	push	{r3, r4, r5, lr}
  20861e:	4604      	mov	r4, r0
  motor_number_ = 0;
  208620:	2300      	movs	r3, #0
  208622:	f880 319d 	strb.w	r3, [r0, #413]	; 0x19d
  uav_model_ = -1;
  208626:	22ff      	movs	r2, #255	; 0xff
  208628:	f880 219c 	strb.w	r2, [r0, #412]	; 0x19c
  start_control_flag_ = false;
  20862c:	f880 319e 	strb.w	r3, [r0, #414]	; 0x19e
  pwm_test_flag_ = false;
  208630:	f880 319f 	strb.w	r3, [r0, #415]	; 0x19f
  lqi_mode_ = false;
  208634:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  force_landing_flag_ = false;
  208638:	f880 31a1 	strb.w	r3, [r0, #417]	; 0x1a1
  pwm_conversion_mode_ = -1;
  20863c:	f880 2510 	strb.w	r2, [r0, #1296]	; 0x510
  min_duty_ = IDLE_DUTY;
  208640:	f500 619f 	add.w	r1, r0, #1272	; 0x4f8
  208644:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
  208648:	600a      	str	r2, [r1, #0]
  max_duty_ = min_duty_; //should assign right value from PC(ros)
  20864a:	f200 41fc 	addw	r1, r0, #1276	; 0x4fc
  20864e:	600a      	str	r2, [r1, #0]
  force_landing_thrust_ = 0;
  208650:	f200 520c 	addw	r2, r0, #1292	; 0x50c
  208654:	2500      	movs	r5, #0
  208656:	6015      	str	r5, [r2, #0]
  v_factor_ = 1;
  208658:	f200 5224 	addw	r2, r0, #1316	; 0x524
  20865c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  208660:	6011      	str	r1, [r2, #0]
  motor_ref_index_ = 0;
  208662:	f880 3520 	strb.w	r3, [r0, #1312]	; 0x520
  voltage_update_last_time_ = 0;
  208666:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
  reset();
  20866a:	f7ff ffa5 	bl	2085b8 <_ZN18AttitudeController5resetEv>
      torque_p_gain_[i]= LEVEL_P_GAIN;
  20866e:	480f      	ldr	r0, [pc, #60]	; (2086ac <_ZN18AttitudeController8baseInitEv+0x90>)
  208670:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
      torque_i_gain_[i]= LEVEL_I_GAIN;
  208674:	490e      	ldr	r1, [pc, #56]	; (2086b0 <_ZN18AttitudeController8baseInitEv+0x94>)
  208676:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
      torque_d_gain_[i]= LEVEL_D_GAIN;
  20867a:	4a0e      	ldr	r2, [pc, #56]	; (2086b4 <_ZN18AttitudeController8baseInitEv+0x98>)
  20867c:	f8c4 21e0 	str.w	r2, [r4, #480]	; 0x1e0
      error_angle_i_limit_[i] =I_TERM_LEVEL_LIMIT / LEVEL_I_GAIN;
  208680:	4b0d      	ldr	r3, [pc, #52]	; (2086b8 <_ZN18AttitudeController8baseInitEv+0x9c>)
  208682:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
      torque_p_gain_[i]= LEVEL_P_GAIN;
  208686:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
      torque_i_gain_[i]= LEVEL_I_GAIN;
  20868a:	f8c4 11d8 	str.w	r1, [r4, #472]	; 0x1d8
      torque_d_gain_[i]= LEVEL_D_GAIN;
  20868e:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
      error_angle_i_limit_[i] =I_TERM_LEVEL_LIMIT / LEVEL_I_GAIN;
  208692:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
          torque_p_gain_[i]= YAW_P_GAIN;
  208696:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
          torque_i_gain_[i]= YAW_I_GAIN;
  20869a:	4b08      	ldr	r3, [pc, #32]	; (2086bc <_ZN18AttitudeController8baseInitEv+0xa0>)
  20869c:	f8c4 31dc 	str.w	r3, [r4, #476]	; 0x1dc
          torque_d_gain_[i]= YAW_D_GAIN;
  2086a0:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
          error_angle_i_limit_[i] = I_TERM_YAW_LIMIT / YAW_I_GAIN;
  2086a4:	4b06      	ldr	r3, [pc, #24]	; (2086c0 <_ZN18AttitudeController8baseInitEv+0xa4>)
  2086a6:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
  2086aa:	bd38      	pop	{r3, r4, r5, pc}
  2086ac:	43c98852 	.word	0x43c98852
  2086b0:	43d1eccd 	.word	0x43d1eccd
  2086b4:	42d461f2 	.word	0x42d461f2
  2086b8:	3d73e589 	.word	0x3d73e589
  2086bc:	43960000 	.word	0x43960000
  2086c0:	3e99999a 	.word	0x3e99999a

002086c4 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>:
{
  2086c4:	b538      	push	{r3, r4, r5, lr}
  2086c6:	4604      	mov	r4, r0
  2086c8:	4608      	mov	r0, r1
  pwm_htim1_ = htim1;
  2086ca:	6021      	str	r1, [r4, #0]
  pwm_htim2_ = htim2;
  2086cc:	6062      	str	r2, [r4, #4]
  nh_ = nh;
  2086ce:	9a05      	ldr	r2, [sp, #20]
  2086d0:	60a2      	str	r2, [r4, #8]
  estimator_ = estimator;
  2086d2:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
  bat_ = bat;
  2086d6:	9b04      	ldr	r3, [sp, #16]
  2086d8:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  HAL_TIM_PWM_Start(pwm_htim1_,TIM_CHANNEL_1);
  2086dc:	2100      	movs	r1, #0
  2086de:	f00a ff43 	bl	213568 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(pwm_htim1_,TIM_CHANNEL_2);
  2086e2:	2104      	movs	r1, #4
  2086e4:	6820      	ldr	r0, [r4, #0]
  2086e6:	f00a ff3f 	bl	213568 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(pwm_htim1_,TIM_CHANNEL_3);
  2086ea:	2108      	movs	r1, #8
  2086ec:	6820      	ldr	r0, [r4, #0]
  2086ee:	f00a ff3b 	bl	213568 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(pwm_htim1_,TIM_CHANNEL_4);
  2086f2:	210c      	movs	r1, #12
  2086f4:	6820      	ldr	r0, [r4, #0]
  2086f6:	f00a ff37 	bl	213568 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(pwm_htim2_,TIM_CHANNEL_1);
  2086fa:	2100      	movs	r1, #0
  2086fc:	6860      	ldr	r0, [r4, #4]
  2086fe:	f00a ff33 	bl	213568 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(pwm_htim2_,TIM_CHANNEL_2);
  208702:	2104      	movs	r1, #4
  208704:	6860      	ldr	r0, [r4, #4]
  208706:	f00a ff2f 	bl	213568 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(pwm_htim2_,TIM_CHANNEL_3);
  20870a:	2108      	movs	r1, #8
  20870c:	6860      	ldr	r0, [r4, #4]
  20870e:	f00a ff2b 	bl	213568 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(pwm_htim2_,TIM_CHANNEL_4);
  208712:	210c      	movs	r1, #12
  208714:	6860      	ldr	r0, [r4, #4]
  208716:	f00a ff27 	bl	213568 <HAL_TIM_PWM_Start>
  nh_->advertise(pwms_pub_);
  20871a:	68a0      	ldr	r0, [r4, #8]
      if (publishers[i] == 0) // empty slot
  20871c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  208720:	b15b      	cbz	r3, 20873a <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x76>
  208722:	f500 7206 	add.w	r2, r0, #536	; 0x218
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  208726:	2301      	movs	r3, #1
      if (publishers[i] == 0) // empty slot
  208728:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20872c:	b131      	cbz	r1, 20873c <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x78>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20872e:	3301      	adds	r3, #1
  208730:	2b14      	cmp	r3, #20
  208732:	d1f9      	bne.n	208728 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x64>
  nh_->advertise(control_term_pub_);
  208734:	f104 0520 	add.w	r5, r4, #32
  208738:	e00f      	b.n	20875a <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x96>
  20873a:	2300      	movs	r3, #0
        publishers[i] = &p;
  20873c:	f103 0286 	add.w	r2, r3, #134	; 0x86
  nh_->advertise(pwms_pub_);
  208740:	f104 010c 	add.w	r1, r4, #12
  208744:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
  208748:	3378      	adds	r3, #120	; 0x78
  20874a:	6163      	str	r3, [r4, #20]
        p.nh_ = this;
  20874c:	61a0      	str	r0, [r4, #24]
  nh_->advertise(control_term_pub_);
  20874e:	68a0      	ldr	r0, [r4, #8]
  208750:	f104 0520 	add.w	r5, r4, #32
      if (publishers[i] == 0) // empty slot
  208754:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  208758:	b1b3      	cbz	r3, 208788 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xc4>
  20875a:	f500 7206 	add.w	r2, r0, #536	; 0x218
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20875e:	2301      	movs	r3, #1
      if (publishers[i] == 0) // empty slot
  208760:	f852 1f04 	ldr.w	r1, [r2, #4]!
  208764:	b189      	cbz	r1, 20878a <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xc6>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  208766:	3301      	adds	r3, #1
  208768:	2b14      	cmp	r3, #20
  20876a:	d1f9      	bne.n	208760 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x9c>
  nh_->subscribe< ros::Subscriber<aerial_robot_msgs::FourAxisCommand, AttitudeController> >(four_axis_cmd_sub_);
  20876c:	68a0      	ldr	r0, [r4, #8]
      if (subscribers[i] == 0) // empty slot
  20876e:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
  208772:	b193      	cbz	r3, 20879a <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xd6>
  208774:	f500 721a 	add.w	r2, r0, #616	; 0x268
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  208778:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  20877a:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20877e:	b169      	cbz	r1, 20879c <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xd8>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  208780:	3301      	adds	r3, #1
  208782:	2b14      	cmp	r3, #20
  208784:	d1f9      	bne.n	20877a <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xb6>
  208786:	e015      	b.n	2087b4 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xf0>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  208788:	2300      	movs	r3, #0
        publishers[i] = &p;
  20878a:	f103 0286 	add.w	r2, r3, #134	; 0x86
  20878e:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
  208792:	3378      	adds	r3, #120	; 0x78
  208794:	62a3      	str	r3, [r4, #40]	; 0x28
        p.nh_ = this;
  208796:	62e0      	str	r0, [r4, #44]	; 0x2c
  208798:	e7e8      	b.n	20876c <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xa8>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20879a:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  20879c:	f103 029a 	add.w	r2, r3, #154	; 0x9a
  2087a0:	f104 0164 	add.w	r1, r4, #100	; 0x64
  2087a4:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        s.id_ = i + 100;
  2087a8:	3364      	adds	r3, #100	; 0x64
  2087aa:	66a3      	str	r3, [r4, #104]	; 0x68
  nh_->subscribe< ros::Subscriber<aerial_robot_msgs::PwmInfo, AttitudeController> >(pwm_info_sub_);
  2087ac:	68a0      	ldr	r0, [r4, #8]
      if (subscribers[i] == 0) // empty slot
  2087ae:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
  2087b2:	b153      	cbz	r3, 2087ca <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x106>
  2087b4:	f500 721a 	add.w	r2, r0, #616	; 0x268
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  2087b8:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  2087ba:	f852 1f04 	ldr.w	r1, [r2, #4]!
  2087be:	b129      	cbz	r1, 2087cc <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x108>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  2087c0:	3301      	adds	r3, #1
  2087c2:	2b14      	cmp	r3, #20
  2087c4:	d1f9      	bne.n	2087ba <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xf6>
  nh_->subscribe< ros::Subscriber<aerial_robot_msgs::RollPitchYawTerms, AttitudeController> >(rpy_gain_sub_);
  2087c6:	68a0      	ldr	r0, [r4, #8]
  2087c8:	e00d      	b.n	2087e6 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x122>
  2087ca:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  2087cc:	f103 029a 	add.w	r2, r3, #154	; 0x9a
  2087d0:	f104 019c 	add.w	r1, r4, #156	; 0x9c
  2087d4:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        s.id_ = i + 100;
  2087d8:	3364      	adds	r3, #100	; 0x64
  2087da:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  2087de:	68a0      	ldr	r0, [r4, #8]
      if (subscribers[i] == 0) // empty slot
  2087e0:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
  2087e4:	b153      	cbz	r3, 2087fc <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x138>
  2087e6:	f500 721a 	add.w	r2, r0, #616	; 0x268
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  2087ea:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  2087ec:	f852 1f04 	ldr.w	r1, [r2, #4]!
  2087f0:	b129      	cbz	r1, 2087fe <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x13a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  2087f2:	3301      	adds	r3, #1
  2087f4:	2b14      	cmp	r3, #20
  2087f6:	d1f9      	bne.n	2087ec <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x128>
  nh_->subscribe< ros::Subscriber<std_msgs::Float32, AttitudeController> >(pwm_test_sub_);
  2087f8:	68a0      	ldr	r0, [r4, #8]
  2087fa:	e00d      	b.n	208818 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x154>
  2087fc:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  2087fe:	f103 029a 	add.w	r2, r3, #154	; 0x9a
  208802:	f104 01f4 	add.w	r1, r4, #244	; 0xf4
  208806:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        s.id_ = i + 100;
  20880a:	3364      	adds	r3, #100	; 0x64
  20880c:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
  208810:	68a0      	ldr	r0, [r4, #8]
      if (subscribers[i] == 0) // empty slot
  208812:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
  208816:	b153      	cbz	r3, 20882e <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x16a>
  208818:	f500 721a 	add.w	r2, r0, #616	; 0x268
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20881c:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  20881e:	f852 1f04 	ldr.w	r1, [r2, #4]!
  208822:	b129      	cbz	r1, 208830 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x16c>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  208824:	3301      	adds	r3, #1
  208826:	2b14      	cmp	r3, #20
  208828:	d1f9      	bne.n	20881e <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x15a>
  nh_->subscribe< ros::Subscriber<hydrus::PMatrixPseudoInverseWithInertia, AttitudeController> >(p_matrix_pseudo_inverse_inertia_sub_);
  20882a:	68a0      	ldr	r0, [r4, #8]
  20882c:	e00d      	b.n	20884a <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x186>
  20882e:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  208830:	f103 029a 	add.w	r2, r3, #154	; 0x9a
  208834:	f504 7198 	add.w	r1, r4, #304	; 0x130
  208838:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        s.id_ = i + 100;
  20883c:	3364      	adds	r3, #100	; 0x64
  20883e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  208842:	68a0      	ldr	r0, [r4, #8]
      if (subscribers[i] == 0) // empty slot
  208844:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
  208848:	b163      	cbz	r3, 208864 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x1a0>
  20884a:	f500 721a 	add.w	r2, r0, #616	; 0x268
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20884e:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  208850:	f852 1f04 	ldr.w	r1, [r2, #4]!
  208854:	b139      	cbz	r1, 208866 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x1a2>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  208856:	3301      	adds	r3, #1
  208858:	2b14      	cmp	r3, #20
  20885a:	d1f9      	bne.n	208850 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x18c>
  baseInit();
  20885c:	4620      	mov	r0, r4
  20885e:	f7ff fedd 	bl	20861c <_ZN18AttitudeController8baseInitEv>
}
  208862:	bd38      	pop	{r3, r4, r5, pc}
  208864:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  208866:	f103 029a 	add.w	r2, r3, #154	; 0x9a
  20886a:	f504 71aa 	add.w	r1, r4, #340	; 0x154
  20886e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
        s.id_ = i + 100;
  208872:	3364      	adds	r3, #100	; 0x64
  208874:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
  208878:	e7f0      	b.n	20885c <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x198>

0020887a <_ZN18AttitudeController19setStartControlFlagEb>:

void AttitudeController::setStartControlFlag(bool start_control_flag)
{
  start_control_flag_ = start_control_flag;
  20887a:	f880 119e 	strb.w	r1, [r0, #414]	; 0x19e

  if(!start_control_flag_) reset();
  20887e:	b101      	cbz	r1, 208882 <_ZN18AttitudeController19setStartControlFlagEb+0x8>
  208880:	4770      	bx	lr
{
  208882:	b508      	push	{r3, lr}
  if(!start_control_flag_) reset();
  208884:	f7ff fe98 	bl	2085b8 <_ZN18AttitudeController5resetEv>
  208888:	bd08      	pop	{r3, pc}
	...

0020888c <_ZN18AttitudeController14setMotorNumberEh>:
}

void AttitudeController::setMotorNumber(uint8_t motor_number)
{
  20888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* check the motor number which has spine system */
  if(motor_number_ > 0)
  20888e:	f890 319d 	ldrb.w	r3, [r0, #413]	; 0x19d
  208892:	b12b      	cbz	r3, 2088a0 <_ZN18AttitudeController14setMotorNumberEh+0x14>
    {
      if(motor_number_ != motor_number)
  208894:	428b      	cmp	r3, r1
  208896:	d02c      	beq.n	2088f2 <_ZN18AttitudeController14setMotorNumberEh+0x66>
        {
          motor_number_ = 0;
  208898:	2300      	movs	r3, #0
  20889a:	f880 319d 	strb.w	r3, [r0, #413]	; 0x19d
  20889e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  2088a0:	460e      	mov	r6, r1
  2088a2:	4605      	mov	r5, r0
    {
#ifdef SIMULATION
      pwms_msg_.motor_value.resize(motor_number);
      control_term_msg_.motors.resize(motor_number);
#else
      pwms_msg_.motor_value_length = motor_number;
  2088a4:	63a9      	str	r1, [r5, #56]	; 0x38
      control_term_msg_.motors_length = motor_number;
  2088a6:	64a9      	str	r1, [r5, #72]	; 0x48
      pwms_msg_.motor_value = new uint16_t[motor_number];
  2088a8:	004f      	lsls	r7, r1, #1
  2088aa:	4638      	mov	r0, r7
  2088ac:	f00b fc1e 	bl	2140ec <_Znaj>
  2088b0:	6428      	str	r0, [r5, #64]	; 0x40
      control_term_msg_.motors = new aerial_robot_msgs::RollPitchYawTerm[motor_number];
  2088b2:	eb06 0086 	add.w	r0, r6, r6, lsl #2
  2088b6:	0080      	lsls	r0, r0, #2
  2088b8:	f00b fc18 	bl	2140ec <_Znaj>
  2088bc:	1e74      	subs	r4, r6, #1
  2088be:	d40d      	bmi.n	2088dc <_ZN18AttitudeController14setMotorNumberEh+0x50>
  2088c0:	4603      	mov	r3, r0
  2088c2:	490c      	ldr	r1, [pc, #48]	; (2088f4 <_ZN18AttitudeController14setMotorNumberEh+0x68>)
  2088c4:	2200      	movs	r2, #0
  2088c6:	6019      	str	r1, [r3, #0]
  2088c8:	809a      	strh	r2, [r3, #4]
  2088ca:	80da      	strh	r2, [r3, #6]
  2088cc:	811a      	strh	r2, [r3, #8]
  2088ce:	815a      	strh	r2, [r3, #10]
  2088d0:	819a      	strh	r2, [r3, #12]
  2088d2:	81da      	strh	r2, [r3, #14]
  2088d4:	821a      	strh	r2, [r3, #16]
  2088d6:	3314      	adds	r3, #20
  2088d8:	3c01      	subs	r4, #1
  2088da:	d5f4      	bpl.n	2088c6 <_ZN18AttitudeController14setMotorNumberEh+0x3a>
  2088dc:	6628      	str	r0, [r5, #96]	; 0x60
#endif
      for(int i = 0; i < motor_number; i++) pwms_msg_.motor_value[i] = 0;
  2088de:	b136      	cbz	r6, 2088ee <_ZN18AttitudeController14setMotorNumberEh+0x62>
  2088e0:	2300      	movs	r3, #0
  2088e2:	4619      	mov	r1, r3
  2088e4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
  2088e6:	52d1      	strh	r1, [r2, r3]
  2088e8:	3302      	adds	r3, #2
  2088ea:	42bb      	cmp	r3, r7
  2088ec:	d1fa      	bne.n	2088e4 <_ZN18AttitudeController14setMotorNumberEh+0x58>

      /* the initialize order is important */
      motor_number_ = motor_number ;
  2088ee:	f885 619d 	strb.w	r6, [r5, #413]	; 0x19d
  2088f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  2088f4:	00217780 	.word	0x00217780

002088f8 <_ZN18AttitudeController11setUavModelEa>:
}

void  AttitudeController::setUavModel(int8_t uav_model)
{
  /* check the uav model which has spine system */
  if(uav_model_ != -1)
  2088f8:	f990 319c 	ldrsb.w	r3, [r0, #412]	; 0x19c
  2088fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  208900:	d005      	beq.n	20890e <_ZN18AttitudeController11setUavModelEa+0x16>
    {
      if(uav_model_ != uav_model)
  208902:	428b      	cmp	r3, r1
  208904:	d00c      	beq.n	208920 <_ZN18AttitudeController11setUavModelEa+0x28>
        {
          uav_model_ = -1;
  208906:	23ff      	movs	r3, #255	; 0xff
  208908:	f880 319c 	strb.w	r3, [r0, #412]	; 0x19c
  20890c:	4770      	bx	lr
          /* TODO: ros log to inform the error */
        }
    }
  else
    {
      uav_model_ = uav_model;
  20890e:	f880 119c 	strb.w	r1, [r0, #412]	; 0x19c

      if(uav_model_ == aerial_robot_base::UavInfo::HYDRUS ||
  208912:	2910      	cmp	r1, #16
  208914:	d001      	beq.n	20891a <_ZN18AttitudeController11setUavModelEa+0x22>
  208916:	2920      	cmp	r1, #32
  208918:	d102      	bne.n	208920 <_ZN18AttitudeController11setUavModelEa+0x28>
         uav_model_ == aerial_robot_base::UavInfo::DRAGON)
        lqi_mode_ = true;
  20891a:	2301      	movs	r3, #1
  20891c:	f880 3228 	strb.w	r3, [r0, #552]	; 0x228
  208920:	4770      	bx	lr

00208922 <_ZN18AttitudeController9activatedEv>:
}

bool AttitudeController::activated()
{
  /* uav model check and motor property */
  if(motor_number_ > 0 && uav_model_ >= aerial_robot_base::UavInfo::DRONE && max_duty_ > min_duty_) return true;
  208922:	f890 319d 	ldrb.w	r3, [r0, #413]	; 0x19d
  208926:	b19b      	cbz	r3, 208950 <_ZN18AttitudeController9activatedEv+0x2e>
  208928:	f990 319c 	ldrsb.w	r3, [r0, #412]	; 0x19c
  20892c:	2b00      	cmp	r3, #0
  20892e:	db11      	blt.n	208954 <_ZN18AttitudeController9activatedEv+0x32>
  208930:	f200 43fc 	addw	r3, r0, #1276	; 0x4fc
  208934:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
  208938:	ed93 7a00 	vldr	s14, [r3]
  20893c:	edd0 7a00 	vldr	s15, [r0]
  208940:	eeb4 7ae7 	vcmpe.f32	s14, s15
  208944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  208948:	bfcc      	ite	gt
  20894a:	2001      	movgt	r0, #1
  20894c:	2000      	movle	r0, #0
  20894e:	4770      	bx	lr
  else return false;
  208950:	2000      	movs	r0, #0
  208952:	4770      	bx	lr
  208954:	2000      	movs	r0, #0
}
  208956:	4770      	bx	lr

00208958 <_ZN18AttitudeController13pwmConversionEf>:

float AttitudeController::pwmConversion(float thrust)
{
  208958:	b510      	push	{r4, lr}
  20895a:	ed2d 8b02 	vpush	{d8}
  20895e:	4604      	mov	r4, r0
  208960:	eeb0 8a40 	vmov.f32	s16, s0
  if(HAL_GetTick() - voltage_update_last_time_ > 500) //[500ms = 0.5s]
  208964:	f006 ff9e 	bl	20f8a4 <HAL_GetTick>
  208968:	f8d4 3528 	ldr.w	r3, [r4, #1320]	; 0x528
  20896c:	1ac0      	subs	r0, r0, r3
  20896e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  208972:	d92f      	bls.n	2089d4 <_ZN18AttitudeController13pwmConversionEf+0x7c>
  }

  ros::Publisher voltage_status_pub_;
  std_msgs::Float32 voltage_status_msg_;

  inline float getVoltage() {return voltage_;}
  208974:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
  208978:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  20897c:	f8d4 0514 	ldr.w	r0, [r4, #1300]	; 0x514
  208980:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
  208984:	1a09      	subs	r1, r1, r0
  208986:	108b      	asrs	r3, r1, #2
  208988:	4959      	ldr	r1, [pc, #356]	; (208af0 <_ZN18AttitudeController13pwmConversionEf+0x198>)
  20898a:	fb01 f103 	mul.w	r1, r1, r3
      //voltage = 25.2; //test
#endif

      /* find the best reference */
      float min_voltage_diff = 1e6;
      for(int i = 0; i < motor_info_.size(); i++)
  20898e:	b1c1      	cbz	r1, 2089c2 <_ZN18AttitudeController13pwmConversionEf+0x6a>
  208990:	4602      	mov	r2, r0
  208992:	2300      	movs	r3, #0
  208994:	ed9f 7a57 	vldr	s14, [pc, #348]	; 208af4 <_ZN18AttitudeController13pwmConversionEf+0x19c>
  208998:	e003      	b.n	2089a2 <_ZN18AttitudeController13pwmConversionEf+0x4a>
  20899a:	3301      	adds	r3, #1
  20899c:	321c      	adds	r2, #28
  20899e:	428b      	cmp	r3, r1
  2089a0:	d00f      	beq.n	2089c2 <_ZN18AttitudeController13pwmConversionEf+0x6a>
        {
          float voltage_diff = fabs(voltage - motor_info_[i].voltage);
  2089a2:	edd2 7a01 	vldr	s15, [r2, #4]
  2089a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
  2089aa:	eef0 7ae7 	vabs.f32	s15, s15
          if(min_voltage_diff > voltage_diff)
  2089ae:	eef4 7ac7 	vcmpe.f32	s15, s14
  2089b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  2089b6:	d5f0      	bpl.n	20899a <_ZN18AttitudeController13pwmConversionEf+0x42>
            {
              motor_ref_index_ = i;
  2089b8:	f884 3520 	strb.w	r3, [r4, #1312]	; 0x520
              min_voltage_diff = voltage_diff;
  2089bc:	eeb0 7a67 	vmov.f32	s14, s15
  2089c0:	e7eb      	b.n	20899a <_ZN18AttitudeController13pwmConversionEf+0x42>
            }
        }

      switch(pwm_conversion_mode_)
  2089c2:	f994 3510 	ldrsb.w	r3, [r4, #1296]	; 0x510
  2089c6:	b16b      	cbz	r3, 2089e4 <_ZN18AttitudeController13pwmConversionEf+0x8c>
  2089c8:	2b01      	cmp	r3, #1
  2089ca:	d01c      	beq.n	208a06 <_ZN18AttitudeController13pwmConversionEf+0xae>
          {
            break;
          }
        }

      voltage_update_last_time_ = HAL_GetTick();
  2089cc:	f006 ff6a 	bl	20f8a4 <HAL_GetTick>
  2089d0:	f8c4 0528 	str.w	r0, [r4, #1320]	; 0x528
    }

  float target_pwm = IDLE_DUTY;
  switch(pwm_conversion_mode_)
  2089d4:	f994 3510 	ldrsb.w	r3, [r4, #1296]	; 0x510
  2089d8:	b353      	cbz	r3, 208a30 <_ZN18AttitudeController13pwmConversionEf+0xd8>
  2089da:	2b01      	cmp	r3, #1
  2089dc:	d067      	beq.n	208aae <_ZN18AttitudeController13pwmConversionEf+0x156>
  float target_pwm = IDLE_DUTY;
  2089de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  2089e2:	e05d      	b.n	208aa0 <_ZN18AttitudeController13pwmConversionEf+0x148>
            v_factor_ = (motor_info_[motor_ref_index_].voltage / voltage) *  (motor_info_[motor_ref_index_].voltage / voltage) ;
  2089e4:	f894 3520 	ldrb.w	r3, [r4, #1312]	; 0x520
  2089e8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  2089ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  2089f0:	ed90 7a01 	vldr	s14, [r0, #4]
  2089f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
  2089f8:	f204 5324 	addw	r3, r4, #1316	; 0x524
  2089fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
  208a00:	edc3 7a00 	vstr	s15, [r3]
            break;
  208a04:	e7e2      	b.n	2089cc <_ZN18AttitudeController13pwmConversionEf+0x74>
            v_factor_ = motor_info_[motor_ref_index_].voltage / voltage * inv_sqrt(voltage / motor_info_[motor_ref_index_].voltage);
  208a06:	f894 3520 	ldrb.w	r3, [r4, #1312]	; 0x520
  208a0a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  208a0e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  208a12:	ed90 0a01 	vldr	s0, [r0, #4]
  208a16:	eec0 8a26 	vdiv.f32	s17, s0, s13
  208a1a:	ee86 0a80 	vdiv.f32	s0, s13, s0
  208a1e:	f000 fcdd 	bl	2093dc <_Z8inv_sqrtf>
  208a22:	f204 5324 	addw	r3, r4, #1316	; 0x524
  208a26:	ee28 0a80 	vmul.f32	s0, s17, s0
  208a2a:	ed83 0a00 	vstr	s0, [r3]
            break;
  208a2e:	e7cd      	b.n	2089cc <_ZN18AttitudeController13pwmConversionEf+0x74>
    {
    case aerial_robot_msgs::MotorInfo::SQRT_MODE:
      {
        /* pwm = F_inv[(V_ref / V)^2 f] */
        float sqrt_tmp = motor_info_[motor_ref_index_].polynominal[1] * motor_info_[motor_ref_index_].polynominal[1] - 4 * 10 * motor_info_[motor_ref_index_].polynominal[2] * (motor_info_[motor_ref_index_].polynominal[0] - v_factor_ * thrust); //special decimal order shift (x10)
  208a30:	f894 3520 	ldrb.w	r3, [r4, #1312]	; 0x520
      { return *(this->_M_impl._M_start + __n); }
  208a34:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  208a38:	f8d4 3514 	ldr.w	r3, [r4, #1300]	; 0x514
  208a3c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  208a40:	ed93 0a03 	vldr	s0, [r3, #12]
  208a44:	ee20 0a00 	vmul.f32	s0, s0, s0
  208a48:	f204 5224 	addw	r2, r4, #1316	; 0x524
  208a4c:	edd2 7a00 	vldr	s15, [r2]
  208a50:	ee28 8a27 	vmul.f32	s16, s16, s15
  208a54:	edd3 7a02 	vldr	s15, [r3, #8]
  208a58:	ee37 8ac8 	vsub.f32	s16, s15, s16
  208a5c:	edd3 7a04 	vldr	s15, [r3, #16]
  208a60:	ed9f 7a25 	vldr	s14, [pc, #148]	; 208af8 <_ZN18AttitudeController13pwmConversionEf+0x1a0>
  208a64:	ee67 7a87 	vmul.f32	s15, s15, s14
  208a68:	ee28 8a27 	vmul.f32	s16, s16, s15
  208a6c:	ee30 8a48 	vsub.f32	s16, s0, s16
        target_pwm = (-motor_info_[motor_ref_index_].polynominal[1] + sqrt_tmp * inv_sqrt(sqrt_tmp)) / (2 * motor_info_[motor_ref_index_].polynominal[2]);
  208a70:	eeb0 0a48 	vmov.f32	s0, s16
  208a74:	f000 fcb2 	bl	2093dc <_Z8inv_sqrtf>
  208a78:	f894 3520 	ldrb.w	r3, [r4, #1312]	; 0x520
  208a7c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  208a80:	f8d4 3514 	ldr.w	r3, [r4, #1300]	; 0x514
  208a84:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  208a88:	ee28 0a00 	vmul.f32	s0, s16, s0
  208a8c:	ed93 8a03 	vldr	s16, [r3, #12]
  208a90:	ee30 0a48 	vsub.f32	s0, s0, s16
  208a94:	edd3 7a04 	vldr	s15, [r3, #16]
  208a98:	ee37 7aa7 	vadd.f32	s14, s15, s15
  208a9c:	eec0 7a07 	vdiv.f32	s15, s0, s14
      {
        break;
      }
    }
  return target_pwm / 100; // target_pwm is [%] -> decimal
}
  208aa0:	ed9f 0a16 	vldr	s0, [pc, #88]	; 208afc <_ZN18AttitudeController13pwmConversionEf+0x1a4>
  208aa4:	ee87 0a80 	vdiv.f32	s0, s15, s0
  208aa8:	ecbd 8b02 	vpop	{d8}
  208aac:	bd10      	pop	{r4, pc}
        float v_factor_thrust_decimal = v_factor_ * thrust * 0.1f; //special decimal order shift (x0.1)
  208aae:	f204 5324 	addw	r3, r4, #1316	; 0x524
  208ab2:	edd3 7a00 	vldr	s15, [r3]
  208ab6:	ee28 8a27 	vmul.f32	s16, s16, s15
  208aba:	eddf 7a11 	vldr	s15, [pc, #68]	; 208b00 <_ZN18AttitudeController13pwmConversionEf+0x1a8>
  208abe:	ee28 8a27 	vmul.f32	s16, s16, s15
        target_pwm = motor_info_[motor_ref_index_].polynominal[max_dimenstional];
  208ac2:	f894 2520 	ldrb.w	r2, [r4, #1312]	; 0x520
  208ac6:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  208aca:	f8d4 2514 	ldr.w	r2, [r4, #1300]	; 0x514
  208ace:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  208ad2:	4613      	mov	r3, r2
  208ad4:	3318      	adds	r3, #24
  208ad6:	edd3 7a00 	vldr	s15, [r3]
  208ada:	3208      	adds	r2, #8
            target_pwm = target_pwm * v_factor_thrust_decimal + motor_info_[motor_ref_index_].polynominal[j];
  208adc:	ee68 7a27 	vmul.f32	s15, s16, s15
  208ae0:	ed33 0a01 	vldmdb	r3!, {s0}
  208ae4:	ee77 7a80 	vadd.f32	s15, s15, s0
        for (int j = max_dimenstional - 1; j >= 0; j--)
  208ae8:	4293      	cmp	r3, r2
  208aea:	d1f7      	bne.n	208adc <_ZN18AttitudeController13pwmConversionEf+0x184>
  208aec:	e7d8      	b.n	208aa0 <_ZN18AttitudeController13pwmConversionEf+0x148>
  208aee:	bf00      	nop
  208af0:	b6db6db7 	.word	0xb6db6db7
  208af4:	49742400 	.word	0x49742400
  208af8:	42200000 	.word	0x42200000
  208afc:	42c80000 	.word	0x42c80000
  208b00:	3dcccccd 	.word	0x3dcccccd

00208b04 <_ZN18AttitudeController11pwmsControlEv>:
{
  208b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  208b08:	ed2d 8b02 	vpush	{d8}
  208b0c:	b082      	sub	sp, #8
  208b0e:	4604      	mov	r4, r0
  static uint32_t ros_pub_last_time = HAL_GetTick();
  208b10:	4b4c      	ldr	r3, [pc, #304]	; (208c44 <_ZN18AttitudeController11pwmsControlEv+0x140>)
  208b12:	681b      	ldr	r3, [r3, #0]
  208b14:	f013 0f01 	tst.w	r3, #1
  208b18:	d00f      	beq.n	208b3a <_ZN18AttitudeController11pwmsControlEv+0x36>
  for(int i = 0; i < motor_number_; i++)
  208b1a:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
  208b1e:	2b00      	cmp	r3, #0
  208b20:	d052      	beq.n	208bc8 <_ZN18AttitudeController11pwmsControlEv+0xc4>
  208b22:	f504 6795 	add.w	r7, r4, #1192	; 0x4a8
  208b26:	f504 669a 	add.w	r6, r4, #1232	; 0x4d0
  208b2a:	2500      	movs	r5, #0
      if(uav_model_ == aerial_robot_base::UavInfo::DRAGON) target_thrust /= 2;
  208b2c:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
          if(target_pwm_[i] < min_duty_) target_pwm_[i]  = min_duty_;
  208b30:	f504 689f 	add.w	r8, r4, #1272	; 0x4f8
      pwms_msg_.motor_value[i] = (target_pwm_[i] * 2000);
  208b34:	ed9f 8a44 	vldr	s16, [pc, #272]	; 208c48 <_ZN18AttitudeController11pwmsControlEv+0x144>
  208b38:	e022      	b.n	208b80 <_ZN18AttitudeController11pwmsControlEv+0x7c>
  static uint32_t ros_pub_last_time = HAL_GetTick();
  208b3a:	f006 feb3 	bl	20f8a4 <HAL_GetTick>
  208b3e:	4b41      	ldr	r3, [pc, #260]	; (208c44 <_ZN18AttitudeController11pwmsControlEv+0x140>)
  208b40:	6058      	str	r0, [r3, #4]
  208b42:	2201      	movs	r2, #1
  208b44:	601a      	str	r2, [r3, #0]
  208b46:	e7e8      	b.n	208b1a <_ZN18AttitudeController11pwmsControlEv+0x16>
          else if(target_pwm_[i]  > abs_max_duty_) target_pwm_[i]  = abs_max_duty_;
  208b48:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
  208b4c:	edd3 7a00 	vldr	s15, [r3]
  208b50:	eeb4 0ae7 	vcmpe.f32	s0, s15
  208b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  208b58:	bfc8      	it	gt
  208b5a:	edc6 7a00 	vstrgt	s15, [r6]
  208b5e:	e02a      	b.n	208bb6 <_ZN18AttitudeController11pwmsControlEv+0xb2>
      pwms_msg_.motor_value[i] = (target_pwm_[i] * 2000);
  208b60:	6c22      	ldr	r2, [r4, #64]	; 0x40
  208b62:	ecf6 7a01 	vldmia	r6!, {s15}
  208b66:	ee67 7a88 	vmul.f32	s15, s15, s16
  208b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  208b6e:	ee17 3a90 	vmov	r3, s15
  208b72:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
  for(int i = 0; i < motor_number_; i++)
  208b76:	3501      	adds	r5, #1
  208b78:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
  208b7c:	42ab      	cmp	r3, r5
  208b7e:	dd23      	ble.n	208bc8 <_ZN18AttitudeController11pwmsControlEv+0xc4>
      float target_thrust = target_thrust_[i];
  208b80:	ecb7 0a01 	vldmia	r7!, {s0}
      if(uav_model_ == aerial_robot_base::UavInfo::DRAGON) target_thrust /= 2;
  208b84:	f994 319c 	ldrsb.w	r3, [r4, #412]	; 0x19c
  208b88:	2b20      	cmp	r3, #32
  208b8a:	bf08      	it	eq
  208b8c:	ee20 0a28 	vmuleq.f32	s0, s0, s17
      if(start_control_flag_)
  208b90:	f894 319e 	ldrb.w	r3, [r4, #414]	; 0x19e
  208b94:	2b00      	cmp	r3, #0
  208b96:	d0e3      	beq.n	208b60 <_ZN18AttitudeController11pwmsControlEv+0x5c>
          target_pwm_[i] = pwmConversion(target_thrust);
  208b98:	4620      	mov	r0, r4
  208b9a:	f7ff fedd 	bl	208958 <_ZN18AttitudeController13pwmConversionEf>
  208b9e:	4632      	mov	r2, r6
  208ba0:	ed86 0a00 	vstr	s0, [r6]
          if(target_pwm_[i] < min_duty_) target_pwm_[i]  = min_duty_;
  208ba4:	edd8 7a00 	vldr	s15, [r8]
  208ba8:	eeb4 0ae7 	vcmpe.f32	s0, s15
  208bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  208bb0:	d5ca      	bpl.n	208b48 <_ZN18AttitudeController11pwmsControlEv+0x44>
  208bb2:	edc6 7a00 	vstr	s15, [r6]
          if(pwm_test_flag_) target_pwm_[i] = pwm_test_value_;
  208bb6:	f894 319f 	ldrb.w	r3, [r4, #415]	; 0x19f
  208bba:	2b00      	cmp	r3, #0
  208bbc:	d0d0      	beq.n	208b60 <_ZN18AttitudeController11pwmsControlEv+0x5c>
  208bbe:	f204 532c 	addw	r3, r4, #1324	; 0x52c
  208bc2:	681b      	ldr	r3, [r3, #0]
  208bc4:	6013      	str	r3, [r2, #0]
  208bc6:	e7cb      	b.n	208b60 <_ZN18AttitudeController11pwmsControlEv+0x5c>
  if(HAL_GetTick() - ros_pub_last_time > CONTROL_PUB_INTERVAL)
  208bc8:	f006 fe6c 	bl	20f8a4 <HAL_GetTick>
  208bcc:	4b1d      	ldr	r3, [pc, #116]	; (208c44 <_ZN18AttitudeController11pwmsControlEv+0x140>)
  208bce:	685b      	ldr	r3, [r3, #4]
  208bd0:	1ac0      	subs	r0, r0, r3
  208bd2:	2864      	cmp	r0, #100	; 0x64
  208bd4:	d822      	bhi.n	208c1c <_ZN18AttitudeController11pwmsControlEv+0x118>
  for(int i = 0; i < motor_number_; i++) {
  208bd6:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
  208bda:	b1d3      	cbz	r3, 208c12 <_ZN18AttitudeController11pwmsControlEv+0x10e>
  208bdc:	f504 669a 	add.w	r6, r4, #1232	; 0x4d0
  208be0:	2500      	movs	r5, #0
    Spine::setMotorPwm(target_pwm_[i] * 2000 - 1000, i);
  208be2:	eddf 8a19 	vldr	s17, [pc, #100]	; 208c48 <_ZN18AttitudeController11pwmsControlEv+0x144>
  208be6:	ed9f 8a19 	vldr	s16, [pc, #100]	; 208c4c <_ZN18AttitudeController11pwmsControlEv+0x148>
  208bea:	ecf6 7a01 	vldmia	r6!, {s15}
  208bee:	ee67 7aa8 	vmul.f32	s15, s15, s17
  208bf2:	ee77 7ac8 	vsub.f32	s15, s15, s16
  208bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  208bfa:	edcd 7a01 	vstr	s15, [sp, #4]
  208bfe:	b2e9      	uxtb	r1, r5
  208c00:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  208c04:	f7fd fb50 	bl	2062a8 <_ZN5Spine11setMotorPwmEth>
  for(int i = 0; i < motor_number_; i++) {
  208c08:	3501      	adds	r5, #1
  208c0a:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
  208c0e:	42ab      	cmp	r3, r5
  208c10:	dceb      	bgt.n	208bea <_ZN18AttitudeController11pwmsControlEv+0xe6>
}
  208c12:	b002      	add	sp, #8
  208c14:	ecbd 8b02 	vpop	{d8}
  208c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ros_pub_last_time = HAL_GetTick();
  208c1c:	f006 fe42 	bl	20f8a4 <HAL_GetTick>
  208c20:	4b08      	ldr	r3, [pc, #32]	; (208c44 <_ZN18AttitudeController11pwmsControlEv+0x140>)
  208c22:	6058      	str	r0, [r3, #4]
    return nh_->publish(id_, msg);
  208c24:	69a0      	ldr	r0, [r4, #24]
  208c26:	6803      	ldr	r3, [r0, #0]
  208c28:	681b      	ldr	r3, [r3, #0]
  208c2a:	f104 0234 	add.w	r2, r4, #52	; 0x34
  208c2e:	6961      	ldr	r1, [r4, #20]
  208c30:	4798      	blx	r3
  208c32:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  208c34:	6803      	ldr	r3, [r0, #0]
  208c36:	681b      	ldr	r3, [r3, #0]
  208c38:	f104 0244 	add.w	r2, r4, #68	; 0x44
  208c3c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  208c3e:	4798      	blx	r3
  208c40:	e7c9      	b.n	208bd6 <_ZN18AttitudeController11pwmsControlEv+0xd2>
  208c42:	bf00      	nop
  208c44:	20000294 	.word	0x20000294
  208c48:	44fa0000 	.word	0x44fa0000
  208c4c:	447a0000 	.word	0x447a0000

00208c50 <_ZN18AttitudeController6updateEv>:
{
  208c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  208c54:	b09f      	sub	sp, #124	; 0x7c
  208c56:	4604      	mov	r4, r0
  if(start_control_flag_)
  208c58:	f890 319e 	ldrb.w	r3, [r0, #414]	; 0x19e
  208c5c:	2b00      	cmp	r3, #0
  208c5e:	f000 82bd 	beq.w	2091dc <_ZN18AttitudeController6updateEv+0x58c>
      if(failsafe_ && !force_landing_flag_ &&
  208c62:	f890 3530 	ldrb.w	r3, [r0, #1328]	; 0x530
  208c66:	b16b      	cbz	r3, 208c84 <_ZN18AttitudeController6updateEv+0x34>
  208c68:	f890 31a1 	ldrb.w	r3, [r0, #417]	; 0x1a1
  208c6c:	b953      	cbnz	r3, 208c84 <_ZN18AttitudeController6updateEv+0x34>
         (int32_t)(HAL_GetTick() - flight_command_last_stamp_) > FLIGHT_COMMAND_TIMEOUT)
  208c6e:	f006 fe19 	bl	20f8a4 <HAL_GetTick>
  208c72:	f8d4 3534 	ldr.w	r3, [r4, #1332]	; 0x534
  208c76:	1ac3      	subs	r3, r0, r3
      if(failsafe_ && !force_landing_flag_ &&
  208c78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  208c7c:	dd02      	ble.n	208c84 <_ZN18AttitudeController6updateEv+0x34>
          force_landing_flag_ = true;
  208c7e:	2301      	movs	r3, #1
  208c80:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
  }

  EstimatorAlgorithm* getEstimator() {return estimator_;}

  /* receive message via ros protocal */
  inline const Vector3f getAttitude(uint8_t frame)  { return estimator_->getAttitude(frame); }
  208c84:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
  208c88:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
  static const uint8_t RELATIVE_COORD = 1;
  static const uint8_t X = 0;
  static const uint8_t Y = 1;
  static const uint8_t Z = 2;

  Vector3f getAttitude(uint8_t frame){return rpy_[frame];}
  208c8c:	ab18      	add	r3, sp, #96	; 0x60
  208c8e:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
  208c92:	ca07      	ldmia	r2, {r0, r1, r2}
  208c94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  208c98:	ae1b      	add	r6, sp, #108	; 0x6c
  208c9a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  208c9e:	ab15      	add	r3, sp, #84	; 0x54
  208ca0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      Vector3f angles = estimator_->getAttEstimator()->getAttitude(Frame::VIRTUAL);
  208ca4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  Vector3f getAngular(uint8_t frame){return gyro_[frame];}
  208ca8:	ab0f      	add	r3, sp, #60	; 0x3c
  208caa:	f105 0228 	add.w	r2, r5, #40	; 0x28
  208cae:	ca07      	ldmia	r2, {r0, r1, r2}
  208cb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  208cb4:	ad12      	add	r5, sp, #72	; 0x48
  208cb6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  208cba:	ab0c      	add	r3, sp, #48	; 0x30
  208cbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      Vector3f vel = estimator_->getAttEstimator()->getAngular(Frame::VIRTUAL);
  208cc0:	ad03      	add	r5, sp, #12
  208cc2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      if(!force_landing_flag_  && (fabs(angles[X]) > MAX_TILT_ANGLE || fabs(angles[Y]) > MAX_TILT_ANGLE))
  208cc6:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
  208cca:	bb1b      	cbnz	r3, 208d14 <_ZN18AttitudeController6updateEv+0xc4>
  208ccc:	eddd 7a00 	vldr	s15, [sp]
  208cd0:	eef0 7ae7 	vabs.f32	s15, s15
  208cd4:	ee17 0a90 	vmov	r0, s15
  208cd8:	f7f7 fc0c 	bl	2004f4 <__aeabi_f2d>
  208cdc:	a3f4      	add	r3, pc, #976	; (adr r3, 2090b0 <_ZN18AttitudeController6updateEv+0x460>)
  208cde:	e9d3 2300 	ldrd	r2, r3, [r3]
  208ce2:	f7f7 feeb 	bl	200abc <__aeabi_dcmpgt>
  208ce6:	b968      	cbnz	r0, 208d04 <_ZN18AttitudeController6updateEv+0xb4>
  208ce8:	eddd 7a01 	vldr	s15, [sp, #4]
  208cec:	eef0 7ae7 	vabs.f32	s15, s15
  208cf0:	ee17 0a90 	vmov	r0, s15
  208cf4:	f7f7 fbfe 	bl	2004f4 <__aeabi_f2d>
  208cf8:	a3ed      	add	r3, pc, #948	; (adr r3, 2090b0 <_ZN18AttitudeController6updateEv+0x460>)
  208cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
  208cfe:	f7f7 fedd 	bl	200abc <__aeabi_dcmpgt>
  208d02:	b190      	cbz	r0, 208d2a <_ZN18AttitudeController6updateEv+0xda>
          force_landing_flag_ = true;
  208d04:	2301      	movs	r3, #1
  208d06:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
          error_angle_i_[X] = 0;
  208d0a:	2300      	movs	r3, #0
  208d0c:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
          error_angle_i_[Y] = 0;
  208d10:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
          target_angle_[X] = 0;
  208d14:	2300      	movs	r3, #0
  208d16:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
          target_angle_[Y] = 0;
  208d1a:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
          target_angle_[Z] = 0;
  208d1e:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
          target_cog_force_[X] = 0;
  208d22:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
          target_cog_force_[Y] = 0;
  208d26:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      if(lqi_mode_)
  208d2a:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
  208d2e:	b953      	cbnz	r3, 208d46 <_ZN18AttitudeController6updateEv+0xf6>
  208d30:	f504 73d2 	add.w	r3, r4, #420	; 0x1a4
  208d34:	2100      	movs	r1, #0
                      torque_i_term_[axis]  = 0;
  208d36:	2500      	movs	r5, #0
                      error_angle_i_[axis] = limit(error_angle_i_[axis] - vel[axis] * DELTA_T,  error_angle_i_limit_[axis]);
  208d38:	ed9f 5ad9 	vldr	s10, [pc, #868]	; 2090a0 <_ZN18AttitudeController6updateEv+0x450>
  void inversionMapping(void);


  float limit(float input, float limit)
  {
    if (input > limit) return limit;
  208d3c:	ed9f 6ad9 	vldr	s12, [pc, #868]	; 2090a4 <_ZN18AttitudeController6updateEv+0x454>
    else if(input < -limit) return -limit;
  208d40:	eddf 5ad9 	vldr	s11, [pc, #868]	; 2090a8 <_ZN18AttitudeController6updateEv+0x458>
  208d44:	e16d      	b.n	209022 <_ZN18AttitudeController6updateEv+0x3d2>
          Vector3f gyro_moment = vel % (inertia_ * vel);
  208d46:	a903      	add	r1, sp, #12
  208d48:	f204 4084 	addw	r0, r4, #1156	; 0x484
  208d4c:	f000 fbbe 	bl	2094cc <_ZNK7Matrix3IfEmlERK7Vector3IfE>
  208d50:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24
  208d54:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
  208d58:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
  208d5c:	a909      	add	r1, sp, #36	; 0x24
  208d5e:	a803      	add	r0, sp, #12
  208d60:	f000 fbe2 	bl	209528 <_ZNK7Vector3IfErmERKS0_>
  208d64:	ed8d 0a06 	vstr	s0, [sp, #24]
  208d68:	edcd 0a07 	vstr	s1, [sp, #28]
  208d6c:	ed8d 1a08 	vstr	s2, [sp, #32]
          for(int i = 0; i < motor_number_; i++)
  208d70:	f894 319d 	ldrb.w	r3, [r4, #413]	; 0x19d
  208d74:	2b00      	cmp	r3, #0
  208d76:	f000 8231 	beq.w	2091dc <_ZN18AttitudeController6updateEv+0x58c>
                p_matrix_pseudo_inverse_[i][0] * gyro_moment.x +
  208d7a:	eeb0 4a40 	vmov.f32	s8, s0
                p_matrix_pseudo_inverse_[i][1] * gyro_moment.y +
  208d7e:	eef0 4a60 	vmov.f32	s9, s1
                p_matrix_pseudo_inverse_[i][2] * gyro_moment.z;
  208d82:	eeb0 5a41 	vmov.f32	s10, s2
  208d86:	f504 7665 	add.w	r6, r4, #916	; 0x394
  208d8a:	46a6      	mov	lr, r4
  208d8c:	f504 7c0b 	add.w	ip, r4, #556	; 0x22c
  208d90:	f04f 0800 	mov.w	r8, #0
  208d94:	4645      	mov	r5, r8
              motor_rpy_force_[i] = 0; //[N]
  208d96:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 2090ac <_ZN18AttitudeController6updateEv+0x45c>
                        error_angle_i_[axis] += error_angle * DELTA_T;
  208d9a:	eddf 3ac1 	vldr	s7, [pc, #772]	; 2090a0 <_ZN18AttitudeController6updateEv+0x450>
                    { lqi_p_term = 0; lqi_i_term = 0; }
  208d9e:	ee11 ba10 	vmov	fp, s2
    if (input > limit) return limit;
  208da2:	eef1 5a02 	vmov.f32	s11, #18	; 0x40900000  4.5
    else if(input < -limit) return -limit;
  208da6:	eeb9 6a02 	vmov.f32	s12, #146	; 0xc0900000 -4.5
                      control_term_msg_.motors[i].pitch_p = lqi_p_term * 1000;
  208daa:	ed9f 3ac3 	vldr	s6, [pc, #780]	; 2090b8 <_ZN18AttitudeController6updateEv+0x468>
                    { lqi_p_term = 0; lqi_i_term = 0; }
  208dae:	eef0 2a41 	vmov.f32	s5, s2
  208db2:	4627      	mov	r7, r4
  208db4:	e0ca      	b.n	208f4c <_ZN18AttitudeController6updateEv+0x2fc>
                      lqi_p_term = -error_angle * p_lqi_gain_[i][axis];
  208db6:	ed92 7a00 	vldr	s14, [r2]
  208dba:	ee67 7ac7 	vnmul.f32	s15, s15, s14
                      lqi_i_term = (error_angle_i_[axis] * i_lqi_gain_[i][axis]);
  208dbe:	edd9 1a1b 	vldr	s3, [r9, #108]	; 0x6c
  208dc2:	ed92 7a1e 	vldr	s14, [r2, #120]	; 0x78
  208dc6:	ee61 1a87 	vmul.f32	s3, s3, s14
    T & operator[](uint8_t i) {
        T *_v = &x;
#if MATH_CHECK_INDEXES
        assert(i >= 0 && i < 3);
#endif
        return _v[i];
  208dca:	b2dc      	uxtb	r4, r3
                  lqi_d_term = limit(vel[axis] * d_lqi_gain_[i][axis], 4.5); //(old meesage: can be more strict), why?
  208dcc:	f10d 0978 	add.w	r9, sp, #120	; 0x78
  208dd0:	eb09 0484 	add.w	r4, r9, r4, lsl #2
  208dd4:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
  208dd8:	ed92 7a3c 	vldr	s14, [r2, #240]	; 0xf0
  208ddc:	ee26 7a87 	vmul.f32	s14, s13, s14
    if (input > limit) return limit;
  208de0:	eeb4 7ae5 	vcmpe.f32	s14, s11
  208de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  208de8:	dc3c      	bgt.n	208e64 <_ZN18AttitudeController6updateEv+0x214>
    else if(input < -limit) return -limit;
  208dea:	eeb4 7a46 	vcmp.f32	s14, s12
  208dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  208df2:	bf48      	it	mi
  208df4:	eeb0 7a46 	vmovmi.f32	s14, s12
                  motor_rpy_force_[i] += (lqi_p_term + lqi_i_term + lqi_d_term); //[N]
  208df8:	ee77 6aa1 	vadd.f32	s13, s15, s3
  208dfc:	ee76 6a87 	vadd.f32	s13, s13, s14
  208e00:	ed90 2a0a 	vldr	s4, [r0, #40]	; 0x28
  208e04:	ee72 6a26 	vadd.f32	s13, s4, s13
  208e08:	edc0 6a0a 	vstr	s13, [r0, #40]	; 0x28
                  if(axis == X)
  208e0c:	b36b      	cbz	r3, 208e6a <_ZN18AttitudeController6updateEv+0x21a>
                  if(axis == Y)
  208e0e:	2b01      	cmp	r3, #1
  208e10:	d04a      	beq.n	208ea8 <_ZN18AttitudeController6updateEv+0x258>
                  if(axis == Z)
  208e12:	2b02      	cmp	r3, #2
  208e14:	d06a      	beq.n	208eec <_ZN18AttitudeController6updateEv+0x29c>
              for(int axis = 0; axis < 3; axis++)
  208e16:	3301      	adds	r3, #1
  208e18:	3204      	adds	r2, #4
  208e1a:	3104      	adds	r1, #4
  208e1c:	2b03      	cmp	r3, #3
  208e1e:	d06e      	beq.n	208efe <_ZN18AttitudeController6updateEv+0x2ae>
                  if(axis < 2)
  208e20:	2b01      	cmp	r3, #1
  208e22:	dc1a      	bgt.n	208e5a <_ZN18AttitudeController6updateEv+0x20a>
  208e24:	4689      	mov	r9, r1
  208e26:	b2dc      	uxtb	r4, r3
                      float error_angle = target_angle_[axis] - angles[axis];
  208e28:	f10d 0a78 	add.w	sl, sp, #120	; 0x78
  208e2c:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
  208e30:	ed91 7a00 	vldr	s14, [r1]
  208e34:	ed54 7a1e 	vldr	s15, [r4, #-120]	; 0xffffff88
  208e38:	ee77 7a67 	vsub.f32	s15, s14, s15
                      if(i == 0 && integrate_flag_ == true)
  208e3c:	2d00      	cmp	r5, #0
  208e3e:	d1ba      	bne.n	208db6 <_ZN18AttitudeController6updateEv+0x166>
  208e40:	f897 41a0 	ldrb.w	r4, [r7, #416]	; 0x1a0
  208e44:	2c00      	cmp	r4, #0
  208e46:	d0b6      	beq.n	208db6 <_ZN18AttitudeController6updateEv+0x166>
                        error_angle_i_[axis] += error_angle * DELTA_T;
  208e48:	ee27 7aa3 	vmul.f32	s14, s15, s7
  208e4c:	edd1 6a1b 	vldr	s13, [r1, #108]	; 0x6c
  208e50:	ee36 7a87 	vadd.f32	s14, s13, s14
  208e54:	ed81 7a1b 	vstr	s14, [r1, #108]	; 0x6c
  208e58:	e7ad      	b.n	208db6 <_ZN18AttitudeController6updateEv+0x166>
                    { lqi_p_term = 0; lqi_i_term = 0; }
  208e5a:	ee01 ba90 	vmov	s3, fp
  208e5e:	eef0 7a62 	vmov.f32	s15, s5
  208e62:	e7b2      	b.n	208dca <_ZN18AttitudeController6updateEv+0x17a>
    if (input > limit) return limit;
  208e64:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
  208e68:	e7c6      	b.n	208df8 <_ZN18AttitudeController6updateEv+0x1a8>
                      control_term_msg_.motors[i].roll_p = lqi_p_term * 1000;
  208e6a:	6e3c      	ldr	r4, [r7, #96]	; 0x60
  208e6c:	4444      	add	r4, r8
  208e6e:	ee67 7a83 	vmul.f32	s15, s15, s6
  208e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  208e76:	ee17 9a90 	vmov	r9, s15
  208e7a:	f8a4 9004 	strh.w	r9, [r4, #4]
                      control_term_msg_.motors[i].roll_i= lqi_i_term * 1000;
  208e7e:	6e3c      	ldr	r4, [r7, #96]	; 0x60
  208e80:	4444      	add	r4, r8
  208e82:	ee61 1a83 	vmul.f32	s3, s3, s6
  208e86:	eefd 7ae1 	vcvt.s32.f32	s15, s3
  208e8a:	ee17 9a90 	vmov	r9, s15
  208e8e:	f8a4 9006 	strh.w	r9, [r4, #6]
                      control_term_msg_.motors[i].roll_d = lqi_d_term * 1000;
  208e92:	6e3c      	ldr	r4, [r7, #96]	; 0x60
  208e94:	4444      	add	r4, r8
  208e96:	ee27 7a03 	vmul.f32	s14, s14, s6
  208e9a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  208e9e:	ee17 9a90 	vmov	r9, s15
  208ea2:	f8a4 9008 	strh.w	r9, [r4, #8]
  208ea6:	e7b6      	b.n	208e16 <_ZN18AttitudeController6updateEv+0x1c6>
                      control_term_msg_.motors[i].pitch_p = lqi_p_term * 1000;
  208ea8:	6e3c      	ldr	r4, [r7, #96]	; 0x60
  208eaa:	4444      	add	r4, r8
  208eac:	ee67 7a83 	vmul.f32	s15, s15, s6
  208eb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  208eb4:	ee17 9a90 	vmov	r9, s15
  208eb8:	f8a4 900a 	strh.w	r9, [r4, #10]
                      control_term_msg_.motors[i].pitch_i = lqi_i_term * 1000;
  208ebc:	6e3c      	ldr	r4, [r7, #96]	; 0x60
  208ebe:	4444      	add	r4, r8
  208ec0:	ee61 1a83 	vmul.f32	s3, s3, s6
  208ec4:	eefd 7ae1 	vcvt.s32.f32	s15, s3
  208ec8:	ee17 9a90 	vmov	r9, s15
  208ecc:	f8a4 900c 	strh.w	r9, [r4, #12]
                      control_term_msg_.motors[i].pitch_d = lqi_d_term * 1000;
  208ed0:	6e3c      	ldr	r4, [r7, #96]	; 0x60
  208ed2:	4444      	add	r4, r8
  208ed4:	ee27 7a03 	vmul.f32	s14, s14, s6
  208ed8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  208edc:	ee17 9a90 	vmov	r9, s15
  208ee0:	f8a4 900e 	strh.w	r9, [r4, #14]
              for(int axis = 0; axis < 3; axis++)
  208ee4:	3301      	adds	r3, #1
  208ee6:	3204      	adds	r2, #4
  208ee8:	3104      	adds	r1, #4
  208eea:	e799      	b.n	208e20 <_ZN18AttitudeController6updateEv+0x1d0>
                    control_term_msg_.motors[i].yaw_d = lqi_d_term * 1000;//lqi_d_term;
  208eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
  208eee:	4443      	add	r3, r8
  208ef0:	ee27 7a03 	vmul.f32	s14, s14, s6
  208ef4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  208ef8:	ee17 2a90 	vmov	r2, s15
  208efc:	821a      	strh	r2, [r3, #16]
  208efe:	3604      	adds	r6, #4
                p_matrix_pseudo_inverse_[i][0] * gyro_moment.x +
  208f00:	ed9e 7af9 	vldr	s14, [lr, #996]	; 0x3e4
  208f04:	ee24 7a07 	vmul.f32	s14, s8, s14
                p_matrix_pseudo_inverse_[i][1] * gyro_moment.y +
  208f08:	edde 6afa 	vldr	s13, [lr, #1000]	; 0x3e8
  208f0c:	ee64 7aa6 	vmul.f32	s15, s9, s13
                p_matrix_pseudo_inverse_[i][0] * gyro_moment.x +
  208f10:	ee77 6a27 	vadd.f32	s13, s14, s15
                p_matrix_pseudo_inverse_[i][2] * gyro_moment.z;
  208f14:	edde 7afb 	vldr	s15, [lr, #1004]	; 0x3ec
  208f18:	ee65 7a27 	vmul.f32	s15, s10, s15
  208f1c:	ee36 7aa7 	vadd.f32	s14, s13, s15
              target_thrust_[i] = base_throttle_term_[i] + motor_rpy_force_[i] + gyro_moment_compensate;
  208f20:	edd0 6a00 	vldr	s13, [r0]
  208f24:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
  208f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
  208f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
  208f30:	edc6 7a44 	vstr	s15, [r6, #272]	; 0x110
          for(int i = 0; i < motor_number_; i++)
  208f34:	3501      	adds	r5, #1
  208f36:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
  208f3a:	4619      	mov	r1, r3
  208f3c:	f10e 0e10 	add.w	lr, lr, #16
  208f40:	f108 0814 	add.w	r8, r8, #20
  208f44:	f10c 0c0c 	add.w	ip, ip, #12
  208f48:	42ab      	cmp	r3, r5
  208f4a:	dd07      	ble.n	208f5c <_ZN18AttitudeController6updateEv+0x30c>
  208f4c:	4630      	mov	r0, r6
              motor_rpy_force_[i] = 0; //[N]
  208f4e:	ed86 1a0a 	vstr	s2, [r6, #40]	; 0x28
  208f52:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
  208f56:	4662      	mov	r2, ip
              for(int axis = 0; axis < 3; axis++)
  208f58:	2300      	movs	r3, #0
  208f5a:	e761      	b.n	208e20 <_ZN18AttitudeController6updateEv+0x1d0>
  208f5c:	463c      	mov	r4, r7
          if(force_landing_flag_)
  208f5e:	f897 21a1 	ldrb.w	r2, [r7, #417]	; 0x1a1
  208f62:	2a00      	cmp	r2, #0
  208f64:	f000 813a 	beq.w	2091dc <_ZN18AttitudeController6updateEv+0x58c>
              for(int i = 0; i < motor_number_; i++) total_thrust += target_thrust_[i];
  208f68:	2b00      	cmp	r3, #0
  208f6a:	f000 8137 	beq.w	2091dc <_ZN18AttitudeController6updateEv+0x58c>
  208f6e:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
  208f72:	f503 7395 	add.w	r3, r3, #298	; 0x12a
  208f76:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  208f7a:	eddf 7a4c 	vldr	s15, [pc, #304]	; 2090ac <_ZN18AttitudeController6updateEv+0x45c>
  208f7e:	ecb2 7a01 	vldmia	r2!, {s14}
  208f82:	ee77 7a87 	vadd.f32	s15, s15, s14
  208f86:	429a      	cmp	r2, r3
  208f88:	d1f9      	bne.n	208f7e <_ZN18AttitudeController6updateEv+0x32e>
              float average_thrust = total_thrust / motor_number_;
  208f8a:	ee07 1a10 	vmov	s14, r1
  208f8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  208f92:	eec7 6a87 	vdiv.f32	s13, s15, s14
              if(average_thrust > force_landing_thrust_)
  208f96:	f204 530c 	addw	r3, r4, #1292	; 0x50c
  208f9a:	edd3 7a00 	vldr	s15, [r3]
  208f9e:	eef4 6ae7 	vcmpe.f32	s13, s15
  208fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  208fa6:	f340 8119 	ble.w	2091dc <_ZN18AttitudeController6updateEv+0x58c>
  208faa:	f504 7265 	add.w	r2, r4, #916	; 0x394
  208fae:	f504 6095 	add.w	r0, r4, #1192	; 0x4a8
  208fb2:	2300      	movs	r3, #0
                    base_throttle_term_[i] -= (target_thrust_[i] / average_thrust * FORCE_LANDING_INTEGRAL);
  208fb4:	ed9f 6a41 	vldr	s12, [pc, #260]	; 2090bc <_ZN18AttitudeController6updateEv+0x46c>
  208fb8:	ecb0 7a01 	vldmia	r0!, {s14}
  208fbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
  208fc0:	ee67 7a86 	vmul.f32	s15, s15, s12
  208fc4:	ed92 7a00 	vldr	s14, [r2]
  208fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
  208fcc:	ece2 7a01 	vstmia	r2!, {s15}
                  for(int i = 0; i < motor_number_; i++)
  208fd0:	3301      	adds	r3, #1
  208fd2:	4299      	cmp	r1, r3
  208fd4:	dcf0      	bgt.n	208fb8 <_ZN18AttitudeController6updateEv+0x368>
  208fd6:	e101      	b.n	2091dc <_ZN18AttitudeController6updateEv+0x58c>
  208fd8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 2090a4 <_ZN18AttitudeController6updateEv+0x454>
  208fdc:	e03e      	b.n	20905c <_ZN18AttitudeController6updateEv+0x40c>
                  error_angle_i_[axis] = limit(error_angle_i_[axis], error_angle_i_limit_[axis]);
  208fde:	edc2 7a1b 	vstr	s15, [r2, #108]	; 0x6c
                  torque_i_term_[axis] = (error_angle_i_[axis] * torque_i_gain_[axis]);
  208fe2:	ed92 7a0c 	vldr	s14, [r2, #48]	; 0x30
  208fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
  208fea:	edc2 7a15 	vstr	s15, [r2, #84]	; 0x54
  208fee:	b2ca      	uxtb	r2, r1
              torque_d_term_[axis] = -vel[axis] * torque_d_gain_[axis];
  208ff0:	a81e      	add	r0, sp, #120	; 0x78
  208ff2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  208ff6:	ed12 7a1b 	vldr	s14, [r2, #-108]	; 0xffffff94
  208ffa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
  208ffe:	ee67 7a67 	vnmul.f32	s15, s14, s15
  209002:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
              target_cog_torque_[axis] = torque_p_term_[axis] + torque_i_term_[axis] + torque_d_term_[axis];
  209006:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
  20900a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
  20900e:	ee36 7a87 	vadd.f32	s14, s13, s14
  209012:	ee77 7a27 	vadd.f32	s15, s14, s15
  209016:	edc3 7a06 	vstr	s15, [r3, #24]
          for(int axis = 0; axis < 3; axis++)
  20901a:	3101      	adds	r1, #1
  20901c:	3304      	adds	r3, #4
  20901e:	2903      	cmp	r1, #3
  209020:	d07d      	beq.n	20911e <_ZN18AttitudeController6updateEv+0x4ce>
              if( axis < Z)
  209022:	2901      	cmp	r1, #1
  209024:	dc4c      	bgt.n	2090c0 <_ZN18AttitudeController6updateEv+0x470>
  209026:	461a      	mov	r2, r3
  209028:	b2c8      	uxtb	r0, r1
                  error_angle = target_angle_[axis] - angles[axis];
  20902a:	ae1e      	add	r6, sp, #120	; 0x78
  20902c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  209030:	ed93 7a00 	vldr	s14, [r3]
  209034:	ed50 7a1e 	vldr	s15, [r0, #-120]	; 0xffffff88
  209038:	ee77 7a67 	vsub.f32	s15, s14, s15
                  torque_p_term_[axis] = error_angle * torque_p_gain_[axis];
  20903c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
  209040:	ee27 7a87 	vmul.f32	s14, s15, s14
  209044:	eeb4 7ac6 	vcmpe.f32	s14, s12
  209048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  20904c:	dcc4      	bgt.n	208fd8 <_ZN18AttitudeController6updateEv+0x388>
    else if(input < -limit) return -limit;
  20904e:	eeb4 7a65 	vcmp.f32	s14, s11
  209052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  209056:	bf48      	it	mi
  209058:	eeb0 7a65 	vmovmi.f32	s14, s11
                  torque_p_term_[axis] = limit(torque_p_term_[axis], P_TERM_LEVEL_LIMIT);
  20905c:	ed82 7a12 	vstr	s14, [r2, #72]	; 0x48
                  if(integrate_flag_) error_angle_i_[axis] += (error_angle * DELTA_T);
  209060:	f894 01a0 	ldrb.w	r0, [r4, #416]	; 0x1a0
  209064:	b138      	cbz	r0, 209076 <_ZN18AttitudeController6updateEv+0x426>
  209066:	ee67 7a85 	vmul.f32	s15, s15, s10
  20906a:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
  20906e:	ee77 7a27 	vadd.f32	s15, s14, s15
  209072:	edc2 7a1b 	vstr	s15, [r2, #108]	; 0x6c
                  error_angle_i_[axis] = limit(error_angle_i_[axis], error_angle_i_limit_[axis]);
  209076:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
  20907a:	edd2 7a1e 	vldr	s15, [r2, #120]	; 0x78
    if (input > limit) return limit;
  20907e:	eeb4 7ae7 	vcmpe.f32	s14, s15
  209082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  209086:	dcaa      	bgt.n	208fde <_ZN18AttitudeController6updateEv+0x38e>
    else if(input < -limit) return -limit;
  209088:	eef1 7a67 	vneg.f32	s15, s15
    else return input;
  20908c:	eeb4 7ae7 	vcmpe.f32	s14, s15
  209090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  209094:	bf58      	it	pl
  209096:	eef0 7a47 	vmovpl.f32	s15, s14
  20909a:	e7a0      	b.n	208fde <_ZN18AttitudeController6updateEv+0x38e>
  20909c:	f3af 8000 	nop.w
  2090a0:	3a83126f 	.word	0x3a83126f
  2090a4:	43fa0000 	.word	0x43fa0000
  2090a8:	c3fa0000 	.word	0xc3fa0000
  2090ac:	00000000 	.word	0x00000000
  2090b0:	b851eb85 	.word	0xb851eb85
  2090b4:	3fdb851e 	.word	0x3fdb851e
  2090b8:	447a0000 	.word	0x447a0000
  2090bc:	3b23d70a 	.word	0x3b23d70a
  2090c0:	461a      	mov	r2, r3
                  torque_p_term_[axis]  = target_angle_[axis];
  2090c2:	edd3 7a00 	vldr	s15, [r3]
  2090c6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
                  if(target_angle_[axis] == 0)
  2090ca:	eef5 7a40 	vcmp.f32	s15, #0.0
  2090ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  2090d2:	d122      	bne.n	20911a <_ZN18AttitudeController6updateEv+0x4ca>
  2090d4:	b2c8      	uxtb	r0, r1
                      error_angle_i_[axis] = limit(error_angle_i_[axis] - vel[axis] * DELTA_T,  error_angle_i_limit_[axis]);
  2090d6:	ae1e      	add	r6, sp, #120	; 0x78
  2090d8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  2090dc:	ed50 7a1b 	vldr	s15, [r0, #-108]	; 0xffffff94
  2090e0:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
  2090e4:	ee07 7ac5 	vmls.f32	s14, s15, s10
  2090e8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
    if (input > limit) return limit;
  2090ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
  2090f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  2090f4:	dc08      	bgt.n	209108 <_ZN18AttitudeController6updateEv+0x4b8>
    else if(input < -limit) return -limit;
  2090f6:	eef1 7a67 	vneg.f32	s15, s15
    else return input;
  2090fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
  2090fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  209102:	bf58      	it	pl
  209104:	eef0 7a47 	vmovpl.f32	s15, s14
  209108:	edc2 7a1b 	vstr	s15, [r2, #108]	; 0x6c
                      torque_i_term_[axis] = (error_angle_i_[axis] * torque_i_gain_[axis]);
  20910c:	ed92 7a0c 	vldr	s14, [r2, #48]	; 0x30
  209110:	ee67 7a27 	vmul.f32	s15, s14, s15
  209114:	edc2 7a15 	vstr	s15, [r2, #84]	; 0x54
  209118:	e769      	b.n	208fee <_ZN18AttitudeController6updateEv+0x39e>
                      torque_i_term_[axis]  = 0;
  20911a:	655d      	str	r5, [r3, #84]	; 0x54
  20911c:	e767      	b.n	208fee <_ZN18AttitudeController6updateEv+0x39e>
          control_term_msg_.motors[0].roll_p = torque_p_term_[X] * 1000;
  20911e:	6e22      	ldr	r2, [r4, #96]	; 0x60
  209120:	ed94 7a7b 	vldr	s14, [r4, #492]	; 0x1ec
  209124:	ed5f 7a1c 	vldr	s15, [pc, #-112]	; 2090b8 <_ZN18AttitudeController6updateEv+0x468>
  209128:	ee27 7a27 	vmul.f32	s14, s14, s15
  20912c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  209130:	ee17 3a10 	vmov	r3, s14
  209134:	8093      	strh	r3, [r2, #4]
          control_term_msg_.motors[0].roll_i = torque_i_term_[X] * 1000;
  209136:	6e22      	ldr	r2, [r4, #96]	; 0x60
  209138:	ed94 7a7e 	vldr	s14, [r4, #504]	; 0x1f8
  20913c:	ee27 7a27 	vmul.f32	s14, s14, s15
  209140:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  209144:	ee17 3a10 	vmov	r3, s14
  209148:	80d3      	strh	r3, [r2, #6]
          control_term_msg_.motors[0].roll_d = torque_d_term_[X] * 1000;
  20914a:	6e22      	ldr	r2, [r4, #96]	; 0x60
  20914c:	ed94 7a81 	vldr	s14, [r4, #516]	; 0x204
  209150:	ee27 7a27 	vmul.f32	s14, s14, s15
  209154:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  209158:	ee17 3a10 	vmov	r3, s14
  20915c:	8113      	strh	r3, [r2, #8]
          control_term_msg_.motors[0].pitch_p = torque_p_term_[Y] * 1000;
  20915e:	6e22      	ldr	r2, [r4, #96]	; 0x60
  209160:	ed94 7a7c 	vldr	s14, [r4, #496]	; 0x1f0
  209164:	ee27 7a27 	vmul.f32	s14, s14, s15
  209168:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  20916c:	ee17 3a10 	vmov	r3, s14
  209170:	8153      	strh	r3, [r2, #10]
          control_term_msg_.motors[0].pitch_i = torque_i_term_[Y] * 1000;
  209172:	6e22      	ldr	r2, [r4, #96]	; 0x60
  209174:	ed94 7a7f 	vldr	s14, [r4, #508]	; 0x1fc
  209178:	ee27 7a27 	vmul.f32	s14, s14, s15
  20917c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  209180:	ee17 3a10 	vmov	r3, s14
  209184:	8193      	strh	r3, [r2, #12]
          control_term_msg_.motors[0].pitch_d = torque_d_term_[Y] * 1000;
  209186:	6e22      	ldr	r2, [r4, #96]	; 0x60
  209188:	ed94 7a82 	vldr	s14, [r4, #520]	; 0x208
  20918c:	ee27 7a27 	vmul.f32	s14, s14, s15
  209190:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  209194:	ee17 3a10 	vmov	r3, s14
  209198:	81d3      	strh	r3, [r2, #14]
          control_term_msg_.motors[0].yaw_d = torque_d_term_[Z] * 1000;
  20919a:	6e22      	ldr	r2, [r4, #96]	; 0x60
  20919c:	ed94 7a83 	vldr	s14, [r4, #524]	; 0x20c
  2091a0:	ee67 7a27 	vmul.f32	s15, s14, s15
  2091a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  2091a8:	ee17 3a90 	vmov	r3, s15
  2091ac:	8213      	strh	r3, [r2, #16]
          if(force_landing_flag_)
  2091ae:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
  2091b2:	b183      	cbz	r3, 2091d6 <_ZN18AttitudeController6updateEv+0x586>
              if(target_cog_force_[Z] > force_landing_thrust_)
  2091b4:	edd4 7a6e 	vldr	s15, [r4, #440]	; 0x1b8
  2091b8:	f204 530c 	addw	r3, r4, #1292	; 0x50c
  2091bc:	ed93 7a00 	vldr	s14, [r3]
  2091c0:	eef4 7ac7 	vcmpe.f32	s15, s14
  2091c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  2091c8:	dd05      	ble.n	2091d6 <_ZN18AttitudeController6updateEv+0x586>
                target_cog_force_[Z] -= FORCE_LANDING_INTEGRAL;
  2091ca:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 2090bc <_ZN18AttitudeController6updateEv+0x46c>
  2091ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
  2091d2:	edc4 7a6e 	vstr	s15, [r4, #440]	; 0x1b8
          inversionMapping();
  2091d6:	4620      	mov	r0, r4
  2091d8:	f7ff f95c 	bl	208494 <_ZN18AttitudeController16inversionMappingEv>
  pwmsControl();
  2091dc:	4620      	mov	r0, r4
  2091de:	f7ff fc91 	bl	208b04 <_ZN18AttitudeController11pwmsControlEv>
}
  2091e2:	b01f      	add	sp, #124	; 0x7c
  2091e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002091e8 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
  2091e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  2091ec:	6843      	ldr	r3, [r0, #4]
  2091ee:	6802      	ldr	r2, [r0, #0]
  2091f0:	1a9b      	subs	r3, r3, r2
  2091f2:	109a      	asrs	r2, r3, #2
  2091f4:	4b3b      	ldr	r3, [pc, #236]	; (2092e4 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0xfc>)
  2091f6:	fb03 f302 	mul.w	r3, r3, r2
	if (max_size() - size() < __n)
  2091fa:	4a3b      	ldr	r2, [pc, #236]	; (2092e8 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x100>)
  2091fc:	4293      	cmp	r3, r2
  2091fe:	d00b      	beq.n	209218 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x30>
  209200:	4682      	mov	sl, r0
  209202:	460d      	mov	r5, r1
  209204:	b19b      	cbz	r3, 20922e <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x46>
	const size_type __len = size() + std::max(size(), __n);
  209206:	005a      	lsls	r2, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
  209208:	4293      	cmp	r3, r2
  20920a:	d802      	bhi.n	209212 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x2a>
  20920c:	4b36      	ldr	r3, [pc, #216]	; (2092e8 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x100>)
  20920e:	429a      	cmp	r2, r3
  209210:	d905      	bls.n	20921e <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x36>
  209212:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 2092e8 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x100>
  209216:	e00c      	b.n	209232 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x4a>
	  __throw_length_error(__N(__s));
  209218:	4834      	ldr	r0, [pc, #208]	; (2092ec <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x104>)
  20921a:	f00b fe30 	bl	214e7e <_ZSt20__throw_length_errorPKc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  20921e:	2a00      	cmp	r2, #0
  209220:	d059      	beq.n	2092d6 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0xee>
	if (__n > this->max_size())
  209222:	429a      	cmp	r2, r3
  209224:	d801      	bhi.n	20922a <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x42>
	const size_type __len = size() + std::max(size(), __n);
  209226:	4691      	mov	r9, r2
  209228:	e003      	b.n	209232 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x4a>
	  std::__throw_bad_alloc();
  20922a:	f00b fe22 	bl	214e72 <_ZSt17__throw_bad_allocv>
  20922e:	f04f 0901 	mov.w	r9, #1
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  209232:	ebc9 00c9 	rsb	r0, r9, r9, lsl #3
  209236:	0080      	lsls	r0, r0, #2
  209238:	f00a ff47 	bl	2140ca <_Znwj>
  20923c:	4680      	mov	r8, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  20923e:	f8da c004 	ldr.w	ip, [sl, #4]
  209242:	f8da e000 	ldr.w	lr, [sl]
  209246:	ebac 030e 	sub.w	r3, ip, lr
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  20924a:	eb18 0403 	adds.w	r4, r8, r3
  20924e:	d00a      	beq.n	209266 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x7e>
  class MotorInfo : public ros::Msg
  209250:	4a27      	ldr	r2, [pc, #156]	; (2092f0 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x108>)
  209252:	f848 2003 	str.w	r2, [r8, r3]
  209256:	686b      	ldr	r3, [r5, #4]
  209258:	6063      	str	r3, [r4, #4]
  20925a:	3408      	adds	r4, #8
  20925c:	3508      	adds	r5, #8
  20925e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  209260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  209262:	682b      	ldr	r3, [r5, #0]
  209264:	6023      	str	r3, [r4, #0]
  209266:	45f4      	cmp	ip, lr
  209268:	d039      	beq.n	2092de <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0xf6>
  20926a:	4677      	mov	r7, lr
  20926c:	4646      	mov	r6, r8
  20926e:	f8df b080 	ldr.w	fp, [pc, #128]	; 2092f0 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x108>
  209272:	b15e      	cbz	r6, 20928c <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0xa4>
  209274:	f8c6 b000 	str.w	fp, [r6]
  209278:	687b      	ldr	r3, [r7, #4]
  20927a:	6073      	str	r3, [r6, #4]
  20927c:	f106 0408 	add.w	r4, r6, #8
  209280:	f107 0508 	add.w	r5, r7, #8
  209284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  209286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  209288:	682b      	ldr	r3, [r5, #0]
  20928a:	6023      	str	r3, [r4, #0]
  20928c:	371c      	adds	r7, #28
  20928e:	361c      	adds	r6, #28
  209290:	4567      	cmp	r7, ip
  209292:	d1ee      	bne.n	209272 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x8a>
  209294:	f10e 031c 	add.w	r3, lr, #28
  209298:	1aff      	subs	r7, r7, r3
  20929a:	08bf      	lsrs	r7, r7, #2
  20929c:	4b15      	ldr	r3, [pc, #84]	; (2092f4 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x10c>)
  20929e:	fb03 f707 	mul.w	r7, r3, r7
  2092a2:	f027 4740 	bic.w	r7, r7, #3221225472	; 0xc0000000
  2092a6:	3701      	adds	r7, #1
  2092a8:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
  2092ac:	eb08 0787 	add.w	r7, r8, r7, lsl #2
	    ++__new_finish;
  2092b0:	371c      	adds	r7, #28
	if (__p)
  2092b2:	f1be 0f00 	cmp.w	lr, #0
  2092b6:	d002      	beq.n	2092be <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0xd6>
      { ::operator delete(__p); }
  2092b8:	4670      	mov	r0, lr
  2092ba:	f00a fed6 	bl	21406a <_ZdlPv>
	this->_M_impl._M_start = __new_start;
  2092be:	f8ca 8000 	str.w	r8, [sl]
	this->_M_impl._M_finish = __new_finish;
  2092c2:	f8ca 7004 	str.w	r7, [sl, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
  2092c6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
  2092ca:	eb08 0389 	add.w	r3, r8, r9, lsl #2
  2092ce:	f8ca 3008 	str.w	r3, [sl, #8]
  2092d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
  2092d6:	f04f 0900 	mov.w	r9, #0
  2092da:	46c8      	mov	r8, r9
  2092dc:	e7af      	b.n	20923e <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0x56>
  2092de:	4647      	mov	r7, r8
  2092e0:	e7e6      	b.n	2092b0 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_+0xc8>
  2092e2:	bf00      	nop
  2092e4:	b6db6db7 	.word	0xb6db6db7
  2092e8:	09249249 	.word	0x09249249
  2092ec:	00216d44 	.word	0x00216d44
  2092f0:	002177b0 	.word	0x002177b0
  2092f4:	36db6db7 	.word	0x36db6db7

002092f8 <_ZN18AttitudeController15pwmInfoCallbackERKN17aerial_robot_msgs7PwmInfoE>:
{
  2092f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  2092fc:	4605      	mov	r5, r0
  2092fe:	4688      	mov	r8, r1
  min_thrust_ = info_msg.min_thrust;
  209300:	684a      	ldr	r2, [r1, #4]
  209302:	f500 63a1 	add.w	r3, r0, #1288	; 0x508
  209306:	601a      	str	r2, [r3, #0]
  max_thrust_ = info_msg.max_thrust;
  209308:	688a      	ldr	r2, [r1, #8]
  20930a:	f200 5304 	addw	r3, r0, #1284	; 0x504
  20930e:	601a      	str	r2, [r3, #0]
  force_landing_thrust_ = info_msg.force_landing_thrust;
  209310:	690a      	ldr	r2, [r1, #16]
  209312:	f200 530c 	addw	r3, r0, #1292	; 0x50c
  209316:	601a      	str	r2, [r3, #0]
  pwm_conversion_mode_ = info_msg.pwm_conversion_mode;
  209318:	7d0b      	ldrb	r3, [r1, #20]
  20931a:	f880 3510 	strb.w	r3, [r0, #1296]	; 0x510
  motor_info_.resize(0);
  20931e:	f200 5a14 	addw	sl, r0, #1300	; 0x514
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  209322:	f8d0 1514 	ldr.w	r1, [r0, #1300]	; 0x514
  209326:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
  20932a:	1a5b      	subs	r3, r3, r1
  20932c:	109b      	asrs	r3, r3, #2
  20932e:	4a29      	ldr	r2, [pc, #164]	; (2093d4 <_ZN18AttitudeController15pwmInfoCallbackERKN17aerial_robot_msgs7PwmInfoE+0xdc>)
  209330:	fb02 f303 	mul.w	r3, r2, r3
	else if (__new_size < size())
  209334:	b10b      	cbz	r3, 20933a <_ZN18AttitudeController15pwmInfoCallbackERKN17aerial_robot_msgs7PwmInfoE+0x42>
	this->_M_impl._M_finish = __pos;
  209336:	f8c0 1518 	str.w	r1, [r0, #1304]	; 0x518
    for(int i = 0; i < info_msg.motor_info_length; i++)
  20933a:	f8d8 3018 	ldr.w	r3, [r8, #24]
  20933e:	b363      	cbz	r3, 20939a <_ZN18AttitudeController15pwmInfoCallbackERKN17aerial_robot_msgs7PwmInfoE+0xa2>
  209340:	2600      	movs	r6, #0
  209342:	4637      	mov	r7, r6
  209344:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2093d8 <_ZN18AttitudeController15pwmInfoCallbackERKN17aerial_robot_msgs7PwmInfoE+0xe0>
  209348:	e017      	b.n	20937a <_ZN18AttitudeController15pwmInfoCallbackERKN17aerial_robot_msgs7PwmInfoE+0x82>
  20934a:	f8c4 9000 	str.w	r9, [r4]
  20934e:	684b      	ldr	r3, [r1, #4]
  209350:	6063      	str	r3, [r4, #4]
  209352:	3408      	adds	r4, #8
  209354:	f101 0e08 	add.w	lr, r1, #8
  209358:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
  20935c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  20935e:	f8de 3000 	ldr.w	r3, [lr]
  209362:	6023      	str	r3, [r4, #0]
	    ++this->_M_impl._M_finish;
  209364:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
  209368:	331c      	adds	r3, #28
  20936a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
  20936e:	3701      	adds	r7, #1
  209370:	361c      	adds	r6, #28
  209372:	f8d8 3018 	ldr.w	r3, [r8, #24]
  209376:	42bb      	cmp	r3, r7
  209378:	d90f      	bls.n	20939a <_ZN18AttitudeController15pwmInfoCallbackERKN17aerial_robot_msgs7PwmInfoE+0xa2>
        motor_info_.push_back(info_msg.motor_info[i]);
  20937a:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
  20937e:	4431      	add	r1, r6
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  209380:	f8d5 4518 	ldr.w	r4, [r5, #1304]	; 0x518
  209384:	f8d5 351c 	ldr.w	r3, [r5, #1308]	; 0x51c
  209388:	429c      	cmp	r4, r3
  20938a:	d002      	beq.n	209392 <_ZN18AttitudeController15pwmInfoCallbackERKN17aerial_robot_msgs7PwmInfoE+0x9a>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  20938c:	2c00      	cmp	r4, #0
  20938e:	d1dc      	bne.n	20934a <_ZN18AttitudeController15pwmInfoCallbackERKN17aerial_robot_msgs7PwmInfoE+0x52>
  209390:	e7e8      	b.n	209364 <_ZN18AttitudeController15pwmInfoCallbackERKN17aerial_robot_msgs7PwmInfoE+0x6c>
	  _M_emplace_back_aux(__x);
  209392:	4650      	mov	r0, sl
  209394:	f7ff ff28 	bl	2091e8 <_ZNSt6vectorIN17aerial_robot_msgs9MotorInfoESaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_>
  209398:	e7e9      	b.n	20936e <_ZN18AttitudeController15pwmInfoCallbackERKN17aerial_robot_msgs7PwmInfoE+0x76>
  min_duty_ = pwmConversion(min_thrust_);
  20939a:	f505 63a1 	add.w	r3, r5, #1288	; 0x508
  20939e:	ed93 0a00 	vldr	s0, [r3]
  2093a2:	4628      	mov	r0, r5
  2093a4:	f7ff fad8 	bl	208958 <_ZN18AttitudeController13pwmConversionEf>
  2093a8:	f505 639f 	add.w	r3, r5, #1272	; 0x4f8
  2093ac:	ed83 0a00 	vstr	s0, [r3]
  max_duty_ = pwmConversion(max_thrust_);
  2093b0:	f205 5304 	addw	r3, r5, #1284	; 0x504
  2093b4:	ed93 0a00 	vldr	s0, [r3]
  2093b8:	4628      	mov	r0, r5
  2093ba:	f7ff facd 	bl	208958 <_ZN18AttitudeController13pwmConversionEf>
  2093be:	f205 43fc 	addw	r3, r5, #1276	; 0x4fc
  2093c2:	ed83 0a00 	vstr	s0, [r3]
  abs_max_duty_ = info_msg.abs_max_pwm;
  2093c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
  2093ca:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
  2093ce:	602b      	str	r3, [r5, #0]
  2093d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  2093d4:	b6db6db7 	.word	0xb6db6db7
  2093d8:	002177b0 	.word	0x002177b0

002093dc <_Z8inv_sqrtf>:
  float y = x;

  int32_t i =  *reinterpret_cast<int32_t*>(&y);
  //long i = *(long*)&y;
  i = 0x5f3759df - (i>>1);
  y = *reinterpret_cast<float*>(&i);
  2093dc:	4b0a      	ldr	r3, [pc, #40]	; (209408 <_Z8inv_sqrtf+0x2c>)
  2093de:	ee10 2a10 	vmov	r2, s0
  2093e2:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  2093e6:	ee07 3a10 	vmov	s14, r3
  float halfx = 0.5f * x;
  2093ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  2093ee:	ee60 7a27 	vmul.f32	s15, s0, s15
  //y = *(float*)&i;
  y = y * (1.5f - (halfx * y * y));
  2093f2:	ee67 7a87 	vmul.f32	s15, s15, s14
  2093f6:	ee67 7a87 	vmul.f32	s15, s15, s14
  2093fa:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
  2093fe:	ee30 0a67 	vsub.f32	s0, s0, s15
  return y;
}
  209402:	ee20 0a07 	vmul.f32	s0, s0, s14
  209406:	4770      	bx	lr
  209408:	5f3759df 	.word	0x5f3759df

0020940c <_ZN7Matrix3IfE10from_eulerEfff>:
#include "AP_Math.h"

// create a rotation matrix given some euler angles
// this is based on http://gentlenav.googlecode.com/files/EulerAngles.pdf
template <typename T>
void Matrix3<T>::from_euler(float roll, float pitch, float yaw)
  20940c:	b510      	push	{r4, lr}
  20940e:	ed2d 8b06 	vpush	{d8-d10}
  209412:	eeb0 9a60 	vmov.f32	s18, s1
  209416:	4604      	mov	r4, r0
  209418:	eeb0 8a40 	vmov.f32	s16, s0
{
    float cp = cosf(pitch);
  20941c:	eeb0 0a60 	vmov.f32	s0, s1
void Matrix3<T>::from_euler(float roll, float pitch, float yaw)
  209420:	eef0 aa41 	vmov.f32	s21, s2
    float cp = cosf(pitch);
  209424:	f00b fffc 	bl	215420 <cosf>
  209428:	eef0 8a40 	vmov.f32	s17, s0
    float sp = sinf(pitch);
  20942c:	eeb0 0a49 	vmov.f32	s0, s18
  209430:	f00c f836 	bl	2154a0 <sinf>
  209434:	eef0 9a40 	vmov.f32	s19, s0
    float sr = sinf(roll);
  209438:	eeb0 0a48 	vmov.f32	s0, s16
  20943c:	f00c f830 	bl	2154a0 <sinf>
  209440:	eeb0 aa40 	vmov.f32	s20, s0
    float cr = cosf(roll);
  209444:	eeb0 0a48 	vmov.f32	s0, s16
  209448:	f00b ffea 	bl	215420 <cosf>
  20944c:	eeb0 9a40 	vmov.f32	s18, s0
    float sy = sinf(yaw);
  209450:	eeb0 0a6a 	vmov.f32	s0, s21
  209454:	f00c f824 	bl	2154a0 <sinf>
  209458:	eeb0 8a40 	vmov.f32	s16, s0
    float cy = cosf(yaw);
  20945c:	eeb0 0a6a 	vmov.f32	s0, s21
  209460:	f00b ffde 	bl	215420 <cosf>

    a.x = cp * cy;
    a.y = (sr * sp * cy) - (cr * sy);
  209464:	ee29 5a8a 	vmul.f32	s10, s19, s20
    a.z = (cr * sp * cy) + (sr * sy);
  209468:	ee69 5a89 	vmul.f32	s11, s19, s18
    a.y = (sr * sp * cy) - (cr * sy);
  20946c:	ee28 6a49 	vnmul.f32	s12, s16, s18
    b.x = cp * sy;
    b.y = (sr * sp * sy) + (cr * cy);
  209470:	ee69 6a00 	vmul.f32	s13, s18, s0
    a.z = (cr * sp * cy) + (sr * sy);
  209474:	ee2a 7a08 	vmul.f32	s14, s20, s16
    b.z = (cr * sp * sy) - (sr * cy);
  209478:	ee60 7a4a 	vnmul.f32	s15, s0, s20
    a.y = (sr * sp * cy) - (cr * sy);
  20947c:	eea0 6a05 	vfma.f32	s12, s0, s10
    b.y = (sr * sp * sy) + (cr * cy);
  209480:	eee8 6a05 	vfma.f32	s13, s16, s10
    a.z = (cr * sp * cy) + (sr * sy);
  209484:	eea0 7a25 	vfma.f32	s14, s0, s11
    b.z = (cr * sp * sy) - (sr * cy);
  209488:	eee8 7a25 	vfma.f32	s15, s16, s11
    c.x = -sp;
    c.y = sr * cp;
    c.z = cr * cp;
  20948c:	ee28 9a89 	vmul.f32	s18, s17, s18
    b.x = cp * sy;
  209490:	ee28 8a88 	vmul.f32	s16, s17, s16
    a.x = cp * cy;
  209494:	ee28 0a80 	vmul.f32	s0, s17, s0
    a.y = (sr * sp * cy) - (cr * sy);
  209498:	ed84 6a01 	vstr	s12, [r4, #4]
    c.x = -sp;
  20949c:	eef1 9a69 	vneg.f32	s19, s19
    c.z = cr * cp;
  2094a0:	ed84 9a08 	vstr	s18, [r4, #32]
    c.y = sr * cp;
  2094a4:	ee68 8a8a 	vmul.f32	s17, s17, s20
    b.x = cp * sy;
  2094a8:	ed84 8a03 	vstr	s16, [r4, #12]
    a.x = cp * cy;
  2094ac:	ed84 0a00 	vstr	s0, [r4]
    c.x = -sp;
  2094b0:	edc4 9a06 	vstr	s19, [r4, #24]
    c.y = sr * cp;
  2094b4:	edc4 8a07 	vstr	s17, [r4, #28]
    b.y = (sr * sp * sy) + (cr * cy);
  2094b8:	edc4 6a04 	vstr	s13, [r4, #16]
    a.z = (cr * sp * cy) + (sr * sy);
  2094bc:	ed84 7a02 	vstr	s14, [r4, #8]
    b.z = (cr * sp * sy) - (sr * cy);
  2094c0:	edc4 7a05 	vstr	s15, [r4, #20]
}
  2094c4:	ecbd 8b06 	vpop	{d8-d10}
  2094c8:	bd10      	pop	{r4, pc}
  2094ca:	bf00      	nop

002094cc <_ZNK7Matrix3IfEmlERK7Vector3IfE>:

// multiplication by a vector
template <typename T>
Vector3<T> Matrix3<T>::operator *(const Vector3<T> &v) const
{
    return Vector3<T>(a.x * v.x + a.y * v.y + a.z * v.z,
  2094cc:	ed91 0a01 	vldr	s0, [r1, #4]
Vector3<T> Matrix3<T>::operator *(const Vector3<T> &v) const
  2094d0:	b088      	sub	sp, #32
    return Vector3<T>(a.x * v.x + a.y * v.y + a.z * v.z,
  2094d2:	edd0 7a01 	vldr	s15, [r0, #4]
                      b.x * v.x + b.y * v.y + b.z * v.z,
  2094d6:	edd0 0a04 	vldr	s1, [r0, #16]
                      c.x * v.x + c.y * v.y + c.z * v.z);
  2094da:	ed90 1a07 	vldr	s2, [r0, #28]
                      b.x * v.x + b.y * v.y + b.z * v.z,
  2094de:	ee60 0a20 	vmul.f32	s1, s0, s1
    return Vector3<T>(a.x * v.x + a.y * v.y + a.z * v.z,
  2094e2:	ed91 7a00 	vldr	s14, [r1]
                      c.x * v.x + c.y * v.y + c.z * v.z);
  2094e6:	ee20 1a01 	vmul.f32	s2, s0, s2
                      b.x * v.x + b.y * v.y + b.z * v.z,
  2094ea:	ed90 6a03 	vldr	s12, [r0, #12]
    return Vector3<T>(a.x * v.x + a.y * v.y + a.z * v.z,
  2094ee:	ee20 0a27 	vmul.f32	s0, s0, s15
  2094f2:	edd0 6a00 	vldr	s13, [r0]
                      c.x * v.x + c.y * v.y + c.z * v.z);
  2094f6:	edd0 7a06 	vldr	s15, [r0, #24]
                      b.x * v.x + b.y * v.y + b.z * v.z,
  2094fa:	eee7 0a06 	vfma.f32	s1, s14, s12
                      c.x * v.x + c.y * v.y + c.z * v.z);
  2094fe:	ed90 6a05 	vldr	s12, [r0, #20]
  209502:	eea7 1a27 	vfma.f32	s2, s14, s15
    return Vector3<T>(a.x * v.x + a.y * v.y + a.z * v.z,
  209506:	edd1 7a02 	vldr	s15, [r1, #8]
  20950a:	eea6 0a87 	vfma.f32	s0, s13, s14
                      c.x * v.x + c.y * v.y + c.z * v.z);
  20950e:	edd0 6a08 	vldr	s13, [r0, #32]
  209512:	ed90 7a02 	vldr	s14, [r0, #8]
}
  209516:	eee7 0a86 	vfma.f32	s1, s15, s12
  20951a:	eea7 1aa6 	vfma.f32	s2, s15, s13
  20951e:	eea7 0a27 	vfma.f32	s0, s14, s15
  209522:	b008      	add	sp, #32
  209524:	4770      	bx	lr
  209526:	bf00      	nop

00209528 <_ZNK7Vector3IfErmERKS0_>:

// vector cross product
template <typename T>
Vector3<T> Vector3<T>::operator %(const Vector3<T> &v) const
{
    Vector3<T> temp(y*v.z - z*v.y, z*v.x - x*v.z, x*v.y - y*v.x);
  209528:	ed90 6a01 	vldr	s12, [r0, #4]
Vector3<T> Vector3<T>::operator %(const Vector3<T> &v) const
  20952c:	b088      	sub	sp, #32
    Vector3<T> temp(y*v.z - z*v.y, z*v.x - x*v.z, x*v.y - y*v.x);
  20952e:	edd1 7a00 	vldr	s15, [r1]
  209532:	edd1 6a02 	vldr	s13, [r1, #8]
  209536:	ed90 7a02 	vldr	s14, [r0, #8]
  20953a:	ee27 1ac6 	vnmul.f32	s2, s15, s12
  20953e:	ed91 5a01 	vldr	s10, [r1, #4]
  209542:	edd0 5a00 	vldr	s11, [r0]
  209546:	ee25 0a47 	vnmul.f32	s0, s10, s14
  20954a:	ee65 0ae6 	vnmul.f32	s1, s11, s13
    return temp;
}
  20954e:	eea5 1a25 	vfma.f32	s2, s10, s11
  209552:	eea6 0a26 	vfma.f32	s0, s12, s13
  209556:	eee7 0a27 	vfma.f32	s1, s14, s15
  20955a:	b008      	add	sp, #32
  20955c:	4770      	bx	lr
  20955e:	bf00      	nop

00209560 <_ZNK7Vector3IfEmlERKS0_>:

// dot product
template <typename T>
T Vector3<T>::operator *(const Vector3<T> &v) const
{
    return x*v.x + y*v.y + z*v.z;
  209560:	edd1 7a01 	vldr	s15, [r1, #4]
  209564:	ed90 0a01 	vldr	s0, [r0, #4]
  209568:	ed90 6a00 	vldr	s12, [r0]
  20956c:	ee20 0a27 	vmul.f32	s0, s0, s15
  209570:	edd1 6a00 	vldr	s13, [r1]
  209574:	ed90 7a02 	vldr	s14, [r0, #8]
  209578:	edd1 7a02 	vldr	s15, [r1, #8]
  20957c:	eea6 0a26 	vfma.f32	s0, s12, s13
}
  209580:	eea7 0a27 	vfma.f32	s0, s14, s15
  209584:	4770      	bx	lr
  209586:	bf00      	nop

00209588 <_ZN7Vector3IfEdVEf>:
}

template <typename T>
Vector3<T> &Vector3<T>::operator /=(const T num)
{
    x /= num; y /= num; z /= num;
  209588:	ed90 7a00 	vldr	s14, [r0]
  20958c:	edd0 7a01 	vldr	s15, [r0, #4]
  209590:	ed90 6a02 	vldr	s12, [r0, #8]
  209594:	eec7 6a00 	vdiv.f32	s13, s14, s0
  209598:	ee87 7a80 	vdiv.f32	s14, s15, s0
  20959c:	eec6 7a00 	vdiv.f32	s15, s12, s0
  2095a0:	edc0 6a00 	vstr	s13, [r0]
  2095a4:	ed80 7a01 	vstr	s14, [r0, #4]
  2095a8:	edc0 7a02 	vstr	s15, [r0, #8]
    return *this;
}
  2095ac:	4770      	bx	lr
  2095ae:	bf00      	nop

002095b0 <_ZN7Vector3IfEmIERKS0_>:

template <typename T>
Vector3<T> &Vector3<T>::operator -=(const Vector3<T> &v)
{
    x -= v.x; y -= v.y; z -= v.z;
  2095b0:	edd1 7a00 	vldr	s15, [r1]
  2095b4:	edd0 6a00 	vldr	s13, [r0]
  2095b8:	edd1 5a01 	vldr	s11, [r1, #4]
  2095bc:	ed91 6a02 	vldr	s12, [r1, #8]
  2095c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
  2095c4:	ed90 7a01 	vldr	s14, [r0, #4]
  2095c8:	edd0 7a02 	vldr	s15, [r0, #8]
  2095cc:	ee37 7a65 	vsub.f32	s14, s14, s11
  2095d0:	edc0 6a00 	vstr	s13, [r0]
  2095d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
  2095d8:	ed80 7a01 	vstr	s14, [r0, #4]
  2095dc:	edc0 7a02 	vstr	s15, [r0, #8]
    return *this;
}
  2095e0:	4770      	bx	lr
  2095e2:	bf00      	nop

002095e4 <_ZN7Vector3IfEpLERKS0_>:

template <typename T>
Vector3<T> &Vector3<T>::operator +=(const Vector3<T> &v)
{
    x+=v.x; y+=v.y; z+=v.z;
  2095e4:	edd1 7a00 	vldr	s15, [r1]
  2095e8:	edd0 6a00 	vldr	s13, [r0]
  2095ec:	edd1 5a01 	vldr	s11, [r1, #4]
  2095f0:	ed91 6a02 	vldr	s12, [r1, #8]
  2095f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
  2095f8:	ed90 7a01 	vldr	s14, [r0, #4]
  2095fc:	edd0 7a02 	vldr	s15, [r0, #8]
  209600:	ee37 7a25 	vadd.f32	s14, s14, s11
  209604:	edc0 6a00 	vstr	s13, [r0]
  209608:	ee77 7a86 	vadd.f32	s15, s15, s12
  20960c:	ed80 7a01 	vstr	s14, [r0, #4]
  209610:	edc0 7a02 	vstr	s15, [r0, #8]
    return *this;
}
  209614:	4770      	bx	lr
  209616:	bf00      	nop

00209618 <_ZNK7Vector3IfEdvEf>:

template <typename T>
Vector3<T> Vector3<T>::operator /(const T num) const
{
    return Vector3<T>(x/num, y/num, z/num);
  209618:	edd0 0a01 	vldr	s1, [r0, #4]
Vector3<T> Vector3<T>::operator /(const T num) const
  20961c:	b088      	sub	sp, #32
    return Vector3<T>(x/num, y/num, z/num);
  20961e:	ed90 1a02 	vldr	s2, [r0, #8]
  209622:	edd0 7a00 	vldr	s15, [r0]
}
  209626:	eec0 0a80 	vdiv.f32	s1, s1, s0
  20962a:	ee81 1a00 	vdiv.f32	s2, s2, s0
  20962e:	ee87 0a80 	vdiv.f32	s0, s15, s0
  209632:	b008      	add	sp, #32
  209634:	4770      	bx	lr
  209636:	bf00      	nop

00209638 <_ZNK7Vector3IfEmlEf>:

template <typename T>
Vector3<T> Vector3<T>::operator *(const T num) const
{
    return Vector3<T>(x*num, y*num, z*num);
  209638:	edd0 0a01 	vldr	s1, [r0, #4]
Vector3<T> Vector3<T>::operator *(const T num) const
  20963c:	b088      	sub	sp, #32
    return Vector3<T>(x*num, y*num, z*num);
  20963e:	ed90 1a02 	vldr	s2, [r0, #8]
  209642:	edd0 7a00 	vldr	s15, [r0]
}
  209646:	ee60 0a20 	vmul.f32	s1, s0, s1
  20964a:	ee20 1a01 	vmul.f32	s2, s0, s2
  20964e:	ee27 0a80 	vmul.f32	s0, s15, s0
  209652:	b008      	add	sp, #32
  209654:	4770      	bx	lr
  209656:	bf00      	nop

00209658 <_ZNK7Vector3IfEplERKS0_>:
}

template <typename T>
Vector3<T> Vector3<T>::operator +(const Vector3<T> &v) const
{
    return Vector3<T>(x+v.x, y+v.y, z+v.z);
  209658:	edd1 7a01 	vldr	s15, [r1, #4]
Vector3<T> Vector3<T>::operator +(const Vector3<T> &v) const
  20965c:	b088      	sub	sp, #32
    return Vector3<T>(x+v.x, y+v.y, z+v.z);
  20965e:	edd0 0a01 	vldr	s1, [r0, #4]
  209662:	ed90 1a02 	vldr	s2, [r0, #8]
}
  209666:	ee70 0aa7 	vadd.f32	s1, s1, s15
    return Vector3<T>(x+v.x, y+v.y, z+v.z);
  20966a:	ed91 7a02 	vldr	s14, [r1, #8]
  20966e:	ed90 0a00 	vldr	s0, [r0]
  209672:	edd1 7a00 	vldr	s15, [r1]
}
  209676:	ee31 1a07 	vadd.f32	s2, s2, s14
  20967a:	ee30 0a27 	vadd.f32	s0, s0, s15
  20967e:	b008      	add	sp, #32
  209680:	4770      	bx	lr
  209682:	bf00      	nop

00209684 <_ZNK7Vector3IfEmiERKS0_>:
    return Vector3<T>(x-v.x, y-v.y, z-v.z);
  209684:	edd1 7a01 	vldr	s15, [r1, #4]
Vector3<T> Vector3<T>::operator -(const Vector3<T> &v) const
  209688:	b088      	sub	sp, #32
    return Vector3<T>(x-v.x, y-v.y, z-v.z);
  20968a:	edd0 0a01 	vldr	s1, [r0, #4]
  20968e:	ed90 1a02 	vldr	s2, [r0, #8]
}
  209692:	ee70 0ae7 	vsub.f32	s1, s1, s15
    return Vector3<T>(x-v.x, y-v.y, z-v.z);
  209696:	ed91 7a02 	vldr	s14, [r1, #8]
  20969a:	ed90 0a00 	vldr	s0, [r0]
  20969e:	edd1 7a00 	vldr	s15, [r1]
}
  2096a2:	ee31 1a47 	vsub.f32	s2, s2, s14
  2096a6:	ee30 0a67 	vsub.f32	s0, s0, s15
  2096aa:	b008      	add	sp, #32
  2096ac:	4770      	bx	lr
  2096ae:	bf00      	nop

002096b0 <_ZNK7Vector3IfEneERKS0_>:

// define AP_Param types AP_Vector3f and Ap_Matrix3f
/* AP_PARAMDEFV(Vector3f, Vector3f, AP_PARAM_VECTOR3F); */

// are two floats equal
static inline bool is_equal(const float fVal1, const float fVal2) { return fabsf(fVal1 - fVal2) < FLT_EPSILON ? true : false; }
  2096b0:	edd0 7a00 	vldr	s15, [r0]
  2096b4:	edd1 6a00 	vldr	s13, [r1]
}

template <typename T>
bool Vector3<T>::operator !=(const Vector3<T> &v) const
{
    return (!is_equal(x,v.x) || !is_equal(y,v.y) || !is_equal(z,v.z));
  2096b8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 20970c <_ZNK7Vector3IfEneERKS0_+0x5c>
  2096bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
  2096c0:	eef0 7ae7 	vabs.f32	s15, s15
  2096c4:	eef4 7ac7 	vcmpe.f32	s15, s14
  2096c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  2096cc:	d51c      	bpl.n	209708 <_ZNK7Vector3IfEneERKS0_+0x58>
  2096ce:	edd0 7a01 	vldr	s15, [r0, #4]
  2096d2:	edd1 6a01 	vldr	s13, [r1, #4]
  2096d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
  2096da:	eef0 7ae7 	vabs.f32	s15, s15
  2096de:	eef4 7ac7 	vcmpe.f32	s15, s14
  2096e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  2096e6:	d50f      	bpl.n	209708 <_ZNK7Vector3IfEneERKS0_+0x58>
  2096e8:	edd0 7a02 	vldr	s15, [r0, #8]
  2096ec:	edd1 6a02 	vldr	s13, [r1, #8]
  2096f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
  2096f4:	eef0 7ae7 	vabs.f32	s15, s15
  2096f8:	eef4 7ac7 	vcmpe.f32	s15, s14
  2096fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  209700:	bf54      	ite	pl
  209702:	2001      	movpl	r0, #1
  209704:	2000      	movmi	r0, #0
  209706:	4770      	bx	lr
  209708:	2001      	movs	r0, #1
}
  20970a:	4770      	bx	lr
  20970c:	34000000 	.word	0x34000000

00209710 <_ZN11BaroBackendC1Ev>:
  temperature_(0.0f),
  altitude_(0.0f),
  alt_offset_(0.0f),
  alt_offset_active_(0.0f),
  last_altitude_EAS2TAS_(0.0f),
  EAS2TAS_(0.0f)
  209710:	2200      	movs	r2, #0
  209712:	6002      	str	r2, [r0, #0]
  209714:	6042      	str	r2, [r0, #4]
  209716:	6082      	str	r2, [r0, #8]
  209718:	60c2      	str	r2, [r0, #12]
  20971a:	6142      	str	r2, [r0, #20]
  20971c:	6182      	str	r2, [r0, #24]
  20971e:	61c2      	str	r2, [r0, #28]
  209720:	6202      	str	r2, [r0, #32]
{
  calibrate_count_ = CALIBRATE_COUNT;
  209722:	2264      	movs	r2, #100	; 0x64
  209724:	8242      	strh	r2, [r0, #18]
  calibrated_ = false;
  209726:	2200      	movs	r2, #0
  209728:	7402      	strb	r2, [r0, #16]
}
  20972a:	4770      	bx	lr

0020972c <_ZNK11BaroBackend21getAltitudeDifferenceEff>:

// return altitude difference in meters between current pressure and a
// given base_pressure in Pascal
float BaroBackend::getAltitudeDifference(float base_pressure, float pressure) const
{
  20972c:	b508      	push	{r3, lr}
  20972e:	ed2d 8b02 	vpush	{d8}
  float ret;
  float temp    = getTemperature() + 273.15f;
  209732:	ed90 8a02 	vldr	s16, [r0, #8]
  209736:	eddf 7a0d 	vldr	s15, [pc, #52]	; 20976c <_ZNK11BaroBackend21getAltitudeDifferenceEff+0x40>
  20973a:	ee38 8a27 	vadd.f32	s16, s16, s15
  float scaling = pressure / base_pressure;

  // This is an exact calculation that is within +-2.5m of the standard
  // atmosphere tables in the troposphere (up to 11,000 m amsl).
  ret = 153.8462f * temp * (1.0f - expf(0.190259f * logf(scaling)));
  20973e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 209770 <_ZNK11BaroBackend21getAltitudeDifferenceEff+0x44>
  209742:	ee28 8a27 	vmul.f32	s16, s16, s15
  209746:	ee80 0a80 	vdiv.f32	s0, s1, s0
  20974a:	f00b ff67 	bl	21561c <logf>
  20974e:	eddf 7a09 	vldr	s15, [pc, #36]	; 209774 <_ZNK11BaroBackend21getAltitudeDifferenceEff+0x48>
  209752:	ee20 0a27 	vmul.f32	s0, s0, s15
  209756:	f00b fee7 	bl	215528 <expf>
  20975a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  20975e:	ee37 0ac0 	vsub.f32	s0, s15, s0

  return ret;
}
  209762:	ee20 0a08 	vmul.f32	s0, s0, s16
  209766:	ecbd 8b02 	vpop	{d8}
  20976a:	bd08      	pop	{r3, pc}
  20976c:	43889333 	.word	0x43889333
  209770:	4319d8a1 	.word	0x4319d8a1
  209774:	3e42d341 	.word	0x3e42d341

00209778 <_ZN11BaroBackend10baseUpdateEv>:

/*
  call update on all drivers
*/
void BaroBackend::baseUpdate(void)
{
  209778:	b510      	push	{r4, lr}
  20977a:	4604      	mov	r4, r0
  if (fabsf(alt_offset_ - alt_offset_active_) > 0.1f) {
  20977c:	edd0 6a05 	vldr	s13, [r0, #20]
  209780:	ed90 7a06 	vldr	s14, [r0, #24]
  209784:	ee76 7ac7 	vsub.f32	s15, s13, s14
  209788:	eef0 7ae7 	vabs.f32	s15, s15
  20978c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 2097d8 <_ZN11BaroBackend10baseUpdateEv+0x60>
  209790:	eef4 7ac6 	vcmpe.f32	s15, s12
  209794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  209798:	dc12      	bgt.n	2097c0 <_ZN11BaroBackend10baseUpdateEv+0x48>
    // if there's more than 10cm difference then slowly slew to it via LPF.
    // The EKF does not like step inputs so this keeps it happy
    alt_offset_active_ = (0.9f*alt_offset_active_) + (0.1f*alt_offset_);
  } else {
    alt_offset_active_ = alt_offset_;
  20979a:	edc0 6a06 	vstr	s13, [r0, #24]
  }

  // update altitude calculation
  float altitude = getAltitudeDifference(base_pressure_, pressure_);
  20979e:	edd4 0a00 	vldr	s1, [r4]
  2097a2:	ed94 0a01 	vldr	s0, [r4, #4]
  2097a6:	4620      	mov	r0, r4
  2097a8:	f7ff ffc0 	bl	20972c <_ZNK11BaroBackend21getAltitudeDifferenceEff>
  // sanity check altitude
  altitude_ = altitude + alt_offset_active_;
  2097ac:	edd4 7a06 	vldr	s15, [r4, #24]
  2097b0:	ee37 0a80 	vadd.f32	s0, s15, s0
  2097b4:	ed84 0a03 	vstr	s0, [r4, #12]

  update_ = true;
  2097b8:	2301      	movs	r3, #1
  2097ba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  2097be:	bd10      	pop	{r4, pc}
    alt_offset_active_ = (0.9f*alt_offset_active_) + (0.1f*alt_offset_);
  2097c0:	eddf 7a06 	vldr	s15, [pc, #24]	; 2097dc <_ZN11BaroBackend10baseUpdateEv+0x64>
  2097c4:	ee27 7a27 	vmul.f32	s14, s14, s15
  2097c8:	ee66 6a86 	vmul.f32	s13, s13, s12
  2097cc:	ee37 7a26 	vadd.f32	s14, s14, s13
  2097d0:	ed80 7a06 	vstr	s14, [r0, #24]
  2097d4:	e7e3      	b.n	20979e <_ZN11BaroBackend10baseUpdateEv+0x26>
  2097d6:	bf00      	nop
  2097d8:	3dcccccd 	.word	0x3dcccccd
  2097dc:	3f666666 	.word	0x3f666666

002097e0 <_ZN4Baro18baroConfigCallbackERKN8std_msgs5UInt8E>:
  pressure_ = (d1_*SENS/2097152 - OFF)/32768;
  temperature_ = (TEMP + 2000) * 0.01f;
}

void Baro::baroConfigCallback(const std_msgs::UInt8& config_msg)
{
  2097e0:	4770      	bx	lr

002097e2 <_ZN3ros10SubscriberIN8std_msgs5UInt8E4BaroE8callbackEPh>:
  virtual void callback(unsigned char* data)
  2097e2:	b510      	push	{r4, lr}
      this->data =  ((uint8_t) (*(inbuffer + offset)));
  2097e4:	780b      	ldrb	r3, [r1, #0]
  2097e6:	7403      	strb	r3, [r0, #16]
    (obj_->*cb_)(msg);
  2097e8:	6983      	ldr	r3, [r0, #24]
  2097ea:	f013 0f01 	tst.w	r3, #1
  2097ee:	d00b      	beq.n	209808 <_ZN3ros10SubscriberIN8std_msgs5UInt8E4BaroE8callbackEPh+0x26>
  2097f0:	105a      	asrs	r2, r3, #1
  2097f2:	69c1      	ldr	r1, [r0, #28]
  2097f4:	5889      	ldr	r1, [r1, r2]
  2097f6:	6942      	ldr	r2, [r0, #20]
  2097f8:	588a      	ldr	r2, [r1, r2]
  2097fa:	69c4      	ldr	r4, [r0, #28]
  2097fc:	f100 010c 	add.w	r1, r0, #12
  209800:	eb04 0063 	add.w	r0, r4, r3, asr #1
  209804:	4790      	blx	r2
  209806:	bd10      	pop	{r4, pc}
  209808:	6942      	ldr	r2, [r0, #20]
  20980a:	e7f6      	b.n	2097fa <_ZN3ros10SubscriberIN8std_msgs5UInt8E4BaroE8callbackEPh+0x18>

0020980c <_ZN3ros10SubscriberIN8std_msgs5UInt8E4BaroE15getEndpointTypeEv>:
  }
  20980c:	6a00      	ldr	r0, [r0, #32]
  20980e:	4770      	bx	lr

00209810 <_ZN3ros10SubscriberIN8std_msgs5UInt8E4BaroE10getMsgTypeEv>:
  }
  209810:	4800      	ldr	r0, [pc, #0]	; (209814 <_ZN3ros10SubscriberIN8std_msgs5UInt8E4BaroE10getMsgTypeEv+0x4>)
  209812:	4770      	bx	lr
  209814:	002173c0 	.word	0x002173c0

00209818 <_ZN3ros10SubscriberIN8std_msgs5UInt8E4BaroE9getMsgMD5Ev>:
  }
  209818:	4800      	ldr	r0, [pc, #0]	; (20981c <_ZN3ros10SubscriberIN8std_msgs5UInt8E4BaroE9getMsgMD5Ev+0x4>)
  20981a:	4770      	bx	lr
  20981c:	0021739c 	.word	0x0021739c

00209820 <_ZN4BaroC1Ev>:
Baro::Baro(): BaroBackend(), baro_config_sub_("/baro_config_cmd", &Baro::baroConfigCallback, this )
  209820:	b510      	push	{r4, lr}
  209822:	4604      	mov	r4, r0
  209824:	f7ff ff74 	bl	209710 <_ZN11BaroBackendC1Ev>
    endpoint_(endpoint)
  209828:	4b0a      	ldr	r3, [pc, #40]	; (209854 <_ZN4BaroC1Ev+0x34>)
  20982a:	6363      	str	r3, [r4, #52]	; 0x34
      data(0)
  20982c:	4b0a      	ldr	r3, [pc, #40]	; (209858 <_ZN4BaroC1Ev+0x38>)
  20982e:	6423      	str	r3, [r4, #64]	; 0x40
  209830:	2300      	movs	r3, #0
  209832:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  209836:	4a09      	ldr	r2, [pc, #36]	; (20985c <_ZN4BaroC1Ev+0x3c>)
  209838:	64a2      	str	r2, [r4, #72]	; 0x48
  20983a:	64e3      	str	r3, [r4, #76]	; 0x4c
  20983c:	6524      	str	r4, [r4, #80]	; 0x50
  20983e:	2201      	movs	r2, #1
  209840:	6562      	str	r2, [r4, #84]	; 0x54
    topic_ = topic_name;
  209842:	4a07      	ldr	r2, [pc, #28]	; (209860 <_ZN4BaroC1Ev+0x40>)
  209844:	63e2      	str	r2, [r4, #60]	; 0x3c
  state_ = 0;
  209846:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  tp_updated_ = false;
  20984a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
  20984e:	4620      	mov	r0, r4
  209850:	bd10      	pop	{r4, pc}
  209852:	bf00      	nop
  209854:	00217ba0 	.word	0x00217ba0
  209858:	0021738c 	.word	0x0021738c
  20985c:	002097e1 	.word	0x002097e1
  209860:	00217bb0 	.word	0x00217bb0

00209864 <_ZN4Baro13readCalibWordEh>:
{
  209864:	b530      	push	{r4, r5, lr}
  209866:	b085      	sub	sp, #20
  209868:	4605      	mov	r5, r0
  reg[0] = CMD_MS56XX_PROM + (word << 1);
  20986a:	0049      	lsls	r1, r1, #1
  20986c:	3960      	subs	r1, #96	; 0x60
  20986e:	aa04      	add	r2, sp, #16
  209870:	f802 1d08 	strb.w	r1, [r2, #-8]!
  HAL_I2C_Master_Transmit(i2c_handle_, MS561101BA_ADDRESS, reg, 1, 100);
  209874:	2464      	movs	r4, #100	; 0x64
  209876:	9400      	str	r4, [sp, #0]
  209878:	2301      	movs	r3, #1
  20987a:	21ec      	movs	r1, #236	; 0xec
  20987c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  20987e:	f007 fc95 	bl	2111ac <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(i2c_handle_, MS561101BA_ADDRESS, val, 2, 100);
  209882:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  209884:	9400      	str	r4, [sp, #0]
  209886:	2302      	movs	r3, #2
  209888:	aa03      	add	r2, sp, #12
  20988a:	21ec      	movs	r1, #236	; 0xec
  20988c:	f007 fd30 	bl	2112f0 <HAL_I2C_Master_Receive>
  return (val[0] << 8) | val[1];
  209890:	f89d 000c 	ldrb.w	r0, [sp, #12]
  209894:	f89d 300d 	ldrb.w	r3, [sp, #13]
}
  209898:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
  20989c:	b005      	add	sp, #20
  20989e:	bd30      	pop	{r4, r5, pc}

002098a0 <_ZN4Baro9readCalibEPt>:
{
  2098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  2098a2:	4607      	mov	r7, r0
  2098a4:	460c      	mov	r4, r1
  2098a6:	1e8e      	subs	r6, r1, #2
  2098a8:	2500      	movs	r5, #0
    prom[i] = readCalibWord(i);
  2098aa:	b2e9      	uxtb	r1, r5
  2098ac:	4638      	mov	r0, r7
  2098ae:	f7ff ffd9 	bl	209864 <_ZN4Baro13readCalibWordEh>
  2098b2:	f826 0f02 	strh.w	r0, [r6, #2]!
  2098b6:	3501      	adds	r5, #1
  for (uint8_t i = 0; i < 8; i++) {
  2098b8:	2d08      	cmp	r5, #8
  2098ba:	d1f6      	bne.n	2098aa <_ZN4Baro9readCalibEPt+0xa>
  const uint16_t crc_read = prom[7] & 0xf;
  2098bc:	89e3      	ldrh	r3, [r4, #14]
  2098be:	f003 000f 	and.w	r0, r3, #15
  prom[7] &= 0xff00;
  2098c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  2098c6:	81e3      	strh	r3, [r4, #14]
  2098c8:	2100      	movs	r1, #0
  2098ca:	460b      	mov	r3, r1
  2098cc:	e015      	b.n	2098fa <_ZN4Baro9readCalibEPt+0x5a>
      n_rem ^= (uint8_t)(data[cnt >> 1] >> 8);
  2098ce:	104a      	asrs	r2, r1, #1
  2098d0:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
  2098d4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
  prom[7] &= 0xff00;
  2098d8:	2207      	movs	r2, #7
      if (n_rem & 0x8000) {
  2098da:	f413 4f00 	tst.w	r3, #32768	; 0x8000
        n_rem = (n_rem << 1) ^ 0x3000;
  2098de:	ea4f 0343 	mov.w	r3, r3, lsl #1
  2098e2:	bf1c      	itt	ne
  2098e4:	f483 5340 	eorne.w	r3, r3, #12288	; 0x3000
  2098e8:	b21b      	sxthne	r3, r3
        n_rem = (n_rem << 1);
  2098ea:	b29b      	uxth	r3, r3
  2098ec:	3a01      	subs	r2, #1
    for (n_bit = 8; n_bit > 0; n_bit--) {
  2098ee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
  2098f2:	d1f2      	bne.n	2098da <_ZN4Baro9readCalibEPt+0x3a>
  2098f4:	3101      	adds	r1, #1
  for (uint8_t cnt = 0; cnt < 16; cnt++) {
  2098f6:	2910      	cmp	r1, #16
  2098f8:	d007      	beq.n	20990a <_ZN4Baro9readCalibEPt+0x6a>
    if (cnt & 1) {
  2098fa:	f011 0f01 	tst.w	r1, #1
  2098fe:	d0e6      	beq.n	2098ce <_ZN4Baro9readCalibEPt+0x2e>
      n_rem ^= (uint8_t)((data[cnt >> 1]) & 0x00FF);
  209900:	104a      	asrs	r2, r1, #1
  209902:	f814 2012 	ldrb.w	r2, [r4, r2, lsl #1]
  209906:	4053      	eors	r3, r2
  209908:	e7e6      	b.n	2098d8 <_ZN4Baro9readCalibEPt+0x38>
  return crc_read == crc4(prom);
  20990a:	ebb0 3f13 	cmp.w	r0, r3, lsr #12
}
  20990e:	bf0c      	ite	eq
  209910:	2001      	moveq	r0, #1
  209912:	2000      	movne	r0, #0
  209914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00209918 <_ZN4Baro4initEP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>:
{
  209918:	b510      	push	{r4, lr}
  20991a:	b088      	sub	sp, #32
  20991c:	4604      	mov	r4, r0
  i2c_handle_ = hi2c;
  20991e:	62c1      	str	r1, [r0, #44]	; 0x2c
  nh_ = nh;
  209920:	6302      	str	r2, [r0, #48]	; 0x30
      if (subscribers[i] == 0) // empty slot
  209922:	f8d2 3268 	ldr.w	r3, [r2, #616]	; 0x268
  209926:	b313      	cbz	r3, 20996e <_ZN4Baro4initEP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x56>
  209928:	f502 711a 	add.w	r1, r2, #616	; 0x268
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20992c:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  20992e:	f851 0f04 	ldr.w	r0, [r1, #4]!
  209932:	b1e8      	cbz	r0, 209970 <_ZN4Baro4initEP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x58>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  209934:	3301      	adds	r3, #1
  209936:	2b14      	cmp	r3, #20
  209938:	d1f9      	bne.n	20992e <_ZN4Baro4initEP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x16>
  BARO_H;
  20993a:	2201      	movs	r2, #1
  20993c:	2102      	movs	r1, #2
  20993e:	4829      	ldr	r0, [pc, #164]	; (2099e4 <_ZN4Baro4initEP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xcc>)
  209940:	f007 faa2 	bl	210e88 <HAL_GPIO_WritePin>
  reg[0] = CMD_MS56XX_RESET;
  209944:	aa08      	add	r2, sp, #32
  209946:	231e      	movs	r3, #30
  209948:	f802 3d04 	strb.w	r3, [r2, #-4]!
  HAL_I2C_Master_Transmit(i2c_handle_, MS561101BA_ADDRESS, reg, 1, 100);
  20994c:	2364      	movs	r3, #100	; 0x64
  20994e:	9300      	str	r3, [sp, #0]
  209950:	2301      	movs	r3, #1
  209952:	21ec      	movs	r1, #236	; 0xec
  209954:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  209956:	f007 fc29 	bl	2111ac <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
  20995a:	200a      	movs	r0, #10
  20995c:	f005 ffa8 	bl	20f8b0 <HAL_Delay>
  if (!readCalib(prom)) return;
  209960:	a903      	add	r1, sp, #12
  209962:	4620      	mov	r0, r4
  209964:	f7ff ff9c 	bl	2098a0 <_ZN4Baro9readCalibEPt>
  209968:	b958      	cbnz	r0, 209982 <_ZN4Baro4initEP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x6a>
}
  20996a:	b008      	add	sp, #32
  20996c:	bd10      	pop	{r4, pc}
  20996e:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  209970:	f103 019a 	add.w	r1, r3, #154	; 0x9a
  209974:	f104 0034 	add.w	r0, r4, #52	; 0x34
  209978:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        s.id_ = i + 100;
  20997c:	3364      	adds	r3, #100	; 0x64
  20997e:	63a3      	str	r3, [r4, #56]	; 0x38
  209980:	e7db      	b.n	20993a <_ZN4Baro4initEP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x22>
  calibrated_ = true;
  209982:	2301      	movs	r3, #1
  209984:	7423      	strb	r3, [r4, #16]
  c1_ = prom[1];
  209986:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  20998a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  c2_ = prom[2];
  20998e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  209992:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
  c3_ = prom[3];
  209996:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  20999a:	f8a4 206e 	strh.w	r2, [r4, #110]	; 0x6e
  c4_ = prom[4];
  20999e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  2099a2:	f8a4 2070 	strh.w	r2, [r4, #112]	; 0x70
  c5_ = prom[5];
  2099a6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  2099aa:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
  c6_ = prom[6];
  2099ae:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  2099b2:	f8a4 2074 	strh.w	r2, [r4, #116]	; 0x74
  reg[0] = ADDR_CMD_CONVERT_TEMPERATURE;
  2099b6:	aa08      	add	r2, sp, #32
  2099b8:	2158      	movs	r1, #88	; 0x58
  2099ba:	f802 1d04 	strb.w	r1, [r2, #-4]!
  HAL_I2C_Master_Transmit(i2c_handle_, MS561101BA_ADDRESS, reg, 1, 100);
  2099be:	2164      	movs	r1, #100	; 0x64
  2099c0:	9100      	str	r1, [sp, #0]
  2099c2:	21ec      	movs	r1, #236	; 0xec
  2099c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  2099c6:	f007 fbf1 	bl	2111ac <HAL_I2C_Master_Transmit>
  last_timer_ = HAL_GetTick();
  2099ca:	f005 ff6b 	bl	20f8a4 <HAL_GetTick>
  2099ce:	6260      	str	r0, [r4, #36]	; 0x24
  state_ = 0;
  2099d0:	2300      	movs	r3, #0
  2099d2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  s_d1_ = 0;
  2099d6:	6623      	str	r3, [r4, #96]	; 0x60
  s_d2_ = 0;
  2099d8:	6663      	str	r3, [r4, #100]	; 0x64
  d1_count_ = 0;
  2099da:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  d2_count_ = 0;
  2099de:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
  2099e2:	e7c2      	b.n	20996a <_ZN4Baro4initEP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x52>
  2099e4:	40021000 	.word	0x40021000

002099e8 <_ZN4Baro7readAdcEv>:
{
  2099e8:	b500      	push	{lr}
  2099ea:	b085      	sub	sp, #20
  if(HAL_I2C_Master_Receive(i2c_handle_, MS561101BA_ADDRESS, val, 3, 100) != HAL_OK){
  2099ec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  2099ee:	2364      	movs	r3, #100	; 0x64
  2099f0:	9300      	str	r3, [sp, #0]
  2099f2:	2303      	movs	r3, #3
  2099f4:	aa03      	add	r2, sp, #12
  2099f6:	21ec      	movs	r1, #236	; 0xec
  2099f8:	f007 fc7a 	bl	2112f0 <HAL_I2C_Master_Receive>
  2099fc:	b960      	cbnz	r0, 209a18 <_ZN4Baro7readAdcEv+0x30>
  return (val[0] << 16) | (val[1] << 8) | val[2];
  2099fe:	f89d 300c 	ldrb.w	r3, [sp, #12]
  209a02:	f89d 000d 	ldrb.w	r0, [sp, #13]
  209a06:	0200      	lsls	r0, r0, #8
  209a08:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
  209a0c:	f89d 300e 	ldrb.w	r3, [sp, #14]
  209a10:	4318      	orrs	r0, r3
}
  209a12:	b005      	add	sp, #20
  209a14:	f85d fb04 	ldr.w	pc, [sp], #4
  209a18:	2000      	movs	r0, #0
  209a1a:	e7fa      	b.n	209a12 <_ZN4Baro7readAdcEv+0x2a>

00209a1c <_ZN4Baro10accumulateEv>:
{
  209a1c:	b510      	push	{r4, lr}
  209a1e:	b084      	sub	sp, #16
  209a20:	4604      	mov	r4, r0
  if (HAL_GetTick() - last_timer_ < 10) return;
  209a22:	f005 ff3f 	bl	20f8a4 <HAL_GetTick>
  209a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
  209a28:	1ac0      	subs	r0, r0, r3
  209a2a:	2809      	cmp	r0, #9
  209a2c:	d801      	bhi.n	209a32 <_ZN4Baro10accumulateEv+0x16>
}
  209a2e:	b004      	add	sp, #16
  209a30:	bd10      	pop	{r4, pc}
  reg[0] = 0;
  209a32:	aa04      	add	r2, sp, #16
  209a34:	2300      	movs	r3, #0
  209a36:	f802 3d04 	strb.w	r3, [r2, #-4]!
  HAL_I2C_Master_Transmit(i2c_handle_, MS561101BA_ADDRESS, reg, 1, 100);
  209a3a:	2364      	movs	r3, #100	; 0x64
  209a3c:	9300      	str	r3, [sp, #0]
  209a3e:	2301      	movs	r3, #1
  209a40:	21ec      	movs	r1, #236	; 0xec
  209a42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  209a44:	f007 fbb2 	bl	2111ac <HAL_I2C_Master_Transmit>
  if (state_ == 0) {
  209a48:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  209a4c:	2b00      	cmp	r3, #0
  209a4e:	d13a      	bne.n	209ac6 <_ZN4Baro10accumulateEv+0xaa>
    uint32_t d2 = readAdc();
  209a50:	4620      	mov	r0, r4
  209a52:	f7ff ffc9 	bl	2099e8 <_ZN4Baro7readAdcEv>
    test_value = d2;
  209a56:	65a0      	str	r0, [r4, #88]	; 0x58
    if (d2 != 0) {
  209a58:	b348      	cbz	r0, 209aae <_ZN4Baro10accumulateEv+0x92>
      s_d2_ += d2;
  209a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  209a5c:	4418      	add	r0, r3
  209a5e:	6660      	str	r0, [r4, #100]	; 0x64
      d2_count_++;
  209a60:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  209a64:	3301      	adds	r3, #1
  209a66:	b2db      	uxtb	r3, r3
  209a68:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
      if (d2_count_ == 32) {
  209a6c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  209a70:	b2db      	uxtb	r3, r3
  209a72:	2b20      	cmp	r3, #32
  209a74:	d014      	beq.n	209aa0 <_ZN4Baro10accumulateEv+0x84>
      reg[0] = ADDR_CMD_CONVERT_PRESSURE;
  209a76:	aa04      	add	r2, sp, #16
  209a78:	2348      	movs	r3, #72	; 0x48
  209a7a:	f802 3d04 	strb.w	r3, [r2, #-4]!
      if(HAL_I2C_Master_Transmit(i2c_handle_, MS561101BA_ADDRESS, reg, 1, 100)  == HAL_OK){
  209a7e:	2364      	movs	r3, #100	; 0x64
  209a80:	9300      	str	r3, [sp, #0]
  209a82:	2301      	movs	r3, #1
  209a84:	21ec      	movs	r1, #236	; 0xec
  209a86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  209a88:	f007 fb90 	bl	2111ac <HAL_I2C_Master_Transmit>
  209a8c:	b920      	cbnz	r0, 209a98 <_ZN4Baro10accumulateEv+0x7c>
        state_ ++;
  209a8e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  209a92:	3301      	adds	r3, #1
  209a94:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  last_timer_ = HAL_GetTick();
  209a98:	f005 ff04 	bl	20f8a4 <HAL_GetTick>
  209a9c:	6260      	str	r0, [r4, #36]	; 0x24
  209a9e:	e7c6      	b.n	209a2e <_ZN4Baro10accumulateEv+0x12>
        s_d2_ >>= 1;
  209aa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  209aa2:	085b      	lsrs	r3, r3, #1
  209aa4:	6663      	str	r3, [r4, #100]	; 0x64
        d2_count_ = 16;
  209aa6:	2310      	movs	r3, #16
  209aa8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
  209aac:	e7e3      	b.n	209a76 <_ZN4Baro10accumulateEv+0x5a>
      reg[0] = ADDR_CMD_CONVERT_TEMPERATURE;
  209aae:	aa04      	add	r2, sp, #16
  209ab0:	2358      	movs	r3, #88	; 0x58
  209ab2:	f802 3d04 	strb.w	r3, [r2, #-4]!
      HAL_I2C_Master_Transmit(i2c_handle_, MS561101BA_ADDRESS, reg, 1, 100);
  209ab6:	2364      	movs	r3, #100	; 0x64
  209ab8:	9300      	str	r3, [sp, #0]
  209aba:	2301      	movs	r3, #1
  209abc:	21ec      	movs	r1, #236	; 0xec
  209abe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  209ac0:	f007 fb74 	bl	2111ac <HAL_I2C_Master_Transmit>
  209ac4:	e7e8      	b.n	209a98 <_ZN4Baro10accumulateEv+0x7c>
    uint32_t d1 = readAdc();
  209ac6:	4620      	mov	r0, r4
  209ac8:	f7ff ff8e 	bl	2099e8 <_ZN4Baro7readAdcEv>
    if (d1 != 0) {
  209acc:	4603      	mov	r3, r0
  209ace:	2800      	cmp	r0, #0
  209ad0:	d03f      	beq.n	209b52 <_ZN4Baro10accumulateEv+0x136>
      s_d1_ += d1;
  209ad2:	6e22      	ldr	r2, [r4, #96]	; 0x60
  209ad4:	4413      	add	r3, r2
  209ad6:	6623      	str	r3, [r4, #96]	; 0x60
      d1_count_ ++;
  209ad8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  209adc:	3301      	adds	r3, #1
  209ade:	b2db      	uxtb	r3, r3
  209ae0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (d1_count_ == 128) {
  209ae4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  209ae8:	b2db      	uxtb	r3, r3
  209aea:	2b80      	cmp	r3, #128	; 0x80
  209aec:	d019      	beq.n	209b22 <_ZN4Baro10accumulateEv+0x106>
      tp_updated_ = true;
  209aee:	2301      	movs	r3, #1
  209af0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
      if (state_ == 4) {
  209af4:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  209af8:	2b04      	cmp	r3, #4
  209afa:	d019      	beq.n	209b30 <_ZN4Baro10accumulateEv+0x114>
        reg[0] = ADDR_CMD_CONVERT_PRESSURE;
  209afc:	aa04      	add	r2, sp, #16
  209afe:	2348      	movs	r3, #72	; 0x48
  209b00:	f802 3d04 	strb.w	r3, [r2, #-4]!
        if(HAL_I2C_Master_Transmit(i2c_handle_, MS561101BA_ADDRESS, reg, 1, 100)  == HAL_OK){
  209b04:	2364      	movs	r3, #100	; 0x64
  209b06:	9300      	str	r3, [sp, #0]
  209b08:	2301      	movs	r3, #1
  209b0a:	21ec      	movs	r1, #236	; 0xec
  209b0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  209b0e:	f007 fb4d 	bl	2111ac <HAL_I2C_Master_Transmit>
  209b12:	2800      	cmp	r0, #0
  209b14:	d1c0      	bne.n	209a98 <_ZN4Baro10accumulateEv+0x7c>
          state_ ++;
  209b16:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  209b1a:	3301      	adds	r3, #1
  209b1c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  209b20:	e7ba      	b.n	209a98 <_ZN4Baro10accumulateEv+0x7c>
        s_d1_ >>= 1;
  209b22:	6e23      	ldr	r3, [r4, #96]	; 0x60
  209b24:	085b      	lsrs	r3, r3, #1
  209b26:	6623      	str	r3, [r4, #96]	; 0x60
        d1_count_ = 64;
  209b28:	2340      	movs	r3, #64	; 0x40
  209b2a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  209b2e:	e7de      	b.n	209aee <_ZN4Baro10accumulateEv+0xd2>
        reg[0] = ADDR_CMD_CONVERT_TEMPERATURE;
  209b30:	aa04      	add	r2, sp, #16
  209b32:	2358      	movs	r3, #88	; 0x58
  209b34:	f802 3d04 	strb.w	r3, [r2, #-4]!
        if(HAL_I2C_Master_Transmit(i2c_handle_, MS561101BA_ADDRESS, reg, 1, 100)  == HAL_OK){
  209b38:	2364      	movs	r3, #100	; 0x64
  209b3a:	9300      	str	r3, [sp, #0]
  209b3c:	2301      	movs	r3, #1
  209b3e:	21ec      	movs	r1, #236	; 0xec
  209b40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  209b42:	f007 fb33 	bl	2111ac <HAL_I2C_Master_Transmit>
  209b46:	2800      	cmp	r0, #0
  209b48:	d1a6      	bne.n	209a98 <_ZN4Baro10accumulateEv+0x7c>
          state_ = 0;
  209b4a:	2300      	movs	r3, #0
  209b4c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
  209b50:	e7a2      	b.n	209a98 <_ZN4Baro10accumulateEv+0x7c>
      reg[0] = ADDR_CMD_CONVERT_PRESSURE;
  209b52:	aa04      	add	r2, sp, #16
  209b54:	2348      	movs	r3, #72	; 0x48
  209b56:	f802 3d04 	strb.w	r3, [r2, #-4]!
      HAL_I2C_Master_Transmit(i2c_handle_, MS561101BA_ADDRESS, reg, 1, 100);
  209b5a:	2364      	movs	r3, #100	; 0x64
  209b5c:	9300      	str	r3, [sp, #0]
  209b5e:	2301      	movs	r3, #1
  209b60:	21ec      	movs	r1, #236	; 0xec
  209b62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  209b64:	f007 fb22 	bl	2111ac <HAL_I2C_Master_Transmit>
  209b68:	e796      	b.n	209a98 <_ZN4Baro10accumulateEv+0x7c>
	...

00209b6c <_ZN4Baro9calculateEv>:
  dT = d2_-(((uint32_t)c5_)<<8);
  209b6c:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
  209b70:	021b      	lsls	r3, r3, #8
  209b72:	ee05 3a90 	vmov	s11, r3
  209b76:	eef8 7a65 	vcvt.f32.u32	s15, s11
  209b7a:	edd0 5a1f 	vldr	s11, [r0, #124]	; 0x7c
  209b7e:	ee75 5ae7 	vsub.f32	s11, s11, s15
  TEMP = (dT * c6_)/8388608;
  209b82:	f8b0 3074 	ldrh.w	r3, [r0, #116]	; 0x74
  209b86:	ee06 3a90 	vmov	s13, r3
  209b8a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
  209b8e:	ee66 6aa5 	vmul.f32	s13, s13, s11
  209b92:	eddf 7a35 	vldr	s15, [pc, #212]	; 209c68 <_ZN4Baro9calculateEv+0xfc>
  209b96:	ee66 6aa7 	vmul.f32	s13, s13, s15
  OFF = c2_ * 65536.0f + (c4_ * dT) / 128;
  209b9a:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
  209b9e:	ee07 3a90 	vmov	s15, r3
  209ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  209ba6:	ee67 7aa5 	vmul.f32	s15, s15, s11
  209baa:	ed9f 6a30 	vldr	s12, [pc, #192]	; 209c6c <_ZN4Baro9calculateEv+0x100>
  209bae:	ee67 7a86 	vmul.f32	s15, s15, s12
  209bb2:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
  209bb6:	ee06 3a10 	vmov	s12, r3
  209bba:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
  209bbe:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 209c70 <_ZN4Baro9calculateEv+0x104>
  209bc2:	ee26 6a07 	vmul.f32	s12, s12, s14
  209bc6:	ee37 6a86 	vadd.f32	s12, s15, s12
  SENS = c1_ * 32768.0f + (c3_ * dT) / 256;
  209bca:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
  209bce:	ee07 3a10 	vmov	s14, r3
  209bd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  209bd6:	ee27 7a25 	vmul.f32	s14, s14, s11
  209bda:	eddf 7a26 	vldr	s15, [pc, #152]	; 209c74 <_ZN4Baro9calculateEv+0x108>
  209bde:	ee27 7a27 	vmul.f32	s14, s14, s15
  209be2:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
  209be6:	ee07 3a90 	vmov	s15, r3
  209bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  209bee:	ed9f 5a22 	vldr	s10, [pc, #136]	; 209c78 <_ZN4Baro9calculateEv+0x10c>
  209bf2:	ee67 7a85 	vmul.f32	s15, s15, s10
  209bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
  if (TEMP < 0) {
  209bfa:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  209bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  209c02:	d41a      	bmi.n	209c3a <_ZN4Baro9calculateEv+0xce>
  pressure_ = (d1_*SENS/2097152 - OFF)/32768;
  209c04:	ed90 7a1e 	vldr	s14, [r0, #120]	; 0x78
  209c08:	ee67 7a87 	vmul.f32	s15, s15, s14
  209c0c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 209c7c <_ZN4Baro9calculateEv+0x110>
  209c10:	ee67 7a87 	vmul.f32	s15, s15, s14
  209c14:	ee77 7ac6 	vsub.f32	s15, s15, s12
  209c18:	ed9f 7a19 	vldr	s14, [pc, #100]	; 209c80 <_ZN4Baro9calculateEv+0x114>
  209c1c:	ee67 7a87 	vmul.f32	s15, s15, s14
  209c20:	edc0 7a00 	vstr	s15, [r0]
  temperature_ = (TEMP + 2000) * 0.01f;
  209c24:	eddf 7a17 	vldr	s15, [pc, #92]	; 209c84 <_ZN4Baro9calculateEv+0x118>
  209c28:	ee76 6aa7 	vadd.f32	s13, s13, s15
  209c2c:	eddf 7a16 	vldr	s15, [pc, #88]	; 209c88 <_ZN4Baro9calculateEv+0x11c>
  209c30:	ee66 6aa7 	vmul.f32	s13, s13, s15
  209c34:	edc0 6a02 	vstr	s13, [r0, #8]
  209c38:	4770      	bx	lr
    float Aux = TEMP*TEMP;
  209c3a:	ee26 7aa6 	vmul.f32	s14, s13, s13
    float T2 = (dT*dT) / 0x80000000;
  209c3e:	ee65 5aa5 	vmul.f32	s11, s11, s11
  209c42:	ed9f 5a12 	vldr	s10, [pc, #72]	; 209c8c <_ZN4Baro9calculateEv+0x120>
  209c46:	ee65 5a85 	vmul.f32	s11, s11, s10
    TEMP = TEMP - T2;
  209c4a:	ee76 6ae5 	vsub.f32	s13, s13, s11
    float OFF2 = 2.5f*Aux;
  209c4e:	eef0 5a04 	vmov.f32	s11, #4	; 0x40200000  2.5
  209c52:	ee67 5a25 	vmul.f32	s11, s14, s11
    OFF = OFF - OFF2;
  209c56:	ee36 6a65 	vsub.f32	s12, s12, s11
    float SENS2 = 1.25f*Aux;
  209c5a:	eef7 5a04 	vmov.f32	s11, #116	; 0x3fa00000  1.250
  209c5e:	ee27 7a25 	vmul.f32	s14, s14, s11
    SENS = SENS - SENS2;
  209c62:	ee77 7ac7 	vsub.f32	s15, s15, s14
  209c66:	e7cd      	b.n	209c04 <_ZN4Baro9calculateEv+0x98>
  209c68:	34000000 	.word	0x34000000
  209c6c:	3c000000 	.word	0x3c000000
  209c70:	47800000 	.word	0x47800000
  209c74:	3b800000 	.word	0x3b800000
  209c78:	47000000 	.word	0x47000000
  209c7c:	35000000 	.word	0x35000000
  209c80:	38000000 	.word	0x38000000
  209c84:	44fa0000 	.word	0x44fa0000
  209c88:	3c23d70a 	.word	0x3c23d70a
  209c8c:	30000000 	.word	0x30000000

00209c90 <_ZN4Baro6updateEb>:
{
  209c90:	b570      	push	{r4, r5, r6, lr}
  209c92:	4604      	mov	r4, r0
  209c94:	460d      	mov	r5, r1
  accumulate();
  209c96:	f7ff fec1 	bl	209a1c <_ZN4Baro10accumulateEv>
  if (!tp_updated_) return;
  209c9a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
  209c9e:	2b00      	cmp	r3, #0
  209ca0:	d04b      	beq.n	209d3a <_ZN4Baro6updateEb+0xaa>
  sD1 = s_d1_; s_d1_ = 0;
  209ca2:	6e26      	ldr	r6, [r4, #96]	; 0x60
  209ca4:	2300      	movs	r3, #0
  209ca6:	6623      	str	r3, [r4, #96]	; 0x60
  sD2 = s_d2_; s_d2_ = 0;
  209ca8:	6e60      	ldr	r0, [r4, #100]	; 0x64
  209caa:	6663      	str	r3, [r4, #100]	; 0x64
  d1count = d1_count_; d1_count_ = 0;
  209cac:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
  209cb0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  d2count = d2_count_; d2_count_ = 0;
  209cb4:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
  209cb8:	b2d2      	uxtb	r2, r2
  209cba:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
  tp_updated_ = false;
  209cbe:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (d1count != 0) {
  209cc2:	f001 03ff 	and.w	r3, r1, #255	; 0xff
  209cc6:	b159      	cbz	r1, 209ce0 <_ZN4Baro6updateEb+0x50>
    d1_ = ((float)sD1) / d1count;
  209cc8:	ee07 6a90 	vmov	s15, r6
  209ccc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  209cd0:	ee07 3a90 	vmov	s15, r3
  209cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  209cd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
  209cdc:	edc4 6a1e 	vstr	s13, [r4, #120]	; 0x78
  if (d2count != 0) {
  209ce0:	b15a      	cbz	r2, 209cfa <_ZN4Baro6updateEb+0x6a>
    d2_ = ((float)sD2) / d2count;
  209ce2:	ee07 0a90 	vmov	s15, r0
  209ce6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  209cea:	ee07 2a90 	vmov	s15, r2
  209cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  209cf2:	eec7 6a27 	vdiv.f32	s13, s14, s15
  209cf6:	edc4 6a1f 	vstr	s13, [r4, #124]	; 0x7c
  calculate();
  209cfa:	4620      	mov	r0, r4
  209cfc:	f7ff ff36 	bl	209b6c <_ZN4Baro9calculateEv>
  if(calibrate_count_ > 0)
  209d00:	8a63      	ldrh	r3, [r4, #18]
  209d02:	b193      	cbz	r3, 209d2a <_ZN4Baro6updateEb+0x9a>
      base_pressure_ += pressure_;
  209d04:	edd4 7a01 	vldr	s15, [r4, #4]
  209d08:	ed94 7a00 	vldr	s14, [r4]
  209d0c:	ee77 7a87 	vadd.f32	s15, s15, s14
  209d10:	edc4 7a01 	vstr	s15, [r4, #4]
      calibrate_count_ --;
  209d14:	3b01      	subs	r3, #1
  209d16:	b29b      	uxth	r3, r3
  209d18:	8263      	strh	r3, [r4, #18]
      if(calibrate_count_ == 0)
  209d1a:	b973      	cbnz	r3, 209d3a <_ZN4Baro6updateEb+0xaa>
        base_pressure_ /= CALIBRATE_COUNT;
  209d1c:	eddf 6a07 	vldr	s13, [pc, #28]	; 209d3c <_ZN4Baro6updateEb+0xac>
  209d20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  209d24:	ed84 7a01 	vstr	s14, [r4, #4]
  209d28:	bd70      	pop	{r4, r5, r6, pc}
  if(calibrate)
  209d2a:	b11d      	cbz	r5, 209d34 <_ZN4Baro6updateEb+0xa4>
      base_pressure_ = pressure_;
  209d2c:	6823      	ldr	r3, [r4, #0]
  209d2e:	6063      	str	r3, [r4, #4]
      alt_offset_ = 0;
  209d30:	2300      	movs	r3, #0
  209d32:	6163      	str	r3, [r4, #20]
  baseUpdate();
  209d34:	4620      	mov	r0, r4
  209d36:	f7ff fd1f 	bl	209778 <_ZN11BaroBackend10baseUpdateEv>
  209d3a:	bd70      	pop	{r4, r5, r6, pc}
  209d3c:	42c80000 	.word	0x42c80000

00209d40 <_ZN14RingBufferFiFoIhLj400EED1Ev>:
public:
  RingBufferFiFo()
  {
    init();
  }
  ~RingBufferFiFo(){  }
  209d40:	4770      	bx	lr
	...

00209d44 <_GLOBAL__sub_I__ZN11GPS_Backend11gps_rx_buf_E>:


/* define static class member, should be in this *.cpp, ros realted files in special */
RingBufferFiFo<uint8_t, RING_BUFFER_SIZE> GPS_Backend::gps_rx_buf_;
uint8_t GPS_Backend::gps_rx_value_[GPS_RX_SIZE];
  209d44:	b508      	push	{r3, lr}

  void init()
  {
    subscript_in_progress_ = 0;
  209d46:	4807      	ldr	r0, [pc, #28]	; (209d64 <_GLOBAL__sub_I__ZN11GPS_Backend11gps_rx_buf_E+0x20>)
  209d48:	2300      	movs	r3, #0
  209d4a:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
    subscript_to_add_ = 0;
  209d4e:	f8a0 3192 	strh.w	r3, [r0, #402]	; 0x192
    buffer_length_ = (uint16_t)SIZE;
  209d52:	f44f 73c8 	mov.w	r3, #400	; 0x190
  209d56:	f8a0 3194 	strh.w	r3, [r0, #404]	; 0x194
RingBufferFiFo<uint8_t, RING_BUFFER_SIZE> GPS_Backend::gps_rx_buf_;
  209d5a:	4a03      	ldr	r2, [pc, #12]	; (209d68 <_GLOBAL__sub_I__ZN11GPS_Backend11gps_rx_buf_E+0x24>)
  209d5c:	4903      	ldr	r1, [pc, #12]	; (209d6c <_GLOBAL__sub_I__ZN11GPS_Backend11gps_rx_buf_E+0x28>)
  209d5e:	f00a f989 	bl	214074 <__aeabi_atexit>
  209d62:	bd08      	pop	{r3, pc}
  209d64:	2000029c 	.word	0x2000029c
  209d68:	20000000 	.word	0x20000000
  209d6c:	00209d41 	.word	0x00209d41

00209d70 <_ZN11GPS_Backend11inject_dataEPhh>:

  virtual bool read(uint8_t data) = 0;
  virtual void update() = 0;

  virtual bool is_configured(void) { return true; }
  virtual void inject_data(uint8_t *data, uint8_t len) { return; }
  209d70:	4770      	bx	lr

00209d72 <_ZN11GPS_Backend17gpsConfigCallbackERKN8std_msgs5UInt8E>:
    state.velocity.y = state.ground_speed * sinf(gps_heading);
    state.velocity.z = 0;
    state.have_vertical_velocity = false;
  }

  void gpsConfigCallback(const std_msgs::UInt8& config_msg)
  209d72:	4770      	bx	lr

00209d74 <_ZN3GPS13is_configuredEv>:
  // Methods
  virtual bool read(uint8_t data);
  virtual void update();

  virtual bool is_configured(void) {
    if (!_auto_config) {
  209d74:	f990 3091 	ldrsb.w	r3, [r0, #145]	; 0x91
  209d78:	b12b      	cbz	r3, 209d86 <_ZN3GPS13is_configuredEv+0x12>
      return true;
    } else {
      return !_unconfigured_messages;
  209d7a:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
  209d7e:	fab0 f080 	clz	r0, r0
  209d82:	0940      	lsrs	r0, r0, #5
  209d84:	4770      	bx	lr
      return true;
  209d86:	2001      	movs	r0, #1
    }
  }
  209d88:	4770      	bx	lr
	...

00209d8c <_ZN3GPS30UBLOX_UART_DMAReceiveCpltUBLOXEP19__DMA_HandleTypeDef>:
GPS::UBLOX_UART_DMAReceiveCpltUBLOX(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  /* DMA Normal mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
  209d8c:	6803      	ldr	r3, [r0, #0]
  209d8e:	681b      	ldr	r3, [r3, #0]
  209d90:	f413 7f80 	tst.w	r3, #256	; 0x100
  209d94:	d111      	bne.n	209dba <_ZN3GPS30UBLOX_UART_DMAReceiveCpltUBLOXEP19__DMA_HandleTypeDef+0x2e>
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  209d96:	6b83      	ldr	r3, [r0, #56]	; 0x38
    {
      huart->RxXferCount = 0;
  209d98:	2200      	movs	r2, #0
  209d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
         in the UART CR3 register */
      huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
  209d9e:	6819      	ldr	r1, [r3, #0]
  209da0:	688a      	ldr	r2, [r1, #8]
  209da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  209da6:	608a      	str	r2, [r1, #8]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
  209da8:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
  209dac:	b2d2      	uxtb	r2, r2
  209dae:	2a32      	cmp	r2, #50	; 0x32
        {
          huart->State = HAL_UART_STATE_BUSY_TX;
  209db0:	bf0c      	ite	eq
  209db2:	2212      	moveq	r2, #18
        }
      else
        {
          huart->State = HAL_UART_STATE_READY;
  209db4:	2201      	movne	r2, #1
  209db6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        }
    }

  for(std::size_t i = 0; i < gps_rx_size_; i++)
  209dba:	4b0d      	ldr	r3, [pc, #52]	; (209df0 <_ZN3GPS30UBLOX_UART_DMAReceiveCpltUBLOXEP19__DMA_HandleTypeDef+0x64>)
  209dbc:	8818      	ldrh	r0, [r3, #0]
  209dbe:	b1b0      	cbz	r0, 209dee <_ZN3GPS30UBLOX_UART_DMAReceiveCpltUBLOXEP19__DMA_HandleTypeDef+0x62>
{
  209dc0:	b430      	push	{r4, r5}
  209dc2:	4a0c      	ldr	r2, [pc, #48]	; (209df4 <_ZN3GPS30UBLOX_UART_DMAReceiveCpltUBLOXEP19__DMA_HandleTypeDef+0x68>)
  209dc4:	f9b2 3192 	ldrsh.w	r3, [r2, #402]	; 0x192

    buf_[subscript_to_add_] = new_value;

    subscript_to_add_++;

    if (subscript_to_add_ == buffer_length_)
  209dc8:	f8b2 5194 	ldrh.w	r5, [r2, #404]	; 0x194
  209dcc:	4a0a      	ldr	r2, [pc, #40]	; (209df8 <_ZN3GPS30UBLOX_UART_DMAReceiveCpltUBLOXEP19__DMA_HandleTypeDef+0x6c>)
  209dce:	4410      	add	r0, r2
    buf_[subscript_to_add_] = new_value;
  209dd0:	4c08      	ldr	r4, [pc, #32]	; (209df4 <_ZN3GPS30UBLOX_UART_DMAReceiveCpltUBLOXEP19__DMA_HandleTypeDef+0x68>)
    {
      if(!gps_rx_buf_.push(gps_rx_value_[i]))
  209dd2:	f812 1b01 	ldrb.w	r1, [r2], #1
  209dd6:	54e1      	strb	r1, [r4, r3]
    subscript_to_add_++;
  209dd8:	3301      	adds	r3, #1
  209dda:	b21b      	sxth	r3, r3
      {
        subscript_to_add_ = 0;
  209ddc:	42ab      	cmp	r3, r5
  209dde:	bf08      	it	eq
  209de0:	2300      	moveq	r3, #0
  for(std::size_t i = 0; i < gps_rx_size_; i++)
  209de2:	4282      	cmp	r2, r0
  209de4:	d1f5      	bne.n	209dd2 <_ZN3GPS30UBLOX_UART_DMAReceiveCpltUBLOXEP19__DMA_HandleTypeDef+0x46>
  209de6:	4a03      	ldr	r2, [pc, #12]	; (209df4 <_ZN3GPS30UBLOX_UART_DMAReceiveCpltUBLOXEP19__DMA_HandleTypeDef+0x68>)
  209de8:	f8a2 3192 	strh.w	r3, [r2, #402]	; 0x192
        return;
    }
}
  209dec:	bc30      	pop	{r4, r5}
  209dee:	4770      	bx	lr
  209df0:	20000432 	.word	0x20000432
  209df4:	2000029c 	.word	0x2000029c
  209df8:	20000434 	.word	0x20000434

00209dfc <_ZN3GPSD1Ev>:
class GPS : public GPS_Backend
  209dfc:	4770      	bx	lr

00209dfe <_ZN3ros10SubscriberIN8std_msgs5UInt8E11GPS_BackendE8callbackEPh>:
  virtual void callback(unsigned char* data)
  209dfe:	b510      	push	{r4, lr}
      this->data =  ((uint8_t) (*(inbuffer + offset)));
  209e00:	780b      	ldrb	r3, [r1, #0]
  209e02:	7403      	strb	r3, [r0, #16]
    (obj_->*cb_)(msg);
  209e04:	6983      	ldr	r3, [r0, #24]
  209e06:	f013 0f01 	tst.w	r3, #1
  209e0a:	d00b      	beq.n	209e24 <_ZN3ros10SubscriberIN8std_msgs5UInt8E11GPS_BackendE8callbackEPh+0x26>
  209e0c:	105a      	asrs	r2, r3, #1
  209e0e:	69c1      	ldr	r1, [r0, #28]
  209e10:	5889      	ldr	r1, [r1, r2]
  209e12:	6942      	ldr	r2, [r0, #20]
  209e14:	588a      	ldr	r2, [r1, r2]
  209e16:	69c4      	ldr	r4, [r0, #28]
  209e18:	f100 010c 	add.w	r1, r0, #12
  209e1c:	eb04 0063 	add.w	r0, r4, r3, asr #1
  209e20:	4790      	blx	r2
  209e22:	bd10      	pop	{r4, pc}
  209e24:	6942      	ldr	r2, [r0, #20]
  209e26:	e7f6      	b.n	209e16 <_ZN3ros10SubscriberIN8std_msgs5UInt8E11GPS_BackendE8callbackEPh+0x18>

00209e28 <_ZN3ros10SubscriberIN8std_msgs5UInt8E11GPS_BackendE15getEndpointTypeEv>:
  }
  209e28:	6a00      	ldr	r0, [r0, #32]
  209e2a:	4770      	bx	lr

00209e2c <_ZN3ros10SubscriberIN8std_msgs5UInt8E11GPS_BackendE10getMsgTypeEv>:
  }
  209e2c:	4800      	ldr	r0, [pc, #0]	; (209e30 <_ZN3ros10SubscriberIN8std_msgs5UInt8E11GPS_BackendE10getMsgTypeEv+0x4>)
  209e2e:	4770      	bx	lr
  209e30:	002173c0 	.word	0x002173c0

00209e34 <_ZN3ros10SubscriberIN8std_msgs5UInt8E11GPS_BackendE9getMsgMD5Ev>:
  }
  209e34:	4800      	ldr	r0, [pc, #0]	; (209e38 <_ZN3ros10SubscriberIN8std_msgs5UInt8E11GPS_BackendE9getMsgMD5Ev+0x4>)
  209e36:	4770      	bx	lr
  209e38:	0021739c 	.word	0x0021739c

00209e3c <_ZN3GPSD0Ev>:
  209e3c:	b510      	push	{r4, lr}
  209e3e:	4604      	mov	r4, r0
  209e40:	f00a f913 	bl	21406a <_ZdlPv>
  209e44:	4620      	mov	r0, r4
  209e46:	bd10      	pop	{r4, pc}

00209e48 <_ZN3GPSC1Ev>:
GPS::GPS():GPS_Backend(){}
  209e48:	4603      	mov	r3, r0
    endpoint_(endpoint)
  209e4a:	4a0a      	ldr	r2, [pc, #40]	; (209e74 <_ZN3GPSC1Ev+0x2c>)
  209e4c:	60c2      	str	r2, [r0, #12]
      data(0)
  209e4e:	4a0a      	ldr	r2, [pc, #40]	; (209e78 <_ZN3GPSC1Ev+0x30>)
  209e50:	6182      	str	r2, [r0, #24]
  209e52:	2200      	movs	r2, #0
  209e54:	7702      	strb	r2, [r0, #28]
  209e56:	4909      	ldr	r1, [pc, #36]	; (209e7c <_ZN3GPSC1Ev+0x34>)
  209e58:	6201      	str	r1, [r0, #32]
  209e5a:	6242      	str	r2, [r0, #36]	; 0x24
  209e5c:	6298      	str	r0, [r3, #40]	; 0x28
  209e5e:	2201      	movs	r2, #1
  209e60:	62c2      	str	r2, [r0, #44]	; 0x2c
    topic_ = topic_name;
  209e62:	4a07      	ldr	r2, [pc, #28]	; (209e80 <_ZN3GPSC1Ev+0x38>)
  209e64:	6142      	str	r2, [r0, #20]
        x = y = z = 0;
  209e66:	2200      	movs	r2, #0
  209e68:	6602      	str	r2, [r0, #96]	; 0x60
  209e6a:	65c2      	str	r2, [r0, #92]	; 0x5c
  209e6c:	6582      	str	r2, [r0, #88]	; 0x58
  209e6e:	4a05      	ldr	r2, [pc, #20]	; (209e84 <_ZN3GPSC1Ev+0x3c>)
  209e70:	6002      	str	r2, [r0, #0]
  209e72:	4770      	bx	lr
  209e74:	00217c24 	.word	0x00217c24
  209e78:	0021738c 	.word	0x0021738c
  209e7c:	00209d73 	.word	0x00209d73
  209e80:	00217c34 	.word	0x00217c34
  209e84:	00216c64 	.word	0x00216c64

00209e88 <_ZN3GPS4initEP18UART_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>:
{
  209e88:	b538      	push	{r3, r4, r5, lr}
  209e8a:	4604      	mov	r4, r0
    huart_ =huart;
  209e8c:	6041      	str	r1, [r0, #4]
    nh_ = nh;
  209e8e:	6082      	str	r2, [r0, #8]
      if (subscribers[i] == 0) // empty slot
  209e90:	f8d2 3268 	ldr.w	r3, [r2, #616]	; 0x268
  209e94:	2b00      	cmp	r3, #0
  209e96:	f000 8089 	beq.w	209fac <_ZN3GPS4initEP18UART_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x124>
  209e9a:	f502 711a 	add.w	r1, r2, #616	; 0x268
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  209e9e:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  209ea0:	f851 0f04 	ldr.w	r0, [r1, #4]!
  209ea4:	2800      	cmp	r0, #0
  209ea6:	f000 8082 	beq.w	209fae <_ZN3GPS4initEP18UART_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x126>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  209eaa:	3301      	adds	r3, #1
  209eac:	2b14      	cmp	r3, #20
  209eae:	d1f7      	bne.n	209ea0 <_ZN3GPS4initEP18UART_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x18>
    _type = 1;
  209eb0:	2501      	movs	r5, #1
  209eb2:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    _gnss_mode = 0;
  209eb6:	2300      	movs	r3, #0
  209eb8:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
    _last_instance_swap_ms = 0;
  209ebc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    _auto_switch = 1;
  209ec0:	f884 5082 	strb.w	r5, [r4, #130]	; 0x82
    _min_dgps = 100;
  209ec4:	2264      	movs	r2, #100	; 0x64
  209ec6:	f884 2083 	strb.w	r2, [r4, #131]	; 0x83
    _sbas_mode = 2;
  209eca:	2202      	movs	r2, #2
  209ecc:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
    _min_elevation = -100;
  209ed0:	229c      	movs	r2, #156	; 0x9c
  209ed2:	f884 208d 	strb.w	r2, [r4, #141]	; 0x8d
    _raw_data = 0;
  209ed6:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
    _save_config = 0;
  209eda:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    _auto_config = 1;
  209ede:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    _navfilter = GPS_ENGINE_AIRBORNE_4G;
  209ee2:	2208      	movs	r2, #8
  209ee4:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    _sbp_logmask = 0xFF00;
  209ee8:	f44f 427f 	mov.w	r2, #65280	; 0xff00
  209eec:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
    state.status = NO_FIX;
  209ef0:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    state.have_speed_accuracy = false;
  209ef4:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    state.have_vertical_accuracy = false;  
  209ef8:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
  209efc:	f363 02c3 	bfi	r2, r3, #3, #1
  209f00:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    subscript_in_progress_ = 0;
  209f04:	4a2e      	ldr	r2, [pc, #184]	; (209fc0 <_ZN3GPS4initEP18UART_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x138>)
  209f06:	f8a2 3190 	strh.w	r3, [r2, #400]	; 0x190
    subscript_to_add_ = 0;
  209f0a:	f8a2 3192 	strh.w	r3, [r2, #402]	; 0x192
    buffer_length_ = (uint16_t)SIZE;
  209f0e:	f44f 71c8 	mov.w	r1, #400	; 0x190
  209f12:	f8a2 1194 	strh.w	r1, [r2, #404]	; 0x194
    gps_rx_size_ = GPS_RX_SIZE;
  209f16:	2104      	movs	r1, #4
  209f18:	4a2a      	ldr	r2, [pc, #168]	; (209fc4 <_ZN3GPS4initEP18UART_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x13c>)
  209f1a:	8011      	strh	r1, [r2, #0]
  _step = 0;
  209f1c:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
  _msg_id = 0;
  209f20:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
  _payload_length = 0;
  209f24:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
  _payload_counter = 0;
  209f28:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
  _class = 0;
  209f2c:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
  _cfg_saved = false;
  209f30:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
  _last_cfg_sent_time = 0;
  209f34:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
  _num_cfg_save_tries = 0;
  209f38:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
  _last_config_time = 0;
  209f3c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
  _delay_time = 0;
  209f40:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
  _next_message = STEP_RATE_NAV;
  209f44:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  _ublox_port = 255;
  209f48:	22ff      	movs	r2, #255	; 0xff
  209f4a:	f884 2123 	strb.w	r2, [r4, #291]	; 0x123
  _have_version = false;
  209f4e:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
  _unconfigured_messages = CONFIG_ALL;
  209f52:	f641 72ff 	movw	r2, #8191	; 0x1fff
  209f56:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
  _hardware_generation = 0;
  209f5a:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  _new_position = 0;
  209f5e:	f894 212d 	ldrb.w	r2, [r4, #301]	; 0x12d
  _new_speed = 0;
  209f62:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  209f66:	f363 0241 	bfi	r2, r3, #1, #1
  209f6a:	f884 212d 	strb.w	r2, [r4, #301]	; 0x12d
  _disable_counter = 0;
  209f6e:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  next_fix = NO_FIX;
  209f72:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
  _last_5hz_time = 0;
  209f76:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  _cfg_needs_save = false;
  209f7a:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
  noReceivedHdop = true;
  209f7e:	f884 513e 	strb.w	r5, [r4, #318]	; 0x13e
  CLEAR_BIT(huart_->Instance->CR1, USART_CR1_RE);
  209f82:	6863      	ldr	r3, [r4, #4]
  209f84:	681a      	ldr	r2, [r3, #0]
  209f86:	6813      	ldr	r3, [r2, #0]
  209f88:	f023 0304 	bic.w	r3, r3, #4
  209f8c:	6013      	str	r3, [r2, #0]
static uint32_t millis(){ return HAL_GetTick();}
  209f8e:	f005 fc89 	bl	20f8a4 <HAL_GetTick>
  _last_5hz_time = millis();
  209f92:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
  209f96:	f005 fc85 	bl	20f8a4 <HAL_GetTick>
  _last_update_time = millis();
  209f9a:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
  209f9e:	f005 fc81 	bl	20f8a4 <HAL_GetTick>
  _init_time = millis();
  209fa2:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
  _warmup_flag = true;
  209fa6:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
  209faa:	bd38      	pop	{r3, r4, r5, pc}
  209fac:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  209fae:	f103 019a 	add.w	r1, r3, #154	; 0x9a
  209fb2:	f104 000c 	add.w	r0, r4, #12
  209fb6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        s.id_ = i + 100;
  209fba:	3364      	adds	r3, #100	; 0x64
  209fbc:	6123      	str	r3, [r4, #16]
  209fbe:	e777      	b.n	209eb0 <_ZN3GPS4initEP18UART_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x28>
  209fc0:	2000029c 	.word	0x2000029c
  209fc4:	20000432 	.word	0x20000432

00209fc8 <_ZN3GPS16_update_checksumEPhtRhS1_>:
{
  209fc8:	b430      	push	{r4, r5}
  209fca:	9802      	ldr	r0, [sp, #8]
  while (len--) {
  209fcc:	b172      	cbz	r2, 209fec <_ZN3GPS16_update_checksumEPhtRhS1_+0x24>
  209fce:	1e55      	subs	r5, r2, #1
  209fd0:	b2ad      	uxth	r5, r5
  209fd2:	3501      	adds	r5, #1
  209fd4:	440d      	add	r5, r1
    ck_a += *data;
  209fd6:	781a      	ldrb	r2, [r3, #0]
  209fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
  209fdc:	4422      	add	r2, r4
  209fde:	b2d2      	uxtb	r2, r2
  209fe0:	701a      	strb	r2, [r3, #0]
    ck_b += ck_a;
  209fe2:	7804      	ldrb	r4, [r0, #0]
  209fe4:	4422      	add	r2, r4
  209fe6:	7002      	strb	r2, [r0, #0]
  while (len--) {
  209fe8:	428d      	cmp	r5, r1
  209fea:	d1f4      	bne.n	209fd6 <_ZN3GPS16_update_checksumEPhtRhS1_+0xe>
}
  209fec:	bc30      	pop	{r4, r5}
  209fee:	4770      	bx	lr

00209ff0 <_ZN3GPS13_send_messageEhhPvt>:
{
  209ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
  209ff2:	b087      	sub	sp, #28
  209ff4:	4604      	mov	r4, r0
  209ff6:	461f      	mov	r7, r3
  209ff8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
  uint8_t ck_a=0, ck_b=0;
  209ffc:	2300      	movs	r3, #0
  209ffe:	f88d 300f 	strb.w	r3, [sp, #15]
  20a002:	f88d 300e 	strb.w	r3, [sp, #14]
  header.preamble1 = PREAMBLE1;
  20a006:	23b5      	movs	r3, #181	; 0xb5
  20a008:	f88d 3010 	strb.w	r3, [sp, #16]
  header.preamble2 = PREAMBLE2;
  20a00c:	2362      	movs	r3, #98	; 0x62
  20a00e:	f88d 3011 	strb.w	r3, [sp, #17]
  header.msg_class = msg_class;
  20a012:	f88d 1012 	strb.w	r1, [sp, #18]
  header.msg_id    = msg_id;
  20a016:	f88d 2013 	strb.w	r2, [sp, #19]
  header.length    = size;
  20a01a:	f8ad 6014 	strh.w	r6, [sp, #20]
  _update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, ck_a, ck_b);
  20a01e:	f10d 050e 	add.w	r5, sp, #14
  20a022:	9500      	str	r5, [sp, #0]
  20a024:	f10d 030f 	add.w	r3, sp, #15
  20a028:	2204      	movs	r2, #4
  20a02a:	f10d 0112 	add.w	r1, sp, #18
  20a02e:	f7ff ffcb 	bl	209fc8 <_ZN3GPS16_update_checksumEPhtRhS1_>
  _update_checksum((uint8_t *)msg, size, ck_a, ck_b);
  20a032:	9500      	str	r5, [sp, #0]
  20a034:	f10d 030f 	add.w	r3, sp, #15
  20a038:	4632      	mov	r2, r6
  20a03a:	4639      	mov	r1, r7
  20a03c:	4620      	mov	r0, r4
  20a03e:	f7ff ffc3 	bl	209fc8 <_ZN3GPS16_update_checksumEPhtRhS1_>
    HAL_UART_Transmit(huart_, (uint8_t *)data_byte, size, 100); //timeout: 100[ms]
  20a042:	2364      	movs	r3, #100	; 0x64
  20a044:	2206      	movs	r2, #6
  20a046:	a904      	add	r1, sp, #16
  20a048:	6860      	ldr	r0, [r4, #4]
  20a04a:	f009 fca2 	bl	213992 <HAL_UART_Transmit>
  20a04e:	2364      	movs	r3, #100	; 0x64
  20a050:	4632      	mov	r2, r6
  20a052:	4639      	mov	r1, r7
  20a054:	6860      	ldr	r0, [r4, #4]
  20a056:	f009 fc9c 	bl	213992 <HAL_UART_Transmit>
  20a05a:	2364      	movs	r3, #100	; 0x64
  20a05c:	2201      	movs	r2, #1
  20a05e:	f10d 010f 	add.w	r1, sp, #15
  20a062:	6860      	ldr	r0, [r4, #4]
  20a064:	f009 fc95 	bl	213992 <HAL_UART_Transmit>
  20a068:	2364      	movs	r3, #100	; 0x64
  20a06a:	2201      	movs	r2, #1
  20a06c:	4629      	mov	r1, r5
  20a06e:	6860      	ldr	r0, [r4, #4]
  20a070:	f009 fc8f 	bl	213992 <HAL_UART_Transmit>
}
  20a074:	b007      	add	sp, #28
  20a076:	bdf0      	pop	{r4, r5, r6, r7, pc}

0020a078 <_ZN3GPS13_request_portEv>:
{
  20a078:	b500      	push	{lr}
  20a07a:	b083      	sub	sp, #12
  _send_message(CLASS_CFG, MSG_CFG_PRT, NULL, 0);
  20a07c:	2200      	movs	r2, #0
  20a07e:	9200      	str	r2, [sp, #0]
  20a080:	4613      	mov	r3, r2
  20a082:	2106      	movs	r1, #6
  20a084:	f7ff ffb4 	bl	209ff0 <_ZN3GPS13_send_messageEhhPvt>
}
  20a088:	b003      	add	sp, #12
  20a08a:	f85d fb04 	ldr.w	pc, [sp], #4

0020a08e <_ZN3GPS23_configure_message_rateEhhh>:
{
  20a08e:	b500      	push	{lr}
  20a090:	b085      	sub	sp, #20
  msg.msg_class = msg_class;
  20a092:	f88d 100c 	strb.w	r1, [sp, #12]
  msg.msg_id    = msg_id;
  20a096:	f88d 200d 	strb.w	r2, [sp, #13]
  msg.rate          = rate;
  20a09a:	f88d 300e 	strb.w	r3, [sp, #14]
  _send_message(CLASS_CFG, MSG_CFG_MSG, &msg, sizeof(msg));
  20a09e:	2303      	movs	r3, #3
  20a0a0:	9300      	str	r3, [sp, #0]
  20a0a2:	ab03      	add	r3, sp, #12
  20a0a4:	2201      	movs	r2, #1
  20a0a6:	2106      	movs	r1, #6
  20a0a8:	f7ff ffa2 	bl	209ff0 <_ZN3GPS13_send_messageEhhPvt>
}
  20a0ac:	2001      	movs	r0, #1
  20a0ae:	b005      	add	sp, #20
  20a0b0:	f85d fb04 	ldr.w	pc, [sp], #4

0020a0b4 <_ZN3GPS12_verify_rateEhhh>:
GPS::_verify_rate(uint8_t msg_class, uint8_t msg_id, uint8_t rate) {
  20a0b4:	b510      	push	{r4, lr}
  20a0b6:	4604      	mov	r4, r0
  switch(msg_class) {
  20a0b8:	2901      	cmp	r1, #1
  20a0ba:	d002      	beq.n	20a0c2 <_ZN3GPS12_verify_rateEhhh+0xe>
  20a0bc:	290a      	cmp	r1, #10
  20a0be:	d06b      	beq.n	20a198 <_ZN3GPS12_verify_rateEhhh+0xe4>
  20a0c0:	bd10      	pop	{r4, pc}
    switch(msg_id) {
  20a0c2:	3a02      	subs	r2, #2
  20a0c4:	2a10      	cmp	r2, #16
  20a0c6:	f200 8094 	bhi.w	20a1f2 <_ZN3GPS12_verify_rateEhhh+0x13e>
  20a0ca:	e8df f002 	tbb	[pc, r2]
  20a0ce:	2009      	.short	0x2009
  20a0d0:	92379292 	.word	0x92379292
  20a0d4:	92929292 	.word	0x92929292
  20a0d8:	92929292 	.word	0x92929292
  20a0dc:	9292      	.short	0x9292
  20a0de:	4e          	.byte	0x4e
  20a0df:	00          	.byte	0x00
      if(rate == RATE_POSLLH) {
  20a0e0:	b933      	cbnz	r3, 20a0f0 <_ZN3GPS12_verify_rateEhhh+0x3c>
        _unconfigured_messages &= ~CONFIG_RATE_POSLLH;
  20a0e2:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a0e6:	f023 0302 	bic.w	r3, r3, #2
  20a0ea:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
  20a0ee:	bd10      	pop	{r4, pc}
        _configure_message_rate(msg_class, msg_id, RATE_POSLLH);
  20a0f0:	2300      	movs	r3, #0
  20a0f2:	2202      	movs	r2, #2
  20a0f4:	2101      	movs	r1, #1
  20a0f6:	f7ff ffca 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
        _unconfigured_messages |= CONFIG_RATE_POSLLH;
  20a0fa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20a0fe:	f043 0302 	orr.w	r3, r3, #2
  20a102:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        _cfg_needs_save = true;
  20a106:	2301      	movs	r3, #1
  20a108:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
  20a10c:	bd10      	pop	{r4, pc}
      if(rate == RATE_STATUS) {
  20a10e:	b933      	cbnz	r3, 20a11e <_ZN3GPS12_verify_rateEhhh+0x6a>
        _unconfigured_messages &= ~CONFIG_RATE_STATUS;
  20a110:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a114:	f023 0304 	bic.w	r3, r3, #4
  20a118:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
  20a11c:	bd10      	pop	{r4, pc}
        _configure_message_rate(msg_class, msg_id, RATE_STATUS);
  20a11e:	2300      	movs	r3, #0
  20a120:	2203      	movs	r2, #3
  20a122:	2101      	movs	r1, #1
  20a124:	f7ff ffb3 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
        _unconfigured_messages |= CONFIG_RATE_STATUS;
  20a128:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20a12c:	f043 0304 	orr.w	r3, r3, #4
  20a130:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        _cfg_needs_save = true;
  20a134:	2301      	movs	r3, #1
  20a136:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
  20a13a:	bd10      	pop	{r4, pc}
      if(rate == RATE_SOL) {
  20a13c:	b933      	cbnz	r3, 20a14c <_ZN3GPS12_verify_rateEhhh+0x98>
        _unconfigured_messages &= ~CONFIG_RATE_SOL;
  20a13e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a142:	f023 0308 	bic.w	r3, r3, #8
  20a146:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
  20a14a:	bd10      	pop	{r4, pc}
        _configure_message_rate(msg_class, msg_id, RATE_SOL);
  20a14c:	2300      	movs	r3, #0
  20a14e:	2206      	movs	r2, #6
  20a150:	2101      	movs	r1, #1
  20a152:	f7ff ff9c 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
        _unconfigured_messages |= CONFIG_RATE_SOL;
  20a156:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20a15a:	f043 0308 	orr.w	r3, r3, #8
  20a15e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        _cfg_needs_save = true;
  20a162:	2301      	movs	r3, #1
  20a164:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
  20a168:	bd10      	pop	{r4, pc}
      if(rate == RATE_VELNED) {
  20a16a:	b933      	cbnz	r3, 20a17a <_ZN3GPS12_verify_rateEhhh+0xc6>
        _unconfigured_messages &= ~CONFIG_RATE_VELNED;
  20a16c:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a170:	f023 0310 	bic.w	r3, r3, #16
  20a174:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
  20a178:	bd10      	pop	{r4, pc}
        _configure_message_rate(msg_class, msg_id, RATE_VELNED);
  20a17a:	2300      	movs	r3, #0
  20a17c:	2212      	movs	r2, #18
  20a17e:	2101      	movs	r1, #1
  20a180:	f7ff ff85 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
        _unconfigured_messages |= CONFIG_RATE_VELNED;
  20a184:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20a188:	f043 0310 	orr.w	r3, r3, #16
  20a18c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        _cfg_needs_save = true;
  20a190:	2301      	movs	r3, #1
  20a192:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
  20a196:	bd10      	pop	{r4, pc}
    switch(msg_id) {
  20a198:	2a09      	cmp	r2, #9
  20a19a:	d002      	beq.n	20a1a2 <_ZN3GPS12_verify_rateEhhh+0xee>
  20a19c:	2a0b      	cmp	r2, #11
  20a19e:	d018      	beq.n	20a1d2 <_ZN3GPS12_verify_rateEhhh+0x11e>
  20a1a0:	bd10      	pop	{r4, pc}
      if(rate == RATE_HW) {
  20a1a2:	2b05      	cmp	r3, #5
  20a1a4:	d00e      	beq.n	20a1c4 <_ZN3GPS12_verify_rateEhhh+0x110>
        _configure_message_rate(msg_class, msg_id, RATE_HW);
  20a1a6:	2305      	movs	r3, #5
  20a1a8:	2209      	movs	r2, #9
  20a1aa:	210a      	movs	r1, #10
  20a1ac:	f7ff ff6f 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
        _unconfigured_messages |= CONFIG_RATE_MON_HW;
  20a1b0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20a1b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  20a1b8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        _cfg_needs_save = true;
  20a1bc:	2301      	movs	r3, #1
  20a1be:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
  20a1c2:	bd10      	pop	{r4, pc}
        _unconfigured_messages &= ~CONFIG_RATE_MON_HW;
  20a1c4:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a1c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  20a1cc:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
  20a1d0:	bd10      	pop	{r4, pc}
      if(rate == RATE_HW2) {
  20a1d2:	2b05      	cmp	r3, #5
  20a1d4:	d00e      	beq.n	20a1f4 <_ZN3GPS12_verify_rateEhhh+0x140>
        _configure_message_rate(msg_class, msg_id, RATE_HW2);
  20a1d6:	2305      	movs	r3, #5
  20a1d8:	220b      	movs	r2, #11
  20a1da:	210a      	movs	r1, #10
  20a1dc:	f7ff ff57 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
        _unconfigured_messages |= CONFIG_RATE_MON_HW2;
  20a1e0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20a1e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  20a1e8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        _cfg_needs_save = true;
  20a1ec:	2301      	movs	r3, #1
  20a1ee:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
  20a1f2:	bd10      	pop	{r4, pc}
        _unconfigured_messages &= ~CONFIG_RATE_MON_HW2;
  20a1f4:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a1f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  20a1fc:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
  20a200:	bd10      	pop	{r4, pc}

0020a202 <_ZN3GPS18unexpected_messageEv>:
{
  20a202:	b508      	push	{r3, lr}
  if (++_disable_counter == 0) {
  20a204:	f890 312e 	ldrb.w	r3, [r0, #302]	; 0x12e
  20a208:	3301      	adds	r3, #1
  20a20a:	b2db      	uxtb	r3, r3
  20a20c:	f880 312e 	strb.w	r3, [r0, #302]	; 0x12e
  20a210:	b103      	cbz	r3, 20a214 <_ZN3GPS18unexpected_messageEv+0x12>
  20a212:	bd08      	pop	{r3, pc}
    _configure_message_rate(_class, _msg_id, 0);
  20a214:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
  20a218:	f890 110a 	ldrb.w	r1, [r0, #266]	; 0x10a
  20a21c:	f7ff ff37 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
}
  20a220:	e7f7      	b.n	20a212 <_ZN3GPS18unexpected_messageEv+0x10>

0020a222 <_ZN3GPS15_configure_rateEv>:
{
  20a222:	b500      	push	{lr}
  20a224:	b085      	sub	sp, #20
  msg.measure_rate_ms = MEASURE_RATE;
  20a226:	2364      	movs	r3, #100	; 0x64
  20a228:	f8ad 3008 	strh.w	r3, [sp, #8]
  msg.nav_rate        = 1;
  20a22c:	2301      	movs	r3, #1
  20a22e:	f8ad 300a 	strh.w	r3, [sp, #10]
  msg.timeref         = 0;     // UTC time
  20a232:	2300      	movs	r3, #0
  20a234:	f8ad 300c 	strh.w	r3, [sp, #12]
  _send_message(CLASS_CFG, MSG_CFG_RATE, &msg, sizeof(msg));
  20a238:	2106      	movs	r1, #6
  20a23a:	9100      	str	r1, [sp, #0]
  20a23c:	ab02      	add	r3, sp, #8
  20a23e:	2208      	movs	r2, #8
  20a240:	f7ff fed6 	bl	209ff0 <_ZN3GPS13_send_messageEhhPvt>
}
  20a244:	b005      	add	sp, #20
  20a246:	f85d fb04 	ldr.w	pc, [sp], #4

0020a24a <_ZN3GPS20_request_next_configEv>:
  if (_auto_config == 0) {
  20a24a:	f990 3091 	ldrsb.w	r3, [r0, #145]	; 0x91
  20a24e:	b903      	cbnz	r3, 20a252 <_ZN3GPS20_request_next_configEv+0x8>
  20a250:	4770      	bx	lr
{
  20a252:	b510      	push	{r4, lr}
  20a254:	4604      	mov	r4, r0
static uint32_t millis(){ return HAL_GetTick();}
  20a256:	f005 fb25 	bl	20f8a4 <HAL_GetTick>
  if(millis() - _last_update_time < UPDATE_INTERVAL) return;
  20a25a:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
  20a25e:	1ac0      	subs	r0, r0, r3
  20a260:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  20a264:	d200      	bcs.n	20a268 <_ZN3GPS20_request_next_configEv+0x1e>
  20a266:	bd10      	pop	{r4, pc}
  20a268:	f005 fb1c 	bl	20f8a4 <HAL_GetTick>
  _last_update_time = millis();
  20a26c:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
  switch (_next_message++) {
  20a270:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
  20a274:	1c5a      	adds	r2, r3, #1
  20a276:	f884 2122 	strb.w	r2, [r4, #290]	; 0x122
  20a27a:	2b04      	cmp	r3, #4
  20a27c:	d823      	bhi.n	20a2c6 <_ZN3GPS20_request_next_configEv+0x7c>
  20a27e:	e8df f003 	tbb	[pc, r3]
  20a282:	0703      	.short	0x0703
  20a284:	150e      	.short	0x150e
  20a286:	1c          	.byte	0x1c
  20a287:	00          	.byte	0x00
    _configure_rate();
  20a288:	4620      	mov	r0, r4
  20a28a:	f7ff ffca 	bl	20a222 <_ZN3GPS15_configure_rateEv>
    break;
  20a28e:	bd10      	pop	{r4, pc}
    _configure_message_rate(CLASS_NAV, MSG_POSLLH, RATE_POSLLH);
  20a290:	2300      	movs	r3, #0
  20a292:	2202      	movs	r2, #2
  20a294:	2101      	movs	r1, #1
  20a296:	4620      	mov	r0, r4
  20a298:	f7ff fef9 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
    break;
  20a29c:	bd10      	pop	{r4, pc}
    _configure_message_rate(CLASS_NAV, MSG_VELNED, RATE_VELNED);
  20a29e:	2300      	movs	r3, #0
  20a2a0:	2212      	movs	r2, #18
  20a2a2:	2101      	movs	r1, #1
  20a2a4:	4620      	mov	r0, r4
  20a2a6:	f7ff fef2 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
    break;
  20a2aa:	bd10      	pop	{r4, pc}
    _configure_message_rate(CLASS_NAV, MSG_SOL, RATE_SOL);
  20a2ac:	2300      	movs	r3, #0
  20a2ae:	2206      	movs	r2, #6
  20a2b0:	2101      	movs	r1, #1
  20a2b2:	4620      	mov	r0, r4
  20a2b4:	f7ff feeb 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
    break;
  20a2b8:	bd10      	pop	{r4, pc}
    _configure_message_rate(CLASS_NAV, MSG_PVT, RATE_PVT);
  20a2ba:	2301      	movs	r3, #1
  20a2bc:	2207      	movs	r2, #7
  20a2be:	4619      	mov	r1, r3
  20a2c0:	4620      	mov	r0, r4
  20a2c2:	f7ff fee4 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
    _auto_config = 0;
  20a2c6:	2300      	movs	r3, #0
  20a2c8:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    break;
  20a2cc:	e7cb      	b.n	20a266 <_ZN3GPS20_request_next_configEv+0x1c>
	...

0020a2d0 <_ZN3GPS6updateEv>:
{
  20a2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  20a2d2:	4605      	mov	r5, r0
  20a2d4:	f005 fae6 	bl	20f8a4 <HAL_GetTick>
  if((millis() - _init_time > WARMUP_TIME) && _warmup_flag) 
  20a2d8:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
  20a2dc:	1ac0      	subs	r0, r0, r3
  20a2de:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
  20a2e2:	d940      	bls.n	20a366 <_ZN3GPS6updateEv+0x96>
  20a2e4:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
  20a2e8:	bb2b      	cbnz	r3, 20a336 <_ZN3GPS6updateEv+0x66>
{
  20a2ea:	2600      	movs	r6, #0
    return true;
  }

  uint16_t length()
  {
    if(subscript_to_add_ - subscript_in_progress_ >= 0)
  20a2ec:	4c22      	ldr	r4, [pc, #136]	; (20a378 <_ZN3GPS6updateEv+0xa8>)
          subscript_in_progress_ = 0;
  20a2ee:	4637      	mov	r7, r6
  20a2f0:	e00a      	b.n	20a308 <_ZN3GPS6updateEv+0x38>
      return (subscript_to_add_ - subscript_in_progress_);
    else
      return (subscript_to_add_ - (buffer_length_ - subscript_in_progress_));
  20a2f2:	18ca      	adds	r2, r1, r3
  20a2f4:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
  20a2f8:	1a12      	subs	r2, r2, r0
  20a2fa:	b292      	uxth	r2, r2
  20a2fc:	e00c      	b.n	20a318 <_ZN3GPS6updateEv+0x48>
        read(data);
  20a2fe:	682b      	ldr	r3, [r5, #0]
  20a300:	689b      	ldr	r3, [r3, #8]
  20a302:	4631      	mov	r1, r6
  20a304:	4628      	mov	r0, r5
  20a306:	4798      	blx	r3
    if(subscript_to_add_ - subscript_in_progress_ >= 0)
  20a308:	f9b4 1192 	ldrsh.w	r1, [r4, #402]	; 0x192
  20a30c:	f9b4 3190 	ldrsh.w	r3, [r4, #400]	; 0x190
  20a310:	1aca      	subs	r2, r1, r3
  20a312:	2a00      	cmp	r2, #0
  20a314:	dbed      	blt.n	20a2f2 <_ZN3GPS6updateEv+0x22>
      return (subscript_to_add_ - subscript_in_progress_);
  20a316:	b292      	uxth	r2, r2
      while (available() > 0) {
  20a318:	b34a      	cbz	r2, 20a36e <_ZN3GPS6updateEv+0x9e>
    if (subscript_in_progress_ != subscript_to_add_)
  20a31a:	428b      	cmp	r3, r1
  20a31c:	d0ef      	beq.n	20a2fe <_ZN3GPS6updateEv+0x2e>
        pop_value =  buf_[subscript_in_progress_];
  20a31e:	5ce6      	ldrb	r6, [r4, r3]
        subscript_in_progress_++;
  20a320:	3301      	adds	r3, #1
  20a322:	b21b      	sxth	r3, r3
  20a324:	f8a4 3190 	strh.w	r3, [r4, #400]	; 0x190
        if (subscript_in_progress_ == buffer_length_)
  20a328:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
  20a32c:	4293      	cmp	r3, r2
          subscript_in_progress_ = 0;
  20a32e:	bf08      	it	eq
  20a330:	f8a4 7190 	strheq.w	r7, [r4, #400]	; 0x190
  20a334:	e7e3      	b.n	20a2fe <_ZN3GPS6updateEv+0x2e>
      _warmup_flag = false;
  20a336:	2300      	movs	r3, #0
  20a338:	f885 313c 	strb.w	r3, [r5, #316]	; 0x13c
      HAL_UART_Receive_DMA(huart_, getRxPointer(), getRxSize());
  20a33c:	2204      	movs	r2, #4
  20a33e:	490f      	ldr	r1, [pc, #60]	; (20a37c <_ZN3GPS6updateEv+0xac>)
  20a340:	6868      	ldr	r0, [r5, #4]
  20a342:	f009 fa71 	bl	213828 <HAL_UART_Receive_DMA>
      huart_->hdmarx->XferCpltCallback = UBLOX_UART_DMAReceiveCpltUBLOX; //change the registerred func
  20a346:	686b      	ldr	r3, [r5, #4]
  20a348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  20a34a:	4a0d      	ldr	r2, [pc, #52]	; (20a380 <_ZN3GPS6updateEv+0xb0>)
  20a34c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_UART_DISABLE_IT(huart_, UART_IT_RXNE);
  20a34e:	686b      	ldr	r3, [r5, #4]
  20a350:	681a      	ldr	r2, [r3, #0]
  20a352:	6813      	ldr	r3, [r2, #0]
  20a354:	f023 0320 	bic.w	r3, r3, #32
  20a358:	6013      	str	r3, [r2, #0]
      SET_BIT(huart_->Instance->CR1, USART_CR1_RE);	
  20a35a:	686b      	ldr	r3, [r5, #4]
  20a35c:	681a      	ldr	r2, [r3, #0]
  20a35e:	6813      	ldr	r3, [r2, #0]
  20a360:	f043 0304 	orr.w	r3, r3, #4
  20a364:	6013      	str	r3, [r2, #0]
  if(!_warmup_flag)
  20a366:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
  20a36a:	2b00      	cmp	r3, #0
  20a36c:	d0bd      	beq.n	20a2ea <_ZN3GPS6updateEv+0x1a>
  _request_next_config();
  20a36e:	4628      	mov	r0, r5
  20a370:	f7ff ff6b 	bl	20a24a <_ZN3GPS20_request_next_configEv>
}
  20a374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20a376:	bf00      	nop
  20a378:	2000029c 	.word	0x2000029c
  20a37c:	20000434 	.word	0x20000434
  20a380:	00209d8d 	.word	0x00209d8d

0020a384 <_ZN3GPS10_parse_gpsEv>:
  if (_class == CLASS_ACK) {
  20a384:	f890 310a 	ldrb.w	r3, [r0, #266]	; 0x10a
  20a388:	2b05      	cmp	r3, #5
  20a38a:	d043      	beq.n	20a414 <_ZN3GPS10_parse_gpsEv+0x90>
{
  20a38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  20a390:	b092      	sub	sp, #72	; 0x48
  20a392:	4604      	mov	r4, r0
  if (_class == CLASS_CFG) {
  20a394:	2b06      	cmp	r3, #6
  20a396:	f000 809a 	beq.w	20a4ce <_ZN3GPS10_parse_gpsEv+0x14a>
  if (_class == CLASS_MON) {
  20a39a:	2b0a      	cmp	r3, #10
  20a39c:	f000 81f8 	beq.w	20a790 <_ZN3GPS10_parse_gpsEv+0x40c>
  if (_class != CLASS_NAV) {
  20a3a0:	2b01      	cmp	r3, #1
  20a3a2:	f040 8203 	bne.w	20a7ac <_ZN3GPS10_parse_gpsEv+0x428>
  switch (_msg_id) {
  20a3a6:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
  20a3aa:	1e93      	subs	r3, r2, #2
  20a3ac:	2b2e      	cmp	r3, #46	; 0x2e
  20a3ae:	f200 83a5 	bhi.w	20aafc <_ZN3GPS10_parse_gpsEv+0x778>
  20a3b2:	e8df f013 	tbh	[pc, r3, lsl #1]
  20a3b6:	0296      	.short	0x0296
  20a3b8:	03a303a3 	.word	0x03a303a3
  20a3bc:	02de03a3 	.word	0x02de03a3
  20a3c0:	03a30202 	.word	0x03a30202
  20a3c4:	03a303a3 	.word	0x03a303a3
  20a3c8:	03a303a3 	.word	0x03a303a3
  20a3cc:	03a303a3 	.word	0x03a303a3
  20a3d0:	03a303a3 	.word	0x03a303a3
  20a3d4:	032c03a3 	.word	0x032c03a3
  20a3d8:	03a303a3 	.word	0x03a303a3
  20a3dc:	03a303a3 	.word	0x03a303a3
  20a3e0:	03a303a3 	.word	0x03a303a3
  20a3e4:	03a303a3 	.word	0x03a303a3
  20a3e8:	03a303a3 	.word	0x03a303a3
  20a3ec:	03a303a3 	.word	0x03a303a3
  20a3f0:	03a303a3 	.word	0x03a303a3
  20a3f4:	03a303a3 	.word	0x03a303a3
  20a3f8:	03a303a3 	.word	0x03a303a3
  20a3fc:	03a303a3 	.word	0x03a303a3
  20a400:	03a303a3 	.word	0x03a303a3
  20a404:	03a303a3 	.word	0x03a303a3
  20a408:	03a303a3 	.word	0x03a303a3
  20a40c:	03a303a3 	.word	0x03a303a3
  20a410:	037303a3 	.word	0x037303a3
    if(_msg_id == MSG_ACK_ACK) {
  20a414:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
  20a418:	2b01      	cmp	r3, #1
  20a41a:	d001      	beq.n	20a420 <_ZN3GPS10_parse_gpsEv+0x9c>
    return false;
  20a41c:	2000      	movs	r0, #0
  20a41e:	4770      	bx	lr
      switch(_buffer.ack.clsID) {
  20a420:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
  20a424:	2b06      	cmp	r3, #6
  20a426:	d003      	beq.n	20a430 <_ZN3GPS10_parse_gpsEv+0xac>
  20a428:	2b0a      	cmp	r3, #10
  20a42a:	d038      	beq.n	20a49e <_ZN3GPS10_parse_gpsEv+0x11a>
    return false;
  20a42c:	2000      	movs	r0, #0
  20a42e:	4770      	bx	lr
        switch(_buffer.ack.msgID) {
  20a430:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
  20a434:	2b16      	cmp	r3, #22
  20a436:	d02a      	beq.n	20a48e <_ZN3GPS10_parse_gpsEv+0x10a>
  20a438:	d80c      	bhi.n	20a454 <_ZN3GPS10_parse_gpsEv+0xd0>
  20a43a:	2b08      	cmp	r3, #8
  20a43c:	d01f      	beq.n	20a47e <_ZN3GPS10_parse_gpsEv+0xfa>
  20a43e:	2b09      	cmp	r3, #9
  20a440:	f040 8374 	bne.w	20ab2c <_ZN3GPS10_parse_gpsEv+0x7a8>
          _cfg_saved = true;
  20a444:	2301      	movs	r3, #1
  20a446:	f880 310b 	strb.w	r3, [r0, #267]	; 0x10b
          _cfg_needs_save = false;
  20a44a:	2300      	movs	r3, #0
  20a44c:	f880 313d 	strb.w	r3, [r0, #317]	; 0x13d
    return false;
  20a450:	4618      	mov	r0, r3
          break;
  20a452:	4770      	bx	lr
        switch(_buffer.ack.msgID) {
  20a454:	2b24      	cmp	r3, #36	; 0x24
  20a456:	d00a      	beq.n	20a46e <_ZN3GPS10_parse_gpsEv+0xea>
  20a458:	2b3e      	cmp	r3, #62	; 0x3e
  20a45a:	f040 8367 	bne.w	20ab2c <_ZN3GPS10_parse_gpsEv+0x7a8>
          _unconfigured_messages &= ~CONFIG_GNSS;
  20a45e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  20a466:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
    return false;
  20a46a:	2000      	movs	r0, #0
          break;
  20a46c:	4770      	bx	lr
          _unconfigured_messages &= ~CONFIG_NAV_SETTINGS;
  20a46e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  20a476:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
    return false;
  20a47a:	2000      	movs	r0, #0
          break;
  20a47c:	4770      	bx	lr
          _unconfigured_messages &= ~CONFIG_RATE_NAV;
  20a47e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a482:	f023 0301 	bic.w	r3, r3, #1
  20a486:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
    return false;
  20a48a:	2000      	movs	r0, #0
          break;
  20a48c:	4770      	bx	lr
          _unconfigured_messages &= ~CONFIG_SBAS;
  20a48e:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  20a496:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
    return false;
  20a49a:	2000      	movs	r0, #0
          break;
  20a49c:	4770      	bx	lr
        switch(_buffer.ack.msgID) {
  20a49e:	f890 3094 	ldrb.w	r3, [r0, #148]	; 0x94
  20a4a2:	2b09      	cmp	r3, #9
  20a4a4:	d003      	beq.n	20a4ae <_ZN3GPS10_parse_gpsEv+0x12a>
  20a4a6:	2b0b      	cmp	r3, #11
  20a4a8:	d009      	beq.n	20a4be <_ZN3GPS10_parse_gpsEv+0x13a>
    return false;
  20a4aa:	2000      	movs	r0, #0
  20a4ac:	4770      	bx	lr
          _unconfigured_messages &= ~CONFIG_RATE_MON_HW;
  20a4ae:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a4b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  20a4b6:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
    return false;
  20a4ba:	2000      	movs	r0, #0
          break;
  20a4bc:	4770      	bx	lr
          _unconfigured_messages &= ~CONFIG_RATE_MON_HW2;
  20a4be:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a4c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  20a4c6:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
    return false;
  20a4ca:	2000      	movs	r0, #0
          break;
  20a4cc:	4770      	bx	lr
    switch(_msg_id) {
  20a4ce:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
  20a4d2:	2a08      	cmp	r2, #8
  20a4d4:	f000 813a 	beq.w	20a74c <_ZN3GPS10_parse_gpsEv+0x3c8>
  20a4d8:	d924      	bls.n	20a524 <_ZN3GPS10_parse_gpsEv+0x1a0>
  20a4da:	2a24      	cmp	r2, #36	; 0x24
  20a4dc:	d036      	beq.n	20a54c <_ZN3GPS10_parse_gpsEv+0x1c8>
  20a4de:	2a3e      	cmp	r2, #62	; 0x3e
  20a4e0:	d075      	beq.n	20a5ce <_ZN3GPS10_parse_gpsEv+0x24a>
  20a4e2:	2a16      	cmp	r2, #22
  20a4e4:	f47f af59 	bne.w	20a39a <_ZN3GPS10_parse_gpsEv+0x16>
      if (_sbas_mode != 2) {
  20a4e8:	f990 208c 	ldrsb.w	r2, [r0, #140]	; 0x8c
  20a4ec:	2a02      	cmp	r2, #2
  20a4ee:	f000 810a 	beq.w	20a706 <_ZN3GPS10_parse_gpsEv+0x382>
        if (_buffer.sbas.mode != _sbas_mode) {
  20a4f2:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
  20a4f6:	4293      	cmp	r3, r2
  20a4f8:	f000 80fd 	beq.w	20a6f6 <_ZN3GPS10_parse_gpsEv+0x372>
          _buffer.sbas.mode = _sbas_mode;
  20a4fc:	4603      	mov	r3, r0
  20a4fe:	f803 2f93 	strb.w	r2, [r3, #147]!
                        sizeof(_buffer.sbas));
  20a502:	2208      	movs	r2, #8
  20a504:	9200      	str	r2, [sp, #0]
  20a506:	2216      	movs	r2, #22
  20a508:	2106      	movs	r1, #6
  20a50a:	f7ff fd71 	bl	209ff0 <_ZN3GPS13_send_messageEhhPvt>
          _unconfigured_messages |= CONFIG_SBAS;
  20a50e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20a512:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  20a516:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
          _cfg_needs_save = true;
  20a51a:	2301      	movs	r3, #1
  20a51c:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
      return false;
  20a520:	2000      	movs	r0, #0
  20a522:	e147      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
    switch(_msg_id) {
  20a524:	2a00      	cmp	r2, #0
  20a526:	f000 810b 	beq.w	20a740 <_ZN3GPS10_parse_gpsEv+0x3bc>
  20a52a:	2a01      	cmp	r2, #1
  20a52c:	f47f af35 	bne.w	20a39a <_ZN3GPS10_parse_gpsEv+0x16>
      if(_payload_length == sizeof(ubx_cfg_msg_rate_6)) {
  20a530:	f8b0 3106 	ldrh.w	r3, [r0, #262]	; 0x106
  20a534:	2b08      	cmp	r3, #8
  20a536:	f040 80f9 	bne.w	20a72c <_ZN3GPS10_parse_gpsEv+0x3a8>
        if(_ublox_port >= UBLOX_MAX_PORTS) {
  20a53a:	f890 3123 	ldrb.w	r3, [r0, #291]	; 0x123
  20a53e:	2b05      	cmp	r3, #5
  20a540:	f340 80e9 	ble.w	20a716 <_ZN3GPS10_parse_gpsEv+0x392>
          _request_port();
  20a544:	f7ff fd98 	bl	20a078 <_ZN3GPS13_request_portEv>
          return false;
  20a548:	2000      	movs	r0, #0
  20a54a:	e133      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
      _buffer.nav_settings.mask = 0;
  20a54c:	2300      	movs	r3, #0
  20a54e:	f880 3093 	strb.w	r3, [r0, #147]	; 0x93
  20a552:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
      if (_navfilter != GPS_ENGINE_NONE &&
  20a556:	f990 3081 	ldrsb.w	r3, [r0, #129]	; 0x81
  20a55a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  20a55e:	f000 82e9 	beq.w	20ab34 <_ZN3GPS10_parse_gpsEv+0x7b0>
          _buffer.nav_settings.dynModel != _navfilter) {
  20a562:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
      if (_navfilter != GPS_ENGINE_NONE &&
  20a566:	429a      	cmp	r2, r3
  20a568:	f000 82e4 	beq.w	20ab34 <_ZN3GPS10_parse_gpsEv+0x7b0>
        _buffer.nav_settings.dynModel = _navfilter;
  20a56c:	f880 3095 	strb.w	r3, [r0, #149]	; 0x95
        _buffer.nav_settings.mask |= 1;
  20a570:	2301      	movs	r3, #1
  20a572:	f880 3093 	strb.w	r3, [r0, #147]	; 0x93
  20a576:	2300      	movs	r3, #0
  20a578:	f880 3094 	strb.w	r3, [r0, #148]	; 0x94
      if (_min_elevation != -100 &&
  20a57c:	f990 308d 	ldrsb.w	r3, [r0, #141]	; 0x8d
  20a580:	f113 0f64 	cmn.w	r3, #100	; 0x64
  20a584:	d010      	beq.n	20a5a8 <_ZN3GPS10_parse_gpsEv+0x224>
  20a586:	f990 209f 	ldrsb.w	r2, [r0, #159]	; 0x9f
  20a58a:	429a      	cmp	r2, r3
  20a58c:	d00c      	beq.n	20a5a8 <_ZN3GPS10_parse_gpsEv+0x224>
        _buffer.nav_settings.minElev = _min_elevation;
  20a58e:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
        _buffer.nav_settings.mask |= 2;
  20a592:	f8b4 3093 	ldrh.w	r3, [r4, #147]	; 0x93
  20a596:	f043 0302 	orr.w	r3, r3, #2
  20a59a:	f8a4 3093 	strh.w	r3, [r4, #147]	; 0x93
      if (_buffer.nav_settings.mask != 0) {
  20a59e:	f8b4 3093 	ldrh.w	r3, [r4, #147]	; 0x93
  20a5a2:	2b00      	cmp	r3, #0
  20a5a4:	f000 82cb 	beq.w	20ab3e <_ZN3GPS10_parse_gpsEv+0x7ba>
                      sizeof(_buffer.nav_settings));
  20a5a8:	2224      	movs	r2, #36	; 0x24
  20a5aa:	9200      	str	r2, [sp, #0]
  20a5ac:	f104 0393 	add.w	r3, r4, #147	; 0x93
  20a5b0:	2106      	movs	r1, #6
  20a5b2:	4620      	mov	r0, r4
  20a5b4:	f7ff fd1c 	bl	209ff0 <_ZN3GPS13_send_messageEhhPvt>
        _unconfigured_messages |= CONFIG_NAV_SETTINGS;
  20a5b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20a5bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  20a5c0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        _cfg_needs_save = true;
  20a5c4:	2301      	movs	r3, #1
  20a5c6:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
      return false;
  20a5ca:	2000      	movs	r0, #0
  20a5cc:	e0f2      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
      if (_gnss_mode != 0) {
  20a5ce:	f990 508f 	ldrsb.w	r5, [r0, #143]	; 0x8f
  20a5d2:	2d00      	cmp	r5, #0
  20a5d4:	f000 8087 	beq.w	20a6e6 <_ZN3GPS10_parse_gpsEv+0x362>
        struct ubx_cfg_gnss start_gnss = _buffer.gnss;
  20a5d8:	f100 0693 	add.w	r6, r0, #147	; 0x93
  20a5dc:	f10d 0e0c 	add.w	lr, sp, #12
  20a5e0:	f100 0cc3 	add.w	ip, r0, #195	; 0xc3
  20a5e4:	4677      	mov	r7, lr
  20a5e6:	6830      	ldr	r0, [r6, #0]
  20a5e8:	6871      	ldr	r1, [r6, #4]
  20a5ea:	68b2      	ldr	r2, [r6, #8]
  20a5ec:	68f3      	ldr	r3, [r6, #12]
  20a5ee:	c70f      	stmia	r7!, {r0, r1, r2, r3}
  20a5f0:	3610      	adds	r6, #16
  20a5f2:	46be      	mov	lr, r7
  20a5f4:	4566      	cmp	r6, ip
  20a5f6:	d1f5      	bne.n	20a5e4 <_ZN3GPS10_parse_gpsEv+0x260>
  20a5f8:	6830      	ldr	r0, [r6, #0]
  20a5fa:	6871      	ldr	r1, [r6, #4]
  20a5fc:	68b2      	ldr	r2, [r6, #8]
  20a5fe:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
        for(int i = 0; i < UBLOX_MAX_GNSS_CONFIG_BLOCKS; i++) {
  20a602:	2300      	movs	r3, #0
        uint8_t gnssCount = 0;
  20a604:	461a      	mov	r2, r3
          if((_gnss_mode & (1 << i)) && i != GNSS_SBAS) {
  20a606:	46ae      	mov	lr, r5
  20a608:	e010      	b.n	20a62c <_ZN3GPS10_parse_gpsEv+0x2a8>
        for(int i = 0; i < _buffer.gnss.numConfigBlocks; i++) {
  20a60a:	f894 6096 	ldrb.w	r6, [r4, #150]	; 0x96
  20a60e:	46b4      	mov	ip, r6
  20a610:	2e00      	cmp	r6, #0
  20a612:	d045      	beq.n	20a6a0 <_ZN3GPS10_parse_gpsEv+0x31c>
              _buffer.gnss.configBlock[i].resTrkCh = (_buffer.gnss.numTrkChHw - 3) / (gnssCount * 2);
  20a614:	0050      	lsls	r0, r2, #1
  20a616:	4623      	mov	r3, r4
  20a618:	2200      	movs	r2, #0
            _buffer.gnss.configBlock[i].resTrkCh = 0;
  20a61a:	4690      	mov	r8, r2
              _buffer.gnss.configBlock[i].resTrkCh = 1;
  20a61c:	f04f 0a01 	mov.w	sl, #1
              _buffer.gnss.configBlock[i].maxTrkCh = 3;
  20a620:	f04f 0903 	mov.w	r9, #3
  20a624:	e01c      	b.n	20a660 <_ZN3GPS10_parse_gpsEv+0x2dc>
        for(int i = 0; i < UBLOX_MAX_GNSS_CONFIG_BLOCKS; i++) {
  20a626:	3301      	adds	r3, #1
  20a628:	2b07      	cmp	r3, #7
  20a62a:	d0ee      	beq.n	20a60a <_ZN3GPS10_parse_gpsEv+0x286>
          if((_gnss_mode & (1 << i)) && i != GNSS_SBAS) {
  20a62c:	fa45 f103 	asr.w	r1, r5, r3
  20a630:	f011 0f01 	tst.w	r1, #1
  20a634:	d0f7      	beq.n	20a626 <_ZN3GPS10_parse_gpsEv+0x2a2>
  20a636:	2b01      	cmp	r3, #1
  20a638:	d0f5      	beq.n	20a626 <_ZN3GPS10_parse_gpsEv+0x2a2>
            gnssCount++;
  20a63a:	3201      	adds	r2, #1
  20a63c:	b2d2      	uxtb	r2, r2
  20a63e:	e7f2      	b.n	20a626 <_ZN3GPS10_parse_gpsEv+0x2a2>
              _buffer.gnss.configBlock[i].resTrkCh = 1;
  20a640:	f883 a098 	strb.w	sl, [r3, #152]	; 0x98
              _buffer.gnss.configBlock[i].maxTrkCh = 3;
  20a644:	f883 9099 	strb.w	r9, [r3, #153]	; 0x99
  20a648:	eb04 05c2 	add.w	r5, r4, r2, lsl #3
            _buffer.gnss.configBlock[i].flags = _buffer.gnss.configBlock[i].flags | 0x00000001;
  20a64c:	f8d5 109b 	ldr.w	r1, [r5, #155]	; 0x9b
  20a650:	f041 0101 	orr.w	r1, r1, #1
  20a654:	f8c5 109b 	str.w	r1, [r5, #155]	; 0x9b
        for(int i = 0; i < _buffer.gnss.numConfigBlocks; i++) {
  20a658:	3201      	adds	r2, #1
  20a65a:	3308      	adds	r3, #8
  20a65c:	4562      	cmp	r2, ip
  20a65e:	da1f      	bge.n	20a6a0 <_ZN3GPS10_parse_gpsEv+0x31c>
          if(_gnss_mode & (1 << _buffer.gnss.configBlock[i].gnssId)) {
  20a660:	f893 1097 	ldrb.w	r1, [r3, #151]	; 0x97
  20a664:	fa4e f501 	asr.w	r5, lr, r1
  20a668:	f015 0f01 	tst.w	r5, #1
  20a66c:	d00b      	beq.n	20a686 <_ZN3GPS10_parse_gpsEv+0x302>
            if(GNSS_SBAS !=_buffer.gnss.configBlock[i].gnssId) {
  20a66e:	2901      	cmp	r1, #1
  20a670:	d0e6      	beq.n	20a640 <_ZN3GPS10_parse_gpsEv+0x2bc>
              _buffer.gnss.configBlock[i].resTrkCh = (_buffer.gnss.numTrkChHw - 3) / (gnssCount * 2);
  20a672:	f894 5094 	ldrb.w	r5, [r4, #148]	; 0x94
  20a676:	1ee9      	subs	r1, r5, #3
  20a678:	fb91 f1f0 	sdiv	r1, r1, r0
  20a67c:	f883 1098 	strb.w	r1, [r3, #152]	; 0x98
              _buffer.gnss.configBlock[i].maxTrkCh = _buffer.gnss.numTrkChHw;
  20a680:	f883 5099 	strb.w	r5, [r3, #153]	; 0x99
  20a684:	e7e0      	b.n	20a648 <_ZN3GPS10_parse_gpsEv+0x2c4>
            _buffer.gnss.configBlock[i].resTrkCh = 0;
  20a686:	f883 8098 	strb.w	r8, [r3, #152]	; 0x98
            _buffer.gnss.configBlock[i].maxTrkCh = 0;
  20a68a:	f883 8099 	strb.w	r8, [r3, #153]	; 0x99
  20a68e:	eb04 05c2 	add.w	r5, r4, r2, lsl #3
            _buffer.gnss.configBlock[i].flags = _buffer.gnss.configBlock[i].flags & 0xFFFFFFFE;
  20a692:	f8d5 109b 	ldr.w	r1, [r5, #155]	; 0x9b
  20a696:	f021 0101 	bic.w	r1, r1, #1
  20a69a:	f8c5 109b 	str.w	r1, [r5, #155]	; 0x9b
  20a69e:	e7db      	b.n	20a658 <_ZN3GPS10_parse_gpsEv+0x2d4>
        if (!memcmp(&start_gnss, &_buffer.gnss, sizeof(start_gnss))) {
  20a6a0:	f104 0593 	add.w	r5, r4, #147	; 0x93
  20a6a4:	223c      	movs	r2, #60	; 0x3c
  20a6a6:	4629      	mov	r1, r5
  20a6a8:	a803      	add	r0, sp, #12
  20a6aa:	f00c f8bf 	bl	21682c <memcmp>
  20a6ae:	b138      	cbz	r0, 20a6c0 <_ZN3GPS10_parse_gpsEv+0x33c>
          _unconfigured_messages &= ~CONFIG_GNSS;
  20a6b0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20a6b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  20a6b8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
      return false;
  20a6bc:	2000      	movs	r0, #0
  20a6be:	e079      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
          _send_message(CLASS_CFG, MSG_CFG_GNSS, &_buffer.gnss, 4 + (8 * _buffer.gnss.numConfigBlocks));
  20a6c0:	00f3      	lsls	r3, r6, #3
  20a6c2:	3304      	adds	r3, #4
  20a6c4:	9300      	str	r3, [sp, #0]
  20a6c6:	462b      	mov	r3, r5
  20a6c8:	223e      	movs	r2, #62	; 0x3e
  20a6ca:	2106      	movs	r1, #6
  20a6cc:	4620      	mov	r0, r4
  20a6ce:	f7ff fc8f 	bl	209ff0 <_ZN3GPS13_send_messageEhhPvt>
          _unconfigured_messages |= CONFIG_GNSS;
  20a6d2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20a6d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  20a6da:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
          _cfg_needs_save = true;
  20a6de:	2301      	movs	r3, #1
  20a6e0:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
  20a6e4:	e7ea      	b.n	20a6bc <_ZN3GPS10_parse_gpsEv+0x338>
        _unconfigured_messages &= ~CONFIG_GNSS;
  20a6e6:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a6ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  20a6ee:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
      return false;
  20a6f2:	2000      	movs	r0, #0
  20a6f4:	e05e      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
          _unconfigured_messages &= ~CONFIG_SBAS;
  20a6f6:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a6fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  20a6fe:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
      return false;
  20a702:	2000      	movs	r0, #0
  20a704:	e056      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
        _unconfigured_messages &= ~CONFIG_SBAS;
  20a706:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a70a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  20a70e:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
      return false;
  20a712:	2000      	movs	r0, #0
  20a714:	e04e      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
        _verify_rate(_buffer.msg_rate_6.msg_class, _buffer.msg_rate_6.msg_id,
  20a716:	4403      	add	r3, r0
                     _buffer.msg_rate_6.rates[_ublox_port]);
  20a718:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  20a71c:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
  20a720:	f890 1093 	ldrb.w	r1, [r0, #147]	; 0x93
  20a724:	f7ff fcc6 	bl	20a0b4 <_ZN3GPS12_verify_rateEhhh>
      return false;
  20a728:	2000      	movs	r0, #0
  20a72a:	e043      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
                     _buffer.msg_rate.rate);
  20a72c:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
  20a730:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
  20a734:	f890 1093 	ldrb.w	r1, [r0, #147]	; 0x93
  20a738:	f7ff fcbc 	bl	20a0b4 <_ZN3GPS12_verify_rateEhhh>
      return false;
  20a73c:	2000      	movs	r0, #0
  20a73e:	e039      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
      _ublox_port = _buffer.prt.portID;
  20a740:	f890 3093 	ldrb.w	r3, [r0, #147]	; 0x93
  20a744:	f880 3123 	strb.w	r3, [r0, #291]	; 0x123
      return false;
  20a748:	2000      	movs	r0, #0
  20a74a:	e033      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
      if(_buffer.nav_rate.measure_rate_ms != MEASURE_RATE ||
  20a74c:	f8b0 3093 	ldrh.w	r3, [r0, #147]	; 0x93
  20a750:	2b64      	cmp	r3, #100	; 0x64
  20a752:	d103      	bne.n	20a75c <_ZN3GPS10_parse_gpsEv+0x3d8>
  20a754:	f8b0 3095 	ldrh.w	r3, [r0, #149]	; 0x95
  20a758:	2b01      	cmp	r3, #1
  20a75a:	d00d      	beq.n	20a778 <_ZN3GPS10_parse_gpsEv+0x3f4>
        _configure_rate();
  20a75c:	4620      	mov	r0, r4
  20a75e:	f7ff fd60 	bl	20a222 <_ZN3GPS15_configure_rateEv>
        _unconfigured_messages |= CONFIG_RATE_NAV;
  20a762:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20a766:	f043 0301 	orr.w	r3, r3, #1
  20a76a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
        _cfg_needs_save = true;
  20a76e:	2301      	movs	r3, #1
  20a770:	f884 313d 	strb.w	r3, [r4, #317]	; 0x13d
      return false;
  20a774:	2000      	movs	r0, #0
        _cfg_needs_save = true;
  20a776:	e01d      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
         _buffer.nav_rate.nav_rate != 1 ||
  20a778:	f8b0 3097 	ldrh.w	r3, [r0, #151]	; 0x97
  20a77c:	2b00      	cmp	r3, #0
  20a77e:	d1ed      	bne.n	20a75c <_ZN3GPS10_parse_gpsEv+0x3d8>
        _unconfigured_messages &= ~CONFIG_RATE_NAV;
  20a780:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
  20a784:	f023 0301 	bic.w	r3, r3, #1
  20a788:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
      return false;
  20a78c:	2000      	movs	r0, #0
  20a78e:	e011      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
    switch(_msg_id) {
  20a790:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
  20a794:	2b04      	cmp	r3, #4
  20a796:	d104      	bne.n	20a7a2 <_ZN3GPS10_parse_gpsEv+0x41e>
      _have_version = true;
  20a798:	2301      	movs	r3, #1
  20a79a:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
    return false;
  20a79e:	2000      	movs	r0, #0
      break;
  20a7a0:	e008      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
      unexpected_message();
  20a7a2:	4620      	mov	r0, r4
  20a7a4:	f7ff fd2d 	bl	20a202 <_ZN3GPS18unexpected_messageEv>
    return false;
  20a7a8:	2000      	movs	r0, #0
  20a7aa:	e003      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
    unexpected_message();
  20a7ac:	4620      	mov	r0, r4
  20a7ae:	f7ff fd28 	bl	20a202 <_ZN3GPS18unexpected_messageEv>
    return false;
  20a7b2:	2000      	movs	r0, #0
}
  20a7b4:	b012      	add	sp, #72	; 0x48
  20a7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LED2_H;
  20a7ba:	2200      	movs	r2, #0
  20a7bc:	2110      	movs	r1, #16
  20a7be:	48e4      	ldr	r0, [pc, #912]	; (20ab50 <_ZN3GPS10_parse_gpsEv+0x7cc>)
  20a7c0:	f006 fb62 	bl	210e88 <HAL_GPIO_WritePin>
    _last_pos_time        = _buffer.pvt.time;
  20a7c4:	f8d4 3093 	ldr.w	r3, [r4, #147]	; 0x93
  20a7c8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    state.location.lng    = _buffer.pvt.longitude;
  20a7cc:	f8d4 30ab 	ldr.w	r3, [r4, #171]	; 0xab
  20a7d0:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
    state.location.lat    = _buffer.pvt.latitude;
  20a7d4:	f8d4 30af 	ldr.w	r3, [r4, #175]	; 0xaf
  20a7d8:	f8c4 303e 	str.w	r3, [r4, #62]	; 0x3e
    state.location.alt    = _buffer.pvt.altitude_msl / 10;
  20a7dc:	f8d4 20b7 	ldr.w	r2, [r4, #183]	; 0xb7
  20a7e0:	49dc      	ldr	r1, [pc, #880]	; (20ab54 <_ZN3GPS10_parse_gpsEv+0x7d0>)
  20a7e2:	fb81 3102 	smull	r3, r1, r1, r2
  20a7e6:	17d3      	asrs	r3, r2, #31
  20a7e8:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  20a7ec:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  20a7f0:	f3c3 2207 	ubfx	r2, r3, #8, #8
  20a7f4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  20a7f8:	f3c3 4307 	ubfx	r3, r3, #16, #8
  20a7fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    state.status = _buffer.pvt.fix_type;
  20a800:	f894 30a7 	ldrb.w	r3, [r4, #167]	; 0xa7
  20a804:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    _new_position = true;
  20a808:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    state.horizontal_accuracy = _buffer.pvt.horizontal_accuracy*1.0e-3f;
  20a80c:	f8d4 20bb 	ldr.w	r2, [r4, #187]	; 0xbb
  20a810:	ee07 2a10 	vmov	s14, r2
  20a814:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  20a818:	eddf 7acf 	vldr	s15, [pc, #828]	; 20ab58 <_ZN3GPS10_parse_gpsEv+0x7d4>
  20a81c:	ee27 7a27 	vmul.f32	s14, s14, s15
  20a820:	ed84 7a1a 	vstr	s14, [r4, #104]	; 0x68
    state.vertical_accuracy = _buffer.pvt.vertical_accuracy*1.0e-3f;
  20a824:	f8d4 20bf 	ldr.w	r2, [r4, #191]	; 0xbf
  20a828:	ee07 2a10 	vmov	s14, r2
  20a82c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  20a830:	ee27 7a27 	vmul.f32	s14, s14, s15
  20a834:	ed84 7a1b 	vstr	s14, [r4, #108]	; 0x6c
    state.have_horizontal_accuracy = true;
  20a838:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
    _new_speed= true;
  20a83c:	f043 0303 	orr.w	r3, r3, #3
  20a840:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    state.ground_speed     = _buffer.pvt.speed_2d*0.001f;          // m/s
  20a844:	f8d4 30cf 	ldr.w	r3, [r4, #207]	; 0xcf
  20a848:	ee07 3a10 	vmov	s14, r3
  20a84c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  20a850:	ee27 7a27 	vmul.f32	s14, s14, s15
  20a854:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
    state.ground_course_cd = (_buffer.pvt.heading_2d / 1000);       // Heading 2D deg * 100000 rescaled to deg * 100
  20a858:	f8d4 30d3 	ldr.w	r3, [r4, #211]	; 0xd3
  20a85c:	49bf      	ldr	r1, [pc, #764]	; (20ab5c <_ZN3GPS10_parse_gpsEv+0x7d8>)
  20a85e:	fb81 0103 	smull	r0, r1, r1, r3
  20a862:	17db      	asrs	r3, r3, #31
  20a864:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
  20a868:	64e3      	str	r3, [r4, #76]	; 0x4c
    state.velocity.x = _buffer.pvt.ned_north * 0.001f;
  20a86a:	f8d4 30c3 	ldr.w	r3, [r4, #195]	; 0xc3
  20a86e:	ee07 3a10 	vmov	s14, r3
  20a872:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20a876:	ee27 7a27 	vmul.f32	s14, s14, s15
  20a87a:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
    state.velocity.y = _buffer.pvt.ned_east * 0.001f;
  20a87e:	f8d4 30c7 	ldr.w	r3, [r4, #199]	; 0xc7
  20a882:	ee07 3a10 	vmov	s14, r3
  20a886:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20a88a:	ee27 7a27 	vmul.f32	s14, s14, s15
  20a88e:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
    state.velocity.z = _buffer.pvt.ned_down * 0.001f;
  20a892:	f8d4 30cb 	ldr.w	r3, [r4, #203]	; 0xcb
  20a896:	ee07 3a10 	vmov	s14, r3
  20a89a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20a89e:	ee27 7a27 	vmul.f32	s14, s14, s15
  20a8a2:	ed84 7a18 	vstr	s14, [r4, #96]	; 0x60
    state.have_speed_accuracy = true;
  20a8a6:	f042 030f 	orr.w	r3, r2, #15
  20a8aa:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    state.speed_accuracy = _buffer.pvt.speed_accuracy*0.001f;
  20a8ae:	f8d4 30d7 	ldr.w	r3, [r4, #215]	; 0xd7
  20a8b2:	ee07 3a10 	vmov	s14, r3
  20a8b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  20a8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
  20a8be:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    state.hdop        = _buffer.pvt.position_DOP;
  20a8c2:	f894 30df 	ldrb.w	r3, [r4, #223]	; 0xdf
  20a8c6:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
  20a8ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20a8ce:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    state.num_sats    = _buffer.pvt.satellites;
  20a8d2:	f894 30aa 	ldrb.w	r3, [r4, #170]	; 0xaa
  20a8d6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    update_ = true;
  20a8da:	2001      	movs	r0, #1
  20a8dc:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    return true;
  20a8e0:	e768      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
    _last_pos_time        = _buffer.posllh.time;
  20a8e2:	f8d4 3093 	ldr.w	r3, [r4, #147]	; 0x93
  20a8e6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    state.location.lng    = _buffer.posllh.longitude;
  20a8ea:	f8d4 3097 	ldr.w	r3, [r4, #151]	; 0x97
  20a8ee:	f8c4 3042 	str.w	r3, [r4, #66]	; 0x42
    state.location.lat    = _buffer.posllh.latitude;
  20a8f2:	f8d4 309b 	ldr.w	r3, [r4, #155]	; 0x9b
  20a8f6:	f8c4 303e 	str.w	r3, [r4, #62]	; 0x3e
    state.location.alt    = _buffer.posllh.altitude_msl / 10;
  20a8fa:	f8d4 20a3 	ldr.w	r2, [r4, #163]	; 0xa3
  20a8fe:	4995      	ldr	r1, [pc, #596]	; (20ab54 <_ZN3GPS10_parse_gpsEv+0x7d0>)
  20a900:	fb81 3102 	smull	r3, r1, r1, r2
  20a904:	17d3      	asrs	r3, r2, #31
  20a906:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  20a90a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
  20a90e:	f3c3 2207 	ubfx	r2, r3, #8, #8
  20a912:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  20a916:	f3c3 4307 	ubfx	r3, r3, #16, #8
  20a91a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    state.status          = next_fix;
  20a91e:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
  20a922:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    _new_position = true;
  20a926:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
  20a92a:	f043 0301 	orr.w	r3, r3, #1
  20a92e:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    state.horizontal_accuracy = _buffer.posllh.horizontal_accuracy*1.0e-3f;
  20a932:	f8d4 30a7 	ldr.w	r3, [r4, #167]	; 0xa7
  20a936:	ee07 3a10 	vmov	s14, r3
  20a93a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  20a93e:	eddf 6a86 	vldr	s13, [pc, #536]	; 20ab58 <_ZN3GPS10_parse_gpsEv+0x7d4>
  20a942:	ee27 7a26 	vmul.f32	s14, s14, s13
  20a946:	ed84 7a1a 	vstr	s14, [r4, #104]	; 0x68
    state.vertical_accuracy = _buffer.posllh.vertical_accuracy*1.0e-3f;
  20a94a:	f8d4 30ab 	ldr.w	r3, [r4, #171]	; 0xab
  20a94e:	ee07 3a90 	vmov	s15, r3
  20a952:	eef8 7a67 	vcvt.f32.u32	s15, s15
  20a956:	ee67 7aa6 	vmul.f32	s15, s15, s13
  20a95a:	edc4 7a1b 	vstr	s15, [r4, #108]	; 0x6c
    state.have_horizontal_accuracy = true;
  20a95e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    state.have_vertical_accuracy = true;
  20a962:	f043 030c 	orr.w	r3, r3, #12
  20a966:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    update_ = true;
  20a96a:	2001      	movs	r0, #1
  20a96c:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    return true;
  20a970:	e720      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
    if (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) {
  20a972:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
  20a976:	f013 0f01 	tst.w	r3, #1
  20a97a:	d017      	beq.n	20a9ac <_ZN3GPS10_parse_gpsEv+0x628>
      if( (_buffer.solution.fix_type == GPS::FIX_3D) &&
  20a97c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
  20a980:	2a03      	cmp	r2, #3
  20a982:	d007      	beq.n	20a994 <_ZN3GPS10_parse_gpsEv+0x610>
      }else if (_buffer.solution.fix_type == GPS::FIX_2D) {
  20a984:	2a02      	cmp	r2, #2
  20a986:	d00d      	beq.n	20a9a4 <_ZN3GPS10_parse_gpsEv+0x620>
        next_fix = NO_FIX;
  20a988:	2301      	movs	r3, #1
  20a98a:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
        state.status = NO_FIX;
  20a98e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  20a992:	e010      	b.n	20a9b6 <_ZN3GPS10_parse_gpsEv+0x632>
      if( (_buffer.solution.fix_type == GPS::FIX_3D) &&
  20a994:	f013 0f02 	tst.w	r3, #2
        next_fix = GPS_OK_FIX_3D_DGPS;
  20a998:	bf14      	ite	ne
  20a99a:	2304      	movne	r3, #4
        next_fix = GPS_OK_FIX_3D;
  20a99c:	2303      	moveq	r3, #3
  20a99e:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
  20a9a2:	e008      	b.n	20a9b6 <_ZN3GPS10_parse_gpsEv+0x632>
        next_fix = GPS_OK_FIX_2D;
  20a9a4:	2302      	movs	r3, #2
  20a9a6:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
  20a9aa:	e004      	b.n	20a9b6 <_ZN3GPS10_parse_gpsEv+0x632>
      next_fix = NO_FIX;
  20a9ac:	2301      	movs	r3, #1
  20a9ae:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
      state.status = NO_FIX;
  20a9b2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(noReceivedHdop) {
  20a9b6:	f894 313e 	ldrb.w	r3, [r4, #318]	; 0x13e
  20a9ba:	b13b      	cbz	r3, 20a9cc <_ZN3GPS10_parse_gpsEv+0x648>
      state.hdop = _buffer.solution.position_DOP;
  20a9bc:	f894 30bf 	ldrb.w	r3, [r4, #191]	; 0xbf
  20a9c0:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
  20a9c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20a9c8:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    state.num_sats    = _buffer.solution.satellites;
  20a9cc:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
  20a9d0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    if (next_fix >= GPS_OK_FIX_2D) {
  20a9d4:	f894 312f 	ldrb.w	r3, [r4, #303]	; 0x12f
  20a9d8:	2b01      	cmp	r3, #1
  20a9da:	f340 80a9 	ble.w	20ab30 <_ZN3GPS10_parse_gpsEv+0x7ac>
  20a9de:	f004 ff61 	bl	20f8a4 <HAL_GetTick>
      state.last_gps_time_ms = millis();
  20a9e2:	6760      	str	r0, [r4, #116]	; 0x74
      if (state.time_week == _buffer.solution.week &&
  20a9e4:	f8b4 309b 	ldrh.w	r3, [r4, #155]	; 0x9b
  20a9e8:	b29a      	uxth	r2, r3
  20a9ea:	8f21      	ldrh	r1, [r4, #56]	; 0x38
  20a9ec:	4291      	cmp	r1, r2
  20a9ee:	d005      	beq.n	20a9fc <_ZN3GPS10_parse_gpsEv+0x678>
      state.time_week_ms    = _buffer.solution.time;
  20a9f0:	f8d4 2093 	ldr.w	r2, [r4, #147]	; 0x93
  20a9f4:	6362      	str	r2, [r4, #52]	; 0x34
      state.time_week       = _buffer.solution.week;
  20a9f6:	8723      	strh	r3, [r4, #56]	; 0x38
    return true;
  20a9f8:	2001      	movs	r0, #1
  20a9fa:	e6db      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
          state.time_week_ms + 200 == _buffer.solution.time) {
  20a9fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
  20a9fe:	32c8      	adds	r2, #200	; 0xc8
  20aa00:	f8d4 1093 	ldr.w	r1, [r4, #147]	; 0x93
      if (state.time_week == _buffer.solution.week &&
  20aa04:	428a      	cmp	r2, r1
        _last_5hz_time = state.last_gps_time_ms;
  20aa06:	bf08      	it	eq
  20aa08:	f8c4 0130 	streq.w	r0, [r4, #304]	; 0x130
  20aa0c:	e7f0      	b.n	20a9f0 <_ZN3GPS10_parse_gpsEv+0x66c>
    _last_vel_time         = _buffer.velned.time;
  20aa0e:	f8d4 3093 	ldr.w	r3, [r4, #147]	; 0x93
  20aa12:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    state.ground_speed     = _buffer.velned.speed_2d*0.01f;          // m/s
  20aa16:	f8d4 30a7 	ldr.w	r3, [r4, #167]	; 0xa7
  20aa1a:	ee07 3a10 	vmov	s14, r3
  20aa1e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
  20aa22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 20ab60 <_ZN3GPS10_parse_gpsEv+0x7dc>
  20aa26:	ee27 7a26 	vmul.f32	s14, s14, s13
  20aa2a:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
    state.ground_course_cd = (_buffer.velned.heading_2d / 1000);       // Heading 2D deg * 100000 rescaled to deg * 100
  20aa2e:	f8d4 30ab 	ldr.w	r3, [r4, #171]	; 0xab
  20aa32:	4a4a      	ldr	r2, [pc, #296]	; (20ab5c <_ZN3GPS10_parse_gpsEv+0x7d8>)
  20aa34:	fb82 1203 	smull	r1, r2, r2, r3
  20aa38:	17db      	asrs	r3, r3, #31
  20aa3a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  20aa3e:	64e3      	str	r3, [r4, #76]	; 0x4c
    state.have_vertical_velocity = true;
  20aa40:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    state.velocity.x = _buffer.velned.ned_east * 0.01f;
  20aa44:	f8d4 209b 	ldr.w	r2, [r4, #155]	; 0x9b
  20aa48:	ee07 2a90 	vmov	s15, r2
  20aa4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  20aa50:	ee67 7aa6 	vmul.f32	s15, s15, s13
  20aa54:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
    state.velocity.y = _buffer.velned.ned_east * 0.01f;
  20aa58:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    state.velocity.z = _buffer.velned.ned_down * 0.01f;
  20aa5c:	f8d4 209f 	ldr.w	r2, [r4, #159]	; 0x9f
  20aa60:	ee07 2a10 	vmov	s14, r2
  20aa64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20aa68:	ee27 7a26 	vmul.f32	s14, s14, s13
  20aa6c:	ed84 7a18 	vstr	s14, [r4, #96]	; 0x60
    state.have_speed_accuracy = true;
  20aa70:	f043 0303 	orr.w	r3, r3, #3
  20aa74:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    state.speed_accuracy = _buffer.velned.speed_accuracy*0.01f;
  20aa78:	f8d4 30af 	ldr.w	r3, [r4, #175]	; 0xaf
  20aa7c:	ee07 3a90 	vmov	s15, r3
  20aa80:	eef8 7a67 	vcvt.f32.u32	s15, s15
  20aa84:	ee67 7aa6 	vmul.f32	s15, s15, s13
  20aa88:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    _new_speed = true;
  20aa8c:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
  20aa90:	f043 0302 	orr.w	r3, r3, #2
  20aa94:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    return true;
  20aa98:	2001      	movs	r0, #1
  20aa9a:	e68b      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
      _hardware_generation = _buffer.svinfo_header.globalFlags & HardwareGenerationMask;
  20aa9c:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
  20aaa0:	f003 0307 	and.w	r3, r3, #7
  20aaa4:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
      switch (_hardware_generation) {
  20aaa8:	3b01      	subs	r3, #1
  20aaaa:	2b01      	cmp	r3, #1
  20aaac:	d805      	bhi.n	20aaba <_ZN3GPS10_parse_gpsEv+0x736>
        _unconfigured_messages &= ~CONFIG_GNSS;
  20aaae:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20aab2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  20aab6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
      _unconfigured_messages &= ~CONFIG_VERSION;
  20aaba:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20aabe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  20aac2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
      _configure_message_rate(CLASS_NAV, MSG_NAV_SVINFO, 0);
  20aac6:	2300      	movs	r3, #0
  20aac8:	2230      	movs	r2, #48	; 0x30
  20aaca:	2101      	movs	r1, #1
  20aacc:	4620      	mov	r0, r4
  20aace:	f7ff fade 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
  if (_new_position && _new_speed && _last_vel_time == _last_pos_time) {
  20aad2:	f894 012d 	ldrb.w	r0, [r4, #301]	; 0x12d
  20aad6:	f010 0001 	ands.w	r0, r0, #1
  20aada:	f43f ae6b 	beq.w	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
  20aade:	f894 012d 	ldrb.w	r0, [r4, #301]	; 0x12d
  20aae2:	f3c0 0040 	ubfx	r0, r0, #1, #1
  20aae6:	2800      	cmp	r0, #0
  20aae8:	f43f ae64 	beq.w	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
  20aaec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
  20aaf0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
  20aaf4:	429a      	cmp	r2, r3
  20aaf6:	d010      	beq.n	20ab1a <_ZN3GPS10_parse_gpsEv+0x796>
  return false;
  20aaf8:	2000      	movs	r0, #0
  20aafa:	e65b      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
    if (++_disable_counter == 0) {
  20aafc:	f894 312e 	ldrb.w	r3, [r4, #302]	; 0x12e
  20ab00:	3301      	adds	r3, #1
  20ab02:	b2db      	uxtb	r3, r3
  20ab04:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
  20ab08:	b10b      	cbz	r3, 20ab0e <_ZN3GPS10_parse_gpsEv+0x78a>
    return false;
  20ab0a:	2000      	movs	r0, #0
  20ab0c:	e652      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
      _configure_message_rate(CLASS_NAV, _msg_id, 0);
  20ab0e:	2101      	movs	r1, #1
  20ab10:	4620      	mov	r0, r4
  20ab12:	f7ff fabc 	bl	20a08e <_ZN3GPS23_configure_message_rateEhhh>
    return false;
  20ab16:	2000      	movs	r0, #0
  20ab18:	e64c      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
    _new_speed = _new_position = false;
  20ab1a:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
  20ab1e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  20ab22:	f36f 0341 	bfc	r3, #1, #1
  20ab26:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
    return true;
  20ab2a:	e643      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
    return false;
  20ab2c:	2000      	movs	r0, #0
  20ab2e:	4770      	bx	lr
    return true;
  20ab30:	2001      	movs	r0, #1
  20ab32:	e63f      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
      if (_min_elevation != -100 &&
  20ab34:	f994 308d 	ldrsb.w	r3, [r4, #141]	; 0x8d
  20ab38:	f113 0f64 	cmn.w	r3, #100	; 0x64
  20ab3c:	d112      	bne.n	20ab64 <_ZN3GPS10_parse_gpsEv+0x7e0>
        _unconfigured_messages &= ~CONFIG_NAV_SETTINGS;
  20ab3e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
  20ab42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  20ab46:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
      return false;
  20ab4a:	2000      	movs	r0, #0
  20ab4c:	e632      	b.n	20a7b4 <_ZN3GPS10_parse_gpsEv+0x430>
  20ab4e:	bf00      	nop
  20ab50:	40021000 	.word	0x40021000
  20ab54:	66666667 	.word	0x66666667
  20ab58:	3a83126f 	.word	0x3a83126f
  20ab5c:	10624dd3 	.word	0x10624dd3
  20ab60:	3c23d70a 	.word	0x3c23d70a
      if (_min_elevation != -100 &&
  20ab64:	f994 209f 	ldrsb.w	r2, [r4, #159]	; 0x9f
  20ab68:	429a      	cmp	r2, r3
  20ab6a:	d0e8      	beq.n	20ab3e <_ZN3GPS10_parse_gpsEv+0x7ba>
  20ab6c:	e50f      	b.n	20a58e <_ZN3GPS10_parse_gpsEv+0x20a>
  20ab6e:	bf00      	nop

0020ab70 <_ZN3GPS4readEh>:
{
  20ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  20ab72:	4604      	mov	r4, r0
  20ab74:	460d      	mov	r5, r1
  LED2_L;
  20ab76:	2201      	movs	r2, #1
  20ab78:	2110      	movs	r1, #16
  20ab7a:	4858      	ldr	r0, [pc, #352]	; (20acdc <_ZN3GPS4readEh+0x16c>)
  20ab7c:	f006 f984 	bl	210e88 <HAL_GPIO_WritePin>
    _payload_length += (uint16_t)(data<<8);
  20ab80:	b2aa      	uxth	r2, r5
  20ab82:	0217      	lsls	r7, r2, #8
    _step++;
  20ab84:	2608      	movs	r6, #8
      _step = 0;
  20ab86:	2100      	movs	r1, #0
    _step++;
  20ab88:	2006      	movs	r0, #6
  switch(_step) {
  20ab8a:	f894 3103 	ldrb.w	r3, [r4, #259]	; 0x103
  20ab8e:	2b08      	cmp	r3, #8
  20ab90:	f200 80a0 	bhi.w	20acd4 <_ZN3GPS4readEh+0x164>
  20ab94:	e8df f003 	tbb	[pc, r3]
  20ab98:	251a050a 	.word	0x251a050a
  20ab9c:	88674937 	.word	0x88674937
  20aba0:	91          	.byte	0x91
  20aba1:	00          	.byte	0x00
    if (PREAMBLE2 == data) {
  20aba2:	2d62      	cmp	r5, #98	; 0x62
  20aba4:	d006      	beq.n	20abb4 <_ZN3GPS4readEh+0x44>
    _step = 0;
  20aba6:	2300      	movs	r3, #0
  20aba8:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
    if(PREAMBLE1 == data)
  20abac:	2db5      	cmp	r5, #181	; 0xb5
  20abae:	d006      	beq.n	20abbe <_ZN3GPS4readEh+0x4e>
  bool parsed = false;
  20abb0:	2000      	movs	r0, #0
  20abb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      _step++;
  20abb4:	2302      	movs	r3, #2
  20abb6:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
  bool parsed = false;
  20abba:	2000      	movs	r0, #0
      break;
  20abbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      _step++;
  20abbe:	f894 3103 	ldrb.w	r3, [r4, #259]	; 0x103
  20abc2:	3301      	adds	r3, #1
  20abc4:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
  bool parsed = false;
  20abc8:	2000      	movs	r0, #0
  20abca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _step++;
  20abcc:	2303      	movs	r3, #3
  20abce:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
    _class = data;
  20abd2:	f884 510a 	strb.w	r5, [r4, #266]	; 0x10a
    _ck_b = _ck_a = data;                               // reset the checksum accumulators
  20abd6:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
  20abda:	f884 5102 	strb.w	r5, [r4, #258]	; 0x102
  bool parsed = false;
  20abde:	2000      	movs	r0, #0
    break;
  20abe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _step++;
  20abe2:	2304      	movs	r3, #4
  20abe4:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
    _ck_b += (_ck_a += data);                   // checksum byte
  20abe8:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
  20abec:	442b      	add	r3, r5
  20abee:	b2db      	uxtb	r3, r3
  20abf0:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
  20abf4:	f894 2102 	ldrb.w	r2, [r4, #258]	; 0x102
  20abf8:	4413      	add	r3, r2
  20abfa:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
    _msg_id = data;
  20abfe:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
  bool parsed = false;
  20ac02:	2000      	movs	r0, #0
    break;
  20ac04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _step++;
  20ac06:	2305      	movs	r3, #5
  20ac08:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
    _ck_b += (_ck_a += data);                   // checksum byte
  20ac0c:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
  20ac10:	441d      	add	r5, r3
  20ac12:	b2ed      	uxtb	r5, r5
  20ac14:	f884 5101 	strb.w	r5, [r4, #257]	; 0x101
  20ac18:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
  20ac1c:	441d      	add	r5, r3
  20ac1e:	f884 5102 	strb.w	r5, [r4, #258]	; 0x102
    _payload_length = data;                             // payload length low byte
  20ac22:	f8a4 2106 	strh.w	r2, [r4, #262]	; 0x106
  bool parsed = false;
  20ac26:	2000      	movs	r0, #0
    break;
  20ac28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _step++;
  20ac2a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
    _ck_b += (_ck_a += data);                   // checksum byte
  20ac2e:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
  20ac32:	442b      	add	r3, r5
  20ac34:	b2db      	uxtb	r3, r3
  20ac36:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
  20ac3a:	f894 e102 	ldrb.w	lr, [r4, #258]	; 0x102
  20ac3e:	4473      	add	r3, lr
  20ac40:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
    _payload_length += (uint16_t)(data<<8);
  20ac44:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
  20ac48:	443b      	add	r3, r7
  20ac4a:	b29b      	uxth	r3, r3
  20ac4c:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
    if (_payload_length > sizeof(_buffer)) {
  20ac50:	2b6e      	cmp	r3, #110	; 0x6e
  20ac52:	d904      	bls.n	20ac5e <_ZN3GPS4readEh+0xee>
      _payload_length = 0;
  20ac54:	f8a4 1106 	strh.w	r1, [r4, #262]	; 0x106
      _step = 0;
  20ac58:	f884 1103 	strb.w	r1, [r4, #259]	; 0x103
      goto reset;
  20ac5c:	e795      	b.n	20ab8a <_ZN3GPS4readEh+0x1a>
    _payload_counter = 0;                               // prepare to receive payload
  20ac5e:	2000      	movs	r0, #0
  20ac60:	f8a4 0108 	strh.w	r0, [r4, #264]	; 0x108
    break;
  20ac64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _ck_b += (_ck_a += data);                   // checksum byte
  20ac66:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
  20ac6a:	442b      	add	r3, r5
  20ac6c:	b2db      	uxtb	r3, r3
  20ac6e:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
  20ac72:	f894 2102 	ldrb.w	r2, [r4, #258]	; 0x102
  20ac76:	4413      	add	r3, r2
  20ac78:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
    if (_payload_counter < sizeof(_buffer)) {
  20ac7c:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
  20ac80:	2b6d      	cmp	r3, #109	; 0x6d
  20ac82:	d802      	bhi.n	20ac8a <_ZN3GPS4readEh+0x11a>
      _buffer.bytes[_payload_counter] = data;
  20ac84:	18e2      	adds	r2, r4, r3
  20ac86:	f882 5093 	strb.w	r5, [r2, #147]	; 0x93
    if (++_payload_counter == _payload_length)
  20ac8a:	3301      	adds	r3, #1
  20ac8c:	b29b      	uxth	r3, r3
  20ac8e:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
  20ac92:	f8b4 2106 	ldrh.w	r2, [r4, #262]	; 0x106
  20ac96:	429a      	cmp	r2, r3
  20ac98:	d001      	beq.n	20ac9e <_ZN3GPS4readEh+0x12e>
  bool parsed = false;
  20ac9a:	2000      	movs	r0, #0
  20ac9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      _step++;
  20ac9e:	2307      	movs	r3, #7
  20aca0:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
  bool parsed = false;
  20aca4:	2000      	movs	r0, #0
  20aca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _step++;
  20aca8:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
    if (_ck_a != data) {
  20acac:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
  20acb0:	42ab      	cmp	r3, r5
  20acb2:	d011      	beq.n	20acd8 <_ZN3GPS4readEh+0x168>
      _step = 0;
  20acb4:	f884 1103 	strb.w	r1, [r4, #259]	; 0x103
      goto reset;
  20acb8:	e767      	b.n	20ab8a <_ZN3GPS4readEh+0x1a>
    _step = 0;
  20acba:	2300      	movs	r3, #0
  20acbc:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
    if (_ck_b != data) {
  20acc0:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
  20acc4:	42ab      	cmp	r3, r5
  20acc6:	d001      	beq.n	20accc <_ZN3GPS4readEh+0x15c>
  bool parsed = false;
  20acc8:	2000      	movs	r0, #0
}
  20acca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (_parse_gps()) {
  20accc:	4620      	mov	r0, r4
  20acce:	f7ff fb59 	bl	20a384 <_ZN3GPS10_parse_gpsEv>
  20acd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool parsed = false;
  20acd4:	2000      	movs	r0, #0
  20acd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20acd8:	2000      	movs	r0, #0
  20acda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20acdc:	40021000 	.word	0x40021000

0020ace0 <_ZN3IMUC1Ev>:
 */

#include "imu_basic.h"
#include "flashmemory/flashmemory.h"

IMU::IMU()
  20ace0:	4a2d      	ldr	r2, [pc, #180]	; (20ad98 <_ZN3IMUC1Ev+0xb8>)
  20ace2:	6002      	str	r2, [r0, #0]
  20ace4:	2200      	movs	r2, #0
  20ace6:	6102      	str	r2, [r0, #16]
  20ace8:	60c2      	str	r2, [r0, #12]
  20acea:	6082      	str	r2, [r0, #8]
  20acec:	61c2      	str	r2, [r0, #28]
  20acee:	6182      	str	r2, [r0, #24]
  20acf0:	6142      	str	r2, [r0, #20]
  20acf2:	6282      	str	r2, [r0, #40]	; 0x28
  20acf4:	6242      	str	r2, [r0, #36]	; 0x24
  20acf6:	6202      	str	r2, [r0, #32]
  20acf8:	6342      	str	r2, [r0, #52]	; 0x34
  20acfa:	6302      	str	r2, [r0, #48]	; 0x30
  20acfc:	62c2      	str	r2, [r0, #44]	; 0x2c
  20acfe:	6402      	str	r2, [r0, #64]	; 0x40
  20ad00:	63c2      	str	r2, [r0, #60]	; 0x3c
  20ad02:	6382      	str	r2, [r0, #56]	; 0x38
  20ad04:	64c2      	str	r2, [r0, #76]	; 0x4c
  20ad06:	6482      	str	r2, [r0, #72]	; 0x48
  20ad08:	6442      	str	r2, [r0, #68]	; 0x44
  20ad0a:	6682      	str	r2, [r0, #104]	; 0x68
  20ad0c:	6642      	str	r2, [r0, #100]	; 0x64
  20ad0e:	6602      	str	r2, [r0, #96]	; 0x60
  20ad10:	6742      	str	r2, [r0, #116]	; 0x74
  20ad12:	6702      	str	r2, [r0, #112]	; 0x70
  20ad14:	66c2      	str	r2, [r0, #108]	; 0x6c
  20ad16:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  20ad1a:	67c2      	str	r2, [r0, #124]	; 0x7c
  20ad1c:	6782      	str	r2, [r0, #120]	; 0x78
  20ad1e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  20ad22:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  20ad26:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  20ad2a:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  20ad2e:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
  20ad32:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  20ad36:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
  20ad3a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
  20ad3e:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  20ad42:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  20ad46:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  20ad4a:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
  20ad4e:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
  20ad52:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
  20ad56:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
  20ad5a:	f8c0 20cc 	str.w	r2, [r0, #204]	; 0xcc
  20ad5e:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
  20ad62:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
  20ad66:	f8c0 20d8 	str.w	r2, [r0, #216]	; 0xd8
  20ad6a:	f8c0 20d4 	str.w	r2, [r0, #212]	; 0xd4
  20ad6e:	f8c0 20d0 	str.w	r2, [r0, #208]	; 0xd0
  20ad72:	f8c0 20e8 	str.w	r2, [r0, #232]	; 0xe8
  20ad76:	f8c0 20e4 	str.w	r2, [r0, #228]	; 0xe4
  20ad7a:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
  20ad7e:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
  20ad82:	f8c0 20f0 	str.w	r2, [r0, #240]	; 0xf0
  20ad86:	f8c0 20ec 	str.w	r2, [r0, #236]	; 0xec
  20ad8a:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
  20ad8e:	f8c0 20fc 	str.w	r2, [r0, #252]	; 0xfc
  20ad92:	f8c0 20f8 	str.w	r2, [r0, #248]	; 0xf8
{

}
  20ad96:	4770      	bx	lr
  20ad98:	00216d40 	.word	0x00216d40

0020ad9c <_ZN3IMU4initEv>:

void IMU::init()
{
  20ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }

    // zero the vector
    void zero()
    {
        x = y = z = 0;
  20ada0:	2300      	movs	r3, #0
  20ada2:	61c3      	str	r3, [r0, #28]
  20ada4:	6183      	str	r3, [r0, #24]
  20ada6:	6143      	str	r3, [r0, #20]
  20ada8:	6103      	str	r3, [r0, #16]
  20adaa:	60c3      	str	r3, [r0, #12]
  20adac:	6083      	str	r3, [r0, #8]
  20adae:	6283      	str	r3, [r0, #40]	; 0x28
  20adb0:	6243      	str	r3, [r0, #36]	; 0x24
  20adb2:	6203      	str	r3, [r0, #32]
  20adb4:	6403      	str	r3, [r0, #64]	; 0x40
  20adb6:	63c3      	str	r3, [r0, #60]	; 0x3c
  20adb8:	6383      	str	r3, [r0, #56]	; 0x38
  20adba:	6343      	str	r3, [r0, #52]	; 0x34
  20adbc:	6303      	str	r3, [r0, #48]	; 0x30
  20adbe:	62c3      	str	r3, [r0, #44]	; 0x2c
  20adc0:	64c3      	str	r3, [r0, #76]	; 0x4c
  20adc2:	6483      	str	r3, [r0, #72]	; 0x48
  20adc4:	6443      	str	r3, [r0, #68]	; 0x44
	gyro_.zero();
	mag_.zero();
	acc_v_.zero();
	gyro_v_.zero();
	mag_v_.zero();
	mag_outlier_counter_ = 0;
  20adc6:	2500      	movs	r5, #0
  20adc8:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
	calibrate_gyro_ = CALIBRATING_STEP;
  20adcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  20add0:	6582      	str	r2, [r0, #88]	; 0x58
	calibrate_acc_ = 0;
  20add2:	6545      	str	r5, [r0, #84]	; 0x54
	calibrate_mag_ = 0;
  20add4:	65c5      	str	r5, [r0, #92]	; 0x5c
	mag_filtering_flag_ = false;
  20add6:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
	virtual_frame_ = false;
  20adda:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
  20adde:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  20ade2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  20ade6:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
  20adea:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  20adee:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
  20adf2:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
        T *_v = &x;
  20adf6:	f100 0860 	add.w	r8, r0, #96	; 0x60
	raw_gyro_p_.zero();
	raw_acc_p_.zero();
	for (int i = 0; i < 3; i++) {
		FlashMemory::addValue(&(acc_offset_[i]), sizeof(float));
  20adfa:	2704      	movs	r7, #4
  20adfc:	f100 0478 	add.w	r4, r0, #120	; 0x78
        return _v[i];
  20ae00:	b2ee      	uxtb	r6, r5
  20ae02:	00b6      	lsls	r6, r6, #2
  20ae04:	4639      	mov	r1, r7
  20ae06:	eb08 0006 	add.w	r0, r8, r6
  20ae0a:	f7fc f93f 	bl	20708c <_ZN11FlashMemory8addValueEPvj>
		FlashMemory::addValue(&(mag_offset_[i]), sizeof(float));
  20ae0e:	4639      	mov	r1, r7
  20ae10:	19a0      	adds	r0, r4, r6
  20ae12:	f7fc f93b 	bl	20708c <_ZN11FlashMemory8addValueEPvj>
	for (int i = 0; i < 3; i++) {
  20ae16:	3501      	adds	r5, #1
  20ae18:	2d03      	cmp	r5, #3
  20ae1a:	d1f1      	bne.n	20ae00 <_ZN3IMU4initEv+0x64>
	}
}
  20ae1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0020ae20 <_ZN3IMU9ledOutputEv>:

void IMU::ledOutput()
{
  20ae20:	b508      	push	{r3, lr}
  if(calibrate_acc_ || calibrate_gyro_ || calibrate_mag_) LED0_L;
  20ae22:	6d43      	ldr	r3, [r0, #84]	; 0x54
  20ae24:	b91b      	cbnz	r3, 20ae2e <_ZN3IMU9ledOutputEv+0xe>
  20ae26:	6d83      	ldr	r3, [r0, #88]	; 0x58
  20ae28:	b90b      	cbnz	r3, 20ae2e <_ZN3IMU9ledOutputEv+0xe>
  20ae2a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  20ae2c:	b12b      	cbz	r3, 20ae3a <_ZN3IMU9ledOutputEv+0x1a>
  20ae2e:	2201      	movs	r2, #1
  20ae30:	2104      	movs	r1, #4
  20ae32:	4805      	ldr	r0, [pc, #20]	; (20ae48 <_ZN3IMU9ledOutputEv+0x28>)
  20ae34:	f006 f828 	bl	210e88 <HAL_GPIO_WritePin>
  20ae38:	bd08      	pop	{r3, pc}
  else LED0_H;
  20ae3a:	2200      	movs	r2, #0
  20ae3c:	2104      	movs	r1, #4
  20ae3e:	4802      	ldr	r0, [pc, #8]	; (20ae48 <_ZN3IMU9ledOutputEv+0x28>)
  20ae40:	f006 f822 	bl	210e88 <HAL_GPIO_WritePin>
  20ae44:	bd08      	pop	{r3, pc}
  20ae46:	bf00      	nop
  20ae48:	40021000 	.word	0x40021000

0020ae4c <_ZN3IMU7processEv>:
  ledOutput();
}


void IMU::process (void)
{
  20ae4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  20ae4e:	ed2d 8b02 	vpush	{d8}
  20ae52:	b08b      	sub	sp, #44	; 0x2c
  20ae54:	4604      	mov	r4, r0

  /* gyro part */
  if (calibrate_gyro_ > 0)
  20ae56:	6d83      	ldr	r3, [r0, #88]	; 0x58
  20ae58:	2b00      	cmp	r3, #0
  20ae5a:	dd65      	ble.n	20af28 <_ZN3IMU7processEv+0xdc>
    {
      if (calibrate_gyro_ == CALIBRATING_STEP)
  20ae5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  20ae60:	d057      	beq.n	20af12 <_ZN3IMU7processEv+0xc6>
        gyro_offset_.zero();

      gyro_offset_ += raw_gyro_adc_;
  20ae62:	f104 056c 	add.w	r5, r4, #108	; 0x6c
  20ae66:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
  20ae6a:	4628      	mov	r0, r5
  20ae6c:	f7fe fbba 	bl	2095e4 <_ZN7Vector3IfEpLERKS0_>
      if (calibrate_gyro_ == 1)
  20ae70:	6da3      	ldr	r3, [r4, #88]	; 0x58
  20ae72:	2b01      	cmp	r3, #1
  20ae74:	d052      	beq.n	20af1c <_ZN3IMU7processEv+0xd0>
        {
          gyro_offset_ /= (float)CALIBRATING_STEP;
        }
      calibrate_gyro_--;
  20ae76:	6da3      	ldr	r3, [r4, #88]	; 0x58
  20ae78:	3b01      	subs	r3, #1
  20ae7a:	65a3      	str	r3, [r4, #88]	; 0x58
      raw_gyro_p_   += raw_gyro_;
      gyro_  = (raw_gyro_p_/GYRO_LPF_FACTOR);
    }

  /* acc part */
  if (calibrate_acc_ > 0) {
  20ae7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  20ae7e:	2b00      	cmp	r3, #0
  20ae80:	f340 809d 	ble.w	20afbe <_ZN3IMU7processEv+0x172>
    if (calibrate_acc_ == CALIBRATING_STEP) acc_offset_.zero();
  20ae84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  20ae88:	d07b      	beq.n	20af82 <_ZN3IMU7processEv+0x136>
    acc_offset_ += raw_acc_adc_;
  20ae8a:	f104 01ec 	add.w	r1, r4, #236	; 0xec
  20ae8e:	f104 0060 	add.w	r0, r4, #96	; 0x60
  20ae92:	f7fe fba7 	bl	2095e4 <_ZN7Vector3IfEpLERKS0_>

    if (calibrate_acc_ == 1) {
  20ae96:	6d63      	ldr	r3, [r4, #84]	; 0x54
  20ae98:	2b01      	cmp	r3, #1
  20ae9a:	d077      	beq.n	20af8c <_ZN3IMU7processEv+0x140>
      acc_offset_[0] /= (float)CALIBRATING_STEP;
      acc_offset_[1] /= (float)CALIBRATING_STEP;
      acc_offset_[2] =  acc_offset_[2]/(float)CALIBRATING_STEP - GRAVITY_MSS;
    }
    calibrate_acc_--;
  20ae9c:	3b01      	subs	r3, #1
  20ae9e:	6563      	str	r3, [r4, #84]	; 0x54
      raw_acc_p_    += raw_acc_;
      acc_ = (raw_acc_p_/ACC_LPF_FACTOR);
    }

  /* mag part */
  if (calibrate_mag_ > 0)
  20aea0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  20aea2:	2b00      	cmp	r3, #0
  20aea4:	f340 80e7 	ble.w	20b076 <_ZN3IMU7processEv+0x22a>
    {
      if(calibrate_mag_  == CALIBRATING_MAG_STEP)
  20aea8:	f247 5230 	movw	r2, #30000	; 0x7530
  20aeac:	4293      	cmp	r3, r2
  20aeae:	f000 80b6 	beq.w	20b01e <_ZN3IMU7processEv+0x1d2>
{
  20aeb2:	2200      	movs	r2, #0
        T *_v = &x;
  20aeb4:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
  20aeb8:	f104 06d0 	add.w	r6, r4, #208	; 0xd0
  20aebc:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
        return _v[i];
  20aec0:	b2d3      	uxtb	r3, r2
  20aec2:	009b      	lsls	r3, r3, #2
  20aec4:	18f9      	adds	r1, r7, r3
          mag_max_ = raw_mag_adc_;
        }
      // 30s: you have 30s to turn the multi in all directions
      for (int i = 0; i < 3; i++)
        {
          if (raw_mag_adc_[i] < mag_min_[i]) mag_min_[i] = raw_mag_adc_[i];
  20aec6:	edd1 7a00 	vldr	s15, [r1]
  20aeca:	18f0      	adds	r0, r6, r3
  20aecc:	ed90 7a00 	vldr	s14, [r0]
  20aed0:	eef4 7ac7 	vcmpe.f32	s15, s14
  20aed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  20aed8:	bf48      	it	mi
  20aeda:	edc0 7a00 	vstrmi	s15, [r0]
          if (raw_mag_adc_[i] > mag_max_[i]) mag_max_[i] = raw_mag_adc_[i];
  20aede:	edd1 7a00 	vldr	s15, [r1]
  20aee2:	442b      	add	r3, r5
  20aee4:	ed93 7a00 	vldr	s14, [r3]
  20aee8:	eef4 7ac7 	vcmpe.f32	s15, s14
  20aeec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  20aef0:	bfc8      	it	gt
  20aef2:	edc3 7a00 	vstrgt	s15, [r3]
      for (int i = 0; i < 3; i++)
  20aef6:	3201      	adds	r2, #1
  20aef8:	2a03      	cmp	r2, #3
  20aefa:	d1e1      	bne.n	20aec0 <_ZN3IMU7processEv+0x74>
        }
      // http://www.aichi-mi.com/old_pages/5_2_transistor_gijutu/transistor_gijutu.htm

      if(calibrate_mag_ == 1)
  20aefc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  20aefe:	2b01      	cmp	r3, #1
  20af00:	f000 80a1 	beq.w	20b046 <_ZN3IMU7processEv+0x1fa>
        {
          mag_offset_ = (mag_min_ + mag_max_) / 2;
        }
      calibrate_mag_ --;
  20af04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  20af06:	3b01      	subs	r3, #1
  20af08:	65e3      	str	r3, [r4, #92]	; 0x5c
              mag_ = raw_mag_;
              mag_filtering_flag_  = true;
            }
        }
    }
}
  20af0a:	b00b      	add	sp, #44	; 0x2c
  20af0c:	ecbd 8b02 	vpop	{d8}
  20af10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        x = y = z = 0;
  20af12:	2300      	movs	r3, #0
  20af14:	6743      	str	r3, [r0, #116]	; 0x74
  20af16:	6703      	str	r3, [r0, #112]	; 0x70
  20af18:	66c3      	str	r3, [r0, #108]	; 0x6c
  20af1a:	e7a2      	b.n	20ae62 <_ZN3IMU7processEv+0x16>
          gyro_offset_ /= (float)CALIBRATING_STEP;
  20af1c:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 20b158 <_ZN3IMU7processEv+0x30c>
  20af20:	4628      	mov	r0, r5
  20af22:	f7fe fb31 	bl	209588 <_ZN7Vector3IfEdVEf>
  20af26:	e7a6      	b.n	20ae76 <_ZN3IMU7processEv+0x2a>
      raw_gyro_= raw_gyro_adc_ - gyro_offset_;
  20af28:	f100 016c 	add.w	r1, r0, #108	; 0x6c
  20af2c:	30e0      	adds	r0, #224	; 0xe0
  20af2e:	f7fe fba9 	bl	209684 <_ZNK7Vector3IfEmiERKS0_>
  20af32:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
  20af36:	edc4 0a26 	vstr	s1, [r4, #152]	; 0x98
  20af3a:	ed84 1a27 	vstr	s2, [r4, #156]	; 0x9c
      raw_gyro_p_  -= (raw_gyro_p_/GYRO_LPF_FACTOR);
  20af3e:	f104 05ac 	add.w	r5, r4, #172	; 0xac
  20af42:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
  20af46:	4628      	mov	r0, r5
  20af48:	f7fe fb66 	bl	209618 <_ZNK7Vector3IfEdvEf>
  20af4c:	ed8d 0a01 	vstr	s0, [sp, #4]
  20af50:	edcd 0a02 	vstr	s1, [sp, #8]
  20af54:	ed8d 1a03 	vstr	s2, [sp, #12]
  20af58:	a901      	add	r1, sp, #4
  20af5a:	4628      	mov	r0, r5
  20af5c:	f7fe fb28 	bl	2095b0 <_ZN7Vector3IfEmIERKS0_>
      raw_gyro_p_   += raw_gyro_;
  20af60:	f104 0194 	add.w	r1, r4, #148	; 0x94
  20af64:	4628      	mov	r0, r5
  20af66:	f7fe fb3d 	bl	2095e4 <_ZN7Vector3IfEpLERKS0_>
      gyro_  = (raw_gyro_p_/GYRO_LPF_FACTOR);
  20af6a:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
  20af6e:	4628      	mov	r0, r5
  20af70:	f7fe fb52 	bl	209618 <_ZNK7Vector3IfEdvEf>
  20af74:	ed84 0a02 	vstr	s0, [r4, #8]
  20af78:	edc4 0a03 	vstr	s1, [r4, #12]
  20af7c:	ed84 1a04 	vstr	s2, [r4, #16]
  20af80:	e77c      	b.n	20ae7c <_ZN3IMU7processEv+0x30>
  20af82:	2300      	movs	r3, #0
  20af84:	66a3      	str	r3, [r4, #104]	; 0x68
  20af86:	6663      	str	r3, [r4, #100]	; 0x64
  20af88:	6623      	str	r3, [r4, #96]	; 0x60
  20af8a:	e77e      	b.n	20ae8a <_ZN3IMU7processEv+0x3e>
      acc_offset_[0] /= (float)CALIBRATING_STEP;
  20af8c:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
  20af90:	ed9f 7a71 	vldr	s14, [pc, #452]	; 20b158 <_ZN3IMU7processEv+0x30c>
  20af94:	eec6 7a87 	vdiv.f32	s15, s13, s14
  20af98:	edc4 7a18 	vstr	s15, [r4, #96]	; 0x60
      acc_offset_[1] /= (float)CALIBRATING_STEP;
  20af9c:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
  20afa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
  20afa4:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
      acc_offset_[2] =  acc_offset_[2]/(float)CALIBRATING_STEP - GRAVITY_MSS;
  20afa8:	edd4 6a1a 	vldr	s13, [r4, #104]	; 0x68
  20afac:	eec6 7a87 	vdiv.f32	s15, s13, s14
  20afb0:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 20b15c <_ZN3IMU7processEv+0x310>
  20afb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
  20afb8:	edc4 7a1a 	vstr	s15, [r4, #104]	; 0x68
  20afbc:	e76e      	b.n	20ae9c <_ZN3IMU7processEv+0x50>
      raw_acc_ = raw_acc_adc_ - acc_offset_;
  20afbe:	f104 0160 	add.w	r1, r4, #96	; 0x60
  20afc2:	f104 00ec 	add.w	r0, r4, #236	; 0xec
  20afc6:	f7fe fb5d 	bl	209684 <_ZNK7Vector3IfEmiERKS0_>
  20afca:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
  20afce:	edc4 0a23 	vstr	s1, [r4, #140]	; 0x8c
  20afd2:	ed84 1a24 	vstr	s2, [r4, #144]	; 0x90
      raw_acc_p_    -= (raw_acc_p_/ACC_LPF_FACTOR);
  20afd6:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
  20afda:	ed9f 8a61 	vldr	s16, [pc, #388]	; 20b160 <_ZN3IMU7processEv+0x314>
  20afde:	eeb0 0a48 	vmov.f32	s0, s16
  20afe2:	4628      	mov	r0, r5
  20afe4:	f7fe fb18 	bl	209618 <_ZNK7Vector3IfEdvEf>
  20afe8:	ed8d 0a04 	vstr	s0, [sp, #16]
  20afec:	edcd 0a05 	vstr	s1, [sp, #20]
  20aff0:	ed8d 1a06 	vstr	s2, [sp, #24]
  20aff4:	a904      	add	r1, sp, #16
  20aff6:	4628      	mov	r0, r5
  20aff8:	f7fe fada 	bl	2095b0 <_ZN7Vector3IfEmIERKS0_>
      raw_acc_p_    += raw_acc_;
  20affc:	f104 0188 	add.w	r1, r4, #136	; 0x88
  20b000:	4628      	mov	r0, r5
  20b002:	f7fe faef 	bl	2095e4 <_ZN7Vector3IfEpLERKS0_>
      acc_ = (raw_acc_p_/ACC_LPF_FACTOR);
  20b006:	eeb0 0a48 	vmov.f32	s0, s16
  20b00a:	4628      	mov	r0, r5
  20b00c:	f7fe fb04 	bl	209618 <_ZNK7Vector3IfEdvEf>
  20b010:	ed84 0a05 	vstr	s0, [r4, #20]
  20b014:	edc4 0a06 	vstr	s1, [r4, #24]
  20b018:	ed84 1a07 	vstr	s2, [r4, #28]
  20b01c:	e740      	b.n	20aea0 <_ZN3IMU7processEv+0x54>
  20b01e:	2300      	movs	r3, #0
  20b020:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  20b024:	67e3      	str	r3, [r4, #124]	; 0x7c
  20b026:	67a3      	str	r3, [r4, #120]	; 0x78
          mag_min_ = raw_mag_adc_;
  20b028:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
  20b02c:	f104 03f8 	add.w	r3, r4, #248	; 0xf8
  20b030:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  20b034:	e885 0007 	stmia.w	r5, {r0, r1, r2}
          mag_max_ = raw_mag_adc_;
  20b038:	f104 05c4 	add.w	r5, r4, #196	; 0xc4
  20b03c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  20b040:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20b044:	e735      	b.n	20aeb2 <_ZN3IMU7processEv+0x66>
          mag_offset_ = (mag_min_ + mag_max_) / 2;
  20b046:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
  20b04a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
  20b04e:	f7fe fb03 	bl	209658 <_ZNK7Vector3IfEplERKS0_>
  20b052:	ed8d 0a07 	vstr	s0, [sp, #28]
  20b056:	edcd 0a08 	vstr	s1, [sp, #32]
  20b05a:	ed8d 1a09 	vstr	s2, [sp, #36]	; 0x24
  20b05e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
  20b062:	a807      	add	r0, sp, #28
  20b064:	f7fe fad8 	bl	209618 <_ZNK7Vector3IfEdvEf>
  20b068:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
  20b06c:	edc4 0a1f 	vstr	s1, [r4, #124]	; 0x7c
  20b070:	ed84 1a20 	vstr	s2, [r4, #128]	; 0x80
  20b074:	e746      	b.n	20af04 <_ZN3IMU7processEv+0xb8>
	  raw_mag_ = raw_mag_adc_ - mag_offset_;
  20b076:	f104 0178 	add.w	r1, r4, #120	; 0x78
  20b07a:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
  20b07e:	f7fe fb01 	bl	209684 <_ZNK7Vector3IfEmiERKS0_>
  20b082:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
  20b086:	edc4 0a29 	vstr	s1, [r4, #164]	; 0xa4
  20b08a:	ed84 1a2a 	vstr	s2, [r4, #168]	; 0xa8
      if(mag_filtering_flag_)
  20b08e:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
  20b092:	b3c0      	cbz	r0, 20b106 <_ZN3IMU7processEv+0x2ba>
  20b094:	2200      	movs	r2, #0
  20b096:	4611      	mov	r1, r2
              if(fabs(raw_mag_[i] - mag_[i]) > MAG_GENERAL_THRESH) mag_outlier_flag = true;
  20b098:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
        return _v[i];
  20b09c:	b2d3      	uxtb	r3, r2
  20b09e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  20b0a2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
  20b0a6:	ed93 7a08 	vldr	s14, [r3, #32]
  20b0aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
  20b0ae:	eef0 7ae7 	vabs.f32	s15, s15
  20b0b2:	eef4 7a66 	vcmp.f32	s15, s13
  20b0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  20b0ba:	bfc8      	it	gt
  20b0bc:	4601      	movgt	r1, r0
          for(int i = 0; i < 3; i++)
  20b0be:	3201      	adds	r2, #1
  20b0c0:	2a03      	cmp	r2, #3
  20b0c2:	d1eb      	bne.n	20b09c <_ZN3IMU7processEv+0x250>
          if(!mag_outlier_flag)
  20b0c4:	b149      	cbz	r1, 20b0da <_ZN3IMU7processEv+0x28e>
              if(++mag_outlier_counter_ > MAG_OUTLIER_MAX_COUNT)
  20b0c6:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
  20b0ca:	3301      	adds	r3, #1
  20b0cc:	b29b      	uxth	r3, r3
  20b0ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  20b0d2:	dc0d      	bgt.n	20b0f0 <_ZN3IMU7processEv+0x2a4>
  20b0d4:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
  20b0d8:	e717      	b.n	20af0a <_ZN3IMU7processEv+0xbe>
              mag_ = raw_mag_;
  20b0da:	f104 0320 	add.w	r3, r4, #32
  20b0de:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
  20b0e2:	ca07      	ldmia	r2, {r0, r1, r2}
  20b0e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
              mag_outlier_counter_ = 0;
  20b0e8:	2300      	movs	r3, #0
  20b0ea:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
  20b0ee:	e70c      	b.n	20af0a <_ZN3IMU7processEv+0xbe>
                  mag_outlier_counter_ = 0;
  20b0f0:	2300      	movs	r3, #0
  20b0f2:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
                  mag_ = raw_mag_;
  20b0f6:	f104 0320 	add.w	r3, r4, #32
  20b0fa:	34a0      	adds	r4, #160	; 0xa0
  20b0fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  20b100:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20b104:	e701      	b.n	20af0a <_ZN3IMU7processEv+0xbe>
    bool is_zero(void) const { return (fabsf(x) < FLT_EPSILON) && (fabsf(y) < FLT_EPSILON) && (fabsf(z) < FLT_EPSILON); }
  20b106:	edd4 7a3e 	vldr	s15, [r4, #248]	; 0xf8
  20b10a:	eef0 7ae7 	vabs.f32	s15, s15
  20b10e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 20b164 <_ZN3IMU7processEv+0x318>
  20b112:	eef4 7ac7 	vcmpe.f32	s15, s14
  20b116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  20b11a:	d512      	bpl.n	20b142 <_ZN3IMU7processEv+0x2f6>
  20b11c:	edd4 7a3f 	vldr	s15, [r4, #252]	; 0xfc
  20b120:	eef0 7ae7 	vabs.f32	s15, s15
  20b124:	eef4 7ac7 	vcmpe.f32	s15, s14
  20b128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  20b12c:	d509      	bpl.n	20b142 <_ZN3IMU7processEv+0x2f6>
  20b12e:	edd4 7a40 	vldr	s15, [r4, #256]	; 0x100
  20b132:	eef0 7ae7 	vabs.f32	s15, s15
  20b136:	eef4 7ac7 	vcmpe.f32	s15, s14
  20b13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  20b13e:	f53f aee4 	bmi.w	20af0a <_ZN3IMU7processEv+0xbe>
              mag_ = raw_mag_;
  20b142:	f104 0320 	add.w	r3, r4, #32
  20b146:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
  20b14a:	ca07      	ldmia	r2, {r0, r1, r2}
  20b14c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
              mag_filtering_flag_  = true;
  20b150:	2301      	movs	r3, #1
  20b152:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
  20b156:	e6d8      	b.n	20af0a <_ZN3IMU7processEv+0xbe>
  20b158:	447a0000 	.word	0x447a0000
  20b15c:	411ce80a 	.word	0x411ce80a
  20b160:	42280000 	.word	0x42280000
  20b164:	34000000 	.word	0x34000000

0020b168 <_ZN3IMU6updateEv>:
{
  20b168:	b510      	push	{r4, lr}
  20b16a:	4604      	mov	r4, r0
  updateRawData();
  20b16c:	6803      	ldr	r3, [r0, #0]
  20b16e:	681b      	ldr	r3, [r3, #0]
  20b170:	4798      	blx	r3
	void setUpdate(bool update) {update_ = update;}
  20b172:	2301      	movs	r3, #1
  20b174:	7123      	strb	r3, [r4, #4]
  process();
  20b176:	4620      	mov	r0, r4
  20b178:	f7ff fe68 	bl	20ae4c <_ZN3IMU7processEv>
  ledOutput();
  20b17c:	4620      	mov	r0, r4
  20b17e:	f7ff fe4f 	bl	20ae20 <_ZN3IMU9ledOutputEv>
  20b182:	bd10      	pop	{r4, pc}

0020b184 <_ZN10IMUOnboard13updateRawDataEv>:
    }
  last_mag_time_ = HAL_GetTick();
}

void IMUOnboard::updateRawData()
{
  20b184:	b5f0      	push	{r4, r5, r6, r7, lr}
  20b186:	b085      	sub	sp, #20
  20b188:	4605      	mov	r5, r0
  static int i = 0;
  uint8_t t_data[1];

  t_data[0] = GYRO_ADDRESS | 0x80;
  20b18a:	af04      	add	r7, sp, #16
  20b18c:	23c3      	movs	r3, #195	; 0xc3
  20b18e:	f807 3d04 	strb.w	r3, [r7, #-4]!

  IMU_SPI_CS_L;
  20b192:	4ebc      	ldr	r6, [pc, #752]	; (20b484 <_ZN10IMUOnboard13updateRawDataEv+0x300>)
  20b194:	2200      	movs	r2, #0
  20b196:	2140      	movs	r1, #64	; 0x40
  20b198:	4630      	mov	r0, r6
  20b19a:	f005 fe75 	bl	210e88 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
  20b19e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  20b1a2:	2201      	movs	r2, #1
  20b1a4:	4639      	mov	r1, r7
  20b1a6:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
  20b1aa:	f007 fad9 	bl	212760 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi_, adc_, 6, 1000);
  20b1ae:	4cb6      	ldr	r4, [pc, #728]	; (20b488 <_ZN10IMUOnboard13updateRawDataEv+0x304>)
  20b1b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  20b1b4:	2206      	movs	r2, #6
  20b1b6:	4621      	mov	r1, r4
  20b1b8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
  20b1bc:	f007 fd1e 	bl	212bfc <HAL_SPI_Receive>
  IMU_SPI_CS_H;
  20b1c0:	2201      	movs	r2, #1
  20b1c2:	2140      	movs	r1, #64	; 0x40
  20b1c4:	4630      	mov	r0, r6
  20b1c6:	f005 fe5f 	bl	210e88 <HAL_GPIO_WritePin>

  /* we need add some delay between each sensor reading */
  raw_gyro_adc_[0] = (int16_t)(adc_[0] << 8 | adc_[1]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
  20b1ca:	7822      	ldrb	r2, [r4, #0]
  20b1cc:	7863      	ldrb	r3, [r4, #1]
  20b1ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b1d2:	b21b      	sxth	r3, r3
  20b1d4:	ee07 3a10 	vmov	s14, r3
  20b1d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20b1dc:	ed9f 5aab 	vldr	s10, [pc, #684]	; 20b48c <_ZN10IMUOnboard13updateRawDataEv+0x308>
  20b1e0:	ee27 7a05 	vmul.f32	s14, s14, s10
  20b1e4:	eddf 5aaa 	vldr	s11, [pc, #680]	; 20b490 <_ZN10IMUOnboard13updateRawDataEv+0x30c>
  20b1e8:	eec7 7a25 	vdiv.f32	s15, s14, s11
  20b1ec:	ed9f 6aa9 	vldr	s12, [pc, #676]	; 20b494 <_ZN10IMUOnboard13updateRawDataEv+0x310>
  20b1f0:	ee67 7a86 	vmul.f32	s15, s15, s12
  20b1f4:	eddf 6aa8 	vldr	s13, [pc, #672]	; 20b498 <_ZN10IMUOnboard13updateRawDataEv+0x314>
  20b1f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  20b1fc:	ed85 7a38 	vstr	s14, [r5, #224]	; 0xe0
  raw_gyro_adc_[1] = (int16_t)(adc_[2] << 8 | adc_[3]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
  20b200:	78a2      	ldrb	r2, [r4, #2]
  20b202:	78e3      	ldrb	r3, [r4, #3]
  20b204:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b208:	b21b      	sxth	r3, r3
  20b20a:	ee07 3a10 	vmov	s14, r3
  20b20e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20b212:	ee27 7a05 	vmul.f32	s14, s14, s10
  20b216:	eec7 7a25 	vdiv.f32	s15, s14, s11
  20b21a:	ee67 7a86 	vmul.f32	s15, s15, s12
  20b21e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  20b222:	ed85 7a39 	vstr	s14, [r5, #228]	; 0xe4
  raw_gyro_adc_[2] = (int16_t)(adc_[4] << 8 | adc_[5]) * 2000.0f / 32767.0f * M_PI / 180.0f  ;
  20b226:	7922      	ldrb	r2, [r4, #4]
  20b228:	7963      	ldrb	r3, [r4, #5]
  20b22a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b22e:	b21b      	sxth	r3, r3
  20b230:	ee07 3a90 	vmov	s15, r3
  20b234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  20b238:	ee67 7a85 	vmul.f32	s15, s15, s10
  20b23c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
  20b240:	ee67 7a06 	vmul.f32	s15, s14, s12
  20b244:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  20b248:	ed85 7a3a 	vstr	s14, [r5, #232]	; 0xe8

  t_data[0] = ACC_ADDRESS | 0x80;
  20b24c:	23bb      	movs	r3, #187	; 0xbb
  20b24e:	f88d 300c 	strb.w	r3, [sp, #12]
  IMU_SPI_CS_L;
  20b252:	2200      	movs	r2, #0
  20b254:	2140      	movs	r1, #64	; 0x40
  20b256:	4630      	mov	r0, r6
  20b258:	f005 fe16 	bl	210e88 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
  20b25c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  20b260:	2201      	movs	r2, #1
  20b262:	4639      	mov	r1, r7
  20b264:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
  20b268:	f007 fa7a 	bl	212760 <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi_, adc_, 6, 1000);
  20b26c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  20b270:	2206      	movs	r2, #6
  20b272:	4621      	mov	r1, r4
  20b274:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
  20b278:	f007 fcc0 	bl	212bfc <HAL_SPI_Receive>
  IMU_SPI_CS_H;
  20b27c:	2201      	movs	r2, #1
  20b27e:	2140      	movs	r1, #64	; 0x40
  20b280:	4630      	mov	r0, r6
  20b282:	f005 fe01 	bl	210e88 <HAL_GPIO_WritePin>

  /* we need add some delay between each sensor reading */
  raw_acc_adc_[0] = (int16_t)(adc_[0] << 8 | adc_[1]) / 4096.0f * GRAVITY_MSS;
  20b286:	7822      	ldrb	r2, [r4, #0]
  20b288:	7863      	ldrb	r3, [r4, #1]
  20b28a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b28e:	b21b      	sxth	r3, r3
  20b290:	ee07 3a10 	vmov	s14, r3
  20b294:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20b298:	ed9f 6a80 	vldr	s12, [pc, #512]	; 20b49c <_ZN10IMUOnboard13updateRawDataEv+0x318>
  20b29c:	ee27 7a06 	vmul.f32	s14, s14, s12
  20b2a0:	eddf 6a7f 	vldr	s13, [pc, #508]	; 20b4a0 <_ZN10IMUOnboard13updateRawDataEv+0x31c>
  20b2a4:	ee27 7a26 	vmul.f32	s14, s14, s13
  20b2a8:	ed85 7a3b 	vstr	s14, [r5, #236]	; 0xec
  raw_acc_adc_[1] = (int16_t)(adc_[2] << 8 | adc_[3]) / 4096.0f * GRAVITY_MSS;
  20b2ac:	78a2      	ldrb	r2, [r4, #2]
  20b2ae:	78e3      	ldrb	r3, [r4, #3]
  20b2b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b2b4:	b21b      	sxth	r3, r3
  20b2b6:	ee07 3a10 	vmov	s14, r3
  20b2ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20b2be:	ee27 7a06 	vmul.f32	s14, s14, s12
  20b2c2:	ee27 7a26 	vmul.f32	s14, s14, s13
  20b2c6:	ed85 7a3c 	vstr	s14, [r5, #240]	; 0xf0
  raw_acc_adc_[2] = (int16_t)(adc_[4] << 8 | adc_[5]) / 4096.0f * GRAVITY_MSS;
  20b2ca:	7922      	ldrb	r2, [r4, #4]
  20b2cc:	7963      	ldrb	r3, [r4, #5]
  20b2ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b2d2:	b21b      	sxth	r3, r3
  20b2d4:	ee07 3a90 	vmov	s15, r3
  20b2d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  20b2dc:	ee67 7a86 	vmul.f32	s15, s15, s12
  20b2e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
  20b2e4:	edc5 7a3d 	vstr	s15, [r5, #244]	; 0xf4

  if(use_external_mag_flag_)
  20b2e8:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
  20b2ec:	2b00      	cmp	r3, #0
  20b2ee:	d049      	beq.n	20b384 <_ZN10IMUOnboard13updateRawDataEv+0x200>
    {/* use external mag */
      if(i == EXTERNAL_MAG_PRESCALER)
  20b2f0:	68a3      	ldr	r3, [r4, #8]
  20b2f2:	2b0d      	cmp	r3, #13
  20b2f4:	d003      	beq.n	20b2fe <_ZN10IMUOnboard13updateRawDataEv+0x17a>
          raw_mag_adc_[0] = (int16_t)(adc_[4] << 8 | adc_[5]) * -EXTERNAL_MAG_RATE;
          raw_mag_adc_[1] = (int16_t)(adc_[0] << 8 | adc_[1]) * -EXTERNAL_MAG_RATE;
          raw_mag_adc_[2] = (int16_t)(adc_[2] << 8 | adc_[3]) * -EXTERNAL_MAG_RATE;
        }
      if(i == EXTERNAL_MAG_PRESCALER) i =0;
      else i++;
  20b2f6:	3301      	adds	r3, #1
  20b2f8:	4a63      	ldr	r2, [pc, #396]	; (20b488 <_ZN10IMUOnboard13updateRawDataEv+0x304>)
  20b2fa:	6093      	str	r3, [r2, #8]
  20b2fc:	e049      	b.n	20b392 <_ZN10IMUOnboard13updateRawDataEv+0x20e>
          val[0] = HMC58X3_DATA_REGISTER;
  20b2fe:	aa04      	add	r2, sp, #16
  20b300:	2303      	movs	r3, #3
  20b302:	f802 3d08 	strb.w	r3, [r2, #-8]!
          HAL_I2C_Master_Transmit(hi2c_, EXTERNAL_MAG_REGISTER , val, 1, 100);
  20b306:	2664      	movs	r6, #100	; 0x64
  20b308:	9600      	str	r6, [sp, #0]
  20b30a:	2301      	movs	r3, #1
  20b30c:	213c      	movs	r1, #60	; 0x3c
  20b30e:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
  20b312:	f005 ff4b 	bl	2111ac <HAL_I2C_Master_Transmit>
          HAL_I2C_Master_Receive(hi2c_, EXTERNAL_MAG_REGISTER , adc_, 6, 100);
  20b316:	9600      	str	r6, [sp, #0]
  20b318:	2306      	movs	r3, #6
  20b31a:	4622      	mov	r2, r4
  20b31c:	213c      	movs	r1, #60	; 0x3c
  20b31e:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
  20b322:	f005 ffe5 	bl	2112f0 <HAL_I2C_Master_Receive>
          raw_mag_adc_[0] = (int16_t)(adc_[4] << 8 | adc_[5]) * -EXTERNAL_MAG_RATE;
  20b326:	7922      	ldrb	r2, [r4, #4]
  20b328:	7963      	ldrb	r3, [r4, #5]
  20b32a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b32e:	b21b      	sxth	r3, r3
  20b330:	ee07 3a10 	vmov	s14, r3
  20b334:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20b338:	eddf 6a5a 	vldr	s13, [pc, #360]	; 20b4a4 <_ZN10IMUOnboard13updateRawDataEv+0x320>
  20b33c:	ee27 7a26 	vmul.f32	s14, s14, s13
  20b340:	ed85 7a3e 	vstr	s14, [r5, #248]	; 0xf8
          raw_mag_adc_[1] = (int16_t)(adc_[0] << 8 | adc_[1]) * -EXTERNAL_MAG_RATE;
  20b344:	7822      	ldrb	r2, [r4, #0]
  20b346:	7863      	ldrb	r3, [r4, #1]
  20b348:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b34c:	b21b      	sxth	r3, r3
  20b34e:	ee07 3a10 	vmov	s14, r3
  20b352:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20b356:	ee27 7a26 	vmul.f32	s14, s14, s13
  20b35a:	ed85 7a3f 	vstr	s14, [r5, #252]	; 0xfc
          raw_mag_adc_[2] = (int16_t)(adc_[2] << 8 | adc_[3]) * -EXTERNAL_MAG_RATE;
  20b35e:	78a2      	ldrb	r2, [r4, #2]
  20b360:	78e3      	ldrb	r3, [r4, #3]
  20b362:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b366:	b21b      	sxth	r3, r3
  20b368:	ee07 3a90 	vmov	s15, r3
  20b36c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  20b370:	ee67 7aa6 	vmul.f32	s15, s15, s13
  20b374:	edc5 7a40 	vstr	s15, [r5, #256]	; 0x100
      if(i == EXTERNAL_MAG_PRESCALER) i =0;
  20b378:	68a3      	ldr	r3, [r4, #8]
  20b37a:	2b0d      	cmp	r3, #13
  20b37c:	d1bb      	bne.n	20b2f6 <_ZN10IMUOnboard13updateRawDataEv+0x172>
  20b37e:	2200      	movs	r2, #0
  20b380:	60a2      	str	r2, [r4, #8]
  20b382:	e006      	b.n	20b392 <_ZN10IMUOnboard13updateRawDataEv+0x20e>
    }
  else
    {/* use internal mag */
      if(i == MAG_PRESCALER)
  20b384:	4b40      	ldr	r3, [pc, #256]	; (20b488 <_ZN10IMUOnboard13updateRawDataEv+0x304>)
  20b386:	689b      	ldr	r3, [r3, #8]
  20b388:	2b04      	cmp	r3, #4
  20b38a:	d006      	beq.n	20b39a <_ZN10IMUOnboard13updateRawDataEv+0x216>
          raw_mag_adc_[0] = (int16_t)(adc_[3] << 8 | adc_[2]) * 4912.0f / 32760.0f;
          raw_mag_adc_[1] = (int16_t)(adc_[1] << 8 | adc_[0]) * 4912.0f / 32760.0f;
          raw_mag_adc_[2] = (int16_t)(adc_[5] << 8 | adc_[4]) * 4912.0f / -32760.0f;
        }
      if(i == MAG_PRESCALER) i = 0;
      else i++;
  20b38c:	3301      	adds	r3, #1
  20b38e:	4a3e      	ldr	r2, [pc, #248]	; (20b488 <_ZN10IMUOnboard13updateRawDataEv+0x304>)
  20b390:	6093      	str	r3, [r2, #8]
  20b392:	2301      	movs	r3, #1
  20b394:	712b      	strb	r3, [r5, #4]
    }
  setUpdate(true); //no need?

}
  20b396:	b005      	add	sp, #20
  20b398:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
  20b39a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
  20b39e:	681a      	ldr	r2, [r3, #0]
  20b3a0:	6813      	ldr	r3, [r2, #0]
  20b3a2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
  20b3a6:	6013      	str	r3, [r2, #0]
          hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_64); //128 = 0.8Mhz
  20b3a8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
  20b3ac:	681a      	ldr	r2, [r3, #0]
  20b3ae:	6813      	ldr	r3, [r2, #0]
  20b3b0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
  20b3b4:	6013      	str	r3, [r2, #0]
          t_data[0] = MAG_SPI_ADDRESS | 0x80;
  20b3b6:	ac04      	add	r4, sp, #16
  20b3b8:	23c9      	movs	r3, #201	; 0xc9
  20b3ba:	f804 3d04 	strb.w	r3, [r4, #-4]!
          IMU_SPI_CS_L;
  20b3be:	4e31      	ldr	r6, [pc, #196]	; (20b484 <_ZN10IMUOnboard13updateRawDataEv+0x300>)
  20b3c0:	2200      	movs	r2, #0
  20b3c2:	2140      	movs	r1, #64	; 0x40
  20b3c4:	4630      	mov	r0, r6
  20b3c6:	f005 fd5f 	bl	210e88 <HAL_GPIO_WritePin>
          HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
  20b3ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  20b3ce:	2201      	movs	r2, #1
  20b3d0:	4621      	mov	r1, r4
  20b3d2:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
  20b3d6:	f007 f9c3 	bl	212760 <HAL_SPI_Transmit>
          HAL_SPI_Receive(hspi_, adc_, 7, 1000);
  20b3da:	4c2b      	ldr	r4, [pc, #172]	; (20b488 <_ZN10IMUOnboard13updateRawDataEv+0x304>)
  20b3dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  20b3e0:	2207      	movs	r2, #7
  20b3e2:	4621      	mov	r1, r4
  20b3e4:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
  20b3e8:	f007 fc08 	bl	212bfc <HAL_SPI_Receive>
          IMU_SPI_CS_H;
  20b3ec:	2201      	movs	r2, #1
  20b3ee:	2140      	movs	r1, #64	; 0x40
  20b3f0:	4630      	mov	r0, r6
  20b3f2:	f005 fd49 	bl	210e88 <HAL_GPIO_WritePin>
          hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
  20b3f6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
  20b3fa:	681a      	ldr	r2, [r3, #0]
  20b3fc:	6813      	ldr	r3, [r2, #0]
  20b3fe:	f023 0338 	bic.w	r3, r3, #56	; 0x38
  20b402:	6013      	str	r3, [r2, #0]
          hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
  20b404:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
  20b408:	681a      	ldr	r2, [r3, #0]
  20b40a:	6813      	ldr	r3, [r2, #0]
  20b40c:	f043 0310 	orr.w	r3, r3, #16
  20b410:	6013      	str	r3, [r2, #0]
          raw_mag_adc_[0] = (int16_t)(adc_[3] << 8 | adc_[2]) * 4912.0f / 32760.0f;
  20b412:	78e2      	ldrb	r2, [r4, #3]
  20b414:	78a3      	ldrb	r3, [r4, #2]
  20b416:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b41a:	b21b      	sxth	r3, r3
  20b41c:	ee07 3a10 	vmov	s14, r3
  20b420:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20b424:	eddf 6a20 	vldr	s13, [pc, #128]	; 20b4a8 <_ZN10IMUOnboard13updateRawDataEv+0x324>
  20b428:	ee27 7a26 	vmul.f32	s14, s14, s13
  20b42c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 20b4ac <_ZN10IMUOnboard13updateRawDataEv+0x328>
  20b430:	ee87 6a27 	vdiv.f32	s12, s14, s15
  20b434:	ed85 6a3e 	vstr	s12, [r5, #248]	; 0xf8
          raw_mag_adc_[1] = (int16_t)(adc_[1] << 8 | adc_[0]) * 4912.0f / 32760.0f;
  20b438:	7862      	ldrb	r2, [r4, #1]
  20b43a:	7823      	ldrb	r3, [r4, #0]
  20b43c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b440:	b21b      	sxth	r3, r3
  20b442:	ee07 3a10 	vmov	s14, r3
  20b446:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  20b44a:	ee27 7a26 	vmul.f32	s14, s14, s13
  20b44e:	ee87 6a27 	vdiv.f32	s12, s14, s15
  20b452:	ed85 6a3f 	vstr	s12, [r5, #252]	; 0xfc
          raw_mag_adc_[2] = (int16_t)(adc_[5] << 8 | adc_[4]) * 4912.0f / -32760.0f;
  20b456:	7962      	ldrb	r2, [r4, #5]
  20b458:	7923      	ldrb	r3, [r4, #4]
  20b45a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20b45e:	b21b      	sxth	r3, r3
  20b460:	ee07 3a90 	vmov	s15, r3
  20b464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  20b468:	ee67 7aa6 	vmul.f32	s15, s15, s13
  20b46c:	eddf 6a10 	vldr	s13, [pc, #64]	; 20b4b0 <_ZN10IMUOnboard13updateRawDataEv+0x32c>
  20b470:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  20b474:	ed85 7a40 	vstr	s14, [r5, #256]	; 0x100
      if(i == MAG_PRESCALER) i = 0;
  20b478:	68a3      	ldr	r3, [r4, #8]
  20b47a:	2b04      	cmp	r3, #4
  20b47c:	d186      	bne.n	20b38c <_ZN10IMUOnboard13updateRawDataEv+0x208>
  20b47e:	2200      	movs	r2, #0
  20b480:	60a2      	str	r2, [r4, #8]
  20b482:	e786      	b.n	20b392 <_ZN10IMUOnboard13updateRawDataEv+0x20e>
  20b484:	40020400 	.word	0x40020400
  20b488:	20000438 	.word	0x20000438
  20b48c:	44fa0000 	.word	0x44fa0000
  20b490:	46fffe00 	.word	0x46fffe00
  20b494:	40490fdb 	.word	0x40490fdb
  20b498:	43340000 	.word	0x43340000
  20b49c:	39800000 	.word	0x39800000
  20b4a0:	411ce80a 	.word	0x411ce80a
  20b4a4:	bdbc6a7f 	.word	0xbdbc6a7f
  20b4a8:	45998000 	.word	0x45998000
  20b4ac:	46fff000 	.word	0x46fff000
  20b4b0:	c6fff000 	.word	0xc6fff000

0020b4b4 <_ZN10IMUOnboard8mpuWriteEhh>:
{
  20b4b4:	b530      	push	{r4, r5, lr}
  20b4b6:	b083      	sub	sp, #12
  20b4b8:	4605      	mov	r5, r0
  20b4ba:	f88d 1007 	strb.w	r1, [sp, #7]
  20b4be:	f88d 2006 	strb.w	r2, [sp, #6]
  IMU_SPI_CS_L;
  20b4c2:	4c0f      	ldr	r4, [pc, #60]	; (20b500 <_ZN10IMUOnboard8mpuWriteEhh+0x4c>)
  20b4c4:	2200      	movs	r2, #0
  20b4c6:	2140      	movs	r1, #64	; 0x40
  20b4c8:	4620      	mov	r0, r4
  20b4ca:	f005 fcdd 	bl	210e88 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi_, &address, 1, 1000);
  20b4ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  20b4d2:	2201      	movs	r2, #1
  20b4d4:	f10d 0107 	add.w	r1, sp, #7
  20b4d8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
  20b4dc:	f007 f940 	bl	212760 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(hspi_, &value, 1, 1000);
  20b4e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  20b4e4:	2201      	movs	r2, #1
  20b4e6:	f10d 0106 	add.w	r1, sp, #6
  20b4ea:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
  20b4ee:	f007 f937 	bl	212760 <HAL_SPI_Transmit>
  IMU_SPI_CS_H;
  20b4f2:	2201      	movs	r2, #1
  20b4f4:	2140      	movs	r1, #64	; 0x40
  20b4f6:	4620      	mov	r0, r4
  20b4f8:	f005 fcc6 	bl	210e88 <HAL_GPIO_WritePin>
}
  20b4fc:	b003      	add	sp, #12
  20b4fe:	bd30      	pop	{r4, r5, pc}
  20b500:	40020400 	.word	0x40020400

0020b504 <_ZN10IMUOnboard8gyroInitEv>:
{
  20b504:	b510      	push	{r4, lr}
  20b506:	4604      	mov	r4, r0
  HAL_Delay(100);
  20b508:	2064      	movs	r0, #100	; 0x64
  20b50a:	f004 f9d1 	bl	20f8b0 <HAL_Delay>
  HAL_Delay(10);
  20b50e:	200a      	movs	r0, #10
  20b510:	f004 f9ce 	bl	20f8b0 <HAL_Delay>
  HAL_Delay(1); //very important!, some duration for process the setting
  20b514:	2001      	movs	r0, #1
  20b516:	f004 f9cb 	bl	20f8b0 <HAL_Delay>
  mpuWrite( 0x6A, 0x10);             //disable i2c communication
  20b51a:	2210      	movs	r2, #16
  20b51c:	216a      	movs	r1, #106	; 0x6a
  20b51e:	4620      	mov	r0, r4
  20b520:	f7ff ffc8 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
  HAL_Delay(1); //very importnat! between gyro and acc
  20b524:	2001      	movs	r0, #1
  20b526:	f004 f9c3 	bl	20f8b0 <HAL_Delay>
  mpuWrite( 0x1A, GYRO_DLPF_CFG); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
  20b52a:	2203      	movs	r2, #3
  20b52c:	211a      	movs	r1, #26
  20b52e:	4620      	mov	r0, r4
  20b530:	f7ff ffc0 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
  HAL_Delay(1); //very importnat! between gyro and acc
  20b534:	2001      	movs	r0, #1
  20b536:	f004 f9bb 	bl	20f8b0 <HAL_Delay>
  mpuWrite( 0x1B, 0x18);             //GYRO_CONFIG   -- FS_SEL = 3: Full scale set to 2000 deg/sec
  20b53a:	2218      	movs	r2, #24
  20b53c:	211b      	movs	r1, #27
  20b53e:	4620      	mov	r0, r4
  20b540:	f7ff ffb8 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
  HAL_Delay(10); //very importnat! between gyro and acc
  20b544:	200a      	movs	r0, #10
  20b546:	f004 f9b3 	bl	20f8b0 <HAL_Delay>
  20b54a:	bd10      	pop	{r4, pc}

0020b54c <_ZN10IMUOnboard7accInitEv>:
{
  20b54c:	b510      	push	{r4, lr}
  20b54e:	4604      	mov	r4, r0
  mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
  20b550:	2210      	movs	r2, #16
  20b552:	211c      	movs	r1, #28
  20b554:	f7ff ffae 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
  HAL_Delay(1); 
  20b558:	2001      	movs	r0, #1
  20b55a:	f004 f9a9 	bl	20f8b0 <HAL_Delay>
  mpuWrite( 0x1D, ACC_DLPF_CFG);
  20b55e:	2205      	movs	r2, #5
  20b560:	211d      	movs	r1, #29
  20b562:	4620      	mov	r0, r4
  20b564:	f7ff ffa6 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
  HAL_Delay(10);
  20b568:	200a      	movs	r0, #10
  20b56a:	f004 f9a1 	bl	20f8b0 <HAL_Delay>
  20b56e:	bd10      	pop	{r4, pc}

0020b570 <_ZN10IMUOnboard7magInitEv>:
{
  20b570:	b5f0      	push	{r4, r5, r6, r7, lr}
  20b572:	b085      	sub	sp, #20
  20b574:	4605      	mov	r5, r0
  HAL_Delay(10);
  20b576:	200a      	movs	r0, #10
  20b578:	f004 f99a 	bl	20f8b0 <HAL_Delay>
  val[0] = HMC58X3_R_CONFB;
  20b57c:	2301      	movs	r3, #1
  20b57e:	f88d 300c 	strb.w	r3, [sp, #12]
  val[1] = 0x20;
  20b582:	2320      	movs	r3, #32
  20b584:	f88d 300d 	strb.w	r3, [sp, #13]
  20b588:	240a      	movs	r4, #10
      i2c_status = HAL_I2C_Master_Transmit(hi2c_, EXTERNAL_MAG_REGISTER , val, 2, 100);
  20b58a:	2764      	movs	r7, #100	; 0x64
  20b58c:	2602      	movs	r6, #2
  20b58e:	9700      	str	r7, [sp, #0]
  20b590:	4633      	mov	r3, r6
  20b592:	aa03      	add	r2, sp, #12
  20b594:	213c      	movs	r1, #60	; 0x3c
  20b596:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
  20b59a:	f005 fe07 	bl	2111ac <HAL_I2C_Master_Transmit>
      if(i2c_status == 0) break;
  20b59e:	2800      	cmp	r0, #0
  20b5a0:	d075      	beq.n	20b68e <_ZN10IMUOnboard7magInitEv+0x11e>
      HAL_Delay(10);
  20b5a2:	200a      	movs	r0, #10
  20b5a4:	f004 f984 	bl	20f8b0 <HAL_Delay>
  for(int i = 0; i < EXTERNAL_MAG_DU; i ++)
  20b5a8:	3c01      	subs	r4, #1
  20b5aa:	d1f0      	bne.n	20b58e <_ZN10IMUOnboard7magInitEv+0x1e>
      HAL_Delay(10);
  20b5ac:	200a      	movs	r0, #10
  20b5ae:	f004 f97f 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x6A, 0x20); //USER_CTRL -- DMP_EN=0 ; FIFO_EN=0 ; I2C_MST_EN=1 (I2C master mode) ; I2C_IF_DIS=0 ; FIFO_RESET=0 ; I2C_MST_RESET=0 ; SIG_COND_RESET=0
  20b5b2:	2220      	movs	r2, #32
  20b5b4:	216a      	movs	r1, #106	; 0x6a
  20b5b6:	4628      	mov	r0, r5
  20b5b8:	f7ff ff7c 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(10);
  20b5bc:	200a      	movs	r0, #10
  20b5be:	f004 f977 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x37, 0x00); //INT_PIN_CFG -- INT_LEVEL=0 ; INT_OPEN=0 ; LATCH_INT_EN=0 ; INT_RD_CLEAR=0 ; FSYNC_INT_LEVEL=0 ; FSYNC_INT_EN=0 ; I2C_BYPASS_EN=0 ; CLKOUT_EN=0
  20b5c2:	2200      	movs	r2, #0
  20b5c4:	2137      	movs	r1, #55	; 0x37
  20b5c6:	4628      	mov	r0, r5
  20b5c8:	f7ff ff74 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b5cc:	2001      	movs	r0, #1
  20b5ce:	f004 f96f 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x24, 0x0D); //I2C_MST_CTRL -- MULT_MST_EN=0 ; WAIT_FOR_ES=0 ; SLV_3_FIFO_EN=0 ; I2C_MST_P_NSR=0 ; I2C_MST_CLK=13 (I2C slave speed bus = 400kHz)
  20b5d2:	220d      	movs	r2, #13
  20b5d4:	2124      	movs	r1, #36	; 0x24
  20b5d6:	4628      	mov	r0, r5
  20b5d8:	f7ff ff6c 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b5dc:	2001      	movs	r0, #1
  20b5de:	f004 f967 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x25, MAG_ADDRESS);
  20b5e2:	220c      	movs	r2, #12
  20b5e4:	2125      	movs	r1, #37	; 0x25
  20b5e6:	4628      	mov	r0, r5
  20b5e8:	f7ff ff64 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b5ec:	2001      	movs	r0, #1
  20b5ee:	f004 f95f 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x26, 0x0B);
  20b5f2:	220b      	movs	r2, #11
  20b5f4:	2126      	movs	r1, #38	; 0x26
  20b5f6:	4628      	mov	r0, r5
  20b5f8:	f7ff ff5c 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b5fc:	2001      	movs	r0, #1
  20b5fe:	f004 f957 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x63, 0x01);
  20b602:	2201      	movs	r2, #1
  20b604:	2163      	movs	r1, #99	; 0x63
  20b606:	4628      	mov	r0, r5
  20b608:	f7ff ff54 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b60c:	2001      	movs	r0, #1
  20b60e:	f004 f94f 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x27, 0x81);
  20b612:	2281      	movs	r2, #129	; 0x81
  20b614:	2127      	movs	r1, #39	; 0x27
  20b616:	4628      	mov	r0, r5
  20b618:	f7ff ff4c 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b61c:	2001      	movs	r0, #1
  20b61e:	f004 f947 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x26, 0x0A);
  20b622:	220a      	movs	r2, #10
  20b624:	2126      	movs	r1, #38	; 0x26
  20b626:	4628      	mov	r0, r5
  20b628:	f7ff ff44 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b62c:	2001      	movs	r0, #1
  20b62e:	f004 f93f 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x63, 0x16);
  20b632:	2216      	movs	r2, #22
  20b634:	2163      	movs	r1, #99	; 0x63
  20b636:	4628      	mov	r0, r5
  20b638:	f7ff ff3c 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b63c:	2001      	movs	r0, #1
  20b63e:	f004 f937 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x27, 0x81);
  20b642:	2281      	movs	r2, #129	; 0x81
  20b644:	2127      	movs	r1, #39	; 0x27
  20b646:	4628      	mov	r0, r5
  20b648:	f7ff ff34 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b64c:	2001      	movs	r0, #1
  20b64e:	f004 f92f 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x25, 0x80|MAG_ADDRESS);//I2C_SLV0_ADDR -- I2C_SLV4_RW=1 (read operation) ; I2C_SLV4_ADDR=MAG_ADDRESS
  20b652:	228c      	movs	r2, #140	; 0x8c
  20b654:	2125      	movs	r1, #37	; 0x25
  20b656:	4628      	mov	r0, r5
  20b658:	f7ff ff2c 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b65c:	2001      	movs	r0, #1
  20b65e:	f004 f927 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x26, MAG_DATA_REGISTER);//I2C_SLV0_REG -- 6 data bytes of MAG are stored in 6 registers. First register address is MAG_DATA_REGISTER
  20b662:	2203      	movs	r2, #3
  20b664:	2126      	movs	r1, #38	; 0x26
  20b666:	4628      	mov	r0, r5
  20b668:	f7ff ff24 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b66c:	2001      	movs	r0, #1
  20b66e:	f004 f91f 	bl	20f8b0 <HAL_Delay>
      mpuWrite( 0x27, 0x87);
  20b672:	2287      	movs	r2, #135	; 0x87
  20b674:	2127      	movs	r1, #39	; 0x27
  20b676:	4628      	mov	r0, r5
  20b678:	f7ff ff1c 	bl	20b4b4 <_ZN10IMUOnboard8mpuWriteEhh>
      HAL_Delay(1);
  20b67c:	2001      	movs	r0, #1
  20b67e:	f004 f917 	bl	20f8b0 <HAL_Delay>
  last_mag_time_ = HAL_GetTick();
  20b682:	f004 f90f 	bl	20f8a4 <HAL_GetTick>
  20b686:	4b16      	ldr	r3, [pc, #88]	; (20b6e0 <_ZN10IMUOnboard7magInitEv+0x170>)
  20b688:	60d8      	str	r0, [r3, #12]
}
  20b68a:	b005      	add	sp, #20
  20b68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      use_external_mag_flag_ = true;
  20b68e:	2401      	movs	r4, #1
  20b690:	f885 4110 	strb.w	r4, [r5, #272]	; 0x110
      HAL_Delay(10);
  20b694:	200a      	movs	r0, #10
  20b696:	f004 f90b 	bl	20f8b0 <HAL_Delay>
      val[0] = HMC58X3_R_CONFA;
  20b69a:	2700      	movs	r7, #0
  20b69c:	f88d 700c 	strb.w	r7, [sp, #12]
      val[1] = 0x18;//Configuration Register A  -- 0 00 110 00  num samples: 1 ; output rate: 75Hz ; normal measurement mode
  20b6a0:	2318      	movs	r3, #24
  20b6a2:	f88d 300d 	strb.w	r3, [sp, #13]
      HAL_I2C_Master_Transmit(hi2c_, EXTERNAL_MAG_REGISTER , val, 2, 100);
  20b6a6:	2664      	movs	r6, #100	; 0x64
  20b6a8:	9600      	str	r6, [sp, #0]
  20b6aa:	2302      	movs	r3, #2
  20b6ac:	aa03      	add	r2, sp, #12
  20b6ae:	213c      	movs	r1, #60	; 0x3c
  20b6b0:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
  20b6b4:	f005 fd7a 	bl	2111ac <HAL_I2C_Master_Transmit>
      HAL_Delay(10);
  20b6b8:	200a      	movs	r0, #10
  20b6ba:	f004 f8f9 	bl	20f8b0 <HAL_Delay>
      val[0] = HMC58X3_R_MODE;
  20b6be:	2302      	movs	r3, #2
  20b6c0:	f88d 300c 	strb.w	r3, [sp, #12]
      val[1] =  0x00; //Mode register             -- 000000 00    continuous Conversion Mode
  20b6c4:	f88d 700d 	strb.w	r7, [sp, #13]
      HAL_I2C_Master_Transmit(hi2c_, EXTERNAL_MAG_REGISTER , val, 2, 100);
  20b6c8:	f8d5 0108 	ldr.w	r0, [r5, #264]	; 0x108
  20b6cc:	9600      	str	r6, [sp, #0]
  20b6ce:	aa03      	add	r2, sp, #12
  20b6d0:	213c      	movs	r1, #60	; 0x3c
  20b6d2:	f005 fd6b 	bl	2111ac <HAL_I2C_Master_Transmit>
      HAL_Delay(1);
  20b6d6:	4620      	mov	r0, r4
  20b6d8:	f004 f8ea 	bl	20f8b0 <HAL_Delay>
  20b6dc:	e7d1      	b.n	20b682 <_ZN10IMUOnboard7magInitEv+0x112>
  20b6de:	bf00      	nop
  20b6e0:	20000438 	.word	0x20000438

0020b6e4 <_ZN10IMUOnboard4initEP19__SPI_HandleTypeDefP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>:
{
  20b6e4:	b570      	push	{r4, r5, r6, lr}
  20b6e6:	4604      	mov	r4, r0
  20b6e8:	460e      	mov	r6, r1
  20b6ea:	4615      	mov	r5, r2
  nh_ = nh;
  20b6ec:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  IMU::init();
  20b6f0:	f7ff fb54 	bl	20ad9c <_ZN3IMU4initEv>
  use_external_mag_flag_ = false;
  20b6f4:	2300      	movs	r3, #0
  20b6f6:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
  20b6fa:	f204 1311 	addw	r3, r4, #273	; 0x111
  20b6fe:	4913      	ldr	r1, [pc, #76]	; (20b74c <_ZN10IMUOnboard4initEP19__SPI_HandleTypeDefP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x68>)
  20b700:	f504 708c 	add.w	r0, r4, #280	; 0x118
      dummy_[i] = 0;
  20b704:	2200      	movs	r2, #0
  20b706:	f803 2b01 	strb.w	r2, [r3], #1
      adc_[i] = 0;
  20b70a:	f801 2f01 	strb.w	r2, [r1, #1]!
  for(int i =0; i < SENSOR_DATA_LENGTH; i++)
  20b70e:	4283      	cmp	r3, r0
  20b710:	d1f9      	bne.n	20b706 <_ZN10IMUOnboard4initEP19__SPI_HandleTypeDefP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x22>
  hspi_ = hspi;
  20b712:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
  hi2c_ = hi2c;
  20b716:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
  gyroInit();
  20b71a:	4620      	mov	r0, r4
  20b71c:	f7ff fef2 	bl	20b504 <_ZN10IMUOnboard8gyroInitEv>
  accInit();
  20b720:	4620      	mov	r0, r4
  20b722:	f7ff ff13 	bl	20b54c <_ZN10IMUOnboard7accInitEv>
  magInit();
  20b726:	4620      	mov	r0, r4
  20b728:	f7ff ff22 	bl	20b570 <_ZN10IMUOnboard7magInitEv>
  hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
  20b72c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
  20b730:	681a      	ldr	r2, [r3, #0]
  20b732:	6813      	ldr	r3, [r2, #0]
  20b734:	f023 0338 	bic.w	r3, r3, #56	; 0x38
  20b738:	6013      	str	r3, [r2, #0]
  hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
  20b73a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
  20b73e:	681a      	ldr	r2, [r3, #0]
  20b740:	6813      	ldr	r3, [r2, #0]
  20b742:	f043 0310 	orr.w	r3, r3, #16
  20b746:	6013      	str	r3, [r2, #0]
  20b748:	bd70      	pop	{r4, r5, r6, pc}
  20b74a:	bf00      	nop
  20b74c:	20000437 	.word	0x20000437

0020b750 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:
  virtual void callback(unsigned char* data)
  20b750:	b508      	push	{r3, lr}
      this->data =  ((uint8_t) (*(inbuffer + offset)));
  20b752:	780b      	ldrb	r3, [r1, #0]
  20b754:	7403      	strb	r3, [r0, #16]
    this->cb_(msg);
  20b756:	6943      	ldr	r3, [r0, #20]
  20b758:	300c      	adds	r0, #12
  20b75a:	4798      	blx	r3
  20b75c:	bd08      	pop	{r3, pc}

0020b75e <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  }
  20b75e:	6980      	ldr	r0, [r0, #24]
  20b760:	4770      	bx	lr
	...

0020b764 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  }
  20b764:	4800      	ldr	r0, [pc, #0]	; (20b768 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv+0x4>)
  20b766:	4770      	bx	lr
  20b768:	002173c0 	.word	0x002173c0

0020b76c <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  }
  20b76c:	4800      	ldr	r0, [pc, #0]	; (20b770 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev+0x4>)
  20b76e:	4770      	bx	lr
  20b770:	0021739c 	.word	0x0021739c

0020b774 <_ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E>:
		constexpr uint8_t FLASH_WRITE_CMD = 0x03;
		std::vector<IMU*> imu_;
	}

	void imuConfigCallback(const std_msgs::UInt8& config_msg)
	{
  20b774:	b508      	push	{r3, lr}
		switch(config_msg.data) {
  20b776:	7903      	ldrb	r3, [r0, #4]
  20b778:	2b03      	cmp	r3, #3
  20b77a:	d83e      	bhi.n	20b7fa <_ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x86>
  20b77c:	e8df f003 	tbb	[pc, r3]
  20b780:	39021122 	.word	0x39021122
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  20b784:	4b1d      	ldr	r3, [pc, #116]	; (20b7fc <_ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x88>)
  20b786:	6859      	ldr	r1, [r3, #4]
  20b788:	681b      	ldr	r3, [r3, #0]
  20b78a:	1aca      	subs	r2, r1, r3
	  				imu_[i]->startGyroCalib();
	  				imu_[i]->startAccCalib();
	  			}
	  			break;
	  		case MPU_MAG_CALIB_CMD:
	  			for(unsigned int i = 0; i < imu_.size(); i++) {
  20b78c:	0892      	lsrs	r2, r2, #2
  20b78e:	d007      	beq.n	20b7a0 <_ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x2c>
	void startMagCalib(){calibrate_mag_ = CALIBRATING_MAG_STEP;}
  20b790:	f247 5030 	movw	r0, #30000	; 0x7530
	  				imu_[i]->startMagCalib();
  20b794:	f853 2b04 	ldr.w	r2, [r3], #4
  20b798:	65d0      	str	r0, [r2, #92]	; 0x5c
	  			for(unsigned int i = 0; i < imu_.size(); i++) {
  20b79a:	4299      	cmp	r1, r3
  20b79c:	d1fa      	bne.n	20b794 <_ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x20>
  20b79e:	bd08      	pop	{r3, pc}
  20b7a0:	bd08      	pop	{r3, pc}
  20b7a2:	4b16      	ldr	r3, [pc, #88]	; (20b7fc <_ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x88>)
  20b7a4:	6858      	ldr	r0, [r3, #4]
  20b7a6:	681b      	ldr	r3, [r3, #0]
  20b7a8:	1ac2      	subs	r2, r0, r3
	  			for(unsigned int i = 0; i < imu_.size(); i++) {
  20b7aa:	0892      	lsrs	r2, r2, #2
  20b7ac:	d009      	beq.n	20b7c2 <_ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x4e>
	void startGyroCalib(){calibrate_gyro_ = CALIBRATING_STEP;}
  20b7ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	  				imu_[i]->startGyroCalib();
  20b7b2:	6819      	ldr	r1, [r3, #0]
  20b7b4:	658a      	str	r2, [r1, #88]	; 0x58
	  				imu_[i]->startAccCalib();
  20b7b6:	f853 1b04 	ldr.w	r1, [r3], #4
	void startAccCalib(){calibrate_acc_ = CALIBRATING_STEP;}
  20b7ba:	654a      	str	r2, [r1, #84]	; 0x54
	  			for(unsigned int i = 0; i < imu_.size(); i++) {
  20b7bc:	4298      	cmp	r0, r3
  20b7be:	d1f8      	bne.n	20b7b2 <_ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x3e>
  20b7c0:	bd08      	pop	{r3, pc}
  20b7c2:	bd08      	pop	{r3, pc}
  20b7c4:	4b0d      	ldr	r3, [pc, #52]	; (20b7fc <_ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x88>)
  20b7c6:	6858      	ldr	r0, [r3, #4]
  20b7c8:	6819      	ldr	r1, [r3, #0]
  20b7ca:	1a43      	subs	r3, r0, r1
	  			for(unsigned int i = 0; i < imu_.size(); i++) {
  20b7cc:	089b      	lsrs	r3, r3, #2
  20b7ce:	d00b      	beq.n	20b7e8 <_ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x74>
        x = y = z = 0;
  20b7d0:	2200      	movs	r2, #0
	  				imu_[i]->resetCalib();
  20b7d2:	f851 3b04 	ldr.w	r3, [r1], #4
  20b7d6:	669a      	str	r2, [r3, #104]	; 0x68
  20b7d8:	665a      	str	r2, [r3, #100]	; 0x64
  20b7da:	661a      	str	r2, [r3, #96]	; 0x60
  20b7dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  20b7e0:	67da      	str	r2, [r3, #124]	; 0x7c
  20b7e2:	679a      	str	r2, [r3, #120]	; 0x78
	  			for(unsigned int i = 0; i < imu_.size(); i++) {
  20b7e4:	4288      	cmp	r0, r1
  20b7e6:	d1f4      	bne.n	20b7d2 <_ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x5e>
	  			FlashMemory::erase();
  20b7e8:	f7fb fcda 	bl	2071a0 <_ZN11FlashMemory5eraseEv>
	  			FlashMemory::write();
  20b7ec:	f7fb fcf6 	bl	2071dc <_ZN11FlashMemory5writeEv>
	  			break;
  20b7f0:	bd08      	pop	{r3, pc}
	  			}
	  			break;
	  		case FLASH_WRITE_CMD:
	  			FlashMemory::erase();
  20b7f2:	f7fb fcd5 	bl	2071a0 <_ZN11FlashMemory5eraseEv>
	  			FlashMemory::write();
  20b7f6:	f7fb fcf1 	bl	2071dc <_ZN11FlashMemory5writeEv>
  20b7fa:	bd08      	pop	{r3, pc}
  20b7fc:	20000448 	.word	0x20000448

0020b800 <_ZNSt6vectorIP3IMUSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
  20b800:	b510      	push	{r4, lr}
  20b802:	4604      	mov	r4, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  20b804:	6800      	ldr	r0, [r0, #0]
	if (__p)
  20b806:	b108      	cbz	r0, 20b80c <_ZNSt6vectorIP3IMUSaIS1_EED1Ev+0xc>
      { ::operator delete(__p); }
  20b808:	f008 fc2f 	bl	21406a <_ZdlPv>
		      _M_get_Tp_allocator()); }
  20b80c:	4620      	mov	r0, r4
  20b80e:	bd10      	pop	{r4, pc}

0020b810 <_ZN11IMU_ROS_CMD4initEPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>:
      if (subscribers[i] == 0) // empty slot
  20b810:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
  20b814:	b14b      	cbz	r3, 20b82a <_ZN11IMU_ROS_CMD4initEPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x1a>
  20b816:	f500 721a 	add.w	r2, r0, #616	; 0x268
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20b81a:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  20b81c:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20b820:	b121      	cbz	r1, 20b82c <_ZN11IMU_ROS_CMD4initEPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x1c>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20b822:	3301      	adds	r3, #1
  20b824:	2b14      	cmp	r3, #20
  20b826:	d1f9      	bne.n	20b81c <_ZN11IMU_ROS_CMD4initEPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0xc>
  20b828:	4770      	bx	lr
  20b82a:	2300      	movs	r3, #0
	namespace {
		ros::Subscriber<std_msgs::UInt8> imu_config_sub_("/imu_config_cmd", imuConfigCallback);
		ros::NodeHandle* nh_;
	}

	void init(ros::NodeHandle* nh) {
  20b82c:	b410      	push	{r4}
        subscribers[i] = static_cast<Subscriber_*>(&s);
  20b82e:	f103 019a 	add.w	r1, r3, #154	; 0x9a
  20b832:	4a05      	ldr	r2, [pc, #20]	; (20b848 <_ZN11IMU_ROS_CMD4initEPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE+0x38>)
  20b834:	f102 040c 	add.w	r4, r2, #12
  20b838:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
        s.id_ = i + 100;
  20b83c:	3364      	adds	r3, #100	; 0x64
  20b83e:	6113      	str	r3, [r2, #16]
		nh_ = nh;
		nh_->subscribe< ros::Subscriber<std_msgs::UInt8> >(imu_config_sub_);
	}
  20b840:	f85d 4b04 	ldr.w	r4, [sp], #4
  20b844:	4770      	bx	lr
  20b846:	bf00      	nop
  20b848:	20000448 	.word	0x20000448

0020b84c <_ZN11IMU_ROS_CMD6addImuEP3IMU>:

	void addImu(IMU* imu) {
  20b84c:	b500      	push	{lr}
  20b84e:	b083      	sub	sp, #12
  20b850:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  20b852:	4a09      	ldr	r2, [pc, #36]	; (20b878 <_ZN11IMU_ROS_CMD6addImuEP3IMU+0x2c>)
  20b854:	6853      	ldr	r3, [r2, #4]
  20b856:	6892      	ldr	r2, [r2, #8]
  20b858:	4293      	cmp	r3, r2
  20b85a:	d008      	beq.n	20b86e <_ZN11IMU_ROS_CMD6addImuEP3IMU+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  20b85c:	b103      	cbz	r3, 20b860 <_ZN11IMU_ROS_CMD6addImuEP3IMU+0x14>
  20b85e:	6018      	str	r0, [r3, #0]
	    ++this->_M_impl._M_finish;
  20b860:	4a05      	ldr	r2, [pc, #20]	; (20b878 <_ZN11IMU_ROS_CMD6addImuEP3IMU+0x2c>)
  20b862:	6853      	ldr	r3, [r2, #4]
  20b864:	3304      	adds	r3, #4
  20b866:	6053      	str	r3, [r2, #4]
		imu_.push_back(imu);
	}
  20b868:	b003      	add	sp, #12
  20b86a:	f85d fb04 	ldr.w	pc, [sp], #4
	  _M_emplace_back_aux(__x);
  20b86e:	a901      	add	r1, sp, #4
  20b870:	4801      	ldr	r0, [pc, #4]	; (20b878 <_ZN11IMU_ROS_CMD6addImuEP3IMU+0x2c>)
  20b872:	f7fa fd3f 	bl	2062f4 <_ZNSt6vectorIP3IMUSaIS1_EE19_M_emplace_back_auxIJRKS1_EEEvDpOT_>
  20b876:	e7f7      	b.n	20b868 <_ZN11IMU_ROS_CMD6addImuEP3IMU+0x1c>
  20b878:	20000448 	.word	0x20000448

0020b87c <_GLOBAL__sub_I__ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E>:
}
  20b87c:	b538      	push	{r3, r4, r5, lr}
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
  20b87e:	4c0b      	ldr	r4, [pc, #44]	; (20b8ac <_GLOBAL__sub_I__ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x30>)
  20b880:	2500      	movs	r5, #0
  20b882:	6025      	str	r5, [r4, #0]
  20b884:	6065      	str	r5, [r4, #4]
  20b886:	60a5      	str	r5, [r4, #8]
		std::vector<IMU*> imu_;
  20b888:	4a09      	ldr	r2, [pc, #36]	; (20b8b0 <_GLOBAL__sub_I__ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x34>)
  20b88a:	490a      	ldr	r1, [pc, #40]	; (20b8b4 <_GLOBAL__sub_I__ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x38>)
  20b88c:	4620      	mov	r0, r4
  20b88e:	f008 fbf1 	bl	214074 <__aeabi_atexit>
    endpoint_(endpoint)
  20b892:	4b09      	ldr	r3, [pc, #36]	; (20b8b8 <_GLOBAL__sub_I__ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x3c>)
  20b894:	60e3      	str	r3, [r4, #12]
      data(0)
  20b896:	4b09      	ldr	r3, [pc, #36]	; (20b8bc <_GLOBAL__sub_I__ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x40>)
  20b898:	61a3      	str	r3, [r4, #24]
  20b89a:	7725      	strb	r5, [r4, #28]
  20b89c:	4b08      	ldr	r3, [pc, #32]	; (20b8c0 <_GLOBAL__sub_I__ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x44>)
  20b89e:	6223      	str	r3, [r4, #32]
  20b8a0:	2301      	movs	r3, #1
  20b8a2:	6263      	str	r3, [r4, #36]	; 0x24
    topic_ = topic_name;
  20b8a4:	4b07      	ldr	r3, [pc, #28]	; (20b8c4 <_GLOBAL__sub_I__ZN11IMU_ROS_CMD17imuConfigCallbackERKN8std_msgs5UInt8E+0x48>)
  20b8a6:	6163      	str	r3, [r4, #20]
  20b8a8:	bd38      	pop	{r3, r4, r5, pc}
  20b8aa:	bf00      	nop
  20b8ac:	20000448 	.word	0x20000448
  20b8b0:	20000000 	.word	0x20000000
  20b8b4:	0020b801 	.word	0x0020b801
  20b8b8:	00217c80 	.word	0x00217c80
  20b8bc:	0021738c 	.word	0x0021738c
  20b8c0:	0020b775 	.word	0x0020b775
  20b8c4:	00217c90 	.word	0x00217c90

0020b8c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
  20b8c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 20b900 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  20b8cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
  20b8ce:	e003      	b.n	20b8d8 <LoopCopyDataInit>

0020b8d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
  20b8d0:	4b0c      	ldr	r3, [pc, #48]	; (20b904 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
  20b8d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
  20b8d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
  20b8d6:	3104      	adds	r1, #4

0020b8d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
  20b8d8:	480b      	ldr	r0, [pc, #44]	; (20b908 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
  20b8da:	4b0c      	ldr	r3, [pc, #48]	; (20b90c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
  20b8dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
  20b8de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
  20b8e0:	d3f6      	bcc.n	20b8d0 <CopyDataInit>
  ldr  r2, =_sbss
  20b8e2:	4a0b      	ldr	r2, [pc, #44]	; (20b910 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
  20b8e4:	e002      	b.n	20b8ec <LoopFillZerobss>

0020b8e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
  20b8e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
  20b8e8:	f842 3b04 	str.w	r3, [r2], #4

0020b8ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
  20b8ec:	4b09      	ldr	r3, [pc, #36]	; (20b914 <LoopFillZerobss+0x28>)
  cmp  r2, r3
  20b8ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
  20b8f0:	d3f9      	bcc.n	20b8e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
  20b8f2:	f003 ff81 	bl	20f7f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
  20b8f6:	f00a ff65 	bl	2167c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
  20b8fa:	f002 fe89 	bl	20e610 <main>
  bx  lr    
  20b8fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
  20b900:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
  20b904:	0021974c 	.word	0x0021974c
  ldr  r0, =_sdata
  20b908:	20000000 	.word	0x20000000
  ldr  r3, =_edata
  20b90c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
  20b910:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
  20b914:	20004a8c 	.word	0x20004a8c

0020b918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
  20b918:	e7fe      	b.n	20b918 <ADC_IRQHandler>
	...

0020b91c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
  20b91c:	b570      	push	{r4, r5, r6, lr}
  20b91e:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  20b920:	4c0d      	ldr	r4, [pc, #52]	; (20b958 <MX_ADC1_Init+0x3c>)
  20b922:	4b0e      	ldr	r3, [pc, #56]	; (20b95c <MX_ADC1_Init+0x40>)
  20b924:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  20b926:	2500      	movs	r5, #0
  20b928:	6065      	str	r5, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  20b92a:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
  20b92c:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
  20b92e:	61a5      	str	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  20b930:	6225      	str	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  20b932:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  20b934:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
  20b936:	2601      	movs	r6, #1
  20b938:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
  20b93a:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  20b93c:	6166      	str	r6, [r4, #20]
  HAL_ADC_Init(&hadc1);
  20b93e:	4620      	mov	r0, r4
  20b940:	f003 ffc4 	bl	20f8cc <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_4;
  20b944:	2304      	movs	r3, #4
  20b946:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
  20b948:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  20b94a:	9502      	str	r5, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
  20b94c:	4669      	mov	r1, sp
  20b94e:	4620      	mov	r0, r4
  20b950:	f004 f960 	bl	20fc14 <HAL_ADC_ConfigChannel>

}
  20b954:	b004      	add	sp, #16
  20b956:	bd70      	pop	{r4, r5, r6, pc}
  20b958:	20004478 	.word	0x20004478
  20b95c:	40012000 	.word	0x40012000

0020b960 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
  20b960:	b530      	push	{r4, r5, lr}
  20b962:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc2.Instance = ADC2;
  20b964:	4c0e      	ldr	r4, [pc, #56]	; (20b9a0 <MX_ADC2_Init+0x40>)
  20b966:	4b0f      	ldr	r3, [pc, #60]	; (20b9a4 <MX_ADC2_Init+0x44>)
  20b968:	6023      	str	r3, [r4, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  20b96a:	2300      	movs	r3, #0
  20b96c:	6063      	str	r3, [r4, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  20b96e:	60a3      	str	r3, [r4, #8]
  hadc2.Init.ScanConvMode = DISABLE;
  20b970:	6123      	str	r3, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
  20b972:	61a3      	str	r3, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  20b974:	6223      	str	r3, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  20b976:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  20b978:	60e3      	str	r3, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
  20b97a:	2501      	movs	r5, #1
  20b97c:	61e5      	str	r5, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
  20b97e:	6323      	str	r3, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  20b980:	6165      	str	r5, [r4, #20]
  HAL_ADC_Init(&hadc2);
  20b982:	4620      	mov	r0, r4
  20b984:	f003 ffa2 	bl	20f8cc <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_5;
  20b988:	2305      	movs	r3, #5
  20b98a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
  20b98c:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
  20b98e:	2304      	movs	r3, #4
  20b990:	9302      	str	r3, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc2, &sConfig);
  20b992:	4669      	mov	r1, sp
  20b994:	4620      	mov	r0, r4
  20b996:	f004 f93d 	bl	20fc14 <HAL_ADC_ConfigChannel>

}
  20b99a:	b005      	add	sp, #20
  20b99c:	bd30      	pop	{r4, r5, pc}
  20b99e:	bf00      	nop
  20b9a0:	200044c0 	.word	0x200044c0
  20b9a4:	40012100 	.word	0x40012100

0020b9a8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
  20b9a8:	b570      	push	{r4, r5, r6, lr}
  20b9aa:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc3.Instance = ADC3;
  20b9ac:	4c0d      	ldr	r4, [pc, #52]	; (20b9e4 <MX_ADC3_Init+0x3c>)
  20b9ae:	4b0e      	ldr	r3, [pc, #56]	; (20b9e8 <MX_ADC3_Init+0x40>)
  20b9b0:	6023      	str	r3, [r4, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  20b9b2:	2500      	movs	r5, #0
  20b9b4:	6065      	str	r5, [r4, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  20b9b6:	60a5      	str	r5, [r4, #8]
  hadc3.Init.ScanConvMode = DISABLE;
  20b9b8:	6125      	str	r5, [r4, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
  20b9ba:	61a5      	str	r5, [r4, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  20b9bc:	6225      	str	r5, [r4, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  20b9be:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  20b9c0:	60e5      	str	r5, [r4, #12]
  hadc3.Init.NbrOfConversion = 1;
  20b9c2:	2601      	movs	r6, #1
  20b9c4:	61e6      	str	r6, [r4, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
  20b9c6:	6325      	str	r5, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  20b9c8:	6166      	str	r6, [r4, #20]
  HAL_ADC_Init(&hadc3);
  20b9ca:	4620      	mov	r0, r4
  20b9cc:	f003 ff7e 	bl	20f8cc <HAL_ADC_Init>

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_10;
  20b9d0:	230a      	movs	r3, #10
  20b9d2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
  20b9d4:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  20b9d6:	9502      	str	r5, [sp, #8]
  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
  20b9d8:	4669      	mov	r1, sp
  20b9da:	4620      	mov	r0, r4
  20b9dc:	f004 f91a 	bl	20fc14 <HAL_ADC_ConfigChannel>

}
  20b9e0:	b004      	add	sp, #16
  20b9e2:	bd70      	pop	{r4, r5, r6, pc}
  20b9e4:	20004508 	.word	0x20004508
  20b9e8:	40012200 	.word	0x40012200

0020b9ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  20b9ec:	b500      	push	{lr}
  20b9ee:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
  20b9f0:	6803      	ldr	r3, [r0, #0]
  20b9f2:	4a25      	ldr	r2, [pc, #148]	; (20ba88 <HAL_ADC_MspInit+0x9c>)
  20b9f4:	4293      	cmp	r3, r2
  20b9f6:	d008      	beq.n	20ba0a <HAL_ADC_MspInit+0x1e>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
  20b9f8:	4a24      	ldr	r2, [pc, #144]	; (20ba8c <HAL_ADC_MspInit+0xa0>)
  20b9fa:	4293      	cmp	r3, r2
  20b9fc:	d01a      	beq.n	20ba34 <HAL_ADC_MspInit+0x48>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
  20b9fe:	4a24      	ldr	r2, [pc, #144]	; (20ba90 <HAL_ADC_MspInit+0xa4>)
  20ba00:	4293      	cmp	r3, r2
  20ba02:	d02c      	beq.n	20ba5e <HAL_ADC_MspInit+0x72>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
  20ba04:	b009      	add	sp, #36	; 0x24
  20ba06:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
  20ba0a:	2100      	movs	r1, #0
  20ba0c:	9100      	str	r1, [sp, #0]
  20ba0e:	4b21      	ldr	r3, [pc, #132]	; (20ba94 <HAL_ADC_MspInit+0xa8>)
  20ba10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  20ba12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  20ba16:	645a      	str	r2, [r3, #68]	; 0x44
  20ba18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  20ba1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  20ba1e:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
  20ba20:	2318      	movs	r3, #24
  20ba22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  20ba24:	2303      	movs	r3, #3
  20ba26:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
  20ba28:	9105      	str	r1, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  20ba2a:	a903      	add	r1, sp, #12
  20ba2c:	481a      	ldr	r0, [pc, #104]	; (20ba98 <HAL_ADC_MspInit+0xac>)
  20ba2e:	f005 f93b 	bl	210ca8 <HAL_GPIO_Init>
  20ba32:	e7e7      	b.n	20ba04 <HAL_ADC_MspInit+0x18>
    __HAL_RCC_ADC2_CLK_ENABLE();
  20ba34:	2100      	movs	r1, #0
  20ba36:	9101      	str	r1, [sp, #4]
  20ba38:	4b16      	ldr	r3, [pc, #88]	; (20ba94 <HAL_ADC_MspInit+0xa8>)
  20ba3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  20ba3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  20ba40:	645a      	str	r2, [r3, #68]	; 0x44
  20ba42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  20ba44:	f403 7300 	and.w	r3, r3, #512	; 0x200
  20ba48:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
  20ba4a:	2320      	movs	r3, #32
  20ba4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  20ba4e:	2303      	movs	r3, #3
  20ba50:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
  20ba52:	9105      	str	r1, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  20ba54:	a903      	add	r1, sp, #12
  20ba56:	4810      	ldr	r0, [pc, #64]	; (20ba98 <HAL_ADC_MspInit+0xac>)
  20ba58:	f005 f926 	bl	210ca8 <HAL_GPIO_Init>
  20ba5c:	e7d2      	b.n	20ba04 <HAL_ADC_MspInit+0x18>
    __HAL_RCC_ADC3_CLK_ENABLE();
  20ba5e:	2100      	movs	r1, #0
  20ba60:	9102      	str	r1, [sp, #8]
  20ba62:	4b0c      	ldr	r3, [pc, #48]	; (20ba94 <HAL_ADC_MspInit+0xa8>)
  20ba64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  20ba66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  20ba6a:	645a      	str	r2, [r3, #68]	; 0x44
  20ba6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  20ba6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  20ba72:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
  20ba74:	2301      	movs	r3, #1
  20ba76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  20ba78:	2303      	movs	r3, #3
  20ba7a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
  20ba7c:	9105      	str	r1, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  20ba7e:	a903      	add	r1, sp, #12
  20ba80:	4806      	ldr	r0, [pc, #24]	; (20ba9c <HAL_ADC_MspInit+0xb0>)
  20ba82:	f005 f911 	bl	210ca8 <HAL_GPIO_Init>
}
  20ba86:	e7bd      	b.n	20ba04 <HAL_ADC_MspInit+0x18>
  20ba88:	40012000 	.word	0x40012000
  20ba8c:	40012100 	.word	0x40012100
  20ba90:	40012200 	.word	0x40012200
  20ba94:	40023800 	.word	0x40023800
  20ba98:	40020000 	.word	0x40020000
  20ba9c:	40020800 	.word	0x40020800

0020baa0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
  20baa0:	b508      	push	{r3, lr}

  hcan1.Instance = CAN1;
  20baa2:	480b      	ldr	r0, [pc, #44]	; (20bad0 <MX_CAN1_Init+0x30>)
  20baa4:	4b0b      	ldr	r3, [pc, #44]	; (20bad4 <MX_CAN1_Init+0x34>)
  20baa6:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 6;
  20baa8:	2306      	movs	r3, #6
  20baaa:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  20baac:	2300      	movs	r3, #0
  20baae:	6083      	str	r3, [r0, #8]
  hcan1.Init.SJW = CAN_SJW_1TQ;
  20bab0:	60c3      	str	r3, [r0, #12]
  hcan1.Init.BS1 = CAN_BS1_4TQ;
  20bab2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  20bab6:	6102      	str	r2, [r0, #16]
  hcan1.Init.BS2 = CAN_BS2_4TQ;
  20bab8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
  20babc:	6142      	str	r2, [r0, #20]
  hcan1.Init.TTCM = DISABLE;
  20babe:	6183      	str	r3, [r0, #24]
  hcan1.Init.ABOM = DISABLE;
  20bac0:	61c3      	str	r3, [r0, #28]
  hcan1.Init.AWUM = DISABLE;
  20bac2:	6203      	str	r3, [r0, #32]
  hcan1.Init.NART = DISABLE;
  20bac4:	6243      	str	r3, [r0, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
  20bac6:	6283      	str	r3, [r0, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
  20bac8:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_CAN_Init(&hcan1);
  20baca:	f004 fa03 	bl	20fed4 <HAL_CAN_Init>
  20bace:	bd08      	pop	{r3, pc}
  20bad0:	20004550 	.word	0x20004550
  20bad4:	40006400 	.word	0x40006400

0020bad8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
  20bad8:	6802      	ldr	r2, [r0, #0]
  20bada:	4b15      	ldr	r3, [pc, #84]	; (20bb30 <HAL_CAN_MspInit+0x58>)
  20badc:	429a      	cmp	r2, r3
  20bade:	d000      	beq.n	20bae2 <HAL_CAN_MspInit+0xa>
  20bae0:	4770      	bx	lr
{
  20bae2:	b510      	push	{r4, lr}
  20bae4:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
  20bae6:	2400      	movs	r4, #0
  20bae8:	9400      	str	r4, [sp, #0]
  20baea:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
  20baee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  20baf0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  20baf4:	641a      	str	r2, [r3, #64]	; 0x40
  20baf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  20baf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  20bafc:	9300      	str	r3, [sp, #0]
  
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
  20bafe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  20bb02:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  20bb04:	2302      	movs	r3, #2
  20bb06:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
  20bb08:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  20bb0a:	2303      	movs	r3, #3
  20bb0c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
  20bb0e:	2309      	movs	r3, #9
  20bb10:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  20bb12:	a901      	add	r1, sp, #4
  20bb14:	4807      	ldr	r0, [pc, #28]	; (20bb34 <HAL_CAN_MspInit+0x5c>)
  20bb16:	f005 f8c7 	bl	210ca8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 1);
  20bb1a:	2201      	movs	r2, #1
  20bb1c:	4621      	mov	r1, r4
  20bb1e:	2015      	movs	r0, #21
  20bb20:	f004 fd4e 	bl	2105c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  20bb24:	2015      	movs	r0, #21
  20bb26:	f004 fd79 	bl	21061c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
  20bb2a:	b006      	add	sp, #24
  20bb2c:	bd10      	pop	{r4, pc}
  20bb2e:	bf00      	nop
  20bb30:	40006400 	.word	0x40006400
  20bb34:	40020000 	.word	0x40020000

0020bb38 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  20bb38:	b510      	push	{r4, lr}
  20bb3a:	b082      	sub	sp, #8
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
  20bb3c:	2400      	movs	r4, #0
  20bb3e:	9400      	str	r4, [sp, #0]
  20bb40:	4b11      	ldr	r3, [pc, #68]	; (20bb88 <MX_DMA_Init+0x50>)
  20bb42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bb44:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  20bb48:	631a      	str	r2, [r3, #48]	; 0x30
  20bb4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bb4c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
  20bb50:	9200      	str	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
  20bb52:	9401      	str	r4, [sp, #4]
  20bb54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bb56:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  20bb5a:	631a      	str	r2, [r3, #48]	; 0x30
  20bb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  20bb5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  20bb62:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 1);
  20bb64:	2201      	movs	r2, #1
  20bb66:	4621      	mov	r1, r4
  20bb68:	200c      	movs	r0, #12
  20bb6a:	f004 fd29 	bl	2105c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
  20bb6e:	200c      	movs	r0, #12
  20bb70:	f004 fd54 	bl	21061c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
  20bb74:	4622      	mov	r2, r4
  20bb76:	4621      	mov	r1, r4
  20bb78:	203a      	movs	r0, #58	; 0x3a
  20bb7a:	f004 fd21 	bl	2105c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
  20bb7e:	203a      	movs	r0, #58	; 0x3a
  20bb80:	f004 fd4c 	bl	21061c <HAL_NVIC_EnableIRQ>

}
  20bb84:	b002      	add	sp, #8
  20bb86:	bd10      	pop	{r4, pc}
  20bb88:	40023800 	.word	0x40023800

0020bb8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
  20bb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  20bb90:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  20bb92:	2400      	movs	r4, #0
  20bb94:	9401      	str	r4, [sp, #4]
  20bb96:	4b35      	ldr	r3, [pc, #212]	; (20bc6c <MX_GPIO_Init+0xe0>)
  20bb98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bb9a:	f042 0210 	orr.w	r2, r2, #16
  20bb9e:	631a      	str	r2, [r3, #48]	; 0x30
  20bba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bba2:	f002 0210 	and.w	r2, r2, #16
  20bba6:	9201      	str	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
  20bba8:	9402      	str	r4, [sp, #8]
  20bbaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bbac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  20bbb0:	631a      	str	r2, [r3, #48]	; 0x30
  20bbb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bbb4:	f002 0280 	and.w	r2, r2, #128	; 0x80
  20bbb8:	9202      	str	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
  20bbba:	9403      	str	r4, [sp, #12]
  20bbbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bbbe:	f042 0204 	orr.w	r2, r2, #4
  20bbc2:	631a      	str	r2, [r3, #48]	; 0x30
  20bbc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bbc6:	f002 0204 	and.w	r2, r2, #4
  20bbca:	9203      	str	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  20bbcc:	9404      	str	r4, [sp, #16]
  20bbce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bbd0:	f042 0201 	orr.w	r2, r2, #1
  20bbd4:	631a      	str	r2, [r3, #48]	; 0x30
  20bbd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bbd8:	f002 0201 	and.w	r2, r2, #1
  20bbdc:	9204      	str	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  20bbde:	9405      	str	r4, [sp, #20]
  20bbe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bbe2:	f042 0202 	orr.w	r2, r2, #2
  20bbe6:	631a      	str	r2, [r3, #48]	; 0x30
  20bbe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bbea:	f002 0202 	and.w	r2, r2, #2
  20bbee:	9205      	str	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  20bbf0:	9406      	str	r4, [sp, #24]
  20bbf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  20bbf4:	f042 0208 	orr.w	r2, r2, #8
  20bbf8:	631a      	str	r2, [r3, #48]	; 0x30
  20bbfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  20bbfc:	f003 0308 	and.w	r3, r3, #8
  20bc00:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED0_Pin|LED1_Pin|LED2_Pin|BAROCS_Pin, GPIO_PIN_RESET);
  20bc02:	4e1b      	ldr	r6, [pc, #108]	; (20bc70 <MX_GPIO_Init+0xe4>)
  20bc04:	4622      	mov	r2, r4
  20bc06:	211e      	movs	r1, #30
  20bc08:	4630      	mov	r0, r6
  20bc0a:	f005 f93d 	bl	210e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_Pin|IMUCS_Pin, GPIO_PIN_RESET);
  20bc0e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 20bc74 <MX_GPIO_Init+0xe8>
  20bc12:	4622      	mov	r2, r4
  20bc14:	2141      	movs	r1, #65	; 0x41
  20bc16:	4640      	mov	r0, r8
  20bc18:	f005 f936 	bl	210e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
  20bc1c:	231c      	movs	r3, #28
  20bc1e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  20bc20:	2311      	movs	r3, #17
  20bc22:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  20bc24:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  20bc26:	2501      	movs	r5, #1
  20bc28:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
  20bc2a:	a907      	add	r1, sp, #28
  20bc2c:	4630      	mov	r0, r6
  20bc2e:	f005 f83b 	bl	210ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
  20bc32:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  20bc34:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  20bc36:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  20bc38:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
  20bc3a:	a907      	add	r1, sp, #28
  20bc3c:	4640      	mov	r0, r8
  20bc3e:	f005 f833 	bl	210ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
  20bc42:	2340      	movs	r3, #64	; 0x40
  20bc44:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  20bc46:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  20bc48:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  20bc4a:	2702      	movs	r7, #2
  20bc4c:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
  20bc4e:	a907      	add	r1, sp, #28
  20bc50:	4640      	mov	r0, r8
  20bc52:	f005 f829 	bl	210ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BAROCS_Pin;
  20bc56:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  20bc58:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  20bc5a:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  20bc5c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(BAROCS_GPIO_Port, &GPIO_InitStruct);
  20bc5e:	a907      	add	r1, sp, #28
  20bc60:	4630      	mov	r0, r6
  20bc62:	f005 f821 	bl	210ca8 <HAL_GPIO_Init>

}
  20bc66:	b00c      	add	sp, #48	; 0x30
  20bc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  20bc6c:	40023800 	.word	0x40023800
  20bc70:	40021000 	.word	0x40021000
  20bc74:	40020400 	.word	0x40020400

0020bc78 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
  20bc78:	b538      	push	{r3, r4, r5, lr}

  hi2c1.Instance = I2C1;
  20bc7a:	4c0b      	ldr	r4, [pc, #44]	; (20bca8 <MX_I2C1_Init+0x30>)
  20bc7c:	4b0b      	ldr	r3, [pc, #44]	; (20bcac <MX_I2C1_Init+0x34>)
  20bc7e:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x6000030D;
  20bc80:	4b0b      	ldr	r3, [pc, #44]	; (20bcb0 <MX_I2C1_Init+0x38>)
  20bc82:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
  20bc84:	2500      	movs	r5, #0
  20bc86:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  20bc88:	2301      	movs	r3, #1
  20bc8a:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  20bc8c:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
  20bc8e:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  20bc90:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  20bc92:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  20bc94:	6225      	str	r5, [r4, #32]
  HAL_I2C_Init(&hi2c1);
  20bc96:	4620      	mov	r0, r4
  20bc98:	f005 fa34 	bl	211104 <HAL_I2C_Init>

    /**Configure Analogue filter 
    */
  HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
  20bc9c:	4629      	mov	r1, r5
  20bc9e:	4620      	mov	r0, r4
  20bca0:	f005 fbc9 	bl	211436 <HAL_I2CEx_ConfigAnalogFilter>
  20bca4:	bd38      	pop	{r3, r4, r5, pc}
  20bca6:	bf00      	nop
  20bca8:	20004590 	.word	0x20004590
  20bcac:	40005400 	.word	0x40005400
  20bcb0:	6000030d 	.word	0x6000030d

0020bcb4 <MX_I2C2_Init>:

}
/* I2C2 init function */
void MX_I2C2_Init(void)
{
  20bcb4:	b538      	push	{r3, r4, r5, lr}

  hi2c2.Instance = I2C2;
  20bcb6:	4c0b      	ldr	r4, [pc, #44]	; (20bce4 <MX_I2C2_Init+0x30>)
  20bcb8:	4b0b      	ldr	r3, [pc, #44]	; (20bce8 <MX_I2C2_Init+0x34>)
  20bcba:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x6000030D;
  20bcbc:	4b0b      	ldr	r3, [pc, #44]	; (20bcec <MX_I2C2_Init+0x38>)
  20bcbe:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
  20bcc0:	2500      	movs	r5, #0
  20bcc2:	60a5      	str	r5, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  20bcc4:	2301      	movs	r3, #1
  20bcc6:	60e3      	str	r3, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  20bcc8:	6125      	str	r5, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
  20bcca:	6165      	str	r5, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  20bccc:	61a5      	str	r5, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  20bcce:	61e5      	str	r5, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  20bcd0:	6225      	str	r5, [r4, #32]
  HAL_I2C_Init(&hi2c2);
  20bcd2:	4620      	mov	r0, r4
  20bcd4:	f005 fa16 	bl	211104 <HAL_I2C_Init>

    /**Configure Analogue filter 
    */
  HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
  20bcd8:	4629      	mov	r1, r5
  20bcda:	4620      	mov	r0, r4
  20bcdc:	f005 fbab 	bl	211436 <HAL_I2CEx_ConfigAnalogFilter>
  20bce0:	bd38      	pop	{r3, r4, r5, pc}
  20bce2:	bf00      	nop
  20bce4:	200045cc 	.word	0x200045cc
  20bce8:	40005800 	.word	0x40005800
  20bcec:	6000030d 	.word	0x6000030d

0020bcf0 <HAL_I2C_MspInit>:

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  20bcf0:	b500      	push	{lr}
  20bcf2:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
  20bcf4:	6803      	ldr	r3, [r0, #0]
  20bcf6:	4a1f      	ldr	r2, [pc, #124]	; (20bd74 <HAL_I2C_MspInit+0x84>)
  20bcf8:	4293      	cmp	r3, r2
  20bcfa:	d005      	beq.n	20bd08 <HAL_I2C_MspInit+0x18>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
  20bcfc:	4a1e      	ldr	r2, [pc, #120]	; (20bd78 <HAL_I2C_MspInit+0x88>)
  20bcfe:	4293      	cmp	r3, r2
  20bd00:	d01d      	beq.n	20bd3e <HAL_I2C_MspInit+0x4e>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
  20bd02:	b009      	add	sp, #36	; 0x24
  20bd04:	f85d fb04 	ldr.w	pc, [sp], #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  20bd08:	f44f 7340 	mov.w	r3, #768	; 0x300
  20bd0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  20bd0e:	2312      	movs	r3, #18
  20bd10:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
  20bd12:	2301      	movs	r3, #1
  20bd14:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  20bd16:	2303      	movs	r3, #3
  20bd18:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  20bd1a:	2304      	movs	r3, #4
  20bd1c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  20bd1e:	a903      	add	r1, sp, #12
  20bd20:	4816      	ldr	r0, [pc, #88]	; (20bd7c <HAL_I2C_MspInit+0x8c>)
  20bd22:	f004 ffc1 	bl	210ca8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
  20bd26:	2300      	movs	r3, #0
  20bd28:	9301      	str	r3, [sp, #4]
  20bd2a:	4b15      	ldr	r3, [pc, #84]	; (20bd80 <HAL_I2C_MspInit+0x90>)
  20bd2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  20bd2e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  20bd32:	641a      	str	r2, [r3, #64]	; 0x40
  20bd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  20bd36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  20bd3a:	9301      	str	r3, [sp, #4]
  20bd3c:	e7e1      	b.n	20bd02 <HAL_I2C_MspInit+0x12>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
  20bd3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  20bd42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  20bd44:	2312      	movs	r3, #18
  20bd46:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
  20bd48:	2301      	movs	r3, #1
  20bd4a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  20bd4c:	2303      	movs	r3, #3
  20bd4e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
  20bd50:	2304      	movs	r3, #4
  20bd52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  20bd54:	a903      	add	r1, sp, #12
  20bd56:	4809      	ldr	r0, [pc, #36]	; (20bd7c <HAL_I2C_MspInit+0x8c>)
  20bd58:	f004 ffa6 	bl	210ca8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
  20bd5c:	2300      	movs	r3, #0
  20bd5e:	9302      	str	r3, [sp, #8]
  20bd60:	4b07      	ldr	r3, [pc, #28]	; (20bd80 <HAL_I2C_MspInit+0x90>)
  20bd62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  20bd64:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  20bd68:	641a      	str	r2, [r3, #64]	; 0x40
  20bd6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  20bd6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  20bd70:	9302      	str	r3, [sp, #8]
}
  20bd72:	e7c6      	b.n	20bd02 <HAL_I2C_MspInit+0x12>
  20bd74:	40005400 	.word	0x40005400
  20bd78:	40005800 	.word	0x40005800
  20bd7c:	40020400 	.word	0x40020400
  20bd80:	40023800 	.word	0x40023800

0020bd84 <_ZNK8std_msgs4Time9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
  20bd84:	6843      	ldr	r3, [r0, #4]
  20bd86:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
  20bd88:	6843      	ldr	r3, [r0, #4]
  20bd8a:	0a1b      	lsrs	r3, r3, #8
  20bd8c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
  20bd8e:	88c3      	ldrh	r3, [r0, #6]
  20bd90:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
  20bd92:	79c3      	ldrb	r3, [r0, #7]
  20bd94:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->data.sec);
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
  20bd96:	6883      	ldr	r3, [r0, #8]
  20bd98:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
  20bd9a:	6883      	ldr	r3, [r0, #8]
  20bd9c:	0a1b      	lsrs	r3, r3, #8
  20bd9e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
  20bda0:	8943      	ldrh	r3, [r0, #10]
  20bda2:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
  20bda4:	7ac3      	ldrb	r3, [r0, #11]
  20bda6:	71cb      	strb	r3, [r1, #7]
      offset += sizeof(this->data.nsec);
      return offset;
    }
  20bda8:	2008      	movs	r0, #8
  20bdaa:	4770      	bx	lr

0020bdac <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
  20bdac:	780b      	ldrb	r3, [r1, #0]
  20bdae:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20bdb0:	784a      	ldrb	r2, [r1, #1]
  20bdb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20bdb6:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20bdb8:	788a      	ldrb	r2, [r1, #2]
  20bdba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20bdbe:	6043      	str	r3, [r0, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20bdc0:	78ca      	ldrb	r2, [r1, #3]
  20bdc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20bdc6:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->data.sec);
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
  20bdc8:	790b      	ldrb	r3, [r1, #4]
  20bdca:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20bdcc:	794a      	ldrb	r2, [r1, #5]
  20bdce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20bdd2:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20bdd4:	798a      	ldrb	r2, [r1, #6]
  20bdd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20bdda:	6083      	str	r3, [r0, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20bddc:	79ca      	ldrb	r2, [r1, #7]
  20bdde:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20bde2:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->data.nsec);
     return offset;
    }
  20bde4:	2008      	movs	r0, #8
  20bde6:	4770      	bx	lr

0020bde8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
  20bde8:	4800      	ldr	r0, [pc, #0]	; (20bdec <_ZN8std_msgs4Time7getTypeEv+0x4>)
  20bdea:	4770      	bx	lr
  20bdec:	00218594 	.word	0x00218594

0020bdf0 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
  20bdf0:	4800      	ldr	r0, [pc, #0]	; (20bdf4 <_ZN8std_msgs4Time6getMD5Ev+0x4>)
  20bdf2:	4770      	bx	lr
  20bdf4:	00218570 	.word	0x00218570

0020bdf8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
      offset += sizeof(this->buffer_size);
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
  20bdf8:	b4f0      	push	{r4, r5, r6, r7}
    {
      int offset = 0;
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
  20bdfa:	780b      	ldrb	r3, [r1, #0]
  20bdfc:	8083      	strh	r3, [r0, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20bdfe:	460d      	mov	r5, r1
  20be00:	f815 2f01 	ldrb.w	r2, [r5, #1]!
  20be04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20be08:	8083      	strh	r3, [r0, #4]
  20be0a:	2300      	movs	r3, #0

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
  {
    var = 0;
  20be0c:	461a      	mov	r2, r3
    for (size_t i = 0; i < sizeof(V); i++)
      var |= (arr[i] << (8 * i));
  20be0e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
  20be12:	409c      	lsls	r4, r3
  20be14:	4322      	orrs	r2, r4
  20be16:	3308      	adds	r3, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20be18:	2b20      	cmp	r3, #32
  20be1a:	d1f8      	bne.n	20be0e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x16>
      offset += sizeof(this->topic_id);
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
  20be1c:	1d97      	adds	r7, r2, #6
  20be1e:	2f06      	cmp	r7, #6
  20be20:	d907      	bls.n	20be32 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x3a>
  20be22:	1d4b      	adds	r3, r1, #5
  20be24:	1d55      	adds	r5, r2, #5
  20be26:	440d      	add	r5, r1
          inbuffer[k-1]=inbuffer[k];
  20be28:	785c      	ldrb	r4, [r3, #1]
  20be2a:	f803 4b01 	strb.w	r4, [r3], #1
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
  20be2e:	42ab      	cmp	r3, r5
  20be30:	d1fa      	bne.n	20be28 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x30>
      }
      inbuffer[offset+length_topic_name-1]=0;
  20be32:	1d56      	adds	r6, r2, #5
  20be34:	2300      	movs	r3, #0
  20be36:	558b      	strb	r3, [r1, r6]
      this->topic_name = (char *)(inbuffer + offset-1);
  20be38:	1d4c      	adds	r4, r1, #5
  20be3a:	6084      	str	r4, [r0, #8]
  20be3c:	440e      	add	r6, r1
      offset += length_topic_name;
  20be3e:	461c      	mov	r4, r3
      var |= (arr[i] << (8 * i));
  20be40:	f816 5f01 	ldrb.w	r5, [r6, #1]!
  20be44:	40a5      	lsls	r5, r4
  20be46:	432b      	orrs	r3, r5
  20be48:	3408      	adds	r4, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20be4a:	2c20      	cmp	r4, #32
  20be4c:	d1f8      	bne.n	20be40 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x48>
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
      offset += 4;
  20be4e:	3704      	adds	r7, #4
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
  20be50:	443b      	add	r3, r7
  20be52:	429f      	cmp	r7, r3
  20be54:	d208      	bcs.n	20be68 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x70>
  20be56:	3209      	adds	r2, #9
  20be58:	440a      	add	r2, r1
  20be5a:	463c      	mov	r4, r7
          inbuffer[k-1]=inbuffer[k];
  20be5c:	7855      	ldrb	r5, [r2, #1]
  20be5e:	f802 5b01 	strb.w	r5, [r2], #1
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
  20be62:	3401      	adds	r4, #1
  20be64:	429c      	cmp	r4, r3
  20be66:	d3f9      	bcc.n	20be5c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x64>
      }
      inbuffer[offset+length_message_type-1]=0;
  20be68:	18ce      	adds	r6, r1, r3
  20be6a:	2400      	movs	r4, #0
  20be6c:	f806 4c01 	strb.w	r4, [r6, #-1]
      this->message_type = (char *)(inbuffer + offset-1);
  20be70:	3f01      	subs	r7, #1
  20be72:	440f      	add	r7, r1
  20be74:	60c7      	str	r7, [r0, #12]
      offset += length_message_type;
  20be76:	4622      	mov	r2, r4
      var |= (arr[i] << (8 * i));
  20be78:	f816 5b01 	ldrb.w	r5, [r6], #1
  20be7c:	4095      	lsls	r5, r2
  20be7e:	432c      	orrs	r4, r5
  20be80:	3208      	adds	r2, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20be82:	2a20      	cmp	r2, #32
  20be84:	d1f8      	bne.n	20be78 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x80>
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
      offset += 4;
  20be86:	1d1e      	adds	r6, r3, #4
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
  20be88:	4434      	add	r4, r6
  20be8a:	42a6      	cmp	r6, r4
  20be8c:	d208      	bcs.n	20bea0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xa8>
  20be8e:	3303      	adds	r3, #3
  20be90:	440b      	add	r3, r1
  20be92:	4632      	mov	r2, r6
          inbuffer[k-1]=inbuffer[k];
  20be94:	785d      	ldrb	r5, [r3, #1]
  20be96:	f803 5b01 	strb.w	r5, [r3], #1
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
  20be9a:	3201      	adds	r2, #1
  20be9c:	42a2      	cmp	r2, r4
  20be9e:	d3f9      	bcc.n	20be94 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x9c>
      }
      inbuffer[offset+length_md5sum-1]=0;
  20bea0:	190a      	adds	r2, r1, r4
  20bea2:	2300      	movs	r3, #0
  20bea4:	f802 3c01 	strb.w	r3, [r2, #-1]
      this->md5sum = (char *)(inbuffer + offset-1);
  20bea8:	3e01      	subs	r6, #1
  20beaa:	440e      	add	r6, r1
  20beac:	6106      	str	r6, [r0, #16]
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20beae:	7855      	ldrb	r5, [r2, #1]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20beb0:	7893      	ldrb	r3, [r2, #2]
  20beb2:	041b      	lsls	r3, r3, #16
  20beb4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20beb8:	5d09      	ldrb	r1, [r1, r4]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20beba:	430b      	orrs	r3, r1
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20bebc:	78d2      	ldrb	r2, [r2, #3]
  20bebe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->buffer_size = u_buffer_size.real;
  20bec2:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->buffer_size);
     return offset;
    }
  20bec4:	1d20      	adds	r0, r4, #4
  20bec6:	bcf0      	pop	{r4, r5, r6, r7}
  20bec8:	4770      	bx	lr
	...

0020becc <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
  20becc:	4800      	ldr	r0, [pc, #0]	; (20bed0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x4>)
  20bece:	4770      	bx	lr
  20bed0:	00218394 	.word	0x00218394

0020bed4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
  20bed4:	4800      	ldr	r0, [pc, #0]	; (20bed8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x4>)
  20bed6:	4770      	bx	lr
  20bed8:	00218370 	.word	0x00218370

0020bedc <_ZN14rosserial_msgs3Log11deserializeEPh>:
      memcpy(outbuffer + offset, this->msg, length_msg);
      offset += length_msg;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
  20bedc:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      this->level =  ((uint8_t) (*(inbuffer + offset)));
  20bede:	780b      	ldrb	r3, [r1, #0]
  20bee0:	7103      	strb	r3, [r0, #4]
  20bee2:	460d      	mov	r5, r1
  20bee4:	2300      	movs	r3, #0
    var = 0;
  20bee6:	461c      	mov	r4, r3
      var |= (arr[i] << (8 * i));
  20bee8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
  20beec:	409a      	lsls	r2, r3
  20beee:	4314      	orrs	r4, r2
  20bef0:	3308      	adds	r3, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20bef2:	2b20      	cmp	r3, #32
  20bef4:	d1f8      	bne.n	20bee8 <_ZN14rosserial_msgs3Log11deserializeEPh+0xc>
      offset += sizeof(this->level);
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_msg; ++k){
  20bef6:	1d66      	adds	r6, r4, #5
  20bef8:	2e05      	cmp	r6, #5
  20befa:	d907      	bls.n	20bf0c <_ZN14rosserial_msgs3Log11deserializeEPh+0x30>
  20befc:	1d0b      	adds	r3, r1, #4
  20befe:	1d25      	adds	r5, r4, #4
  20bf00:	440d      	add	r5, r1
          inbuffer[k-1]=inbuffer[k];
  20bf02:	785a      	ldrb	r2, [r3, #1]
  20bf04:	f803 2b01 	strb.w	r2, [r3], #1
      for(unsigned int k= offset; k< offset+length_msg; ++k){
  20bf08:	429d      	cmp	r5, r3
  20bf0a:	d1fa      	bne.n	20bf02 <_ZN14rosserial_msgs3Log11deserializeEPh+0x26>
      }
      inbuffer[offset+length_msg-1]=0;
  20bf0c:	440c      	add	r4, r1
  20bf0e:	2300      	movs	r3, #0
  20bf10:	7123      	strb	r3, [r4, #4]
      this->msg = (char *)(inbuffer + offset-1);
  20bf12:	3104      	adds	r1, #4
  20bf14:	6081      	str	r1, [r0, #8]
      offset += length_msg;
     return offset;
    }
  20bf16:	4630      	mov	r0, r6
  20bf18:	bc70      	pop	{r4, r5, r6}
  20bf1a:	4770      	bx	lr

0020bf1c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
  20bf1c:	4800      	ldr	r0, [pc, #0]	; (20bf20 <_ZN14rosserial_msgs3Log7getTypeEv+0x4>)
  20bf1e:	4770      	bx	lr
  20bf20:	0021835c 	.word	0x0021835c

0020bf24 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
  20bf24:	4800      	ldr	r0, [pc, #0]	; (20bf28 <_ZN14rosserial_msgs3Log6getMD5Ev+0x4>)
  20bf26:	4770      	bx	lr
  20bf28:	00218338 	.word	0x00218338

0020bf2c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
      }
     return offset;
    }

    const char * getType(){ return REQUESTPARAM; };
  20bf2c:	4800      	ldr	r0, [pc, #0]	; (20bf30 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x4>)
  20bf2e:	4770      	bx	lr
  20bf30:	00216ce8 	.word	0x00216ce8

0020bf34 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
  20bf34:	4800      	ldr	r0, [pc, #0]	; (20bf38 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x4>)
  20bf36:	4770      	bx	lr
  20bf38:	00218314 	.word	0x00218314

0020bf3c <_ZN10IMUOnboardD1Ev>:
#define EXTERNAL_MAG_RATE 0.092f // 0.92mG/LSb -> 1G = 10e-4T -> uT = 0.092f

class IMUOnboard : public IMU {
public:
  IMUOnboard():IMU(){}
  ~IMUOnboard(){}
  20bf3c:	4770      	bx	lr

0020bf3e <_ZNK17aerial_robot_msgs3Imu9serializeEPh>:
      mag_data(),
      angles()
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  20bf3e:	b4f0      	push	{r4, r5, r6, r7}
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
  20bf40:	6843      	ldr	r3, [r0, #4]
  20bf42:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
  20bf44:	6843      	ldr	r3, [r0, #4]
  20bf46:	0a1b      	lsrs	r3, r3, #8
  20bf48:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
  20bf4a:	88c3      	ldrh	r3, [r0, #6]
  20bf4c:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
  20bf4e:	79c3      	ldrb	r3, [r0, #7]
  20bf50:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
  20bf52:	6883      	ldr	r3, [r0, #8]
  20bf54:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
  20bf56:	6883      	ldr	r3, [r0, #8]
  20bf58:	0a1b      	lsrs	r3, r3, #8
  20bf5a:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
  20bf5c:	8943      	ldrh	r3, [r0, #10]
  20bf5e:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
  20bf60:	7ac3      	ldrb	r3, [r0, #11]
  20bf62:	71cb      	strb	r3, [r1, #7]
  20bf64:	f100 030c 	add.w	r3, r0, #12
  20bf68:	460c      	mov	r4, r1
  20bf6a:	f100 0718 	add.w	r7, r0, #24
  20bf6e:	460d      	mov	r5, r1
      for( uint32_t i = 0; i < 3; i++){
      union {
        float real;
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.real = this->acc_data[i];
  20bf70:	f853 2b04 	ldr.w	r2, [r3], #4
      *(outbuffer + offset + 0) = (u_acc_datai.base >> (8 * 0)) & 0xFF;
  20bf74:	722a      	strb	r2, [r5, #8]
      *(outbuffer + offset + 1) = (u_acc_datai.base >> (8 * 1)) & 0xFF;
  20bf76:	0a16      	lsrs	r6, r2, #8
  20bf78:	726e      	strb	r6, [r5, #9]
      *(outbuffer + offset + 2) = (u_acc_datai.base >> (8 * 2)) & 0xFF;
  20bf7a:	0c16      	lsrs	r6, r2, #16
  20bf7c:	72ae      	strb	r6, [r5, #10]
      *(outbuffer + offset + 3) = (u_acc_datai.base >> (8 * 3)) & 0xFF;
  20bf7e:	0e12      	lsrs	r2, r2, #24
  20bf80:	72ea      	strb	r2, [r5, #11]
  20bf82:	3504      	adds	r5, #4
      for( uint32_t i = 0; i < 3; i++){
  20bf84:	42bb      	cmp	r3, r7
  20bf86:	d1f3      	bne.n	20bf70 <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0x32>
  20bf88:	f100 0724 	add.w	r7, r0, #36	; 0x24
  20bf8c:	460d      	mov	r5, r1
      for( uint32_t i = 0; i < 3; i++){
      union {
        float real;
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.real = this->gyro_data[i];
  20bf8e:	f853 2b04 	ldr.w	r2, [r3], #4
      *(outbuffer + offset + 0) = (u_gyro_datai.base >> (8 * 0)) & 0xFF;
  20bf92:	752a      	strb	r2, [r5, #20]
      *(outbuffer + offset + 1) = (u_gyro_datai.base >> (8 * 1)) & 0xFF;
  20bf94:	0a16      	lsrs	r6, r2, #8
  20bf96:	756e      	strb	r6, [r5, #21]
      *(outbuffer + offset + 2) = (u_gyro_datai.base >> (8 * 2)) & 0xFF;
  20bf98:	0c16      	lsrs	r6, r2, #16
  20bf9a:	75ae      	strb	r6, [r5, #22]
      *(outbuffer + offset + 3) = (u_gyro_datai.base >> (8 * 3)) & 0xFF;
  20bf9c:	0e12      	lsrs	r2, r2, #24
  20bf9e:	75ea      	strb	r2, [r5, #23]
  20bfa0:	3504      	adds	r5, #4
      for( uint32_t i = 0; i < 3; i++){
  20bfa2:	42bb      	cmp	r3, r7
  20bfa4:	d1f3      	bne.n	20bf8e <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0x50>
  20bfa6:	f100 0630 	add.w	r6, r0, #48	; 0x30
      for( uint32_t i = 0; i < 3; i++){
      union {
        float real;
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.real = this->mag_data[i];
  20bfaa:	f853 2b04 	ldr.w	r2, [r3], #4
      *(outbuffer + offset + 0) = (u_mag_datai.base >> (8 * 0)) & 0xFF;
  20bfae:	f881 2020 	strb.w	r2, [r1, #32]
      *(outbuffer + offset + 1) = (u_mag_datai.base >> (8 * 1)) & 0xFF;
  20bfb2:	0a15      	lsrs	r5, r2, #8
  20bfb4:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
      *(outbuffer + offset + 2) = (u_mag_datai.base >> (8 * 2)) & 0xFF;
  20bfb8:	0c15      	lsrs	r5, r2, #16
  20bfba:	f881 5022 	strb.w	r5, [r1, #34]	; 0x22
      *(outbuffer + offset + 3) = (u_mag_datai.base >> (8 * 3)) & 0xFF;
  20bfbe:	0e12      	lsrs	r2, r2, #24
  20bfc0:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  20bfc4:	3104      	adds	r1, #4
      for( uint32_t i = 0; i < 3; i++){
  20bfc6:	42b3      	cmp	r3, r6
  20bfc8:	d1ef      	bne.n	20bfaa <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0x6c>
  20bfca:	303c      	adds	r0, #60	; 0x3c
      for( uint32_t i = 0; i < 3; i++){
      union {
        float real;
        uint32_t base;
      } u_anglesi;
      u_anglesi.real = this->angles[i];
  20bfcc:	f853 2b04 	ldr.w	r2, [r3], #4
      *(outbuffer + offset + 0) = (u_anglesi.base >> (8 * 0)) & 0xFF;
  20bfd0:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
      *(outbuffer + offset + 1) = (u_anglesi.base >> (8 * 1)) & 0xFF;
  20bfd4:	0a11      	lsrs	r1, r2, #8
  20bfd6:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
      *(outbuffer + offset + 2) = (u_anglesi.base >> (8 * 2)) & 0xFF;
  20bfda:	0c11      	lsrs	r1, r2, #16
  20bfdc:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
      *(outbuffer + offset + 3) = (u_anglesi.base >> (8 * 3)) & 0xFF;
  20bfe0:	0e12      	lsrs	r2, r2, #24
  20bfe2:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
  20bfe6:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < 3; i++){
  20bfe8:	4283      	cmp	r3, r0
  20bfea:	d1ef      	bne.n	20bfcc <_ZNK17aerial_robot_msgs3Imu9serializeEPh+0x8e>
      offset += sizeof(this->angles[i]);
      }
      return offset;
    }
  20bfec:	2038      	movs	r0, #56	; 0x38
  20bfee:	bcf0      	pop	{r4, r5, r6, r7}
  20bff0:	4770      	bx	lr

0020bff2 <_ZN17aerial_robot_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
  20bff2:	b4f0      	push	{r4, r5, r6, r7}
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
  20bff4:	780b      	ldrb	r3, [r1, #0]
  20bff6:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20bff8:	784a      	ldrb	r2, [r1, #1]
  20bffa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20bffe:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c000:	788a      	ldrb	r2, [r1, #2]
  20c002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20c006:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c008:	78ca      	ldrb	r2, [r1, #3]
  20c00a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c00e:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
  20c010:	790b      	ldrb	r3, [r1, #4]
  20c012:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c014:	794a      	ldrb	r2, [r1, #5]
  20c016:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20c01a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c01c:	798a      	ldrb	r2, [r1, #6]
  20c01e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20c022:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c024:	79ca      	ldrb	r2, [r1, #7]
  20c026:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c02a:	6083      	str	r3, [r0, #8]
  20c02c:	460c      	mov	r4, r1
  20c02e:	f100 030c 	add.w	r3, r0, #12
  20c032:	f100 0718 	add.w	r7, r0, #24
  20c036:	460d      	mov	r5, r1
        float real;
        uint32_t base;
      } u_acc_datai;
      u_acc_datai.base = 0;
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c038:	7a6e      	ldrb	r6, [r5, #9]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c03a:	7aaa      	ldrb	r2, [r5, #10]
  20c03c:	0412      	lsls	r2, r2, #16
  20c03e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c042:	7a2e      	ldrb	r6, [r5, #8]
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c044:	4332      	orrs	r2, r6
      u_acc_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c046:	7aee      	ldrb	r6, [r5, #11]
      this->acc_data[i] = u_acc_datai.real;
  20c048:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  20c04c:	f843 2b04 	str.w	r2, [r3], #4
  20c050:	3504      	adds	r5, #4
      for( uint32_t i = 0; i < 3; i++){
  20c052:	42bb      	cmp	r3, r7
  20c054:	d1f0      	bne.n	20c038 <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0x46>
  20c056:	f100 0724 	add.w	r7, r0, #36	; 0x24
  20c05a:	460d      	mov	r5, r1
        float real;
        uint32_t base;
      } u_gyro_datai;
      u_gyro_datai.base = 0;
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c05c:	7d6e      	ldrb	r6, [r5, #21]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c05e:	7daa      	ldrb	r2, [r5, #22]
  20c060:	0412      	lsls	r2, r2, #16
  20c062:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c066:	7d2e      	ldrb	r6, [r5, #20]
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c068:	4332      	orrs	r2, r6
      u_gyro_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c06a:	7dee      	ldrb	r6, [r5, #23]
      this->gyro_data[i] = u_gyro_datai.real;
  20c06c:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
  20c070:	f843 2b04 	str.w	r2, [r3], #4
  20c074:	3504      	adds	r5, #4
      for( uint32_t i = 0; i < 3; i++){
  20c076:	42bb      	cmp	r3, r7
  20c078:	d1f0      	bne.n	20c05c <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0x6a>
  20c07a:	f100 0630 	add.w	r6, r0, #48	; 0x30
        float real;
        uint32_t base;
      } u_mag_datai;
      u_mag_datai.base = 0;
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c07e:	f891 5021 	ldrb.w	r5, [r1, #33]	; 0x21
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c082:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
  20c086:	0412      	lsls	r2, r2, #16
  20c088:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c08c:	f891 5020 	ldrb.w	r5, [r1, #32]
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c090:	432a      	orrs	r2, r5
      u_mag_datai.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c092:	f891 5023 	ldrb.w	r5, [r1, #35]	; 0x23
      this->mag_data[i] = u_mag_datai.real;
  20c096:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  20c09a:	f843 2b04 	str.w	r2, [r3], #4
  20c09e:	3104      	adds	r1, #4
      for( uint32_t i = 0; i < 3; i++){
  20c0a0:	42b3      	cmp	r3, r6
  20c0a2:	d1ec      	bne.n	20c07e <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0x8c>
  20c0a4:	303c      	adds	r0, #60	; 0x3c
        float real;
        uint32_t base;
      } u_anglesi;
      u_anglesi.base = 0;
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c0a6:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c0aa:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
  20c0ae:	0412      	lsls	r2, r2, #16
  20c0b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c0b4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c0b8:	430a      	orrs	r2, r1
      u_anglesi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c0ba:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
      this->angles[i] = u_anglesi.real;
  20c0be:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
  20c0c2:	f843 2b04 	str.w	r2, [r3], #4
  20c0c6:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < 3; i++){
  20c0c8:	4283      	cmp	r3, r0
  20c0ca:	d1ec      	bne.n	20c0a6 <_ZN17aerial_robot_msgs3Imu11deserializeEPh+0xb4>
      offset += sizeof(this->angles[i]);
      }
     return offset;
    }
  20c0cc:	2038      	movs	r0, #56	; 0x38
  20c0ce:	bcf0      	pop	{r4, r5, r6, r7}
  20c0d0:	4770      	bx	lr
	...

0020c0d4 <_ZN17aerial_robot_msgs3Imu7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Imu"; };
  20c0d4:	4800      	ldr	r0, [pc, #0]	; (20c0d8 <_ZN17aerial_robot_msgs3Imu7getTypeEv+0x4>)
  20c0d6:	4770      	bx	lr
  20c0d8:	002184dc 	.word	0x002184dc

0020c0dc <_ZN17aerial_robot_msgs3Imu6getMD5Ev>:
    const char * getMD5(){ return "68b769ca85e5d9c44dbce51dc60e4be7"; };
  20c0dc:	4800      	ldr	r0, [pc, #0]	; (20c0e0 <_ZN17aerial_robot_msgs3Imu6getMD5Ev+0x4>)
  20c0de:	4770      	bx	lr
  20c0e0:	002184b8 	.word	0x002184b8

0020c0e4 <_ZNK17aerial_robot_base11DesireCoord9serializeEPh>:
      union {
        float real;
        uint32_t base;
      } u_roll;
      u_roll.real = this->roll;
      *(outbuffer + offset + 0) = (u_roll.base >> (8 * 0)) & 0xFF;
  20c0e4:	6843      	ldr	r3, [r0, #4]
  20c0e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_roll.base >> (8 * 1)) & 0xFF;
  20c0e8:	0a1a      	lsrs	r2, r3, #8
  20c0ea:	704a      	strb	r2, [r1, #1]
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
  20c0ec:	0c1a      	lsrs	r2, r3, #16
  20c0ee:	708a      	strb	r2, [r1, #2]
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
  20c0f0:	0e1b      	lsrs	r3, r3, #24
  20c0f2:	70cb      	strb	r3, [r1, #3]
      union {
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.real = this->pitch;
      *(outbuffer + offset + 0) = (u_pitch.base >> (8 * 0)) & 0xFF;
  20c0f4:	6883      	ldr	r3, [r0, #8]
  20c0f6:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (u_pitch.base >> (8 * 1)) & 0xFF;
  20c0f8:	0a1a      	lsrs	r2, r3, #8
  20c0fa:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
  20c0fc:	0c1a      	lsrs	r2, r3, #16
  20c0fe:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
  20c100:	0e1b      	lsrs	r3, r3, #24
  20c102:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.real = this->yaw;
      *(outbuffer + offset + 0) = (u_yaw.base >> (8 * 0)) & 0xFF;
  20c104:	68c3      	ldr	r3, [r0, #12]
  20c106:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_yaw.base >> (8 * 1)) & 0xFF;
  20c108:	0a1a      	lsrs	r2, r3, #8
  20c10a:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
  20c10c:	0c1a      	lsrs	r2, r3, #16
  20c10e:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
  20c110:	0e1b      	lsrs	r3, r3, #24
  20c112:	72cb      	strb	r3, [r1, #11]
      offset += sizeof(this->yaw);
      *(outbuffer + offset + 0) = (this->coord_type >> (8 * 0)) & 0xFF;
  20c114:	7c03      	ldrb	r3, [r0, #16]
  20c116:	730b      	strb	r3, [r1, #12]
      offset += sizeof(this->coord_type);
      return offset;
    }
  20c118:	200d      	movs	r0, #13
  20c11a:	4770      	bx	lr

0020c11c <_ZN17aerial_robot_base11DesireCoord11deserializeEPh>:
        float real;
        uint32_t base;
      } u_roll;
      u_roll.base = 0;
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c11c:	784a      	ldrb	r2, [r1, #1]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c11e:	788b      	ldrb	r3, [r1, #2]
  20c120:	041b      	lsls	r3, r3, #16
  20c122:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c126:	780a      	ldrb	r2, [r1, #0]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c128:	4313      	orrs	r3, r2
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c12a:	78ca      	ldrb	r2, [r1, #3]
      this->roll = u_roll.real;
  20c12c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c130:	6043      	str	r3, [r0, #4]
        float real;
        uint32_t base;
      } u_pitch;
      u_pitch.base = 0;
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c132:	794a      	ldrb	r2, [r1, #5]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c134:	798b      	ldrb	r3, [r1, #6]
  20c136:	041b      	lsls	r3, r3, #16
  20c138:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c13c:	790a      	ldrb	r2, [r1, #4]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c13e:	4313      	orrs	r3, r2
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c140:	79ca      	ldrb	r2, [r1, #7]
      this->pitch = u_pitch.real;
  20c142:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c146:	6083      	str	r3, [r0, #8]
        float real;
        uint32_t base;
      } u_yaw;
      u_yaw.base = 0;
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c148:	7a4a      	ldrb	r2, [r1, #9]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c14a:	7a8b      	ldrb	r3, [r1, #10]
  20c14c:	041b      	lsls	r3, r3, #16
  20c14e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c152:	7a0a      	ldrb	r2, [r1, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c154:	4313      	orrs	r3, r2
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c156:	7aca      	ldrb	r2, [r1, #11]
      this->yaw = u_yaw.real;
  20c158:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c15c:	60c3      	str	r3, [r0, #12]
      offset += sizeof(this->yaw);
      this->coord_type =  ((uint8_t) (*(inbuffer + offset)));
  20c15e:	7b0b      	ldrb	r3, [r1, #12]
  20c160:	7403      	strb	r3, [r0, #16]
      offset += sizeof(this->coord_type);
     return offset;
    }
  20c162:	200d      	movs	r0, #13
  20c164:	4770      	bx	lr
	...

0020c168 <_ZN17aerial_robot_base11DesireCoord7getTypeEv>:

    const char * getType(){ return "aerial_robot_base/DesireCoord"; };
  20c168:	4800      	ldr	r0, [pc, #0]	; (20c16c <_ZN17aerial_robot_base11DesireCoord7getTypeEv+0x4>)
  20c16a:	4770      	bx	lr
  20c16c:	002183d4 	.word	0x002183d4

0020c170 <_ZN17aerial_robot_base11DesireCoord6getMD5Ev>:
    const char * getMD5(){ return "6ccf1a68453182818d4a1d0d5013bd0d"; };
  20c170:	4800      	ldr	r0, [pc, #0]	; (20c174 <_ZN17aerial_robot_base11DesireCoord6getMD5Ev+0x4>)
  20c172:	4770      	bx	lr
  20c174:	002183b0 	.word	0x002183b0

0020c178 <_ZN8std_msgs6Header11deserializeEPh>:
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
      offset += length_frame_id;
      return offset;
    }

    virtual int deserialize(unsigned char *inbuffer)
  20c178:	b470      	push	{r4, r5, r6}
    {
      int offset = 0;
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
  20c17a:	780b      	ldrb	r3, [r1, #0]
  20c17c:	6043      	str	r3, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c17e:	784a      	ldrb	r2, [r1, #1]
  20c180:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20c184:	6043      	str	r3, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c186:	788a      	ldrb	r2, [r1, #2]
  20c188:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20c18c:	6043      	str	r3, [r0, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c18e:	78ca      	ldrb	r2, [r1, #3]
  20c190:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c194:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->seq);
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
  20c196:	790b      	ldrb	r3, [r1, #4]
  20c198:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c19a:	794a      	ldrb	r2, [r1, #5]
  20c19c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20c1a0:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c1a2:	798a      	ldrb	r2, [r1, #6]
  20c1a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20c1a8:	6083      	str	r3, [r0, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c1aa:	79ca      	ldrb	r2, [r1, #7]
  20c1ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c1b0:	6083      	str	r3, [r0, #8]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
  20c1b2:	7a0b      	ldrb	r3, [r1, #8]
  20c1b4:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c1b6:	7a4a      	ldrb	r2, [r1, #9]
  20c1b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20c1bc:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c1be:	7a8a      	ldrb	r2, [r1, #10]
  20c1c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20c1c4:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c1c6:	460d      	mov	r5, r1
  20c1c8:	f815 2f0b 	ldrb.w	r2, [r5, #11]!
  20c1cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c1d0:	60c3      	str	r3, [r0, #12]
  20c1d2:	2300      	movs	r3, #0
    var = 0;
  20c1d4:	461c      	mov	r4, r3
      var |= (arr[i] << (8 * i));
  20c1d6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
  20c1da:	409a      	lsls	r2, r3
  20c1dc:	4314      	orrs	r4, r2
  20c1de:	3308      	adds	r3, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20c1e0:	2b20      	cmp	r3, #32
  20c1e2:	d1f8      	bne.n	20c1d6 <_ZN8std_msgs6Header11deserializeEPh+0x5e>
      offset += sizeof(this->stamp.nsec);
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
      offset += 4;
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
  20c1e4:	f104 0610 	add.w	r6, r4, #16
  20c1e8:	2e10      	cmp	r6, #16
  20c1ea:	d909      	bls.n	20c200 <_ZN8std_msgs6Header11deserializeEPh+0x88>
  20c1ec:	f101 030f 	add.w	r3, r1, #15
  20c1f0:	f104 050f 	add.w	r5, r4, #15
  20c1f4:	440d      	add	r5, r1
          inbuffer[k-1]=inbuffer[k];
  20c1f6:	785a      	ldrb	r2, [r3, #1]
  20c1f8:	f803 2b01 	strb.w	r2, [r3], #1
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
  20c1fc:	429d      	cmp	r5, r3
  20c1fe:	d1fa      	bne.n	20c1f6 <_ZN8std_msgs6Header11deserializeEPh+0x7e>
      }
      inbuffer[offset+length_frame_id-1]=0;
  20c200:	440c      	add	r4, r1
  20c202:	2300      	movs	r3, #0
  20c204:	73e3      	strb	r3, [r4, #15]
      this->frame_id = (char *)(inbuffer + offset-1);
  20c206:	310f      	adds	r1, #15
  20c208:	6101      	str	r1, [r0, #16]
      offset += length_frame_id;
     return offset;
    }
  20c20a:	4630      	mov	r0, r6
  20c20c:	bc70      	pop	{r4, r5, r6}
  20c20e:	4770      	bx	lr

0020c210 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
  20c210:	4800      	ldr	r0, [pc, #0]	; (20c214 <_ZN8std_msgs6Header7getTypeEv+0x4>)
  20c212:	4770      	bx	lr
  20c214:	002185c8 	.word	0x002185c8

0020c218 <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
  20c218:	4800      	ldr	r0, [pc, #0]	; (20c21c <_ZN8std_msgs6Header6getMD5Ev+0x4>)
  20c21a:	4770      	bx	lr
  20c21c:	002185a4 	.word	0x002185a4

0020c220 <_ZNK13geometry_msgs7Vector39serializeEPh>:
      y(0),
      z(0)
    {
    }

    virtual int serialize(unsigned char *outbuffer) const
  20c220:	b410      	push	{r4}
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
  20c222:	6882      	ldr	r2, [r0, #8]
  20c224:	68c3      	ldr	r3, [r0, #12]
  20c226:	700a      	strb	r2, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
  20c228:	0a14      	lsrs	r4, r2, #8
  20c22a:	704c      	strb	r4, [r1, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
  20c22c:	0c14      	lsrs	r4, r2, #16
  20c22e:	708c      	strb	r4, [r1, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
  20c230:	0e12      	lsrs	r2, r2, #24
  20c232:	70ca      	strb	r2, [r1, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
  20c234:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
  20c236:	0a1a      	lsrs	r2, r3, #8
  20c238:	714a      	strb	r2, [r1, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
  20c23a:	0c1a      	lsrs	r2, r3, #16
  20c23c:	718a      	strb	r2, [r1, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
  20c23e:	0e1b      	lsrs	r3, r3, #24
  20c240:	71cb      	strb	r3, [r1, #7]
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
  20c242:	6902      	ldr	r2, [r0, #16]
  20c244:	6943      	ldr	r3, [r0, #20]
  20c246:	720a      	strb	r2, [r1, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
  20c248:	0a14      	lsrs	r4, r2, #8
  20c24a:	724c      	strb	r4, [r1, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
  20c24c:	0c14      	lsrs	r4, r2, #16
  20c24e:	728c      	strb	r4, [r1, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
  20c250:	0e12      	lsrs	r2, r2, #24
  20c252:	72ca      	strb	r2, [r1, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
  20c254:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
  20c256:	0a1a      	lsrs	r2, r3, #8
  20c258:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
  20c25a:	0c1a      	lsrs	r2, r3, #16
  20c25c:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
  20c25e:	0e1b      	lsrs	r3, r3, #24
  20c260:	73cb      	strb	r3, [r1, #15]
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
  20c262:	6982      	ldr	r2, [r0, #24]
  20c264:	69c3      	ldr	r3, [r0, #28]
  20c266:	740a      	strb	r2, [r1, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
  20c268:	0a10      	lsrs	r0, r2, #8
  20c26a:	7448      	strb	r0, [r1, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
  20c26c:	0c10      	lsrs	r0, r2, #16
  20c26e:	7488      	strb	r0, [r1, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
  20c270:	0e12      	lsrs	r2, r2, #24
  20c272:	74ca      	strb	r2, [r1, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
  20c274:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
  20c276:	0a1a      	lsrs	r2, r3, #8
  20c278:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
  20c27a:	0c1a      	lsrs	r2, r3, #16
  20c27c:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
  20c27e:	0e1b      	lsrs	r3, r3, #24
  20c280:	75cb      	strb	r3, [r1, #23]
      offset += sizeof(this->z);
      return offset;
    }
  20c282:	2018      	movs	r0, #24
  20c284:	f85d 4b04 	ldr.w	r4, [sp], #4
  20c288:	4770      	bx	lr

0020c28a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
  20c28a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c28e:	784c      	ldrb	r4, [r1, #1]
  20c290:	2300      	movs	r3, #0
  20c292:	0222      	lsls	r2, r4, #8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c294:	788e      	ldrb	r6, [r1, #2]
  20c296:	2500      	movs	r5, #0
  20c298:	0434      	lsls	r4, r6, #16
  20c29a:	4322      	orrs	r2, r4
  20c29c:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c29e:	780c      	ldrb	r4, [r1, #0]
  20c2a0:	2500      	movs	r5, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c2a2:	4322      	orrs	r2, r4
  20c2a4:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c2a6:	78ce      	ldrb	r6, [r1, #3]
  20c2a8:	2500      	movs	r5, #0
  20c2aa:	0634      	lsls	r4, r6, #24
  20c2ac:	4322      	orrs	r2, r4
  20c2ae:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
  20c2b0:	2400      	movs	r4, #0
  20c2b2:	790d      	ldrb	r5, [r1, #4]
  20c2b4:	4322      	orrs	r2, r4
  20c2b6:	432b      	orrs	r3, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
  20c2b8:	f891 8005 	ldrb.w	r8, [r1, #5]
  20c2bc:	ea4f 2708 	mov.w	r7, r8, lsl #8
  20c2c0:	4322      	orrs	r2, r4
  20c2c2:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
  20c2c4:	f891 8006 	ldrb.w	r8, [r1, #6]
  20c2c8:	ea4f 4708 	mov.w	r7, r8, lsl #16
  20c2cc:	4322      	orrs	r2, r4
  20c2ce:	433b      	orrs	r3, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
  20c2d0:	f891 8007 	ldrb.w	r8, [r1, #7]
  20c2d4:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->x = u_x.real;
  20c2d8:	4322      	orrs	r2, r4
  20c2da:	433b      	orrs	r3, r7
  20c2dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c2e0:	7a4e      	ldrb	r6, [r1, #9]
  20c2e2:	2300      	movs	r3, #0
  20c2e4:	0232      	lsls	r2, r6, #8
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c2e6:	f891 800a 	ldrb.w	r8, [r1, #10]
  20c2ea:	2700      	movs	r7, #0
  20c2ec:	ea4f 4608 	mov.w	r6, r8, lsl #16
  20c2f0:	4332      	orrs	r2, r6
  20c2f2:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c2f4:	7a0e      	ldrb	r6, [r1, #8]
  20c2f6:	2700      	movs	r7, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c2f8:	4332      	orrs	r2, r6
  20c2fa:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c2fc:	f891 800b 	ldrb.w	r8, [r1, #11]
  20c300:	2700      	movs	r7, #0
  20c302:	ea4f 6608 	mov.w	r6, r8, lsl #24
  20c306:	4332      	orrs	r2, r6
  20c308:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
  20c30a:	7b0f      	ldrb	r7, [r1, #12]
  20c30c:	4322      	orrs	r2, r4
  20c30e:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
  20c310:	f891 800d 	ldrb.w	r8, [r1, #13]
  20c314:	ea4f 2708 	mov.w	r7, r8, lsl #8
  20c318:	4322      	orrs	r2, r4
  20c31a:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
  20c31c:	f891 800e 	ldrb.w	r8, [r1, #14]
  20c320:	ea4f 4708 	mov.w	r7, r8, lsl #16
  20c324:	4322      	orrs	r2, r4
  20c326:	433b      	orrs	r3, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
  20c328:	f891 800f 	ldrb.w	r8, [r1, #15]
  20c32c:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->y = u_y.real;
  20c330:	4322      	orrs	r2, r4
  20c332:	433b      	orrs	r3, r7
  20c334:	e9c0 2304 	strd	r2, r3, [r0, #16]
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c338:	7c4e      	ldrb	r6, [r1, #17]
  20c33a:	2300      	movs	r3, #0
  20c33c:	0232      	lsls	r2, r6, #8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c33e:	f891 8012 	ldrb.w	r8, [r1, #18]
  20c342:	2700      	movs	r7, #0
  20c344:	ea4f 4608 	mov.w	r6, r8, lsl #16
  20c348:	4332      	orrs	r2, r6
  20c34a:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c34c:	7c0e      	ldrb	r6, [r1, #16]
  20c34e:	2700      	movs	r7, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c350:	4332      	orrs	r2, r6
  20c352:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c354:	f891 8013 	ldrb.w	r8, [r1, #19]
  20c358:	2700      	movs	r7, #0
  20c35a:	ea4f 6608 	mov.w	r6, r8, lsl #24
  20c35e:	4332      	orrs	r2, r6
  20c360:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
  20c362:	7d0f      	ldrb	r7, [r1, #20]
  20c364:	4322      	orrs	r2, r4
  20c366:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
  20c368:	f891 8015 	ldrb.w	r8, [r1, #21]
  20c36c:	ea4f 2708 	mov.w	r7, r8, lsl #8
  20c370:	4322      	orrs	r2, r4
  20c372:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
  20c374:	f891 8016 	ldrb.w	r8, [r1, #22]
  20c378:	ea4f 4708 	mov.w	r7, r8, lsl #16
  20c37c:	4322      	orrs	r2, r4
  20c37e:	433b      	orrs	r3, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
  20c380:	f891 8017 	ldrb.w	r8, [r1, #23]
  20c384:	ea4f 6708 	mov.w	r7, r8, lsl #24
      this->z = u_z.real;
  20c388:	4322      	orrs	r2, r4
  20c38a:	433b      	orrs	r3, r7
  20c38c:	e9c0 2306 	strd	r2, r3, [r0, #24]
      offset += sizeof(this->z);
     return offset;
    }
  20c390:	2018      	movs	r0, #24
  20c392:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
  20c396:	4770      	bx	lr

0020c398 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
  20c398:	4800      	ldr	r0, [pc, #0]	; (20c39c <_ZN13geometry_msgs7Vector37getTypeEv+0x4>)
  20c39a:	4770      	bx	lr
  20c39c:	002182fc 	.word	0x002182fc

0020c3a0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
  20c3a0:	4800      	ldr	r0, [pc, #0]	; (20c3a4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x4>)
  20c3a2:	4770      	bx	lr
  20c3a4:	002182d8 	.word	0x002182d8

0020c3a8 <_ZN13geometry_msgs14Vector3Stamped7getTypeEv>:
      offset += this->header.deserialize(inbuffer + offset);
      offset += this->vector.deserialize(inbuffer + offset);
     return offset;
    }

    const char * getType(){ return "geometry_msgs/Vector3Stamped"; };
  20c3a8:	4800      	ldr	r0, [pc, #0]	; (20c3ac <_ZN13geometry_msgs14Vector3Stamped7getTypeEv+0x4>)
  20c3aa:	4770      	bx	lr
  20c3ac:	002182b8 	.word	0x002182b8

0020c3b0 <_ZN13geometry_msgs14Vector3Stamped6getMD5Ev>:
    const char * getMD5(){ return "7b324c7325e683bf02a9b14b01090ec7"; };
  20c3b0:	4800      	ldr	r0, [pc, #0]	; (20c3b4 <_ZN13geometry_msgs14Vector3Stamped6getMD5Ev+0x4>)
  20c3b2:	4770      	bx	lr
  20c3b4:	00218294 	.word	0x00218294

0020c3b8 <_ZNK17aerial_robot_msgs9Barometer9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
  20c3b8:	6843      	ldr	r3, [r0, #4]
  20c3ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
  20c3bc:	6843      	ldr	r3, [r0, #4]
  20c3be:	0a1b      	lsrs	r3, r3, #8
  20c3c0:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
  20c3c2:	88c3      	ldrh	r3, [r0, #6]
  20c3c4:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
  20c3c6:	79c3      	ldrb	r3, [r0, #7]
  20c3c8:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
  20c3ca:	6883      	ldr	r3, [r0, #8]
  20c3cc:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
  20c3ce:	6883      	ldr	r3, [r0, #8]
  20c3d0:	0a1b      	lsrs	r3, r3, #8
  20c3d2:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
  20c3d4:	8943      	ldrh	r3, [r0, #10]
  20c3d6:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
  20c3d8:	7ac3      	ldrb	r3, [r0, #11]
  20c3da:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_altitude;
      u_altitude.real = this->altitude;
      *(outbuffer + offset + 0) = (u_altitude.base >> (8 * 0)) & 0xFF;
  20c3dc:	68c3      	ldr	r3, [r0, #12]
  20c3de:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_altitude.base >> (8 * 1)) & 0xFF;
  20c3e0:	0a1a      	lsrs	r2, r3, #8
  20c3e2:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_altitude.base >> (8 * 2)) & 0xFF;
  20c3e4:	0c1a      	lsrs	r2, r3, #16
  20c3e6:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_altitude.base >> (8 * 3)) & 0xFF;
  20c3e8:	0e1b      	lsrs	r3, r3, #24
  20c3ea:	72cb      	strb	r3, [r1, #11]
      union {
        float real;
        uint32_t base;
      } u_pressure;
      u_pressure.real = this->pressure;
      *(outbuffer + offset + 0) = (u_pressure.base >> (8 * 0)) & 0xFF;
  20c3ec:	6903      	ldr	r3, [r0, #16]
  20c3ee:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_pressure.base >> (8 * 1)) & 0xFF;
  20c3f0:	0a1a      	lsrs	r2, r3, #8
  20c3f2:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 2) = (u_pressure.base >> (8 * 2)) & 0xFF;
  20c3f4:	0c1a      	lsrs	r2, r3, #16
  20c3f6:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 3) = (u_pressure.base >> (8 * 3)) & 0xFF;
  20c3f8:	0e1b      	lsrs	r3, r3, #24
  20c3fa:	73cb      	strb	r3, [r1, #15]
      union {
        float real;
        uint32_t base;
      } u_temperature;
      u_temperature.real = this->temperature;
      *(outbuffer + offset + 0) = (u_temperature.base >> (8 * 0)) & 0xFF;
  20c3fc:	6943      	ldr	r3, [r0, #20]
  20c3fe:	740b      	strb	r3, [r1, #16]
      *(outbuffer + offset + 1) = (u_temperature.base >> (8 * 1)) & 0xFF;
  20c400:	0a1a      	lsrs	r2, r3, #8
  20c402:	744a      	strb	r2, [r1, #17]
      *(outbuffer + offset + 2) = (u_temperature.base >> (8 * 2)) & 0xFF;
  20c404:	0c1a      	lsrs	r2, r3, #16
  20c406:	748a      	strb	r2, [r1, #18]
      *(outbuffer + offset + 3) = (u_temperature.base >> (8 * 3)) & 0xFF;
  20c408:	0e1b      	lsrs	r3, r3, #24
  20c40a:	74cb      	strb	r3, [r1, #19]
      offset += sizeof(this->temperature);
      return offset;
    }
  20c40c:	2014      	movs	r0, #20
  20c40e:	4770      	bx	lr

0020c410 <_ZN17aerial_robot_msgs9Barometer11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
  20c410:	780b      	ldrb	r3, [r1, #0]
  20c412:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c414:	784a      	ldrb	r2, [r1, #1]
  20c416:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20c41a:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c41c:	788a      	ldrb	r2, [r1, #2]
  20c41e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20c422:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c424:	78ca      	ldrb	r2, [r1, #3]
  20c426:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c42a:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
  20c42c:	790b      	ldrb	r3, [r1, #4]
  20c42e:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c430:	794a      	ldrb	r2, [r1, #5]
  20c432:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20c436:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c438:	798a      	ldrb	r2, [r1, #6]
  20c43a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20c43e:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c440:	79ca      	ldrb	r2, [r1, #7]
  20c442:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c446:	6083      	str	r3, [r0, #8]
        float real;
        uint32_t base;
      } u_altitude;
      u_altitude.base = 0;
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c448:	7a4a      	ldrb	r2, [r1, #9]
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c44a:	7a8b      	ldrb	r3, [r1, #10]
  20c44c:	041b      	lsls	r3, r3, #16
  20c44e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c452:	7a0a      	ldrb	r2, [r1, #8]
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c454:	4313      	orrs	r3, r2
      u_altitude.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c456:	7aca      	ldrb	r2, [r1, #11]
      this->altitude = u_altitude.real;
  20c458:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c45c:	60c3      	str	r3, [r0, #12]
        float real;
        uint32_t base;
      } u_pressure;
      u_pressure.base = 0;
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c45e:	7b4a      	ldrb	r2, [r1, #13]
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c460:	7b8b      	ldrb	r3, [r1, #14]
  20c462:	041b      	lsls	r3, r3, #16
  20c464:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c468:	7b0a      	ldrb	r2, [r1, #12]
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c46a:	4313      	orrs	r3, r2
      u_pressure.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c46c:	7bca      	ldrb	r2, [r1, #15]
      this->pressure = u_pressure.real;
  20c46e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c472:	6103      	str	r3, [r0, #16]
        float real;
        uint32_t base;
      } u_temperature;
      u_temperature.base = 0;
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c474:	7c4a      	ldrb	r2, [r1, #17]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c476:	7c8b      	ldrb	r3, [r1, #18]
  20c478:	041b      	lsls	r3, r3, #16
  20c47a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c47e:	7c0a      	ldrb	r2, [r1, #16]
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c480:	4313      	orrs	r3, r2
      u_temperature.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c482:	7cca      	ldrb	r2, [r1, #19]
      this->temperature = u_temperature.real;
  20c484:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c488:	6143      	str	r3, [r0, #20]
      offset += sizeof(this->temperature);
     return offset;
    }
  20c48a:	2014      	movs	r0, #20
  20c48c:	4770      	bx	lr
	...

0020c490 <_ZN17aerial_robot_msgs9Barometer7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Barometer"; };
  20c490:	4800      	ldr	r0, [pc, #0]	; (20c494 <_ZN17aerial_robot_msgs9Barometer7getTypeEv+0x4>)
  20c492:	4770      	bx	lr
  20c494:	00218518 	.word	0x00218518

0020c498 <_ZN17aerial_robot_msgs9Barometer6getMD5Ev>:
    const char * getMD5(){ return "b732c389660333d48fe976feb5768402"; };
  20c498:	4800      	ldr	r0, [pc, #0]	; (20c49c <_ZN17aerial_robot_msgs9Barometer6getMD5Ev+0x4>)
  20c49a:	4770      	bx	lr
  20c49c:	002184f4 	.word	0x002184f4

0020c4a0 <_ZNK17aerial_robot_msgs3Gps9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
  20c4a0:	6843      	ldr	r3, [r0, #4]
  20c4a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
  20c4a4:	6843      	ldr	r3, [r0, #4]
  20c4a6:	0a1b      	lsrs	r3, r3, #8
  20c4a8:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
  20c4aa:	88c3      	ldrh	r3, [r0, #6]
  20c4ac:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
  20c4ae:	79c3      	ldrb	r3, [r0, #7]
  20c4b0:	70cb      	strb	r3, [r1, #3]
      offset += sizeof(this->stamp.sec);
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
  20c4b2:	6883      	ldr	r3, [r0, #8]
  20c4b4:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
  20c4b6:	6883      	ldr	r3, [r0, #8]
  20c4b8:	0a1b      	lsrs	r3, r3, #8
  20c4ba:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
  20c4bc:	8943      	ldrh	r3, [r0, #10]
  20c4be:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
  20c4c0:	7ac3      	ldrb	r3, [r0, #11]
  20c4c2:	71cb      	strb	r3, [r1, #7]
      union {
        float real;
        uint32_t base;
      } u_locationi;
      u_locationi.real = this->location[i];
      *(outbuffer + offset + 0) = (u_locationi.base >> (8 * 0)) & 0xFF;
  20c4c4:	68c3      	ldr	r3, [r0, #12]
  20c4c6:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
  20c4c8:	0a1a      	lsrs	r2, r3, #8
  20c4ca:	724a      	strb	r2, [r1, #9]
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
  20c4cc:	0c1a      	lsrs	r2, r3, #16
  20c4ce:	728a      	strb	r2, [r1, #10]
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
  20c4d0:	0e1b      	lsrs	r3, r3, #24
  20c4d2:	72cb      	strb	r3, [r1, #11]
      *(outbuffer + offset + 0) = (u_locationi.base >> (8 * 0)) & 0xFF;
  20c4d4:	6903      	ldr	r3, [r0, #16]
  20c4d6:	730b      	strb	r3, [r1, #12]
      *(outbuffer + offset + 1) = (u_locationi.base >> (8 * 1)) & 0xFF;
  20c4d8:	0a1a      	lsrs	r2, r3, #8
  20c4da:	734a      	strb	r2, [r1, #13]
      *(outbuffer + offset + 2) = (u_locationi.base >> (8 * 2)) & 0xFF;
  20c4dc:	0c1a      	lsrs	r2, r3, #16
  20c4de:	738a      	strb	r2, [r1, #14]
      *(outbuffer + offset + 3) = (u_locationi.base >> (8 * 3)) & 0xFF;
  20c4e0:	0e1b      	lsrs	r3, r3, #24
  20c4e2:	73cb      	strb	r3, [r1, #15]
      union {
        float real;
        uint32_t base;
      } u_velocityi;
      u_velocityi.real = this->velocity[i];
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
  20c4e4:	6943      	ldr	r3, [r0, #20]
  20c4e6:	740b      	strb	r3, [r1, #16]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
  20c4e8:	0a1a      	lsrs	r2, r3, #8
  20c4ea:	744a      	strb	r2, [r1, #17]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
  20c4ec:	0c1a      	lsrs	r2, r3, #16
  20c4ee:	748a      	strb	r2, [r1, #18]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
  20c4f0:	0e1b      	lsrs	r3, r3, #24
  20c4f2:	74cb      	strb	r3, [r1, #19]
      *(outbuffer + offset + 0) = (u_velocityi.base >> (8 * 0)) & 0xFF;
  20c4f4:	6983      	ldr	r3, [r0, #24]
  20c4f6:	750b      	strb	r3, [r1, #20]
      *(outbuffer + offset + 1) = (u_velocityi.base >> (8 * 1)) & 0xFF;
  20c4f8:	0a1a      	lsrs	r2, r3, #8
  20c4fa:	754a      	strb	r2, [r1, #21]
      *(outbuffer + offset + 2) = (u_velocityi.base >> (8 * 2)) & 0xFF;
  20c4fc:	0c1a      	lsrs	r2, r3, #16
  20c4fe:	758a      	strb	r2, [r1, #22]
      *(outbuffer + offset + 3) = (u_velocityi.base >> (8 * 3)) & 0xFF;
  20c500:	0e1b      	lsrs	r3, r3, #24
  20c502:	75cb      	strb	r3, [r1, #23]
      offset += sizeof(this->velocity[i]);
      }
      *(outbuffer + offset + 0) = (this->sat_num >> (8 * 0)) & 0xFF;
  20c504:	7f03      	ldrb	r3, [r0, #28]
  20c506:	760b      	strb	r3, [r1, #24]
      offset += sizeof(this->sat_num);
      return offset;
    }
  20c508:	2019      	movs	r0, #25
  20c50a:	4770      	bx	lr

0020c50c <_ZN17aerial_robot_msgs3Gps11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
  20c50c:	780b      	ldrb	r3, [r1, #0]
  20c50e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c510:	784a      	ldrb	r2, [r1, #1]
  20c512:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20c516:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c518:	788a      	ldrb	r2, [r1, #2]
  20c51a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20c51e:	6043      	str	r3, [r0, #4]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c520:	78ca      	ldrb	r2, [r1, #3]
  20c522:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c526:	6043      	str	r3, [r0, #4]
      offset += sizeof(this->stamp.sec);
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
  20c528:	790b      	ldrb	r3, [r1, #4]
  20c52a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c52c:	794a      	ldrb	r2, [r1, #5]
  20c52e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20c532:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c534:	798a      	ldrb	r2, [r1, #6]
  20c536:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20c53a:	6083      	str	r3, [r0, #8]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c53c:	79ca      	ldrb	r2, [r1, #7]
  20c53e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c542:	6083      	str	r3, [r0, #8]
        float real;
        uint32_t base;
      } u_locationi;
      u_locationi.base = 0;
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c544:	7a4a      	ldrb	r2, [r1, #9]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c546:	7a8b      	ldrb	r3, [r1, #10]
  20c548:	041b      	lsls	r3, r3, #16
  20c54a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c54e:	7a0a      	ldrb	r2, [r1, #8]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c550:	4313      	orrs	r3, r2
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c552:	7aca      	ldrb	r2, [r1, #11]
      this->location[i] = u_locationi.real;
  20c554:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c558:	60c3      	str	r3, [r0, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c55a:	7b4a      	ldrb	r2, [r1, #13]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c55c:	7b8b      	ldrb	r3, [r1, #14]
  20c55e:	041b      	lsls	r3, r3, #16
  20c560:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c564:	7b0a      	ldrb	r2, [r1, #12]
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c566:	4313      	orrs	r3, r2
      u_locationi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c568:	7bca      	ldrb	r2, [r1, #15]
      this->location[i] = u_locationi.real;
  20c56a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c56e:	6103      	str	r3, [r0, #16]
        float real;
        uint32_t base;
      } u_velocityi;
      u_velocityi.base = 0;
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c570:	7c4a      	ldrb	r2, [r1, #17]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c572:	7c8b      	ldrb	r3, [r1, #18]
  20c574:	041b      	lsls	r3, r3, #16
  20c576:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c57a:	7c0a      	ldrb	r2, [r1, #16]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c57c:	4313      	orrs	r3, r2
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c57e:	7cca      	ldrb	r2, [r1, #19]
      this->velocity[i] = u_velocityi.real;
  20c580:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c584:	6143      	str	r3, [r0, #20]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c586:	7d4a      	ldrb	r2, [r1, #21]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c588:	7d8b      	ldrb	r3, [r1, #22]
  20c58a:	041b      	lsls	r3, r3, #16
  20c58c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c590:	7d0a      	ldrb	r2, [r1, #20]
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c592:	4313      	orrs	r3, r2
      u_velocityi.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c594:	7dca      	ldrb	r2, [r1, #23]
      this->velocity[i] = u_velocityi.real;
  20c596:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20c59a:	6183      	str	r3, [r0, #24]
      offset += sizeof(this->velocity[i]);
      }
      this->sat_num =  ((uint8_t) (*(inbuffer + offset)));
  20c59c:	7e0b      	ldrb	r3, [r1, #24]
  20c59e:	7703      	strb	r3, [r0, #28]
      offset += sizeof(this->sat_num);
     return offset;
    }
  20c5a0:	2019      	movs	r0, #25
  20c5a2:	4770      	bx	lr

0020c5a4 <_ZN17aerial_robot_msgs3Gps7getTypeEv>:

    const char * getType(){ return "aerial_robot_msgs/Gps"; };
  20c5a4:	4800      	ldr	r0, [pc, #0]	; (20c5a8 <_ZN17aerial_robot_msgs3Gps7getTypeEv+0x4>)
  20c5a6:	4770      	bx	lr
  20c5a8:	002184a0 	.word	0x002184a0

0020c5ac <_ZN17aerial_robot_msgs3Gps6getMD5Ev>:
    const char * getMD5(){ return "b9b55701ff5240f76ada29af2827853c"; };
  20c5ac:	4800      	ldr	r0, [pc, #0]	; (20c5b0 <_ZN17aerial_robot_msgs3Gps6getMD5Ev+0x4>)
  20c5ae:	4770      	bx	lr
  20c5b0:	0021847c 	.word	0x0021847c

0020c5b4 <_ZN13BatteryStatusD1Ev>:
  ~BatteryStatus(){}
  20c5b4:	4770      	bx	lr

0020c5b6 <_ZNK17aerial_robot_base7UavInfo9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->motor_num >> (8 * 0)) & 0xFF;
  20c5b6:	7903      	ldrb	r3, [r0, #4]
  20c5b8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->motor_num);
      *(outbuffer + offset + 0) = (this->uav_model >> (8 * 0)) & 0xFF;
  20c5ba:	7943      	ldrb	r3, [r0, #5]
  20c5bc:	704b      	strb	r3, [r1, #1]
      offset += sizeof(this->uav_model);
      *(outbuffer + offset + 0) = (this->baselink >> (8 * 0)) & 0xFF;
  20c5be:	7983      	ldrb	r3, [r0, #6]
  20c5c0:	708b      	strb	r3, [r1, #2]
      offset += sizeof(this->baselink);
      return offset;
    }
  20c5c2:	2003      	movs	r0, #3
  20c5c4:	4770      	bx	lr

0020c5c6 <_ZN17aerial_robot_base7UavInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->motor_num =  ((uint8_t) (*(inbuffer + offset)));
  20c5c6:	780b      	ldrb	r3, [r1, #0]
  20c5c8:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->motor_num);
      this->uav_model =  ((uint8_t) (*(inbuffer + offset)));
  20c5ca:	784b      	ldrb	r3, [r1, #1]
  20c5cc:	7143      	strb	r3, [r0, #5]
      offset += sizeof(this->uav_model);
      this->baselink =  ((uint8_t) (*(inbuffer + offset)));
  20c5ce:	788b      	ldrb	r3, [r1, #2]
  20c5d0:	7183      	strb	r3, [r0, #6]
      offset += sizeof(this->baselink);
     return offset;
    }
  20c5d2:	2003      	movs	r0, #3
  20c5d4:	4770      	bx	lr
	...

0020c5d8 <_ZN17aerial_robot_base7UavInfo7getTypeEv>:

    const char * getType(){ return "aerial_robot_base/UavInfo"; };
  20c5d8:	4800      	ldr	r0, [pc, #0]	; (20c5dc <_ZN17aerial_robot_base7UavInfo7getTypeEv+0x4>)
  20c5da:	4770      	bx	lr
  20c5dc:	00218460 	.word	0x00218460

0020c5e0 <_ZN17aerial_robot_base7UavInfo6getMD5Ev>:
    const char * getMD5(){ return "9df05674c34b7ea4b3399195c6c615ca"; };
  20c5e0:	4800      	ldr	r0, [pc, #0]	; (20c5e4 <_ZN17aerial_robot_base7UavInfo6getMD5Ev+0x4>)
  20c5e2:	4770      	bx	lr
  20c5e4:	0021843c 	.word	0x0021843c

0020c5e8 <_ZNK17aerial_robot_base15FlightConfigCmd9serializeEPh>:
    }

    virtual int serialize(unsigned char *outbuffer) const
    {
      int offset = 0;
      *(outbuffer + offset + 0) = (this->cmd >> (8 * 0)) & 0xFF;
  20c5e8:	7903      	ldrb	r3, [r0, #4]
  20c5ea:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->cmd);
      return offset;
    }
  20c5ec:	2001      	movs	r0, #1
  20c5ee:	4770      	bx	lr

0020c5f0 <_ZN17aerial_robot_base15FlightConfigCmd11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
    {
      int offset = 0;
      this->cmd =  ((uint8_t) (*(inbuffer + offset)));
  20c5f0:	780b      	ldrb	r3, [r1, #0]
  20c5f2:	7103      	strb	r3, [r0, #4]
      offset += sizeof(this->cmd);
     return offset;
    }
  20c5f4:	2001      	movs	r0, #1
  20c5f6:	4770      	bx	lr

0020c5f8 <_ZN17aerial_robot_base15FlightConfigCmd7getTypeEv>:

    const char * getType(){ return "aerial_robot_base/FlightConfigCmd"; };
  20c5f8:	4800      	ldr	r0, [pc, #0]	; (20c5fc <_ZN17aerial_robot_base15FlightConfigCmd7getTypeEv+0x4>)
  20c5fa:	4770      	bx	lr
  20c5fc:	00218418 	.word	0x00218418

0020c600 <_ZN17aerial_robot_base15FlightConfigCmd6getMD5Ev>:
    const char * getMD5(){ return "34283d92c354f6d8be30da642018650f"; };
  20c600:	4800      	ldr	r0, [pc, #0]	; (20c604 <_ZN17aerial_robot_base15FlightConfigCmd6getMD5Ev+0x4>)
  20c602:	4770      	bx	lr
  20c604:	002183f4 	.word	0x002183f4

0020c608 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE9connectedEv>:
  };
  20c608:	f890 02cc 	ldrb.w	r0, [r0, #716]	; 0x2cc
  20c60c:	4770      	bx	lr

0020c60e <_ZN4BaroD1Ev>:
#include "sensors/baro/baro.h"

#define BARO_H      HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET)
#define BARO_L      HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_RESET)

class Baro :public BaroBackend
  20c60e:	4770      	bx	lr

0020c610 <_ZN3ros10SubscriberIN17aerial_robot_base15FlightConfigCmdE13FlightControlE8callbackEPh>:
  virtual void callback(unsigned char* data)
  20c610:	b510      	push	{r4, lr}
      this->cmd =  ((uint8_t) (*(inbuffer + offset)));
  20c612:	780b      	ldrb	r3, [r1, #0]
  20c614:	7403      	strb	r3, [r0, #16]
    (obj_->*cb_)(msg);
  20c616:	6983      	ldr	r3, [r0, #24]
  20c618:	f013 0f01 	tst.w	r3, #1
  20c61c:	d00b      	beq.n	20c636 <_ZN3ros10SubscriberIN17aerial_robot_base15FlightConfigCmdE13FlightControlE8callbackEPh+0x26>
  20c61e:	105a      	asrs	r2, r3, #1
  20c620:	69c1      	ldr	r1, [r0, #28]
  20c622:	5889      	ldr	r1, [r1, r2]
  20c624:	6942      	ldr	r2, [r0, #20]
  20c626:	588a      	ldr	r2, [r1, r2]
  20c628:	69c4      	ldr	r4, [r0, #28]
  20c62a:	f100 010c 	add.w	r1, r0, #12
  20c62e:	eb04 0063 	add.w	r0, r4, r3, asr #1
  20c632:	4790      	blx	r2
  20c634:	bd10      	pop	{r4, pc}
  20c636:	6942      	ldr	r2, [r0, #20]
  20c638:	e7f6      	b.n	20c628 <_ZN3ros10SubscriberIN17aerial_robot_base15FlightConfigCmdE13FlightControlE8callbackEPh+0x18>

0020c63a <_ZN3ros10SubscriberIN17aerial_robot_base15FlightConfigCmdE13FlightControlE15getEndpointTypeEv>:
  }
  20c63a:	6a00      	ldr	r0, [r0, #32]
  20c63c:	4770      	bx	lr
	...

0020c640 <_ZN3ros10SubscriberIN17aerial_robot_base15FlightConfigCmdE13FlightControlE10getMsgTypeEv>:
  }
  20c640:	4800      	ldr	r0, [pc, #0]	; (20c644 <_ZN3ros10SubscriberIN17aerial_robot_base15FlightConfigCmdE13FlightControlE10getMsgTypeEv+0x4>)
  20c642:	4770      	bx	lr
  20c644:	00218418 	.word	0x00218418

0020c648 <_ZN3ros10SubscriberIN17aerial_robot_base15FlightConfigCmdE13FlightControlE9getMsgMD5Ev>:
  }
  20c648:	4800      	ldr	r0, [pc, #0]	; (20c64c <_ZN3ros10SubscriberIN17aerial_robot_base15FlightConfigCmdE13FlightControlE9getMsgMD5Ev+0x4>)
  20c64a:	4770      	bx	lr
  20c64c:	002183f4 	.word	0x002183f4

0020c650 <_ZN3ros10SubscriberIN17aerial_robot_base7UavInfoE13FlightControlE8callbackEPh>:
  virtual void callback(unsigned char* data)
  20c650:	b510      	push	{r4, lr}
  20c652:	460b      	mov	r3, r1
    msg.deserialize(data);
  20c654:	f100 010c 	add.w	r1, r0, #12
      this->motor_num =  ((uint8_t) (*(inbuffer + offset)));
  20c658:	781a      	ldrb	r2, [r3, #0]
  20c65a:	7402      	strb	r2, [r0, #16]
      this->uav_model =  ((uint8_t) (*(inbuffer + offset)));
  20c65c:	785a      	ldrb	r2, [r3, #1]
  20c65e:	7442      	strb	r2, [r0, #17]
      this->baselink =  ((uint8_t) (*(inbuffer + offset)));
  20c660:	789b      	ldrb	r3, [r3, #2]
  20c662:	7483      	strb	r3, [r0, #18]
    (obj_->*cb_)(msg);
  20c664:	6983      	ldr	r3, [r0, #24]
  20c666:	f013 0f01 	tst.w	r3, #1
  20c66a:	d009      	beq.n	20c680 <_ZN3ros10SubscriberIN17aerial_robot_base7UavInfoE13FlightControlE8callbackEPh+0x30>
  20c66c:	105a      	asrs	r2, r3, #1
  20c66e:	69c4      	ldr	r4, [r0, #28]
  20c670:	58a4      	ldr	r4, [r4, r2]
  20c672:	6942      	ldr	r2, [r0, #20]
  20c674:	58a2      	ldr	r2, [r4, r2]
  20c676:	69c0      	ldr	r0, [r0, #28]
  20c678:	eb00 0063 	add.w	r0, r0, r3, asr #1
  20c67c:	4790      	blx	r2
  20c67e:	bd10      	pop	{r4, pc}
  20c680:	6942      	ldr	r2, [r0, #20]
  20c682:	e7f8      	b.n	20c676 <_ZN3ros10SubscriberIN17aerial_robot_base7UavInfoE13FlightControlE8callbackEPh+0x26>

0020c684 <_ZN3ros10SubscriberIN17aerial_robot_base7UavInfoE13FlightControlE15getEndpointTypeEv>:
  }
  20c684:	6a00      	ldr	r0, [r0, #32]
  20c686:	4770      	bx	lr

0020c688 <_ZN3ros10SubscriberIN17aerial_robot_base7UavInfoE13FlightControlE10getMsgTypeEv>:
  }
  20c688:	4800      	ldr	r0, [pc, #0]	; (20c68c <_ZN3ros10SubscriberIN17aerial_robot_base7UavInfoE13FlightControlE10getMsgTypeEv+0x4>)
  20c68a:	4770      	bx	lr
  20c68c:	00218460 	.word	0x00218460

0020c690 <_ZN3ros10SubscriberIN17aerial_robot_base7UavInfoE13FlightControlE9getMsgMD5Ev>:
  }
  20c690:	4800      	ldr	r0, [pc, #0]	; (20c694 <_ZN3ros10SubscriberIN17aerial_robot_base7UavInfoE13FlightControlE9getMsgMD5Ev+0x4>)
  20c692:	4770      	bx	lr
  20c694:	0021843c 	.word	0x0021843c

0020c698 <_ZN3ros10SubscriberIN17aerial_robot_base11DesireCoordE16AttitudeEstimateE15getEndpointTypeEv>:
  }
  20c698:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  20c69a:	4770      	bx	lr

0020c69c <_ZN3ros10SubscriberIN17aerial_robot_base11DesireCoordE16AttitudeEstimateE10getMsgTypeEv>:
  }
  20c69c:	4800      	ldr	r0, [pc, #0]	; (20c6a0 <_ZN3ros10SubscriberIN17aerial_robot_base11DesireCoordE16AttitudeEstimateE10getMsgTypeEv+0x4>)
  20c69e:	4770      	bx	lr
  20c6a0:	002183d4 	.word	0x002183d4

0020c6a4 <_ZN3ros10SubscriberIN17aerial_robot_base11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev>:
  }
  20c6a4:	4800      	ldr	r0, [pc, #0]	; (20c6a8 <_ZN3ros10SubscriberIN17aerial_robot_base11DesireCoordE16AttitudeEstimateE9getMsgMD5Ev+0x4>)
  20c6a6:	4770      	bx	lr
  20c6a8:	002183b0 	.word	0x002183b0

0020c6ac <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
  20c6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  20c6b0:	4607      	mov	r7, r0
  20c6b2:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
  20c6b4:	8883      	ldrh	r3, [r0, #4]
  20c6b6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
  20c6b8:	8883      	ldrh	r3, [r0, #4]
  20c6ba:	0a1b      	lsrs	r3, r3, #8
  20c6bc:	704b      	strb	r3, [r1, #1]
      uint32_t length_topic_name = strlen(this->topic_name);
  20c6be:	6880      	ldr	r0, [r0, #8]
  20c6c0:	f7f3 fdac 	bl	20021c <strlen>
  20c6c4:	4604      	mov	r4, r0
      arr[i] = (var >> (8 * i));
  20c6c6:	70a8      	strb	r0, [r5, #2]
  20c6c8:	0a03      	lsrs	r3, r0, #8
  20c6ca:	70eb      	strb	r3, [r5, #3]
  20c6cc:	0c03      	lsrs	r3, r0, #16
  20c6ce:	712b      	strb	r3, [r5, #4]
  20c6d0:	0e03      	lsrs	r3, r0, #24
  20c6d2:	716b      	strb	r3, [r5, #5]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
  20c6d4:	4602      	mov	r2, r0
  20c6d6:	68b9      	ldr	r1, [r7, #8]
  20c6d8:	1da8      	adds	r0, r5, #6
  20c6da:	f00a f8b6 	bl	21684a <memcpy>
      offset += length_topic_name;
  20c6de:	f104 0806 	add.w	r8, r4, #6
      uint32_t length_message_type = strlen(this->message_type);
  20c6e2:	68f8      	ldr	r0, [r7, #12]
  20c6e4:	f7f3 fd9a 	bl	20021c <strlen>
  20c6e8:	4606      	mov	r6, r0
  20c6ea:	1d63      	adds	r3, r4, #5
  20c6ec:	442b      	add	r3, r5
  20c6ee:	2200      	movs	r2, #0
  20c6f0:	fa26 f102 	lsr.w	r1, r6, r2
  20c6f4:	f803 1f01 	strb.w	r1, [r3, #1]!
  20c6f8:	3208      	adds	r2, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20c6fa:	2a20      	cmp	r2, #32
  20c6fc:	d1f8      	bne.n	20c6f0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x44>
      offset += 4;
  20c6fe:	f108 0804 	add.w	r8, r8, #4
      memcpy(outbuffer + offset, this->message_type, length_message_type);
  20c702:	4632      	mov	r2, r6
  20c704:	68f9      	ldr	r1, [r7, #12]
  20c706:	eb05 0008 	add.w	r0, r5, r8
  20c70a:	f00a f89e 	bl	21684a <memcpy>
      offset += length_message_type;
  20c70e:	4446      	add	r6, r8
      uint32_t length_md5sum = strlen(this->md5sum);
  20c710:	6938      	ldr	r0, [r7, #16]
  20c712:	f7f3 fd83 	bl	20021c <strlen>
  20c716:	4604      	mov	r4, r0
  20c718:	19aa      	adds	r2, r5, r6
  20c71a:	2300      	movs	r3, #0
      arr[i] = (var >> (8 * i));
  20c71c:	fa24 f103 	lsr.w	r1, r4, r3
  20c720:	f802 1b01 	strb.w	r1, [r2], #1
  20c724:	3308      	adds	r3, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20c726:	2b20      	cmp	r3, #32
  20c728:	d1f8      	bne.n	20c71c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh+0x70>
      offset += 4;
  20c72a:	3604      	adds	r6, #4
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
  20c72c:	4622      	mov	r2, r4
  20c72e:	6939      	ldr	r1, [r7, #16]
  20c730:	19a8      	adds	r0, r5, r6
  20c732:	f00a f88a 	bl	21684a <memcpy>
      offset += length_md5sum;
  20c736:	4426      	add	r6, r4
      u_buffer_size.real = this->buffer_size;
  20c738:	697b      	ldr	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
  20c73a:	55ab      	strb	r3, [r5, r6]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
  20c73c:	4435      	add	r5, r6
  20c73e:	0a1a      	lsrs	r2, r3, #8
  20c740:	706a      	strb	r2, [r5, #1]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
  20c742:	0c1a      	lsrs	r2, r3, #16
  20c744:	70aa      	strb	r2, [r5, #2]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
  20c746:	0e1b      	lsrs	r3, r3, #24
  20c748:	70eb      	strb	r3, [r5, #3]
    }
  20c74a:	1d30      	adds	r0, r6, #4
  20c74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0020c750 <_ZNK14rosserial_msgs3Log9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
  20c750:	b570      	push	{r4, r5, r6, lr}
  20c752:	4606      	mov	r6, r0
  20c754:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
  20c756:	7903      	ldrb	r3, [r0, #4]
  20c758:	700b      	strb	r3, [r1, #0]
      uint32_t length_msg = strlen(this->msg);
  20c75a:	6880      	ldr	r0, [r0, #8]
  20c75c:	f7f3 fd5e 	bl	20021c <strlen>
  20c760:	4604      	mov	r4, r0
  20c762:	462a      	mov	r2, r5
  20c764:	2300      	movs	r3, #0
      arr[i] = (var >> (8 * i));
  20c766:	fa24 f103 	lsr.w	r1, r4, r3
  20c76a:	f802 1f01 	strb.w	r1, [r2, #1]!
  20c76e:	3308      	adds	r3, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20c770:	2b20      	cmp	r3, #32
  20c772:	d1f8      	bne.n	20c766 <_ZNK14rosserial_msgs3Log9serializeEPh+0x16>
      memcpy(outbuffer + offset, this->msg, length_msg);
  20c774:	4622      	mov	r2, r4
  20c776:	68b1      	ldr	r1, [r6, #8]
  20c778:	1d68      	adds	r0, r5, #5
  20c77a:	f00a f866 	bl	21684a <memcpy>
    }
  20c77e:	1d60      	adds	r0, r4, #5
  20c780:	bd70      	pop	{r4, r5, r6, pc}

0020c782 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
  20c782:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
  20c786:	6843      	ldr	r3, [r0, #4]
  20c788:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
  20c78a:	6843      	ldr	r3, [r0, #4]
  20c78c:	0a1b      	lsrs	r3, r3, #8
  20c78e:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
  20c790:	88c3      	ldrh	r3, [r0, #6]
  20c792:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
  20c794:	79c3      	ldrb	r3, [r0, #7]
  20c796:	70cb      	strb	r3, [r1, #3]
      for( uint32_t i = 0; i < ints_length; i++){
  20c798:	6843      	ldr	r3, [r0, #4]
  20c79a:	2b00      	cmp	r3, #0
  20c79c:	d041      	beq.n	20c822 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xa0>
  20c79e:	460a      	mov	r2, r1
  20c7a0:	2500      	movs	r5, #0
  20c7a2:	2404      	movs	r4, #4
      u_intsi.real = this->ints[i];
  20c7a4:	68c3      	ldr	r3, [r0, #12]
  20c7a6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
  20c7aa:	7113      	strb	r3, [r2, #4]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
  20c7ac:	0a1e      	lsrs	r6, r3, #8
  20c7ae:	7156      	strb	r6, [r2, #5]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
  20c7b0:	0c1e      	lsrs	r6, r3, #16
  20c7b2:	7196      	strb	r6, [r2, #6]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
  20c7b4:	0e1b      	lsrs	r3, r3, #24
  20c7b6:	71d3      	strb	r3, [r2, #7]
  20c7b8:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < ints_length; i++){
  20c7ba:	3501      	adds	r5, #1
  20c7bc:	3204      	adds	r2, #4
  20c7be:	6843      	ldr	r3, [r0, #4]
  20c7c0:	42ab      	cmp	r3, r5
  20c7c2:	d8ef      	bhi.n	20c7a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x22>
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
  20c7c4:	190a      	adds	r2, r1, r4
  20c7c6:	6903      	ldr	r3, [r0, #16]
  20c7c8:	550b      	strb	r3, [r1, r4]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
  20c7ca:	6903      	ldr	r3, [r0, #16]
  20c7cc:	0a1b      	lsrs	r3, r3, #8
  20c7ce:	7053      	strb	r3, [r2, #1]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
  20c7d0:	8a43      	ldrh	r3, [r0, #18]
  20c7d2:	7093      	strb	r3, [r2, #2]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
  20c7d4:	7cc3      	ldrb	r3, [r0, #19]
  20c7d6:	70d3      	strb	r3, [r2, #3]
      offset += sizeof(this->floats_length);
  20c7d8:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < floats_length; i++){
  20c7da:	6903      	ldr	r3, [r0, #16]
  20c7dc:	b183      	cbz	r3, 20c800 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x7e>
  20c7de:	2500      	movs	r5, #0
      u_floatsi.real = this->floats[i];
  20c7e0:	6983      	ldr	r3, [r0, #24]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
  20c7e2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
  20c7e6:	7113      	strb	r3, [r2, #4]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
  20c7e8:	0a1e      	lsrs	r6, r3, #8
  20c7ea:	7156      	strb	r6, [r2, #5]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
  20c7ec:	0c1e      	lsrs	r6, r3, #16
  20c7ee:	7196      	strb	r6, [r2, #6]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
  20c7f0:	0e1b      	lsrs	r3, r3, #24
  20c7f2:	71d3      	strb	r3, [r2, #7]
  20c7f4:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < floats_length; i++){
  20c7f6:	3501      	adds	r5, #1
  20c7f8:	3204      	adds	r2, #4
  20c7fa:	6903      	ldr	r3, [r0, #16]
  20c7fc:	42ab      	cmp	r3, r5
  20c7fe:	d8ef      	bhi.n	20c7e0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
  20c800:	69c3      	ldr	r3, [r0, #28]
  20c802:	550b      	strb	r3, [r1, r4]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
  20c804:	190b      	adds	r3, r1, r4
  20c806:	69c2      	ldr	r2, [r0, #28]
  20c808:	0a12      	lsrs	r2, r2, #8
  20c80a:	705a      	strb	r2, [r3, #1]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
  20c80c:	8bc2      	ldrh	r2, [r0, #30]
  20c80e:	709a      	strb	r2, [r3, #2]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
  20c810:	7fc2      	ldrb	r2, [r0, #31]
  20c812:	70da      	strb	r2, [r3, #3]
      offset += sizeof(this->strings_length);
  20c814:	3404      	adds	r4, #4
      for( uint32_t i = 0; i < strings_length; i++){
  20c816:	69c3      	ldr	r3, [r0, #28]
  20c818:	b333      	cbz	r3, 20c868 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xe6>
  20c81a:	4688      	mov	r8, r1
  20c81c:	4605      	mov	r5, r0
  20c81e:	2700      	movs	r7, #0
  20c820:	e00f      	b.n	20c842 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xc0>
      offset += sizeof(this->ints_length);
  20c822:	2404      	movs	r4, #4
  20c824:	e7ce      	b.n	20c7c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x42>
      offset += 4;
  20c826:	3404      	adds	r4, #4
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
  20c828:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  20c82a:	4632      	mov	r2, r6
  20c82c:	f853 1009 	ldr.w	r1, [r3, r9]
  20c830:	eb08 0004 	add.w	r0, r8, r4
  20c834:	f00a f809 	bl	21684a <memcpy>
      offset += length_stringsi;
  20c838:	4434      	add	r4, r6
      for( uint32_t i = 0; i < strings_length; i++){
  20c83a:	3701      	adds	r7, #1
  20c83c:	69eb      	ldr	r3, [r5, #28]
  20c83e:	42bb      	cmp	r3, r7
  20c840:	d912      	bls.n	20c868 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xe6>
  20c842:	ea4f 0987 	mov.w	r9, r7, lsl #2
      uint32_t length_stringsi = strlen(this->strings[i]);
  20c846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  20c848:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
  20c84c:	f7f3 fce6 	bl	20021c <strlen>
  20c850:	4606      	mov	r6, r0
  20c852:	eb08 0204 	add.w	r2, r8, r4
      varToArr(outbuffer + offset, length_stringsi);
  20c856:	2300      	movs	r3, #0
      arr[i] = (var >> (8 * i));
  20c858:	fa26 f103 	lsr.w	r1, r6, r3
  20c85c:	f802 1b01 	strb.w	r1, [r2], #1
  20c860:	3308      	adds	r3, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20c862:	2b20      	cmp	r3, #32
  20c864:	d1f8      	bne.n	20c858 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xd6>
  20c866:	e7de      	b.n	20c826 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xa4>
    }
  20c868:	4620      	mov	r0, r4
  20c86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0020c86e <_ZNK8std_msgs6Header9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
  20c86e:	b570      	push	{r4, r5, r6, lr}
  20c870:	4605      	mov	r5, r0
  20c872:	460c      	mov	r4, r1
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
  20c874:	6843      	ldr	r3, [r0, #4]
  20c876:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
  20c878:	6843      	ldr	r3, [r0, #4]
  20c87a:	0a1b      	lsrs	r3, r3, #8
  20c87c:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
  20c87e:	88c3      	ldrh	r3, [r0, #6]
  20c880:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
  20c882:	79c3      	ldrb	r3, [r0, #7]
  20c884:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
  20c886:	6883      	ldr	r3, [r0, #8]
  20c888:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
  20c88a:	6883      	ldr	r3, [r0, #8]
  20c88c:	0a1b      	lsrs	r3, r3, #8
  20c88e:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
  20c890:	8943      	ldrh	r3, [r0, #10]
  20c892:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
  20c894:	7ac3      	ldrb	r3, [r0, #11]
  20c896:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
  20c898:	68c3      	ldr	r3, [r0, #12]
  20c89a:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
  20c89c:	68c3      	ldr	r3, [r0, #12]
  20c89e:	0a1b      	lsrs	r3, r3, #8
  20c8a0:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
  20c8a2:	89c3      	ldrh	r3, [r0, #14]
  20c8a4:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
  20c8a6:	7bc3      	ldrb	r3, [r0, #15]
  20c8a8:	72cb      	strb	r3, [r1, #11]
      uint32_t length_frame_id = strlen(this->frame_id);
  20c8aa:	6900      	ldr	r0, [r0, #16]
  20c8ac:	f7f3 fcb6 	bl	20021c <strlen>
  20c8b0:	4606      	mov	r6, r0
      arr[i] = (var >> (8 * i));
  20c8b2:	7320      	strb	r0, [r4, #12]
  20c8b4:	0a03      	lsrs	r3, r0, #8
  20c8b6:	7363      	strb	r3, [r4, #13]
  20c8b8:	0c03      	lsrs	r3, r0, #16
  20c8ba:	73a3      	strb	r3, [r4, #14]
  20c8bc:	0e03      	lsrs	r3, r0, #24
  20c8be:	73e3      	strb	r3, [r4, #15]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
  20c8c0:	4602      	mov	r2, r0
  20c8c2:	6929      	ldr	r1, [r5, #16]
  20c8c4:	f104 0010 	add.w	r0, r4, #16
  20c8c8:	f009 ffbf 	bl	21684a <memcpy>
    }
  20c8cc:	f106 0010 	add.w	r0, r6, #16
  20c8d0:	bd70      	pop	{r4, r5, r6, pc}

0020c8d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  20c8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  20c8d6:	4604      	mov	r4, r0
  20c8d8:	460d      	mov	r5, r1
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20c8da:	780b      	ldrb	r3, [r1, #0]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  20c8dc:	784a      	ldrb	r2, [r1, #1]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  20c8de:	788e      	ldrb	r6, [r1, #2]
  20c8e0:	0436      	lsls	r6, r6, #16
  20c8e2:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  20c8e6:	431e      	orrs	r6, r3
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20c8e8:	78cb      	ldrb	r3, [r1, #3]
  20c8ea:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(ints_lengthT > ints_length)
  20c8ee:	6843      	ldr	r3, [r0, #4]
  20c8f0:	429e      	cmp	r6, r3
  20c8f2:	d859      	bhi.n	20c9a8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xd6>
      ints_length = ints_lengthT;
  20c8f4:	6066      	str	r6, [r4, #4]
      for( uint32_t i = 0; i < ints_length; i++){
  20c8f6:	2e00      	cmp	r6, #0
  20c8f8:	d05c      	beq.n	20c9b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xe2>
  20c8fa:	462a      	mov	r2, r5
  20c8fc:	2100      	movs	r1, #0
  20c8fe:	2604      	movs	r6, #4
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c900:	7950      	ldrb	r0, [r2, #5]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c902:	7993      	ldrb	r3, [r2, #6]
  20c904:	041b      	lsls	r3, r3, #16
  20c906:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c90a:	7910      	ldrb	r0, [r2, #4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c90c:	4303      	orrs	r3, r0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c90e:	79d0      	ldrb	r0, [r2, #7]
  20c910:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
      this->st_ints = u_st_ints.real;
  20c914:	60a3      	str	r3, [r4, #8]
  20c916:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
  20c918:	68e0      	ldr	r0, [r4, #12]
  20c91a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
  20c91e:	3101      	adds	r1, #1
  20c920:	3204      	adds	r2, #4
  20c922:	6863      	ldr	r3, [r4, #4]
  20c924:	428b      	cmp	r3, r1
  20c926:	d8eb      	bhi.n	20c900 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2e>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20c928:	eb05 0806 	add.w	r8, r5, r6
  20c92c:	5dab      	ldrb	r3, [r5, r6]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  20c92e:	f898 2001 	ldrb.w	r2, [r8, #1]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  20c932:	f898 7002 	ldrb.w	r7, [r8, #2]
  20c936:	043f      	lsls	r7, r7, #16
  20c938:	ea47 2702 	orr.w	r7, r7, r2, lsl #8
  20c93c:	431f      	orrs	r7, r3
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20c93e:	f898 3003 	ldrb.w	r3, [r8, #3]
  20c942:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->floats_length);
  20c946:	3604      	adds	r6, #4
      if(floats_lengthT > floats_length)
  20c948:	6923      	ldr	r3, [r4, #16]
  20c94a:	429f      	cmp	r7, r3
  20c94c:	d834      	bhi.n	20c9b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xe6>
      floats_length = floats_lengthT;
  20c94e:	6127      	str	r7, [r4, #16]
      for( uint32_t i = 0; i < floats_length; i++){
  20c950:	b1af      	cbz	r7, 20c97e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xac>
  20c952:	4642      	mov	r2, r8
  20c954:	2100      	movs	r1, #0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20c956:	7950      	ldrb	r0, [r2, #5]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c958:	7993      	ldrb	r3, [r2, #6]
  20c95a:	041b      	lsls	r3, r3, #16
  20c95c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20c960:	7910      	ldrb	r0, [r2, #4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20c962:	4303      	orrs	r3, r0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20c964:	79d0      	ldrb	r0, [r2, #7]
  20c966:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
      this->st_floats = u_st_floats.real;
  20c96a:	6163      	str	r3, [r4, #20]
  20c96c:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
  20c96e:	69a0      	ldr	r0, [r4, #24]
  20c970:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
  20c974:	3101      	adds	r1, #1
  20c976:	3204      	adds	r2, #4
  20c978:	6923      	ldr	r3, [r4, #16]
  20c97a:	428b      	cmp	r3, r1
  20c97c:	d8eb      	bhi.n	20c956 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x84>
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20c97e:	5daa      	ldrb	r2, [r5, r6]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  20c980:	19ab      	adds	r3, r5, r6
  20c982:	7859      	ldrb	r1, [r3, #1]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  20c984:	789f      	ldrb	r7, [r3, #2]
  20c986:	043f      	lsls	r7, r7, #16
  20c988:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
  20c98c:	4317      	orrs	r7, r2
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20c98e:	78db      	ldrb	r3, [r3, #3]
  20c990:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
      offset += sizeof(this->strings_length);
  20c994:	3604      	adds	r6, #4
      if(strings_lengthT > strings_length)
  20c996:	69e3      	ldr	r3, [r4, #28]
  20c998:	429f      	cmp	r7, r3
  20c99a:	d813      	bhi.n	20c9c4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf2>
      strings_length = strings_lengthT;
  20c99c:	61e7      	str	r7, [r4, #28]
      for( uint32_t i = 0; i < strings_length; i++){
  20c99e:	2f00      	cmp	r7, #0
  20c9a0:	d03e      	beq.n	20ca20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x14e>
  20c9a2:	2700      	movs	r7, #0
      inbuffer[offset+length_st_strings-1]=0;
  20c9a4:	46be      	mov	lr, r7
  20c9a6:	e02e      	b.n	20ca06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x134>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
  20c9a8:	00b1      	lsls	r1, r6, #2
  20c9aa:	68c0      	ldr	r0, [r0, #12]
  20c9ac:	f00a f81e 	bl	2169ec <realloc>
  20c9b0:	60e0      	str	r0, [r4, #12]
  20c9b2:	e79f      	b.n	20c8f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x22>
      offset += sizeof(this->ints_length);
  20c9b4:	2604      	movs	r6, #4
  20c9b6:	e7b7      	b.n	20c928 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x56>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
  20c9b8:	00b9      	lsls	r1, r7, #2
  20c9ba:	69a0      	ldr	r0, [r4, #24]
  20c9bc:	f00a f816 	bl	2169ec <realloc>
  20c9c0:	61a0      	str	r0, [r4, #24]
  20c9c2:	e7c4      	b.n	20c94e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7c>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
  20c9c4:	00b9      	lsls	r1, r7, #2
  20c9c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  20c9c8:	f00a f810 	bl	2169ec <realloc>
  20c9cc:	6260      	str	r0, [r4, #36]	; 0x24
  20c9ce:	e7e5      	b.n	20c99c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xca>
      offset += 4;
  20c9d0:	3604      	adds	r6, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
  20c9d2:	4430      	add	r0, r6
  20c9d4:	4286      	cmp	r6, r0
  20c9d6:	d208      	bcs.n	20c9ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x118>
  20c9d8:	3303      	adds	r3, #3
  20c9da:	442b      	add	r3, r5
  20c9dc:	4632      	mov	r2, r6
          inbuffer[k-1]=inbuffer[k];
  20c9de:	7859      	ldrb	r1, [r3, #1]
  20c9e0:	f803 1b01 	strb.w	r1, [r3], #1
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
  20c9e4:	3201      	adds	r2, #1
  20c9e6:	4282      	cmp	r2, r0
  20c9e8:	d3f9      	bcc.n	20c9de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x10c>
      inbuffer[offset+length_st_strings-1]=0;
  20c9ea:	182b      	adds	r3, r5, r0
  20c9ec:	f803 ec01 	strb.w	lr, [r3, #-1]
      this->st_strings = (char *)(inbuffer + offset-1);
  20c9f0:	3e01      	subs	r6, #1
  20c9f2:	19ab      	adds	r3, r5, r6
  20c9f4:	6223      	str	r3, [r4, #32]
      offset += length_st_strings;
  20c9f6:	4606      	mov	r6, r0
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
  20c9f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
  20c9fa:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
  20c9fe:	3701      	adds	r7, #1
  20ca00:	69e3      	ldr	r3, [r4, #28]
  20ca02:	42bb      	cmp	r3, r7
  20ca04:	d90c      	bls.n	20ca20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x14e>
      arrToVar(length_st_strings, (inbuffer + offset));
  20ca06:	4633      	mov	r3, r6
  20ca08:	eb05 0c06 	add.w	ip, r5, r6
  20ca0c:	2200      	movs	r2, #0
    var = 0;
  20ca0e:	4610      	mov	r0, r2
      var |= (arr[i] << (8 * i));
  20ca10:	f81c 1b01 	ldrb.w	r1, [ip], #1
  20ca14:	4091      	lsls	r1, r2
  20ca16:	4308      	orrs	r0, r1
  20ca18:	3208      	adds	r2, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20ca1a:	2a20      	cmp	r2, #32
  20ca1c:	d1f8      	bne.n	20ca10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x13e>
  20ca1e:	e7d7      	b.n	20c9d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xfe>
    }
  20ca20:	4630      	mov	r0, r6
  20ca22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0020ca26 <_ZN13StateEstimateD1Ev>:
{
public:
  StateEstimate()
  {
  }
  ~StateEstimate(){}
  20ca26:	b510      	push	{r4, lr}
  20ca28:	4604      	mov	r4, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  20ca2a:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	if (__p)
  20ca2e:	b108      	cbz	r0, 20ca34 <_ZN13StateEstimateD1Ev+0xe>
      { ::operator delete(__p); }
  20ca30:	f007 fb1b 	bl	21406a <_ZdlPv>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  20ca34:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
	if (__p)
  20ca38:	b108      	cbz	r0, 20ca3e <_ZN13StateEstimateD1Ev+0x18>
  20ca3a:	f007 fb16 	bl	21406a <_ZdlPv>
  20ca3e:	4620      	mov	r0, r4
  20ca40:	bd10      	pop	{r4, pc}

0020ca42 <_ZN13FlightControlD1Ev>:
#include <aerial_robot_base/UavInfo.h>

class FlightControl
{
public:
  ~FlightControl(){}
  20ca42:	b510      	push	{r4, lr}
  20ca44:	4604      	mov	r4, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  20ca46:	f8d0 0580 	ldr.w	r0, [r0, #1408]	; 0x580
	if (__p)
  20ca4a:	b108      	cbz	r0, 20ca50 <_ZN13FlightControlD1Ev+0xe>
  20ca4c:	f007 fb0d 	bl	21406a <_ZdlPv>
  20ca50:	4620      	mov	r0, r4
  20ca52:	bd10      	pop	{r4, pc}

0020ca54 <_ZN17ComplementaryAHRS10estimationEv>:

private:
  std::array<Vector3f, 2> est_g_,  est_m_;

  /* core esitmation process, using body frame */
  virtual void estimation() 
  20ca54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  20ca58:	ed2d 8b04 	vpush	{d8-d9}
  20ca5c:	b09d      	sub	sp, #116	; 0x74
  20ca5e:	4604      	mov	r4, r0
    {
      typedef _Tp _Type[_Nm];

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }
  20ca60:	f100 0904 	add.w	r9, r0, #4
  {
    int  valid_acc = 0;
    static int cnt = 0;

    float acc_magnitude = acc_[Frame::BODY] * acc_[Frame::BODY]; //norm?
  20ca64:	4649      	mov	r1, r9
  20ca66:	4648      	mov	r0, r9
  20ca68:	f7fc fd7a 	bl	209560 <_ZNK7Vector3IfEmlERKS0_>
  20ca6c:	eeb0 8a40 	vmov.f32	s16, s0
    Vector3f est_g_b_tmp = est_g_[Frame::BODY];
  20ca70:	af07      	add	r7, sp, #28
  20ca72:	f504 7686 	add.w	r6, r4, #268	; 0x10c
  20ca76:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  20ca7a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    Vector3f est_m_b_tmp = est_m_[Frame::BODY];
  20ca7e:	f10d 0810 	add.w	r8, sp, #16
  20ca82:	f504 7592 	add.w	r5, r4, #292	; 0x124
  20ca86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  20ca8a:	e888 0007 	stmia.w	r8, {r0, r1, r2}

    Vector3f gyro_rotate = gyro_[Frame::BODY]  * (DELTA_T * gyro_amp_);
  20ca8e:	ed94 0a42 	vldr	s0, [r4, #264]	; 0x108
  20ca92:	eddf 7ac3 	vldr	s15, [pc, #780]	; 20cda0 <_ZN17ComplementaryAHRS10estimationEv+0x34c>
  20ca96:	ee20 0a27 	vmul.f32	s0, s0, s15
  20ca9a:	f104 001c 	add.w	r0, r4, #28
  20ca9e:	f7fc fdcb 	bl	209638 <_ZNK7Vector3IfEmlEf>
  20caa2:	ed8d 0a01 	vstr	s0, [sp, #4]
  20caa6:	edcd 0a02 	vstr	s1, [sp, #8]
  20caaa:	ed8d 1a03 	vstr	s2, [sp, #12]

    est_m_[Frame::BODY] += (est_m_b_tmp % gyro_rotate  ); //rotation by gyro
  20caae:	a901      	add	r1, sp, #4
  20cab0:	4640      	mov	r0, r8
  20cab2:	f7fc fd39 	bl	209528 <_ZNK7Vector3IfErmERKS0_>
  20cab6:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
  20caba:	edcd 0a0b 	vstr	s1, [sp, #44]	; 0x2c
  20cabe:	ed8d 1a0c 	vstr	s2, [sp, #48]	; 0x30
  20cac2:	a90a      	add	r1, sp, #40	; 0x28
  20cac4:	4628      	mov	r0, r5
  20cac6:	f7fc fd8d 	bl	2095e4 <_ZN7Vector3IfEpLERKS0_>
    est_g_[Frame::BODY] += (est_g_b_tmp % gyro_rotate ); //rotation by gyro
  20caca:	a901      	add	r1, sp, #4
  20cacc:	4638      	mov	r0, r7
  20cace:	f7fc fd2b 	bl	209528 <_ZNK7Vector3IfErmERKS0_>
  20cad2:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
  20cad6:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
  20cada:	ed8d 1a0f 	vstr	s2, [sp, #60]	; 0x3c
  20cade:	a90d      	add	r1, sp, #52	; 0x34
  20cae0:	4630      	mov	r0, r6
  20cae2:	f7fc fd7f 	bl	2095e4 <_ZN7Vector3IfEpLERKS0_>

    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
  20cae6:	eddf 7aaf 	vldr	s15, [pc, #700]	; 20cda4 <_ZN17ComplementaryAHRS10estimationEv+0x350>
  20caea:	eeb4 8ae7 	vcmpe.f32	s16, s15
  20caee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  20caf2:	dd07      	ble.n	20cb04 <_ZN17ComplementaryAHRS10estimationEv+0xb0>
  20caf4:	eddf 7aac 	vldr	s15, [pc, #688]	; 20cda8 <_ZN17ComplementaryAHRS10estimationEv+0x354>
  20caf8:	eeb4 8ae7 	vcmpe.f32	s16, s15
  20cafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  20cb00:	f100 813a 	bmi.w	20cd78 <_ZN17ComplementaryAHRS10estimationEv+0x324>
    //** If accel magnitude >1.15G or <0.85G and ACC vector outside of the limit range 
    //**    => we neutralize the effect of accelerometers in the angle estimation. 
    //** To do that, we just skip filter, as EstV already rotated by Gyro 
    //*********************************************************************

    est_g_b_tmp = est_g_[Frame::BODY];
  20cb04:	ab07      	add	r3, sp, #28
  20cb06:	f504 7286 	add.w	r2, r4, #268	; 0x10c
  20cb0a:	ca07      	ldmia	r2, {r0, r1, r2}
  20cb0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    est_m_b_tmp = est_m_[Frame::BODY];
  20cb10:	ab04      	add	r3, sp, #16
  20cb12:	f504 7292 	add.w	r2, r4, #292	; 0x124
  20cb16:	ca07      	ldmia	r2, {r0, r1, r2}
  20cb18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20cb1c:	f04f 0800 	mov.w	r8, #0
  20cb20:	f104 0734 	add.w	r7, r4, #52	; 0x34
    /* acc correction */
    if ( valid_acc == 1 && cnt == 0)
      est_g_[Frame::BODY] = (est_g_b_tmp * GYR_CMPF_FACTOR + acc_[Frame::BODY]) * INV_GYR_CMPF_FACTOR;

    /* mag correction */
    if ( prev_mag_ != mag_[Frame::BODY] )
  20cb24:	4639      	mov	r1, r7
  20cb26:	f104 0064 	add.w	r0, r4, #100	; 0x64
  20cb2a:	f7fc fdc1 	bl	2096b0 <_ZNK7Vector3IfEneERKS0_>
  20cb2e:	2800      	cmp	r0, #0
  20cb30:	f040 80f7 	bne.w	20cd22 <_ZN17ComplementaryAHRS10estimationEv+0x2ce>
        prev_mag_ = mag_[Frame::BODY];
        est_m_[Frame::BODY] = (est_m_b_tmp * GYR_CMPFM_FACTOR  + mag_[Frame::BODY]) * INV_GYR_CMPFM_FACTOR;
      }

    // Attitude of the estimated vector
    float sq_g_x_sq_g_z = est_g_[Frame::BODY].x * est_g_[Frame::BODY].x + est_g_[Frame::BODY].z * est_g_[Frame::BODY].z;
  20cb34:	edd4 7a43 	vldr	s15, [r4, #268]	; 0x10c
  20cb38:	ed94 7a45 	vldr	s14, [r4, #276]	; 0x114
  20cb3c:	ee27 7a07 	vmul.f32	s14, s14, s14
    float sq_g_y_sq_g_z = est_g_[Frame::BODY].y * est_g_[Frame::BODY].y + est_g_[Frame::BODY].z * est_g_[Frame::BODY].z;
  20cb40:	ed94 0a44 	vldr	s0, [r4, #272]	; 0x110
  20cb44:	ee20 0a00 	vmul.f32	s0, s0, s0
  20cb48:	ee37 8a00 	vadd.f32	s16, s14, s0
    float sq_g_x_sq_g_z = est_g_[Frame::BODY].x * est_g_[Frame::BODY].x + est_g_[Frame::BODY].z * est_g_[Frame::BODY].z;
  20cb4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
  20cb50:	ee77 7a87 	vadd.f32	s15, s15, s14
    float invG = inv_sqrt(sq_g_x_sq_g_z + est_g_[Frame::BODY].y * est_g_[Frame::BODY].y);
  20cb54:	ee37 0a80 	vadd.f32	s0, s15, s0
  20cb58:	f7fc fc40 	bl	2093dc <_Z8inv_sqrtf>
  20cb5c:	eeb0 9a40 	vmov.f32	s18, s0
    rpy_[Frame::BODY].x = atan2f(est_g_[Frame::BODY].y , est_g_[Frame::BODY].z);
  20cb60:	edd4 0a45 	vldr	s1, [r4, #276]	; 0x114
  20cb64:	ed94 0a44 	vldr	s0, [r4, #272]	; 0x110
  20cb68:	f008 fcdc 	bl	215524 <atan2f>
  20cb6c:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
    rpy_[Frame::BODY].y = atan2f(-est_g_[Frame::BODY].x , inv_sqrt(sq_g_y_sq_g_z)* sq_g_y_sq_g_z);
  20cb70:	edd4 8a43 	vldr	s17, [r4, #268]	; 0x10c
  20cb74:	eef1 8a68 	vneg.f32	s17, s17
  20cb78:	eeb0 0a48 	vmov.f32	s0, s16
  20cb7c:	f7fc fc2e 	bl	2093dc <_Z8inv_sqrtf>
  20cb80:	ee68 0a00 	vmul.f32	s1, s16, s0
  20cb84:	eeb0 0a68 	vmov.f32	s0, s17
  20cb88:	f008 fccc 	bl	215524 <atan2f>
  20cb8c:	ed84 0a26 	vstr	s0, [r4, #152]	; 0x98
    rpy_[Frame::BODY].z = atan2f( est_m_[Frame::BODY].z * est_g_[Frame::BODY].y - est_m_[Frame::BODY].y * est_g_[Frame::BODY].z,
  20cb90:	ed94 0a4b 	vldr	s0, [r4, #300]	; 0x12c
  20cb94:	ed94 6a44 	vldr	s12, [r4, #272]	; 0x110
  20cb98:	ed94 7a4a 	vldr	s14, [r4, #296]	; 0x128
  20cb9c:	edd4 6a45 	vldr	s13, [r4, #276]	; 0x114
                     est_m_[Frame::BODY].x * invG * sq_g_y_sq_g_z  - (est_m_[Frame::BODY].y * est_g_[Frame::BODY].y + est_m_[Frame::BODY].z * est_g_[Frame::BODY].z) * invG * est_g_[Frame::BODY].x ) + MAG_DECLINIATION;
  20cba0:	edd4 0a49 	vldr	s1, [r4, #292]	; 0x124
  20cba4:	ee69 0a20 	vmul.f32	s1, s18, s1
  20cba8:	ee60 0a88 	vmul.f32	s1, s1, s16
  20cbac:	ee66 7a07 	vmul.f32	s15, s12, s14
  20cbb0:	ee60 5a26 	vmul.f32	s11, s0, s13
  20cbb4:	ee77 7aa5 	vadd.f32	s15, s15, s11
  20cbb8:	ee67 7a89 	vmul.f32	s15, s15, s18
  20cbbc:	edd4 5a43 	vldr	s11, [r4, #268]	; 0x10c
  20cbc0:	ee67 7aa5 	vmul.f32	s15, s15, s11
    rpy_[Frame::BODY].z = atan2f( est_m_[Frame::BODY].z * est_g_[Frame::BODY].y - est_m_[Frame::BODY].y * est_g_[Frame::BODY].z,
  20cbc4:	ee20 0a06 	vmul.f32	s0, s0, s12
  20cbc8:	ee27 7a26 	vmul.f32	s14, s14, s13
  20cbcc:	ee70 0ae7 	vsub.f32	s1, s1, s15
  20cbd0:	ee30 0a47 	vsub.f32	s0, s0, s14
  20cbd4:	f008 fca6 	bl	215524 <atan2f>
                     est_m_[Frame::BODY].x * invG * sq_g_y_sq_g_z  - (est_m_[Frame::BODY].y * est_g_[Frame::BODY].y + est_m_[Frame::BODY].z * est_g_[Frame::BODY].z) * invG * est_g_[Frame::BODY].x ) + MAG_DECLINIATION;
  20cbd8:	ed9f 8a74 	vldr	s16, [pc, #464]	; 20cdac <_ZN17ComplementaryAHRS10estimationEv+0x358>
  20cbdc:	ee30 0a48 	vsub.f32	s0, s0, s16
    rpy_[Frame::BODY].z = atan2f( est_m_[Frame::BODY].z * est_g_[Frame::BODY].y - est_m_[Frame::BODY].y * est_g_[Frame::BODY].z,
  20cbe0:	ed84 0a27 	vstr	s0, [r4, #156]	; 0x9c


    /* virtual(CoG) frame */
    est_g_[Frame::VIRTUAL] = r_ * est_g_[Frame::BODY];
  20cbe4:	f104 0770 	add.w	r7, r4, #112	; 0x70
  20cbe8:	4631      	mov	r1, r6
  20cbea:	4638      	mov	r0, r7
  20cbec:	f7fc fc6e 	bl	2094cc <_ZNK7Matrix3IfEmlERK7Vector3IfE>
  20cbf0:	ed84 0a46 	vstr	s0, [r4, #280]	; 0x118
  20cbf4:	edc4 0a47 	vstr	s1, [r4, #284]	; 0x11c
  20cbf8:	ed84 1a48 	vstr	s2, [r4, #288]	; 0x120
    est_m_[Frame::VIRTUAL] = r_ * est_m_[Frame::BODY];
  20cbfc:	4629      	mov	r1, r5
  20cbfe:	4638      	mov	r0, r7
  20cc00:	f7fc fc64 	bl	2094cc <_ZNK7Matrix3IfEmlERK7Vector3IfE>
  20cc04:	ed84 0a4c 	vstr	s0, [r4, #304]	; 0x130
  20cc08:	edc4 0a4d 	vstr	s1, [r4, #308]	; 0x134
  20cc0c:	ed84 1a4e 	vstr	s2, [r4, #312]	; 0x138
    sq_g_x_sq_g_z = est_g_[Frame::VIRTUAL].x * est_g_[Frame::VIRTUAL].x + est_g_[Frame::VIRTUAL].z * est_g_[Frame::VIRTUAL].z;
  20cc10:	edd4 7a46 	vldr	s15, [r4, #280]	; 0x118
  20cc14:	ed94 7a48 	vldr	s14, [r4, #288]	; 0x120
  20cc18:	ee27 7a07 	vmul.f32	s14, s14, s14
    sq_g_y_sq_g_z = est_g_[Frame::VIRTUAL].y * est_g_[Frame::VIRTUAL].y + est_g_[Frame::VIRTUAL].z * est_g_[Frame::VIRTUAL].z;
  20cc1c:	ed94 0a47 	vldr	s0, [r4, #284]	; 0x11c
  20cc20:	ee20 0a00 	vmul.f32	s0, s0, s0
  20cc24:	ee77 8a00 	vadd.f32	s17, s14, s0
    sq_g_x_sq_g_z = est_g_[Frame::VIRTUAL].x * est_g_[Frame::VIRTUAL].x + est_g_[Frame::VIRTUAL].z * est_g_[Frame::VIRTUAL].z;
  20cc28:	ee67 7aa7 	vmul.f32	s15, s15, s15
  20cc2c:	ee77 7a87 	vadd.f32	s15, s15, s14
    invG = inv_sqrt(sq_g_x_sq_g_z + est_g_[Frame::VIRTUAL].y * est_g_[Frame::VIRTUAL].y);
  20cc30:	ee37 0a80 	vadd.f32	s0, s15, s0
  20cc34:	f7fc fbd2 	bl	2093dc <_Z8inv_sqrtf>
  20cc38:	eef0 9a40 	vmov.f32	s19, s0
    rpy_[Frame::VIRTUAL].x = atan2f(est_g_[Frame::VIRTUAL].y , est_g_[Frame::VIRTUAL].z);
  20cc3c:	edd4 0a48 	vldr	s1, [r4, #288]	; 0x120
  20cc40:	ed94 0a47 	vldr	s0, [r4, #284]	; 0x11c
  20cc44:	f008 fc6e 	bl	215524 <atan2f>
  20cc48:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
    rpy_[Frame::VIRTUAL].y = atan2f(-est_g_[Frame::VIRTUAL].x , inv_sqrt(sq_g_y_sq_g_z)* sq_g_y_sq_g_z);
  20cc4c:	ed94 9a46 	vldr	s18, [r4, #280]	; 0x118
  20cc50:	eeb1 9a49 	vneg.f32	s18, s18
  20cc54:	eeb0 0a68 	vmov.f32	s0, s17
  20cc58:	f7fc fbc0 	bl	2093dc <_Z8inv_sqrtf>
  20cc5c:	ee68 0a80 	vmul.f32	s1, s17, s0
  20cc60:	eeb0 0a49 	vmov.f32	s0, s18
  20cc64:	f008 fc5e 	bl	215524 <atan2f>
  20cc68:	ed84 0a29 	vstr	s0, [r4, #164]	; 0xa4
    rpy_[Frame::VIRTUAL].z = atan2f( est_m_[Frame::VIRTUAL].z * est_g_[Frame::VIRTUAL].y - est_m_[Frame::VIRTUAL].y * est_g_[Frame::VIRTUAL].z,
  20cc6c:	ed94 0a4e 	vldr	s0, [r4, #312]	; 0x138
  20cc70:	ed94 6a47 	vldr	s12, [r4, #284]	; 0x11c
  20cc74:	ed94 7a4d 	vldr	s14, [r4, #308]	; 0x134
  20cc78:	edd4 6a48 	vldr	s13, [r4, #288]	; 0x120
                     est_m_[Frame::VIRTUAL].x * invG * sq_g_y_sq_g_z  - (est_m_[Frame::VIRTUAL].y * est_g_[Frame::VIRTUAL].y + est_m_[Frame::VIRTUAL].z * est_g_[Frame::VIRTUAL].z) * invG * est_g_[Frame::VIRTUAL].x ) + MAG_DECLINIATION;
  20cc7c:	edd4 0a4c 	vldr	s1, [r4, #304]	; 0x130
  20cc80:	ee69 0aa0 	vmul.f32	s1, s19, s1
  20cc84:	ee60 0aa8 	vmul.f32	s1, s1, s17
  20cc88:	ee66 7a07 	vmul.f32	s15, s12, s14
  20cc8c:	ee60 5a26 	vmul.f32	s11, s0, s13
  20cc90:	ee77 7aa5 	vadd.f32	s15, s15, s11
  20cc94:	ee67 7aa9 	vmul.f32	s15, s15, s19
  20cc98:	edd4 5a46 	vldr	s11, [r4, #280]	; 0x118
  20cc9c:	ee67 7aa5 	vmul.f32	s15, s15, s11
    rpy_[Frame::VIRTUAL].z = atan2f( est_m_[Frame::VIRTUAL].z * est_g_[Frame::VIRTUAL].y - est_m_[Frame::VIRTUAL].y * est_g_[Frame::VIRTUAL].z,
  20cca0:	ee20 0a06 	vmul.f32	s0, s0, s12
  20cca4:	ee27 7a26 	vmul.f32	s14, s14, s13
  20cca8:	ee70 0ae7 	vsub.f32	s1, s1, s15
  20ccac:	ee30 0a47 	vsub.f32	s0, s0, s14
  20ccb0:	f008 fc38 	bl	215524 <atan2f>
                     est_m_[Frame::VIRTUAL].x * invG * sq_g_y_sq_g_z  - (est_m_[Frame::VIRTUAL].y * est_g_[Frame::VIRTUAL].y + est_m_[Frame::VIRTUAL].z * est_g_[Frame::VIRTUAL].z) * invG * est_g_[Frame::VIRTUAL].x ) + MAG_DECLINIATION;
  20ccb4:	ee30 0a48 	vsub.f32	s0, s0, s16
    rpy_[Frame::VIRTUAL].z = atan2f( est_m_[Frame::VIRTUAL].z * est_g_[Frame::VIRTUAL].y - est_m_[Frame::VIRTUAL].y * est_g_[Frame::VIRTUAL].z,
  20ccb8:	ed84 0a2a 	vstr	s0, [r4, #168]	; 0xa8
    //** refrence1: https://sites.google.com/site/myimuestimationexperience/sensors/magnetometer
    //** refrence2: http://uav.xenocross.net/hdg.html
    //********************************************************************************

    /* update */
    if(valid_acc) cnt++;
  20ccbc:	f1b8 0f00 	cmp.w	r8, #0
  20ccc0:	d003      	beq.n	20ccca <_ZN17ComplementaryAHRS10estimationEv+0x276>
  20ccc2:	4a3b      	ldr	r2, [pc, #236]	; (20cdb0 <_ZN17ComplementaryAHRS10estimationEv+0x35c>)
  20ccc4:	6813      	ldr	r3, [r2, #0]
  20ccc6:	3301      	adds	r3, #1
  20ccc8:	6013      	str	r3, [r2, #0]
    if(cnt == PRESCLAER_ACC) cnt = 0;
  20ccca:	4b39      	ldr	r3, [pc, #228]	; (20cdb0 <_ZN17ComplementaryAHRS10estimationEv+0x35c>)
  20cccc:	681b      	ldr	r3, [r3, #0]
  20ccce:	2b03      	cmp	r3, #3
  20ccd0:	d04e      	beq.n	20cd70 <_ZN17ComplementaryAHRS10estimationEv+0x31c>
  }
  20ccd2:	b01d      	add	sp, #116	; 0x74
  20ccd4:	ecbd 8b04 	vpop	{d8-d9}
  20ccd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      est_g_[Frame::BODY] = (est_g_b_tmp * GYR_CMPF_FACTOR + acc_[Frame::BODY]) * INV_GYR_CMPF_FACTOR;
  20ccdc:	ed9f 0a35 	vldr	s0, [pc, #212]	; 20cdb4 <_ZN17ComplementaryAHRS10estimationEv+0x360>
  20cce0:	a807      	add	r0, sp, #28
  20cce2:	f7fc fca9 	bl	209638 <_ZNK7Vector3IfEmlEf>
  20cce6:	ed8d 0a13 	vstr	s0, [sp, #76]	; 0x4c
  20ccea:	edcd 0a14 	vstr	s1, [sp, #80]	; 0x50
  20ccee:	ed8d 1a15 	vstr	s2, [sp, #84]	; 0x54
  20ccf2:	4649      	mov	r1, r9
  20ccf4:	a813      	add	r0, sp, #76	; 0x4c
  20ccf6:	f7fc fcaf 	bl	209658 <_ZNK7Vector3IfEplERKS0_>
  20ccfa:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
  20ccfe:	edcd 0a11 	vstr	s1, [sp, #68]	; 0x44
  20cd02:	ed8d 1a12 	vstr	s2, [sp, #72]	; 0x48
  20cd06:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 20cdb8 <_ZN17ComplementaryAHRS10estimationEv+0x364>
  20cd0a:	a810      	add	r0, sp, #64	; 0x40
  20cd0c:	f7fc fc94 	bl	209638 <_ZNK7Vector3IfEmlEf>
  20cd10:	ed84 0a43 	vstr	s0, [r4, #268]	; 0x10c
  20cd14:	edc6 0a01 	vstr	s1, [r6, #4]
  20cd18:	ed86 1a02 	vstr	s2, [r6, #8]
    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
  20cd1c:	f04f 0801 	mov.w	r8, #1
  20cd20:	e6fe      	b.n	20cb20 <_ZN17ComplementaryAHRS10estimationEv+0xcc>
        prev_mag_ = mag_[Frame::BODY];
  20cd22:	f104 0364 	add.w	r3, r4, #100	; 0x64
  20cd26:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
  20cd2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        est_m_[Frame::BODY] = (est_m_b_tmp * GYR_CMPFM_FACTOR  + mag_[Frame::BODY]) * INV_GYR_CMPFM_FACTOR;
  20cd2e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 20cdbc <_ZN17ComplementaryAHRS10estimationEv+0x368>
  20cd32:	a804      	add	r0, sp, #16
  20cd34:	f7fc fc80 	bl	209638 <_ZNK7Vector3IfEmlEf>
  20cd38:	ed8d 0a19 	vstr	s0, [sp, #100]	; 0x64
  20cd3c:	edcd 0a1a 	vstr	s1, [sp, #104]	; 0x68
  20cd40:	ed8d 1a1b 	vstr	s2, [sp, #108]	; 0x6c
  20cd44:	4639      	mov	r1, r7
  20cd46:	a819      	add	r0, sp, #100	; 0x64
  20cd48:	f7fc fc86 	bl	209658 <_ZNK7Vector3IfEplERKS0_>
  20cd4c:	ed8d 0a16 	vstr	s0, [sp, #88]	; 0x58
  20cd50:	edcd 0a17 	vstr	s1, [sp, #92]	; 0x5c
  20cd54:	ed8d 1a18 	vstr	s2, [sp, #96]	; 0x60
  20cd58:	ed9f 0a19 	vldr	s0, [pc, #100]	; 20cdc0 <_ZN17ComplementaryAHRS10estimationEv+0x36c>
  20cd5c:	a816      	add	r0, sp, #88	; 0x58
  20cd5e:	f7fc fc6b 	bl	209638 <_ZNK7Vector3IfEmlEf>
  20cd62:	ed84 0a49 	vstr	s0, [r4, #292]	; 0x124
  20cd66:	edc5 0a01 	vstr	s1, [r5, #4]
  20cd6a:	ed85 1a02 	vstr	s2, [r5, #8]
  20cd6e:	e6e1      	b.n	20cb34 <_ZN17ComplementaryAHRS10estimationEv+0xe0>
    if(cnt == PRESCLAER_ACC) cnt = 0;
  20cd70:	2200      	movs	r2, #0
  20cd72:	4b0f      	ldr	r3, [pc, #60]	; (20cdb0 <_ZN17ComplementaryAHRS10estimationEv+0x35c>)
  20cd74:	601a      	str	r2, [r3, #0]
  }
  20cd76:	e7ac      	b.n	20ccd2 <_ZN17ComplementaryAHRS10estimationEv+0x27e>
    est_g_b_tmp = est_g_[Frame::BODY];
  20cd78:	ab07      	add	r3, sp, #28
  20cd7a:	f504 7286 	add.w	r2, r4, #268	; 0x10c
  20cd7e:	ca07      	ldmia	r2, {r0, r1, r2}
  20cd80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    est_m_b_tmp = est_m_[Frame::BODY];
  20cd84:	ab04      	add	r3, sp, #16
  20cd86:	f504 7292 	add.w	r2, r4, #292	; 0x124
  20cd8a:	ca07      	ldmia	r2, {r0, r1, r2}
  20cd8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if ( valid_acc == 1 && cnt == 0)
  20cd90:	4b07      	ldr	r3, [pc, #28]	; (20cdb0 <_ZN17ComplementaryAHRS10estimationEv+0x35c>)
  20cd92:	681b      	ldr	r3, [r3, #0]
  20cd94:	2b00      	cmp	r3, #0
  20cd96:	d0a1      	beq.n	20ccdc <_ZN17ComplementaryAHRS10estimationEv+0x288>
    if( G_MIN < acc_magnitude && acc_magnitude < G_MAX) valid_acc = 1;
  20cd98:	f04f 0801 	mov.w	r8, #1
  20cd9c:	e6c0      	b.n	20cb20 <_ZN17ComplementaryAHRS10estimationEv+0xcc>
  20cd9e:	bf00      	nop
  20cda0:	3a83126f 	.word	0x3a83126f
  20cda4:	42900000 	.word	0x42900000
  20cda8:	43050000 	.word	0x43050000
  20cdac:	3e0525ce 	.word	0x3e0525ce
  20cdb0:	20004618 	.word	0x20004618
  20cdb4:	44160000 	.word	0x44160000
  20cdb8:	3ada1700 	.word	0x3ada1700
  20cdbc:	437a0000 	.word	0x437a0000
  20cdc0:	3b828cc0 	.word	0x3b828cc0

0020cdc4 <_ZN13FlightControl21uavInfoConfigCallbackERKN17aerial_robot_base7UavInfoE>:
        break;
      }
  }

/* get the UAV type from ros, which is necessary for simulation and general multirotor */
void uavInfoConfigCallback(const aerial_robot_base::UavInfo& config_msg)
  20cdc4:	b538      	push	{r3, r4, r5, lr}
  20cdc6:	460d      	mov	r5, r1
    att_controller_.setMotorNumber(motor_number);
  20cdc8:	f100 046c 	add.w	r4, r0, #108	; 0x6c
  20cdcc:	7909      	ldrb	r1, [r1, #4]
  20cdce:	4620      	mov	r0, r4
  20cdd0:	f7fb fd5c 	bl	20888c <_ZN18AttitudeController14setMotorNumberEh>
    att_controller_.setUavModel(uav_model);
  20cdd4:	f995 1005 	ldrsb.w	r1, [r5, #5]
  20cdd8:	4620      	mov	r0, r4
  20cdda:	f7fb fd8d 	bl	2088f8 <_ZN18AttitudeController11setUavModelEa>
  20cdde:	bd38      	pop	{r3, r4, r5, pc}

0020cde0 <_ZN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEv>:
    };

    /* This function goes in your loop() function, it handles
     *  serial tx data and ouput for publishers.
     */
    virtual int publish()
  20cde0:	b508      	push	{r3, lr}
    return tx::publish();
  20cde2:	f002 fc79 	bl	20f6d8 <_ZN2tx7publishEv>
    {
      return parent::hardware_.publish();
    }
  20cde6:	bd08      	pop	{r3, pc}

0020cde8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE>:
      }
    }
    configured_ = true;
  }

  virtual int publish(int id, const Msg * msg)
  20cde8:	b570      	push	{r4, r5, r6, lr}
  20cdea:	b084      	sub	sp, #16
  {
    if (id >= 100 && !configured_)
  20cdec:	2963      	cmp	r1, #99	; 0x63
  20cdee:	dd03      	ble.n	20cdf8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x10>
  20cdf0:	f890 32cc 	ldrb.w	r3, [r0, #716]	; 0x2cc
  20cdf4:	2b00      	cmp	r3, #0
  20cdf6:	d053      	beq.n	20cea0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xb8>
  20cdf8:	460c      	mov	r4, r1
  20cdfa:	4605      	mov	r5, r0
      return 0;

    /* serialize message */
    int l = msg->serialize(message_out + 7);
  20cdfc:	6813      	ldr	r3, [r2, #0]
  20cdfe:	681b      	ldr	r3, [r3, #0]
  20ce00:	f500 718f 	add.w	r1, r0, #286	; 0x11e
  20ce04:	4610      	mov	r0, r2
  20ce06:	4798      	blx	r3

    /* setup the header */
    message_out[0] = 0xff;
  20ce08:	23ff      	movs	r3, #255	; 0xff
  20ce0a:	f885 3117 	strb.w	r3, [r5, #279]	; 0x117
    message_out[1] = PROTOCOL_VER;
  20ce0e:	23fe      	movs	r3, #254	; 0xfe
  20ce10:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
    message_out[2] = (uint8_t)((uint16_t)l & 255);
  20ce14:	b2c3      	uxtb	r3, r0
  20ce16:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
  20ce1a:	f3c0 2207 	ubfx	r2, r0, #8, #8
  20ce1e:	f885 211a 	strb.w	r2, [r5, #282]	; 0x11a
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
  20ce22:	4413      	add	r3, r2
  20ce24:	43db      	mvns	r3, r3
  20ce26:	f885 311b 	strb.w	r3, [r5, #283]	; 0x11b
    message_out[5] = (uint8_t)((int16_t)id & 255);
  20ce2a:	f885 411c 	strb.w	r4, [r5, #284]	; 0x11c
    message_out[6] = (uint8_t)((int16_t)id >> 8);
  20ce2e:	f344 2307 	sbfx	r3, r4, #8, #8
  20ce32:	f885 311d 	strb.w	r3, [r5, #285]	; 0x11d

    /* calculate checksum */
    int chk = 0;
    for (int i = 5; i < l + 7; i++)
  20ce36:	1dc6      	adds	r6, r0, #7
  20ce38:	2e05      	cmp	r6, #5
  20ce3a:	dd1f      	ble.n	20ce7c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x94>
  20ce3c:	f205 131b 	addw	r3, r5, #283	; 0x11b
  20ce40:	f200 141d 	addw	r4, r0, #285	; 0x11d
  20ce44:	442c      	add	r4, r5
  20ce46:	2200      	movs	r2, #0
      chk += message_out[i];
  20ce48:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  20ce4c:	440a      	add	r2, r1
    for (int i = 5; i < l + 7; i++)
  20ce4e:	42a3      	cmp	r3, r4
  20ce50:	d1fa      	bne.n	20ce48 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x60>
    l += 7;
    message_out[l++] = 255 - (chk % 256);
  20ce52:	f100 0408 	add.w	r4, r0, #8
  20ce56:	442e      	add	r6, r5
  20ce58:	4253      	negs	r3, r2
  20ce5a:	b2d2      	uxtb	r2, r2
  20ce5c:	b2db      	uxtb	r3, r3
  20ce5e:	bf58      	it	pl
  20ce60:	425a      	negpl	r2, r3
  20ce62:	43d2      	mvns	r2, r2
  20ce64:	f886 2117 	strb.w	r2, [r6, #279]	; 0x117

    if (l <= OUTPUT_SIZE)
  20ce68:	2cff      	cmp	r4, #255	; 0xff
  20ce6a:	dc09      	bgt.n	20ce80 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x98>
    tx::write(data, length);
  20ce6c:	b2e1      	uxtb	r1, r4
  20ce6e:	f205 1017 	addw	r0, r5, #279	; 0x117
  20ce72:	f002 fc5b 	bl	20f72c <_ZN2tx5writeEPhh>
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
      return -1;
    }
  }
  20ce76:	4620      	mov	r0, r4
  20ce78:	b004      	add	sp, #16
  20ce7a:	bd70      	pop	{r4, r5, r6, pc}
    int chk = 0;
  20ce7c:	2200      	movs	r2, #0
  20ce7e:	e7e8      	b.n	20ce52 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x6a>
      msg("")
  20ce80:	4b08      	ldr	r3, [pc, #32]	; (20cea4 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xbc>)
  20ce82:	9301      	str	r3, [sp, #4]

private:
  void log(char byte, const char * msg)
  {
    rosserial_msgs::Log l;
    l.level = byte;
  20ce84:	2303      	movs	r3, #3
  20ce86:	f88d 3008 	strb.w	r3, [sp, #8]
    l.msg = (char*)msg;
  20ce8a:	4b07      	ldr	r3, [pc, #28]	; (20cea8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0xc0>)
  20ce8c:	9303      	str	r3, [sp, #12]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
  20ce8e:	682b      	ldr	r3, [r5, #0]
  20ce90:	681b      	ldr	r3, [r3, #0]
  20ce92:	aa01      	add	r2, sp, #4
  20ce94:	2107      	movs	r1, #7
  20ce96:	4628      	mov	r0, r5
  20ce98:	4798      	blx	r3
      return -1;
  20ce9a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  20ce9e:	e7ea      	b.n	20ce76 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x8e>
      return 0;
  20cea0:	2400      	movs	r4, #0
  20cea2:	e7e8      	b.n	20ce76 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE7publishEiPKNS_3MsgE+0x8e>
  20cea4:	002180f8 	.word	0x002180f8
  20cea8:	00218534 	.word	0x00218534

0020ceac <_ZN16AttitudeEstimate19desireCoordCallbackERKN17aerial_robot_base11DesireCoordE>:
  std::vector< IMU* > imu_list_;
  std::vector< float > imu_weights_;

  uint32_t last_imu_pub_time_, last_attitude_pub_time_;

  void desireCoordCallback(const aerial_robot_base::DesireCoord& coord_msg)
  20ceac:	b508      	push	{r3, lr}
    r_.from_euler(desire_attitude_roll, desire_attitude_pitch, desire_attitude_yaw);
  20ceae:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
  20ceb2:	ed91 1a03 	vldr	s2, [r1, #12]
  20ceb6:	edd1 0a02 	vldr	s1, [r1, #8]
  20ceba:	ed91 0a01 	vldr	s0, [r1, #4]
  20cebe:	3070      	adds	r0, #112	; 0x70
  20cec0:	f7fc faa4 	bl	20940c <_ZN7Matrix3IfE10from_eulerEfff>
  20cec4:	bd08      	pop	{r3, pc}

0020cec6 <_ZN13FlightControl20flightConfigCallbackERKN17aerial_robot_base15FlightConfigCmdE>:
    switch(config_msg.cmd)
  20cec6:	790b      	ldrb	r3, [r1, #4]
  20cec8:	2b02      	cmp	r3, #2
  20ceca:	d051      	beq.n	20cf70 <_ZN13FlightControl20flightConfigCallbackERKN17aerial_robot_base15FlightConfigCmdE+0xaa>
  20cecc:	d822      	bhi.n	20cf14 <_ZN13FlightControl20flightConfigCallbackERKN17aerial_robot_base15FlightConfigCmdE+0x4e>
  void flightConfigCallback(const aerial_robot_base::FlightConfigCmd& config_msg)
  20cece:	b570      	push	{r4, r5, r6, lr}
  20ced0:	4604      	mov	r4, r0
    switch(config_msg.cmd)
  20ced2:	b353      	cbz	r3, 20cf2a <_ZN13FlightControl20flightConfigCallbackERKN17aerial_robot_base15FlightConfigCmdE+0x64>
  20ced4:	2b01      	cmp	r3, #1
  20ced6:	d11c      	bne.n	20cf12 <_ZN13FlightControl20flightConfigCallbackERKN17aerial_robot_base15FlightConfigCmdE+0x4c>
        start_control_flag_ = false;
  20ced8:	2500      	movs	r5, #0
  20ceda:	f880 5068 	strb.w	r5, [r0, #104]	; 0x68
        att_controller_.setStartControlFlag(start_control_flag_);
  20cede:	4629      	mov	r1, r5
  20cee0:	306c      	adds	r0, #108	; 0x6c
  20cee2:	f7fb fcca 	bl	20887a <_ZN18AttitudeController19setStartControlFlagEb>
        config_ack_msg_.data = aerial_robot_base::FlightConfigCmd::ARM_OFF_CMD;
  20cee6:	2301      	movs	r3, #1
  20cee8:	7723      	strb	r3, [r4, #28]
  20ceea:	6920      	ldr	r0, [r4, #16]
  20ceec:	6803      	ldr	r3, [r0, #0]
  20ceee:	681b      	ldr	r3, [r3, #0]
  20cef0:	f104 0218 	add.w	r2, r4, #24
  20cef4:	68e1      	ldr	r1, [r4, #12]
  20cef6:	4798      	blx	r3
        force_landing_flag_ = false;
  20cef8:	f884 506b 	strb.w	r5, [r4, #107]	; 0x6b
  void setForceLandingFlag(bool force_landing_flag){force_landing_flag_ = force_landing_flag;}
  20cefc:	f884 520d 	strb.w	r5, [r4, #525]	; 0x20d
  EstimatorAlgorithm* getEstimator() {return estimator_;}
  20cf00:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
  20cf04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    else gyro_amp_ = 1.0f;
  20cf08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  20cf0c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  20cf10:	bd70      	pop	{r4, r5, r6, pc}
  20cf12:	bd70      	pop	{r4, r5, r6, pc}
    switch(config_msg.cmd)
  20cf14:	2ba0      	cmp	r3, #160	; 0xa0
  20cf16:	d031      	beq.n	20cf7c <_ZN13FlightControl20flightConfigCallbackERKN17aerial_robot_base15FlightConfigCmdE+0xb6>
  20cf18:	2ba1      	cmp	r3, #161	; 0xa1
  20cf1a:	d105      	bne.n	20cf28 <_ZN13FlightControl20flightConfigCallbackERKN17aerial_robot_base15FlightConfigCmdE+0x62>
        integrate_flag_ = false;
  20cf1c:	2300      	movs	r3, #0
  20cf1e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  void setIntegrateFlag(bool integrate_flag){integrate_flag_ = integrate_flag; }
  20cf22:	f880 320c 	strb.w	r3, [r0, #524]	; 0x20c
  }
  20cf26:	4770      	bx	lr
  20cf28:	4770      	bx	lr
        if(!att_controller_.activated()) break;
  20cf2a:	f100 056c 	add.w	r5, r0, #108	; 0x6c
  20cf2e:	4628      	mov	r0, r5
  20cf30:	f7fb fcf7 	bl	208922 <_ZN18AttitudeController9activatedEv>
  20cf34:	b900      	cbnz	r0, 20cf38 <_ZN13FlightControl20flightConfigCallbackERKN17aerial_robot_base15FlightConfigCmdE+0x72>
  20cf36:	bd70      	pop	{r4, r5, r6, pc}
        force_landing_flag_ = false;
  20cf38:	2600      	movs	r6, #0
  20cf3a:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
  void setForceLandingFlag(bool force_landing_flag){force_landing_flag_ = force_landing_flag;}
  20cf3e:	f884 620d 	strb.w	r6, [r4, #525]	; 0x20d
        start_control_flag_ = true;
  20cf42:	2101      	movs	r1, #1
  20cf44:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
        att_controller_.setStartControlFlag(start_control_flag_);
  20cf48:	4628      	mov	r0, r5
  20cf4a:	f7fb fc96 	bl	20887a <_ZN18AttitudeController19setStartControlFlagEb>
  20cf4e:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
  20cf52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if(amp_flag) gyro_amp_ = 1.0f;
  20cf56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  20cf5a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        config_ack_msg_.data = aerial_robot_base::FlightConfigCmd::ARM_ON_CMD;
  20cf5e:	7726      	strb	r6, [r4, #28]
  20cf60:	6920      	ldr	r0, [r4, #16]
  20cf62:	6803      	ldr	r3, [r0, #0]
  20cf64:	681b      	ldr	r3, [r3, #0]
  20cf66:	f104 0218 	add.w	r2, r4, #24
  20cf6a:	68e1      	ldr	r1, [r4, #12]
  20cf6c:	4798      	blx	r3
  20cf6e:	bd70      	pop	{r4, r5, r6, pc}
        force_landing_flag_ = true;
  20cf70:	2301      	movs	r3, #1
  20cf72:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
  20cf76:	f880 320d 	strb.w	r3, [r0, #525]	; 0x20d
  20cf7a:	4770      	bx	lr
        integrate_flag_ = true;
  20cf7c:	2301      	movs	r3, #1
  20cf7e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
  void setIntegrateFlag(bool integrate_flag){integrate_flag_ = integrate_flag; }
  20cf82:	f880 320c 	strb.w	r3, [r0, #524]	; 0x20c
  20cf86:	4770      	bx	lr

0020cf88 <_ZN3ros10SubscriberIN17aerial_robot_base11DesireCoordE16AttitudeEstimateE8callbackEPh>:
  virtual void callback(unsigned char* data)
  20cf88:	b510      	push	{r4, lr}
  20cf8a:	460b      	mov	r3, r1
    msg.deserialize(data);
  20cf8c:	f100 010c 	add.w	r1, r0, #12
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20cf90:	785c      	ldrb	r4, [r3, #1]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20cf92:	789a      	ldrb	r2, [r3, #2]
  20cf94:	0412      	lsls	r2, r2, #16
  20cf96:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20cf9a:	781c      	ldrb	r4, [r3, #0]
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20cf9c:	4322      	orrs	r2, r4
      u_roll.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20cf9e:	78dc      	ldrb	r4, [r3, #3]
      this->roll = u_roll.real;
  20cfa0:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  20cfa4:	6102      	str	r2, [r0, #16]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20cfa6:	795c      	ldrb	r4, [r3, #5]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20cfa8:	799a      	ldrb	r2, [r3, #6]
  20cfaa:	0412      	lsls	r2, r2, #16
  20cfac:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20cfb0:	791c      	ldrb	r4, [r3, #4]
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20cfb2:	4322      	orrs	r2, r4
      u_pitch.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20cfb4:	79dc      	ldrb	r4, [r3, #7]
      this->pitch = u_pitch.real;
  20cfb6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  20cfba:	6142      	str	r2, [r0, #20]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20cfbc:	7a5c      	ldrb	r4, [r3, #9]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20cfbe:	7a9a      	ldrb	r2, [r3, #10]
  20cfc0:	0412      	lsls	r2, r2, #16
  20cfc2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20cfc6:	7a1c      	ldrb	r4, [r3, #8]
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20cfc8:	4322      	orrs	r2, r4
      u_yaw.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20cfca:	7adc      	ldrb	r4, [r3, #11]
      this->yaw = u_yaw.real;
  20cfcc:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  20cfd0:	6182      	str	r2, [r0, #24]
      this->coord_type =  ((uint8_t) (*(inbuffer + offset)));
  20cfd2:	7b1b      	ldrb	r3, [r3, #12]
  20cfd4:	7703      	strb	r3, [r0, #28]
    (obj_->*cb_)(msg);
  20cfd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  20cfd8:	f013 0f01 	tst.w	r3, #1
  20cfdc:	d009      	beq.n	20cff2 <_ZN3ros10SubscriberIN17aerial_robot_base11DesireCoordE16AttitudeEstimateE8callbackEPh+0x6a>
  20cfde:	105a      	asrs	r2, r3, #1
  20cfe0:	6a84      	ldr	r4, [r0, #40]	; 0x28
  20cfe2:	58a4      	ldr	r4, [r4, r2]
  20cfe4:	6a02      	ldr	r2, [r0, #32]
  20cfe6:	58a2      	ldr	r2, [r4, r2]
  20cfe8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  20cfea:	eb00 0063 	add.w	r0, r0, r3, asr #1
  20cfee:	4790      	blx	r2
  20cff0:	bd10      	pop	{r4, pc}
  20cff2:	6a02      	ldr	r2, [r0, #32]
  20cff4:	e7f8      	b.n	20cfe8 <_ZN3ros10SubscriberIN17aerial_robot_base11DesireCoordE16AttitudeEstimateE8callbackEPh+0x60>

0020cff6 <_ZNK13geometry_msgs14Vector3Stamped9serializeEPh>:
    virtual int serialize(unsigned char *outbuffer) const
  20cff6:	b570      	push	{r4, r5, r6, lr}
  20cff8:	4604      	mov	r4, r0
  20cffa:	460d      	mov	r5, r1
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
  20cffc:	6883      	ldr	r3, [r0, #8]
  20cffe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
  20d000:	6883      	ldr	r3, [r0, #8]
  20d002:	0a1b      	lsrs	r3, r3, #8
  20d004:	704b      	strb	r3, [r1, #1]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
  20d006:	8943      	ldrh	r3, [r0, #10]
  20d008:	708b      	strb	r3, [r1, #2]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
  20d00a:	7ac3      	ldrb	r3, [r0, #11]
  20d00c:	70cb      	strb	r3, [r1, #3]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
  20d00e:	68c3      	ldr	r3, [r0, #12]
  20d010:	710b      	strb	r3, [r1, #4]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
  20d012:	68c3      	ldr	r3, [r0, #12]
  20d014:	0a1b      	lsrs	r3, r3, #8
  20d016:	714b      	strb	r3, [r1, #5]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
  20d018:	89c3      	ldrh	r3, [r0, #14]
  20d01a:	718b      	strb	r3, [r1, #6]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
  20d01c:	7bc3      	ldrb	r3, [r0, #15]
  20d01e:	71cb      	strb	r3, [r1, #7]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
  20d020:	6903      	ldr	r3, [r0, #16]
  20d022:	720b      	strb	r3, [r1, #8]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
  20d024:	6903      	ldr	r3, [r0, #16]
  20d026:	0a1b      	lsrs	r3, r3, #8
  20d028:	724b      	strb	r3, [r1, #9]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
  20d02a:	8a43      	ldrh	r3, [r0, #18]
  20d02c:	728b      	strb	r3, [r1, #10]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
  20d02e:	7cc3      	ldrb	r3, [r0, #19]
  20d030:	72cb      	strb	r3, [r1, #11]
      uint32_t length_frame_id = strlen(this->frame_id);
  20d032:	6940      	ldr	r0, [r0, #20]
  20d034:	f7f3 f8f2 	bl	20021c <strlen>
  20d038:	4606      	mov	r6, r0
      arr[i] = (var >> (8 * i));
  20d03a:	7328      	strb	r0, [r5, #12]
  20d03c:	0a03      	lsrs	r3, r0, #8
  20d03e:	736b      	strb	r3, [r5, #13]
  20d040:	0c03      	lsrs	r3, r0, #16
  20d042:	73ab      	strb	r3, [r5, #14]
  20d044:	0e03      	lsrs	r3, r0, #24
  20d046:	73eb      	strb	r3, [r5, #15]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
  20d048:	4602      	mov	r2, r0
  20d04a:	6961      	ldr	r1, [r4, #20]
  20d04c:	f105 0010 	add.w	r0, r5, #16
  20d050:	f009 fbfb 	bl	21684a <memcpy>
      offset += length_frame_id;
  20d054:	f106 0010 	add.w	r0, r6, #16
      offset += this->vector.serialize(outbuffer + offset);
  20d058:	182b      	adds	r3, r5, r0
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
  20d05a:	6a21      	ldr	r1, [r4, #32]
  20d05c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  20d05e:	5429      	strb	r1, [r5, r0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
  20d060:	0a08      	lsrs	r0, r1, #8
  20d062:	7058      	strb	r0, [r3, #1]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
  20d064:	0c08      	lsrs	r0, r1, #16
  20d066:	7098      	strb	r0, [r3, #2]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
  20d068:	0e09      	lsrs	r1, r1, #24
  20d06a:	70d9      	strb	r1, [r3, #3]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
  20d06c:	711a      	strb	r2, [r3, #4]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
  20d06e:	0a11      	lsrs	r1, r2, #8
  20d070:	7159      	strb	r1, [r3, #5]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
  20d072:	0c11      	lsrs	r1, r2, #16
  20d074:	7199      	strb	r1, [r3, #6]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
  20d076:	0e12      	lsrs	r2, r2, #24
  20d078:	71da      	strb	r2, [r3, #7]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
  20d07a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  20d07c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  20d07e:	7219      	strb	r1, [r3, #8]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
  20d080:	0a08      	lsrs	r0, r1, #8
  20d082:	7258      	strb	r0, [r3, #9]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
  20d084:	0c08      	lsrs	r0, r1, #16
  20d086:	7298      	strb	r0, [r3, #10]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
  20d088:	0e09      	lsrs	r1, r1, #24
  20d08a:	72d9      	strb	r1, [r3, #11]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
  20d08c:	731a      	strb	r2, [r3, #12]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
  20d08e:	0a11      	lsrs	r1, r2, #8
  20d090:	7359      	strb	r1, [r3, #13]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
  20d092:	0c11      	lsrs	r1, r2, #16
  20d094:	7399      	strb	r1, [r3, #14]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
  20d096:	0e12      	lsrs	r2, r2, #24
  20d098:	73da      	strb	r2, [r3, #15]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
  20d09a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  20d09c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  20d09e:	7419      	strb	r1, [r3, #16]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
  20d0a0:	0a08      	lsrs	r0, r1, #8
  20d0a2:	7458      	strb	r0, [r3, #17]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
  20d0a4:	0c08      	lsrs	r0, r1, #16
  20d0a6:	7498      	strb	r0, [r3, #18]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
  20d0a8:	0e09      	lsrs	r1, r1, #24
  20d0aa:	74d9      	strb	r1, [r3, #19]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
  20d0ac:	751a      	strb	r2, [r3, #20]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
  20d0ae:	0a11      	lsrs	r1, r2, #8
  20d0b0:	7559      	strb	r1, [r3, #21]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
  20d0b2:	0c11      	lsrs	r1, r2, #16
  20d0b4:	7599      	strb	r1, [r3, #22]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
  20d0b6:	0e12      	lsrs	r2, r2, #24
  20d0b8:	75da      	strb	r2, [r3, #23]
    }
  20d0ba:	f106 0028 	add.w	r0, r6, #40	; 0x28
  20d0be:	bd70      	pop	{r4, r5, r6, pc}

0020d0c0 <_ZN13geometry_msgs14Vector3Stamped11deserializeEPh>:
    virtual int deserialize(unsigned char *inbuffer)
  20d0c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
  20d0c4:	780b      	ldrb	r3, [r1, #0]
  20d0c6:	6083      	str	r3, [r0, #8]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20d0c8:	784a      	ldrb	r2, [r1, #1]
  20d0ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20d0ce:	6083      	str	r3, [r0, #8]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d0d0:	788a      	ldrb	r2, [r1, #2]
  20d0d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20d0d6:	6083      	str	r3, [r0, #8]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20d0d8:	78ca      	ldrb	r2, [r1, #3]
  20d0da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20d0de:	6083      	str	r3, [r0, #8]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
  20d0e0:	790b      	ldrb	r3, [r1, #4]
  20d0e2:	60c3      	str	r3, [r0, #12]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20d0e4:	794a      	ldrb	r2, [r1, #5]
  20d0e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20d0ea:	60c3      	str	r3, [r0, #12]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d0ec:	798a      	ldrb	r2, [r1, #6]
  20d0ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20d0f2:	60c3      	str	r3, [r0, #12]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20d0f4:	79ca      	ldrb	r2, [r1, #7]
  20d0f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20d0fa:	60c3      	str	r3, [r0, #12]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
  20d0fc:	7a0b      	ldrb	r3, [r1, #8]
  20d0fe:	6103      	str	r3, [r0, #16]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20d100:	7a4a      	ldrb	r2, [r1, #9]
  20d102:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  20d106:	6103      	str	r3, [r0, #16]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d108:	7a8a      	ldrb	r2, [r1, #10]
  20d10a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  20d10e:	6103      	str	r3, [r0, #16]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20d110:	460d      	mov	r5, r1
  20d112:	f815 2f0b 	ldrb.w	r2, [r5, #11]!
  20d116:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  20d11a:	6103      	str	r3, [r0, #16]
  20d11c:	2300      	movs	r3, #0
    var = 0;
  20d11e:	461c      	mov	r4, r3
      var |= (arr[i] << (8 * i));
  20d120:	f815 2f01 	ldrb.w	r2, [r5, #1]!
  20d124:	409a      	lsls	r2, r3
  20d126:	4314      	orrs	r4, r2
  20d128:	3308      	adds	r3, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20d12a:	2b20      	cmp	r3, #32
  20d12c:	d1f8      	bne.n	20d120 <_ZN13geometry_msgs14Vector3Stamped11deserializeEPh+0x60>
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
  20d12e:	f104 0e10 	add.w	lr, r4, #16
  20d132:	f1be 0f10 	cmp.w	lr, #16
  20d136:	d909      	bls.n	20d14c <_ZN13geometry_msgs14Vector3Stamped11deserializeEPh+0x8c>
  20d138:	f101 030f 	add.w	r3, r1, #15
  20d13c:	f104 050f 	add.w	r5, r4, #15
  20d140:	440d      	add	r5, r1
          inbuffer[k-1]=inbuffer[k];
  20d142:	785a      	ldrb	r2, [r3, #1]
  20d144:	f803 2b01 	strb.w	r2, [r3], #1
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
  20d148:	42ab      	cmp	r3, r5
  20d14a:	d1fa      	bne.n	20d142 <_ZN13geometry_msgs14Vector3Stamped11deserializeEPh+0x82>
      inbuffer[offset+length_frame_id-1]=0;
  20d14c:	440c      	add	r4, r1
  20d14e:	2200      	movs	r2, #0
  20d150:	73e2      	strb	r2, [r4, #15]
      this->frame_id = (char *)(inbuffer + offset-1);
  20d152:	f101 030f 	add.w	r3, r1, #15
  20d156:	6143      	str	r3, [r0, #20]
      offset += this->vector.deserialize(inbuffer + offset);
  20d158:	eb01 030e 	add.w	r3, r1, lr
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20d15c:	785c      	ldrb	r4, [r3, #1]
  20d15e:	2700      	movs	r7, #0
  20d160:	0226      	lsls	r6, r4, #8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d162:	f893 8002 	ldrb.w	r8, [r3, #2]
  20d166:	2500      	movs	r5, #0
  20d168:	ea4f 4408 	mov.w	r4, r8, lsl #16
  20d16c:	4334      	orrs	r4, r6
  20d16e:	433d      	orrs	r5, r7
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20d170:	f811 800e 	ldrb.w	r8, [r1, lr]
  20d174:	f04f 0900 	mov.w	r9, #0
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d178:	ea48 0804 	orr.w	r8, r8, r4
  20d17c:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20d180:	78de      	ldrb	r6, [r3, #3]
  20d182:	2500      	movs	r5, #0
  20d184:	0634      	lsls	r4, r6, #24
  20d186:	ea44 0408 	orr.w	r4, r4, r8
  20d18a:	ea45 0509 	orr.w	r5, r5, r9
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
  20d18e:	f893 9004 	ldrb.w	r9, [r3, #4]
  20d192:	ea42 0804 	orr.w	r8, r2, r4
  20d196:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
  20d19a:	795e      	ldrb	r6, [r3, #5]
  20d19c:	0235      	lsls	r5, r6, #8
  20d19e:	ea48 0802 	orr.w	r8, r8, r2
  20d1a2:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
  20d1a6:	799e      	ldrb	r6, [r3, #6]
  20d1a8:	0435      	lsls	r5, r6, #16
  20d1aa:	ea48 0802 	orr.w	r8, r8, r2
  20d1ae:	ea49 0905 	orr.w	r9, r9, r5
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
  20d1b2:	79de      	ldrb	r6, [r3, #7]
  20d1b4:	0635      	lsls	r5, r6, #24
      this->x = u_x.real;
  20d1b6:	ea42 0408 	orr.w	r4, r2, r8
  20d1ba:	ea45 0509 	orr.w	r5, r5, r9
  20d1be:	e9c0 4508 	strd	r4, r5, [r0, #32]
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20d1c2:	7a5e      	ldrb	r6, [r3, #9]
  20d1c4:	2500      	movs	r5, #0
  20d1c6:	0234      	lsls	r4, r6, #8
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d1c8:	f893 800a 	ldrb.w	r8, [r3, #10]
  20d1cc:	2700      	movs	r7, #0
  20d1ce:	ea4f 4608 	mov.w	r6, r8, lsl #16
  20d1d2:	4334      	orrs	r4, r6
  20d1d4:	433d      	orrs	r5, r7
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20d1d6:	f893 8008 	ldrb.w	r8, [r3, #8]
  20d1da:	f04f 0900 	mov.w	r9, #0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d1de:	ea48 0804 	orr.w	r8, r8, r4
  20d1e2:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20d1e6:	7ade      	ldrb	r6, [r3, #11]
  20d1e8:	2500      	movs	r5, #0
  20d1ea:	0634      	lsls	r4, r6, #24
  20d1ec:	ea44 0408 	orr.w	r4, r4, r8
  20d1f0:	ea45 0509 	orr.w	r5, r5, r9
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
  20d1f4:	f893 900c 	ldrb.w	r9, [r3, #12]
  20d1f8:	ea42 0804 	orr.w	r8, r2, r4
  20d1fc:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
  20d200:	7b5e      	ldrb	r6, [r3, #13]
  20d202:	0235      	lsls	r5, r6, #8
  20d204:	ea48 0802 	orr.w	r8, r8, r2
  20d208:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
  20d20c:	7b9e      	ldrb	r6, [r3, #14]
  20d20e:	0435      	lsls	r5, r6, #16
  20d210:	ea48 0802 	orr.w	r8, r8, r2
  20d214:	ea49 0905 	orr.w	r9, r9, r5
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
  20d218:	7bde      	ldrb	r6, [r3, #15]
  20d21a:	0635      	lsls	r5, r6, #24
      this->y = u_y.real;
  20d21c:	ea42 0408 	orr.w	r4, r2, r8
  20d220:	ea45 0509 	orr.w	r5, r5, r9
  20d224:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20d228:	7c5e      	ldrb	r6, [r3, #17]
  20d22a:	2500      	movs	r5, #0
  20d22c:	0234      	lsls	r4, r6, #8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d22e:	f893 8012 	ldrb.w	r8, [r3, #18]
  20d232:	2700      	movs	r7, #0
  20d234:	ea4f 4608 	mov.w	r6, r8, lsl #16
  20d238:	4334      	orrs	r4, r6
  20d23a:	433d      	orrs	r5, r7
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20d23c:	f893 8010 	ldrb.w	r8, [r3, #16]
  20d240:	f04f 0900 	mov.w	r9, #0
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d244:	ea48 0804 	orr.w	r8, r8, r4
  20d248:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20d24c:	7cde      	ldrb	r6, [r3, #19]
  20d24e:	2500      	movs	r5, #0
  20d250:	0634      	lsls	r4, r6, #24
  20d252:	ea44 0408 	orr.w	r4, r4, r8
  20d256:	ea45 0509 	orr.w	r5, r5, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
  20d25a:	f893 9014 	ldrb.w	r9, [r3, #20]
  20d25e:	ea42 0804 	orr.w	r8, r2, r4
  20d262:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
  20d266:	7d5e      	ldrb	r6, [r3, #21]
  20d268:	0235      	lsls	r5, r6, #8
  20d26a:	ea48 0802 	orr.w	r8, r8, r2
  20d26e:	ea49 0905 	orr.w	r9, r9, r5
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
  20d272:	7d9e      	ldrb	r6, [r3, #22]
  20d274:	0435      	lsls	r5, r6, #16
  20d276:	ea42 0408 	orr.w	r4, r2, r8
  20d27a:	ea45 0509 	orr.w	r5, r5, r9
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
  20d27e:	7dde      	ldrb	r6, [r3, #23]
  20d280:	ea4f 6906 	mov.w	r9, r6, lsl #24
      this->z = u_z.real;
  20d284:	4314      	orrs	r4, r2
  20d286:	ea45 0509 	orr.w	r5, r5, r9
  20d28a:	e9c0 450c 	strd	r4, r5, [r0, #48]	; 0x30
    }
  20d28e:	f10e 0018 	add.w	r0, lr, #24
  20d292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0020d298 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv>:
  virtual int spinOnce()
  20d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  20d29c:	b089      	sub	sp, #36	; 0x24
  20d29e:	4604      	mov	r4, r0
  uint32_t time(){return HAL_GetTick();}
  20d2a0:	f002 fb00 	bl	20f8a4 <HAL_GetTick>
  20d2a4:	4605      	mov	r5, r0
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
  20d2a6:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
  20d2aa:	1ac3      	subs	r3, r0, r3
  20d2ac:	f642 22f8 	movw	r2, #11000	; 0x2af8
  20d2b0:	4293      	cmp	r3, r2
  20d2b2:	d902      	bls.n	20d2ba <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x22>
      configured_ = false;
  20d2b4:	2300      	movs	r3, #0
  20d2b6:	f884 32cc 	strb.w	r3, [r4, #716]	; 0x2cc
    if (mode_ != MODE_FIRST_FF)
  20d2ba:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  20d2be:	b133      	cbz	r3, 20d2ce <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
      if (c_time > last_msg_timeout_time)
  20d2c0:	f8d4 32d8 	ldr.w	r3, [r4, #728]	; 0x2d8
  20d2c4:	42ab      	cmp	r3, r5
  20d2c6:	d202      	bcs.n	20d2ce <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x36>
        mode_ = MODE_FIRST_FF;
  20d2c8:	2300      	movs	r3, #0
  20d2ca:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
  20d2ce:	f8df 927c 	ldr.w	r9, [pc, #636]	; 20d54c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2b4>
    t.data.sec += offset / 1000;
  20d2d2:	f8df 827c 	ldr.w	r8, [pc, #636]	; 20d550 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2b8>
    t.data.nsec += (offset % 1000) * 1000000UL;
  20d2d6:	4f99      	ldr	r7, [pc, #612]	; (20d53c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2a4>)
  20d2d8:	e017      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
        message_in[index_++] = data;
  20d2da:	f8d4 32c4 	ldr.w	r3, [r4, #708]	; 0x2c4
  20d2de:	1c5a      	adds	r2, r3, #1
  20d2e0:	f8c4 22c4 	str.w	r2, [r4, #708]	; 0x2c4
  20d2e4:	4423      	add	r3, r4
  20d2e6:	7618      	strb	r0, [r3, #24]
        bytes_--;
  20d2e8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  20d2ec:	3b01      	subs	r3, #1
  20d2ee:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
  20d2f2:	b953      	cbnz	r3, 20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
          mode_ = MODE_MSG_CHECKSUM;
  20d2f4:	2308      	movs	r3, #8
  20d2f6:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
  20d2fa:	e006      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
          mode_++;
  20d2fc:	2301      	movs	r3, #1
  20d2fe:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
  20d302:	f105 0314 	add.w	r3, r5, #20
  20d306:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
      if (spin_timeout_ > 0)
  20d30a:	6963      	ldr	r3, [r4, #20]
  20d30c:	b133      	cbz	r3, 20d31c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x84>
  20d30e:	f002 fac9 	bl	20f8a4 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
  20d312:	1b40      	subs	r0, r0, r5
  20d314:	6963      	ldr	r3, [r4, #20]
  20d316:	4298      	cmp	r0, r3
  20d318:	f200 824e 	bhi.w	20d7b8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x520>
    return rx::read();
  20d31c:	f002 f97c 	bl	20f618 <_ZN2rx4readEv>
      if (data < 0)
  20d320:	2800      	cmp	r0, #0
  20d322:	f2c0 822b 	blt.w	20d77c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4e4>
      checksum_ += data;
  20d326:	f8d4 32c8 	ldr.w	r3, [r4, #712]	; 0x2c8
  20d32a:	4403      	add	r3, r0
  20d32c:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
  20d330:	f8d4 22b8 	ldr.w	r2, [r4, #696]	; 0x2b8
  20d334:	2a07      	cmp	r2, #7
  20d336:	d0d0      	beq.n	20d2da <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x42>
      else if (mode_ == MODE_FIRST_FF)
  20d338:	b972      	cbnz	r2, 20d358 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0xc0>
        if (data == 0xff)
  20d33a:	28ff      	cmp	r0, #255	; 0xff
  20d33c:	d0de      	beq.n	20d2fc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x64>
  uint32_t time(){return HAL_GetTick();}
  20d33e:	f002 fab1 	bl	20f8a4 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
  20d342:	1b40      	subs	r0, r0, r5
  20d344:	f241 3388 	movw	r3, #5000	; 0x1388
  20d348:	4298      	cmp	r0, r3
  20d34a:	d9de      	bls.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
          configured_ = false;
  20d34c:	2300      	movs	r3, #0
  20d34e:	f884 32cc 	strb.w	r3, [r4, #716]	; 0x2cc
          return SPIN_TIMEOUT;
  20d352:	f06f 0001 	mvn.w	r0, #1
  20d356:	e231      	b.n	20d7bc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x524>
      else if (mode_ == MODE_PROTOCOL_VER)
  20d358:	2a01      	cmp	r2, #1
  20d35a:	d02d      	beq.n	20d3b8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x120>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
  20d35c:	2a02      	cmp	r2, #2
  20d35e:	d047      	beq.n	20d3f0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x158>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
  20d360:	2a03      	cmp	r2, #3
  20d362:	d050      	beq.n	20d406 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x16e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
  20d364:	2a04      	cmp	r2, #4
  20d366:	d058      	beq.n	20d41a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x182>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
  20d368:	2a05      	cmp	r2, #5
  20d36a:	d062      	beq.n	20d432 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x19a>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
  20d36c:	2a06      	cmp	r2, #6
  20d36e:	d068      	beq.n	20d442 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1aa>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
  20d370:	2a08      	cmp	r2, #8
  20d372:	d1ca      	bne.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
        mode_ = MODE_FIRST_FF;
  20d374:	2200      	movs	r2, #0
  20d376:	f8c4 22b8 	str.w	r2, [r4, #696]	; 0x2b8
        if ((checksum_ % 256) == 255)
  20d37a:	1ad2      	subs	r2, r2, r3
  20d37c:	b2db      	uxtb	r3, r3
  20d37e:	b2d2      	uxtb	r2, r2
  20d380:	bf58      	it	pl
  20d382:	4253      	negpl	r3, r2
  20d384:	2bff      	cmp	r3, #255	; 0xff
  20d386:	d1c0      	bne.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
          if (topic_ == TopicInfo::ID_PUBLISHER)
  20d388:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  20d38c:	2b00      	cmp	r3, #0
  20d38e:	d06a      	beq.n	20d466 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x1ce>
          else if (topic_ == TopicInfo::ID_TIME)
  20d390:	2b0a      	cmp	r3, #10
  20d392:	f000 80df 	beq.w	20d554 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2bc>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
  20d396:	2b06      	cmp	r3, #6
  20d398:	f000 811b 	beq.w	20d5d2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x33a>
          else if (topic_ == TopicInfo::ID_TX_STOP)
  20d39c:	2b0b      	cmp	r3, #11
  20d39e:	f000 81e9 	beq.w	20d774 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4dc>
            if (subscribers[topic_ - 100])
  20d3a2:	3336      	adds	r3, #54	; 0x36
  20d3a4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
  20d3a8:	2800      	cmp	r0, #0
  20d3aa:	d0ae      	beq.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
              subscribers[topic_ - 100]->callback(message_in);
  20d3ac:	6803      	ldr	r3, [r0, #0]
  20d3ae:	681b      	ldr	r3, [r3, #0]
  20d3b0:	f104 0118 	add.w	r1, r4, #24
  20d3b4:	4798      	blx	r3
  20d3b6:	e7a8      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
        if (data == PROTOCOL_VER)
  20d3b8:	28fe      	cmp	r0, #254	; 0xfe
  20d3ba:	d015      	beq.n	20d3e8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x150>
          mode_ = MODE_FIRST_FF;
  20d3bc:	2300      	movs	r3, #0
  20d3be:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
          if (configured_ == false)
  20d3c2:	f894 32cc 	ldrb.w	r3, [r4, #716]	; 0x2cc
  20d3c6:	2b00      	cmp	r3, #0
  20d3c8:	d19f      	bne.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
      data()
  20d3ca:	4b5d      	ldr	r3, [pc, #372]	; (20d540 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2a8>)
  20d3cc:	9302      	str	r3, [sp, #8]
  20d3ce:	2300      	movs	r3, #0
  20d3d0:	9303      	str	r3, [sp, #12]
  20d3d2:	9304      	str	r3, [sp, #16]
    publish(TopicInfo::ID_TIME, &t);
  20d3d4:	6823      	ldr	r3, [r4, #0]
  20d3d6:	681b      	ldr	r3, [r3, #0]
  20d3d8:	aa02      	add	r2, sp, #8
  20d3da:	210a      	movs	r1, #10
  20d3dc:	4620      	mov	r0, r4
  20d3de:	4798      	blx	r3
  20d3e0:	f002 fa60 	bl	20f8a4 <HAL_GetTick>
    rt_time = hardware_.time();
  20d3e4:	60a0      	str	r0, [r4, #8]
  20d3e6:	e790      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
          mode_++;
  20d3e8:	2302      	movs	r3, #2
  20d3ea:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
  20d3ee:	e78c      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
        bytes_ = data;
  20d3f0:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
        index_ = 0;
  20d3f4:	2300      	movs	r3, #0
  20d3f6:	f8c4 32c4 	str.w	r3, [r4, #708]	; 0x2c4
        mode_++;
  20d3fa:	2303      	movs	r3, #3
  20d3fc:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
        checksum_ = data;               /* first byte for calculating size checksum */
  20d400:	f8c4 02c8 	str.w	r0, [r4, #712]	; 0x2c8
  20d404:	e781      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
        bytes_ += data << 8;
  20d406:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  20d40a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
  20d40e:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
        mode_++;
  20d412:	2304      	movs	r3, #4
  20d414:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
  20d418:	e777      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
        if ((checksum_ % 256) == 255)
  20d41a:	425a      	negs	r2, r3
  20d41c:	b2db      	uxtb	r3, r3
  20d41e:	b2d2      	uxtb	r2, r2
  20d420:	bf58      	it	pl
  20d422:	4253      	negpl	r3, r2
  20d424:	2bff      	cmp	r3, #255	; 0xff
          mode_++;
  20d426:	bf0c      	ite	eq
  20d428:	2305      	moveq	r3, #5
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
  20d42a:	2300      	movne	r3, #0
  20d42c:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
  20d430:	e76b      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
        topic_ = data;
  20d432:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
        mode_++;
  20d436:	2306      	movs	r3, #6
  20d438:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
        checksum_ = data;               /* first byte included in checksum */
  20d43c:	f8c4 02c8 	str.w	r0, [r4, #712]	; 0x2c8
  20d440:	e763      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
        topic_ += data << 8;
  20d442:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  20d446:	eb03 2000 	add.w	r0, r3, r0, lsl #8
  20d44a:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
        mode_ = MODE_MESSAGE;
  20d44e:	2307      	movs	r3, #7
  20d450:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
        if (bytes_ == 0)
  20d454:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  20d458:	2b00      	cmp	r3, #0
  20d45a:	f47f af56 	bne.w	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
          mode_ = MODE_MSG_CHECKSUM;
  20d45e:	2308      	movs	r3, #8
  20d460:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
  20d464:	e751      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
  20d466:	4b36      	ldr	r3, [pc, #216]	; (20d540 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2a8>)
  20d468:	9302      	str	r3, [sp, #8]
  20d46a:	2600      	movs	r6, #0
  20d46c:	9603      	str	r6, [sp, #12]
  20d46e:	9604      	str	r6, [sp, #16]
    publish(TopicInfo::ID_TIME, &t);
  20d470:	6823      	ldr	r3, [r4, #0]
  20d472:	681b      	ldr	r3, [r3, #0]
  20d474:	aa02      	add	r2, sp, #8
  20d476:	210a      	movs	r1, #10
  20d478:	4620      	mov	r0, r4
  20d47a:	4798      	blx	r3
  20d47c:	f002 fa12 	bl	20f8a4 <HAL_GetTick>
    rt_time = hardware_.time();
  20d480:	60a0      	str	r0, [r4, #8]
      buffer_size(0)
  20d482:	4b30      	ldr	r3, [pc, #192]	; (20d544 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2ac>)
  20d484:	9302      	str	r3, [sp, #8]
  20d486:	f8ad 600c 	strh.w	r6, [sp, #12]
  20d48a:	4b2f      	ldr	r3, [pc, #188]	; (20d548 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x2b0>)
  20d48c:	9304      	str	r3, [sp, #16]
  20d48e:	9305      	str	r3, [sp, #20]
  20d490:	9306      	str	r3, [sp, #24]
  20d492:	9607      	str	r6, [sp, #28]
  20d494:	f504 7606 	add.w	r6, r4, #536	; 0x218
  20d498:	f504 781a 	add.w	r8, r4, #616	; 0x268
        ti.buffer_size = OUTPUT_SIZE;
  20d49c:	27ff      	movs	r7, #255	; 0xff
  20d49e:	e002      	b.n	20d4a6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x20e>
  20d4a0:	3604      	adds	r6, #4
    for (i = 0; i < MAX_PUBLISHERS; i++)
  20d4a2:	4546      	cmp	r6, r8
  20d4a4:	d01b      	beq.n	20d4de <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x246>
      if (publishers[i] != 0) // non-empty slot
  20d4a6:	6833      	ldr	r3, [r6, #0]
  20d4a8:	2b00      	cmp	r3, #0
  20d4aa:	d0f9      	beq.n	20d4a0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x208>
        ti.topic_id = publishers[i]->id_;
  20d4ac:	689a      	ldr	r2, [r3, #8]
  20d4ae:	f8ad 200c 	strh.w	r2, [sp, #12]
        ti.topic_name = (char *) publishers[i]->topic_;
  20d4b2:	681a      	ldr	r2, [r3, #0]
  20d4b4:	9204      	str	r2, [sp, #16]
        ti.message_type = (char *) publishers[i]->msg_->getType();
  20d4b6:	6858      	ldr	r0, [r3, #4]
  20d4b8:	6803      	ldr	r3, [r0, #0]
  20d4ba:	689b      	ldr	r3, [r3, #8]
  20d4bc:	4798      	blx	r3
  20d4be:	9005      	str	r0, [sp, #20]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
  20d4c0:	6833      	ldr	r3, [r6, #0]
  20d4c2:	6858      	ldr	r0, [r3, #4]
  20d4c4:	6803      	ldr	r3, [r0, #0]
  20d4c6:	68db      	ldr	r3, [r3, #12]
  20d4c8:	4798      	blx	r3
  20d4ca:	9006      	str	r0, [sp, #24]
        ti.buffer_size = OUTPUT_SIZE;
  20d4cc:	9707      	str	r7, [sp, #28]
  };
  int getEndpointType()
  {
    return endpoint_;
  20d4ce:	6831      	ldr	r1, [r6, #0]
        publish(publishers[i]->getEndpointType(), &ti);
  20d4d0:	6823      	ldr	r3, [r4, #0]
  20d4d2:	681b      	ldr	r3, [r3, #0]
  20d4d4:	aa02      	add	r2, sp, #8
  20d4d6:	6909      	ldr	r1, [r1, #16]
  20d4d8:	4620      	mov	r0, r4
  20d4da:	4798      	blx	r3
  20d4dc:	e7e0      	b.n	20d4a0 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x208>
  20d4de:	f504 782e 	add.w	r8, r4, #696	; 0x2b8
        ti.buffer_size = INPUT_SIZE;
  20d4e2:	27ff      	movs	r7, #255	; 0xff
  20d4e4:	e002      	b.n	20d4ec <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x254>
  20d4e6:	3604      	adds	r6, #4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
  20d4e8:	45b0      	cmp	r8, r6
  20d4ea:	d01d      	beq.n	20d528 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x290>
      if (subscribers[i] != 0) // non-empty slot
  20d4ec:	6830      	ldr	r0, [r6, #0]
  20d4ee:	2800      	cmp	r0, #0
  20d4f0:	d0f9      	beq.n	20d4e6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x24e>
        ti.topic_id = subscribers[i]->id_;
  20d4f2:	6843      	ldr	r3, [r0, #4]
  20d4f4:	f8ad 300c 	strh.w	r3, [sp, #12]
        ti.topic_name = (char *) subscribers[i]->topic_;
  20d4f8:	6883      	ldr	r3, [r0, #8]
  20d4fa:	9304      	str	r3, [sp, #16]
        ti.message_type = (char *) subscribers[i]->getMsgType();
  20d4fc:	6803      	ldr	r3, [r0, #0]
  20d4fe:	689b      	ldr	r3, [r3, #8]
  20d500:	4798      	blx	r3
  20d502:	9005      	str	r0, [sp, #20]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
  20d504:	6830      	ldr	r0, [r6, #0]
  20d506:	6803      	ldr	r3, [r0, #0]
  20d508:	68db      	ldr	r3, [r3, #12]
  20d50a:	4798      	blx	r3
  20d50c:	9006      	str	r0, [sp, #24]
        ti.buffer_size = INPUT_SIZE;
  20d50e:	9707      	str	r7, [sp, #28]
        publish(subscribers[i]->getEndpointType(), &ti);
  20d510:	6823      	ldr	r3, [r4, #0]
  20d512:	f8d3 9000 	ldr.w	r9, [r3]
  20d516:	6830      	ldr	r0, [r6, #0]
  20d518:	6803      	ldr	r3, [r0, #0]
  20d51a:	685b      	ldr	r3, [r3, #4]
  20d51c:	4798      	blx	r3
  20d51e:	aa02      	add	r2, sp, #8
  20d520:	4601      	mov	r1, r0
  20d522:	4620      	mov	r0, r4
  20d524:	47c8      	blx	r9
  20d526:	e7de      	b.n	20d4e6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x24e>
    configured_ = true;
  20d528:	2301      	movs	r3, #1
  20d52a:	f884 32cc 	strb.w	r3, [r4, #716]	; 0x2cc
            last_sync_time = c_time;
  20d52e:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
            last_sync_receive_time = c_time;
  20d532:	f8c4 52d4 	str.w	r5, [r4, #724]	; 0x2d4
            return SPIN_ERR;
  20d536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  20d53a:	e13f      	b.n	20d7bc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x524>
  20d53c:	000f4240 	.word	0x000f4240
  20d540:	002180c8 	.word	0x002180c8
  20d544:	002180e0 	.word	0x002180e0
  20d548:	0021856c 	.word	0x0021856c
  20d54c:	3b9aca00 	.word	0x3b9aca00
  20d550:	10624dd3 	.word	0x10624dd3
  20d554:	f002 f9a6 	bl	20f8a4 <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
  20d558:	68a3      	ldr	r3, [r4, #8]
  20d55a:	eba0 0b03 	sub.w	fp, r0, r3
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20d55e:	7e63      	ldrb	r3, [r4, #25]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d560:	7ea6      	ldrb	r6, [r4, #26]
  20d562:	0436      	lsls	r6, r6, #16
  20d564:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
  20d568:	7e23      	ldrb	r3, [r4, #24]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d56a:	431e      	orrs	r6, r3
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20d56c:	7ee3      	ldrb	r3, [r4, #27]
  20d56e:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
  20d572:	3e01      	subs	r6, #1
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20d574:	7f63      	ldrb	r3, [r4, #29]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d576:	f894 a01e 	ldrb.w	sl, [r4, #30]
  20d57a:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  20d57e:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
  20d582:	7f23      	ldrb	r3, [r4, #28]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d584:	ea4a 0a03 	orr.w	sl, sl, r3
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20d588:	7fe3      	ldrb	r3, [r4, #31]
  20d58a:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
  20d58e:	44ca      	add	sl, r9
  20d590:	f002 f988 	bl	20f8a4 <HAL_GetTick>
    t.data.sec += offset / 1000;
  20d594:	fba8 320b 	umull	r3, r2, r8, fp
  20d598:	0992      	lsrs	r2, r2, #6
    sec_offset = new_now.sec - ms / 1000 - 1;
  20d59a:	1991      	adds	r1, r2, r6
  20d59c:	fba8 6300 	umull	r6, r3, r8, r0
  20d5a0:	099b      	lsrs	r3, r3, #6
  20d5a2:	1ac9      	subs	r1, r1, r3
  20d5a4:	60e1      	str	r1, [r4, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
  20d5a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  20d5aa:	fb01 b212 	mls	r2, r1, r2, fp
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
  20d5ae:	fb07 aa02 	mla	sl, r7, r2, sl
  20d5b2:	fb01 0313 	mls	r3, r1, r3, r0
  20d5b6:	fb07 a313 	mls	r3, r7, r3, sl
  20d5ba:	4621      	mov	r1, r4
  20d5bc:	f841 3f10 	str.w	r3, [r1, #16]!
    normalizeSecNSec(sec_offset, nsec_offset);
  20d5c0:	f104 000c 	add.w	r0, r4, #12
  20d5c4:	f002 f902 	bl	20f7cc <_ZN3ros16normalizeSecNSecERmS0_>
  20d5c8:	f002 f96c 	bl	20f8a4 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
  20d5cc:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
  20d5d0:	e69b      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
            req_param_resp.deserialize(message_in);
  20d5d2:	f104 0a18 	add.w	sl, r4, #24
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20d5d6:	7e23      	ldrb	r3, [r4, #24]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  20d5d8:	7e62      	ldrb	r2, [r4, #25]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  20d5da:	7ea6      	ldrb	r6, [r4, #26]
  20d5dc:	0436      	lsls	r6, r6, #16
  20d5de:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  20d5e2:	431e      	orrs	r6, r3
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20d5e4:	7ee3      	ldrb	r3, [r4, #27]
  20d5e6:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(ints_lengthT > ints_length)
  20d5ea:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
  20d5ee:	429e      	cmp	r6, r3
  20d5f0:	d86f      	bhi.n	20d6d2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x43a>
      ints_length = ints_lengthT;
  20d5f2:	f8c4 62e4 	str.w	r6, [r4, #740]	; 0x2e4
      for( uint32_t i = 0; i < ints_length; i++){
  20d5f6:	2e00      	cmp	r6, #0
  20d5f8:	d073      	beq.n	20d6e2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x44a>
  20d5fa:	4652      	mov	r2, sl
  20d5fc:	2604      	movs	r6, #4
  20d5fe:	2000      	movs	r0, #0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20d600:	7951      	ldrb	r1, [r2, #5]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d602:	7993      	ldrb	r3, [r2, #6]
  20d604:	041b      	lsls	r3, r3, #16
  20d606:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20d60a:	7911      	ldrb	r1, [r2, #4]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d60c:	430b      	orrs	r3, r1
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20d60e:	79d1      	ldrb	r1, [r2, #7]
  20d610:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      this->st_ints = u_st_ints.real;
  20d614:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  20d618:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
  20d61a:	f8d4 12ec 	ldr.w	r1, [r4, #748]	; 0x2ec
  20d61e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
  20d622:	3001      	adds	r0, #1
  20d624:	3204      	adds	r2, #4
  20d626:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
  20d62a:	4283      	cmp	r3, r0
  20d62c:	d8e8      	bhi.n	20d600 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x368>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20d62e:	eb0a 0306 	add.w	r3, sl, r6
  20d632:	4618      	mov	r0, r3
  20d634:	9301      	str	r3, [sp, #4]
  20d636:	f81a 3006 	ldrb.w	r3, [sl, r6]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  20d63a:	7842      	ldrb	r2, [r0, #1]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  20d63c:	f890 b002 	ldrb.w	fp, [r0, #2]
  20d640:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
  20d644:	ea4b 2b02 	orr.w	fp, fp, r2, lsl #8
  20d648:	ea4b 0b03 	orr.w	fp, fp, r3
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20d64c:	78c3      	ldrb	r3, [r0, #3]
  20d64e:	ea4b 6b03 	orr.w	fp, fp, r3, lsl #24
      offset += sizeof(this->floats_length);
  20d652:	3604      	adds	r6, #4
      if(floats_lengthT > floats_length)
  20d654:	f8d4 32f0 	ldr.w	r3, [r4, #752]	; 0x2f0
  20d658:	459b      	cmp	fp, r3
  20d65a:	d844      	bhi.n	20d6e6 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x44e>
      floats_length = floats_lengthT;
  20d65c:	f8c4 b2f0 	str.w	fp, [r4, #752]	; 0x2f0
      for( uint32_t i = 0; i < floats_length; i++){
  20d660:	f1bb 0f00 	cmp.w	fp, #0
  20d664:	d018      	beq.n	20d698 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x400>
  20d666:	9a01      	ldr	r2, [sp, #4]
  20d668:	2100      	movs	r1, #0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20d66a:	7950      	ldrb	r0, [r2, #5]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d66c:	7993      	ldrb	r3, [r2, #6]
  20d66e:	041b      	lsls	r3, r3, #16
  20d670:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20d674:	7910      	ldrb	r0, [r2, #4]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20d676:	4303      	orrs	r3, r0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20d678:	79d0      	ldrb	r0, [r2, #7]
  20d67a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
      this->st_floats = u_st_floats.real;
  20d67e:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
  20d682:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
  20d684:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
  20d688:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
  20d68c:	3101      	adds	r1, #1
  20d68e:	3204      	adds	r2, #4
  20d690:	f8d4 32f0 	ldr.w	r3, [r4, #752]	; 0x2f0
  20d694:	428b      	cmp	r3, r1
  20d696:	d8e8      	bhi.n	20d66a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x3d2>
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20d698:	f81a 2006 	ldrb.w	r2, [sl, r6]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  20d69c:	eb0a 0306 	add.w	r3, sl, r6
  20d6a0:	7859      	ldrb	r1, [r3, #1]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  20d6a2:	f893 b002 	ldrb.w	fp, [r3, #2]
  20d6a6:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
  20d6aa:	ea4b 2b01 	orr.w	fp, fp, r1, lsl #8
  20d6ae:	ea4b 0b02 	orr.w	fp, fp, r2
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20d6b2:	78db      	ldrb	r3, [r3, #3]
  20d6b4:	ea4b 6b03 	orr.w	fp, fp, r3, lsl #24
      offset += sizeof(this->strings_length);
  20d6b8:	3604      	adds	r6, #4
      if(strings_lengthT > strings_length)
  20d6ba:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
  20d6be:	459b      	cmp	fp, r3
  20d6c0:	d81a      	bhi.n	20d6f8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x460>
      strings_length = strings_lengthT;
  20d6c2:	f8c4 b2fc 	str.w	fp, [r4, #764]	; 0x2fc
      for( uint32_t i = 0; i < strings_length; i++){
  20d6c6:	f1bb 0f00 	cmp.w	fp, #0
  20d6ca:	d04f      	beq.n	20d76c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4d4>
  20d6cc:	2100      	movs	r1, #0
      inbuffer[offset+length_st_strings-1]=0;
  20d6ce:	4608      	mov	r0, r1
  20d6d0:	e03d      	b.n	20d74e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4b6>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
  20d6d2:	00b1      	lsls	r1, r6, #2
  20d6d4:	f8d4 02ec 	ldr.w	r0, [r4, #748]	; 0x2ec
  20d6d8:	f009 f988 	bl	2169ec <realloc>
  20d6dc:	f8c4 02ec 	str.w	r0, [r4, #748]	; 0x2ec
  20d6e0:	e787      	b.n	20d5f2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x35a>
      offset += sizeof(this->ints_length);
  20d6e2:	2604      	movs	r6, #4
  20d6e4:	e7a3      	b.n	20d62e <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x396>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
  20d6e6:	ea4f 018b 	mov.w	r1, fp, lsl #2
  20d6ea:	f8d4 02f8 	ldr.w	r0, [r4, #760]	; 0x2f8
  20d6ee:	f009 f97d 	bl	2169ec <realloc>
  20d6f2:	f8c4 02f8 	str.w	r0, [r4, #760]	; 0x2f8
  20d6f6:	e7b1      	b.n	20d65c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x3c4>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
  20d6f8:	ea4f 018b 	mov.w	r1, fp, lsl #2
  20d6fc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
  20d700:	f009 f974 	bl	2169ec <realloc>
  20d704:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
  20d708:	e7db      	b.n	20d6c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x42a>
      offset += 4;
  20d70a:	f106 0e04 	add.w	lr, r6, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
  20d70e:	eb0c 060e 	add.w	r6, ip, lr
  20d712:	4576      	cmp	r6, lr
  20d714:	d909      	bls.n	20d72a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x492>
  20d716:	3303      	adds	r3, #3
  20d718:	4453      	add	r3, sl
  20d71a:	4672      	mov	r2, lr
          inbuffer[k-1]=inbuffer[k];
  20d71c:	f893 c001 	ldrb.w	ip, [r3, #1]
  20d720:	f803 cb01 	strb.w	ip, [r3], #1
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
  20d724:	3201      	adds	r2, #1
  20d726:	4296      	cmp	r6, r2
  20d728:	d8f8      	bhi.n	20d71c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x484>
      inbuffer[offset+length_st_strings-1]=0;
  20d72a:	eb0a 0306 	add.w	r3, sl, r6
  20d72e:	f803 0c01 	strb.w	r0, [r3, #-1]
      this->st_strings = (char *)(inbuffer + offset-1);
  20d732:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
  20d736:	4453      	add	r3, sl
  20d738:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
  20d73c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
  20d740:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
  20d744:	3101      	adds	r1, #1
  20d746:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
  20d74a:	428b      	cmp	r3, r1
  20d74c:	d90e      	bls.n	20d76c <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4d4>
      arrToVar(length_st_strings, (inbuffer + offset));
  20d74e:	4633      	mov	r3, r6
  20d750:	eb0a 0b06 	add.w	fp, sl, r6
  20d754:	2200      	movs	r2, #0
    var = 0;
  20d756:	4694      	mov	ip, r2
      var |= (arr[i] << (8 * i));
  20d758:	f81b eb01 	ldrb.w	lr, [fp], #1
  20d75c:	fa0e fe02 	lsl.w	lr, lr, r2
  20d760:	ea4c 0c0e 	orr.w	ip, ip, lr
  20d764:	3208      	adds	r2, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20d766:	2a20      	cmp	r2, #32
  20d768:	d1f6      	bne.n	20d758 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4c0>
  20d76a:	e7ce      	b.n	20d70a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x472>
            param_recieved = true;
  20d76c:	2301      	movs	r3, #1
  20d76e:	f884 32dc 	strb.w	r3, [r4, #732]	; 0x2dc
  20d772:	e5ca      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
            configured_ = false;
  20d774:	2300      	movs	r3, #0
  20d776:	f884 32cc 	strb.w	r3, [r4, #716]	; 0x2cc
  20d77a:	e5c6      	b.n	20d30a <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x72>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
  20d77c:	f894 32cc 	ldrb.w	r3, [r4, #716]	; 0x2cc
  20d780:	b1fb      	cbz	r3, 20d7c2 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x52a>
  20d782:	f8d4 32d0 	ldr.w	r3, [r4, #720]	; 0x2d0
  20d786:	1aeb      	subs	r3, r5, r3
  20d788:	f640 12c4 	movw	r2, #2500	; 0x9c4
  20d78c:	4293      	cmp	r3, r2
  20d78e:	d801      	bhi.n	20d794 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x4fc>
    return SPIN_OK;
  20d790:	2000      	movs	r0, #0
  20d792:	e013      	b.n	20d7bc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x524>
      data()
  20d794:	4b0c      	ldr	r3, [pc, #48]	; (20d7c8 <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x530>)
  20d796:	9302      	str	r3, [sp, #8]
  20d798:	2600      	movs	r6, #0
  20d79a:	9603      	str	r6, [sp, #12]
  20d79c:	9604      	str	r6, [sp, #16]
    publish(TopicInfo::ID_TIME, &t);
  20d79e:	6823      	ldr	r3, [r4, #0]
  20d7a0:	681b      	ldr	r3, [r3, #0]
  20d7a2:	aa02      	add	r2, sp, #8
  20d7a4:	210a      	movs	r1, #10
  20d7a6:	4620      	mov	r0, r4
  20d7a8:	4798      	blx	r3
  20d7aa:	f002 f87b 	bl	20f8a4 <HAL_GetTick>
    rt_time = hardware_.time();
  20d7ae:	60a0      	str	r0, [r4, #8]
      last_sync_time = c_time;
  20d7b0:	f8c4 52d0 	str.w	r5, [r4, #720]	; 0x2d0
    return SPIN_OK;
  20d7b4:	4630      	mov	r0, r6
  20d7b6:	e001      	b.n	20d7bc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x524>
          return SPIN_TIMEOUT;
  20d7b8:	f06f 0001 	mvn.w	r0, #1
  }
  20d7bc:	b009      	add	sp, #36	; 0x24
  20d7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return SPIN_OK;
  20d7c2:	2000      	movs	r0, #0
  20d7c4:	e7fa      	b.n	20d7bc <_ZN3ros11NodeHandle_I13STMF7HardwareLi20ELi20ELi255ELi255EE8spinOnceEv+0x524>
  20d7c6:	bf00      	nop
  20d7c8:	002180c8 	.word	0x002180c8

0020d7cc <_ZN13StateEstimateC1Ev>:
  StateEstimate()
  20d7cc:	b538      	push	{r3, r4, r5, lr}
  20d7ce:	4604      	mov	r4, r0
    endpoint_(endpoint) {};
  20d7d0:	4b59      	ldr	r3, [pc, #356]	; (20d938 <_ZN13StateEstimateC1Ev+0x16c>)
  20d7d2:	6143      	str	r3, [r0, #20]
	imu_weights_(1,1)
  20d7d4:	f100 0210 	add.w	r2, r0, #16
  20d7d8:	f100 033c 	add.w	r3, r0, #60	; 0x3c
  20d7dc:	6183      	str	r3, [r0, #24]
  20d7de:	2500      	movs	r5, #0
  20d7e0:	6245      	str	r5, [r0, #36]	; 0x24
  20d7e2:	4b56      	ldr	r3, [pc, #344]	; (20d93c <_ZN13StateEstimateC1Ev+0x170>)
  20d7e4:	6283      	str	r3, [r0, #40]	; 0x28
  20d7e6:	f100 0378 	add.w	r3, r0, #120	; 0x78
  20d7ea:	62c3      	str	r3, [r0, #44]	; 0x2c
  20d7ec:	6385      	str	r5, [r0, #56]	; 0x38
      angles()
  20d7ee:	4b54      	ldr	r3, [pc, #336]	; (20d940 <_ZN13StateEstimateC1Ev+0x174>)
  20d7f0:	63c3      	str	r3, [r0, #60]	; 0x3c
  20d7f2:	6405      	str	r5, [r0, #64]	; 0x40
  20d7f4:	6445      	str	r5, [r0, #68]	; 0x44
  20d7f6:	2300      	movs	r3, #0
  20d7f8:	6483      	str	r3, [r0, #72]	; 0x48
  20d7fa:	64c3      	str	r3, [r0, #76]	; 0x4c
  20d7fc:	6503      	str	r3, [r0, #80]	; 0x50
  20d7fe:	6543      	str	r3, [r0, #84]	; 0x54
  20d800:	6583      	str	r3, [r0, #88]	; 0x58
  20d802:	65c3      	str	r3, [r0, #92]	; 0x5c
  20d804:	6603      	str	r3, [r0, #96]	; 0x60
  20d806:	6643      	str	r3, [r0, #100]	; 0x64
  20d808:	6683      	str	r3, [r0, #104]	; 0x68
  20d80a:	66c3      	str	r3, [r0, #108]	; 0x6c
  20d80c:	6703      	str	r3, [r0, #112]	; 0x70
  20d80e:	6743      	str	r3, [r0, #116]	; 0x74
      vector()
  20d810:	494c      	ldr	r1, [pc, #304]	; (20d944 <_ZN13StateEstimateC1Ev+0x178>)
  20d812:	6781      	str	r1, [r0, #120]	; 0x78
      frame_id("")
  20d814:	494c      	ldr	r1, [pc, #304]	; (20d948 <_ZN13StateEstimateC1Ev+0x17c>)
  20d816:	67c1      	str	r1, [r0, #124]	; 0x7c
  20d818:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  20d81c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  20d820:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
  20d824:	4949      	ldr	r1, [pc, #292]	; (20d94c <_ZN13StateEstimateC1Ev+0x180>)
  20d826:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
      z(0)
  20d82a:	4949      	ldr	r1, [pc, #292]	; (20d950 <_ZN13StateEstimateC1Ev+0x184>)
  20d82c:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  20d830:	2000      	movs	r0, #0
  20d832:	2100      	movs	r1, #0
  20d834:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  20d838:	e9c4 0128 	strd	r0, r1, [r4, #160]	; 0xa0
  20d83c:	e9c4 012a 	strd	r0, r1, [r4, #168]	; 0xa8
    endpoint_(endpoint)
  20d840:	4944      	ldr	r1, [pc, #272]	; (20d954 <_ZN13StateEstimateC1Ev+0x188>)
  20d842:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
      coord_type(0)
  20d846:	4944      	ldr	r1, [pc, #272]	; (20d958 <_ZN13StateEstimateC1Ev+0x18c>)
  20d848:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
  20d84c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  20d850:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  20d854:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
  20d858:	f884 50cc 	strb.w	r5, [r4, #204]	; 0xcc
  20d85c:	4b3f      	ldr	r3, [pc, #252]	; (20d95c <_ZN13StateEstimateC1Ev+0x190>)
  20d85e:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  20d862:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
  20d866:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
  20d86a:	2301      	movs	r3, #1
  20d86c:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    topic_ = topic_name;
  20d870:	4b3b      	ldr	r3, [pc, #236]	; (20d960 <_ZN13StateEstimateC1Ev+0x194>)
  20d872:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  20d876:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
  20d87a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
  20d87e:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  20d882:	2004      	movs	r0, #4
  20d884:	f006 fc21 	bl	2140ca <_Znwj>
	this->_M_impl._M_start = this->_M_allocate(__n);
  20d888:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  20d88c:	1d03      	adds	r3, r0, #4
  20d88e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	*__first = __tmp;
  20d892:	6005      	str	r5, [r0, #0]
	this->_M_impl._M_finish =
  20d894:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
  20d898:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
  20d89c:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
  20d8a0:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
  20d8a4:	2004      	movs	r0, #4
  20d8a6:	f006 fc10 	bl	2140ca <_Znwj>
  20d8aa:	e006      	b.n	20d8ba <_ZN13StateEstimateC1Ev+0xee>
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  20d8ac:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
	if (__p)
  20d8b0:	b108      	cbz	r0, 20d8b6 <_ZN13StateEstimateC1Ev+0xea>
      { ::operator delete(__p); }
  20d8b2:	f006 fbda 	bl	21406a <_ZdlPv>
  20d8b6:	f006 fe57 	bl	214568 <__cxa_end_cleanup>
	this->_M_impl._M_start = this->_M_allocate(__n);
  20d8ba:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  20d8be:	1d03      	adds	r3, r0, #4
  20d8c0:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
  20d8c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  20d8c8:	6002      	str	r2, [r0, #0]
	this->_M_impl._M_finish =
  20d8ca:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
  20d8ce:	4b25      	ldr	r3, [pc, #148]	; (20d964 <_ZN13StateEstimateC1Ev+0x198>)
  20d8d0:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c


class AltitudeEstimate
{
public:
  AltitudeEstimate(): baro_pub_("baro", &baro_msg_)
  20d8d4:	f504 7390 	add.w	r3, r4, #288	; 0x120
  20d8d8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  20d8dc:	2300      	movs	r3, #0
  20d8de:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
      temperature(0)
  20d8e2:	4a21      	ldr	r2, [pc, #132]	; (20d968 <_ZN13StateEstimateC1Ev+0x19c>)
  20d8e4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
  20d8e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
  20d8ec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
  20d8f0:	2200      	movs	r2, #0
  20d8f2:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
  20d8f6:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
  20d8fa:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
  20d8fe:	491b      	ldr	r1, [pc, #108]	; (20d96c <_ZN13StateEstimateC1Ev+0x1a0>)
  20d900:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
#include "sensors/gps/gps_ublox.h"

class PosEstimate
{
public:
  PosEstimate():gps_pub_("gps", &gps_msg_)
  20d904:	f504 71ae 	add.w	r1, r4, #348	; 0x15c
  20d908:	f8c4 114c 	str.w	r1, [r4, #332]	; 0x14c
  20d90c:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
      sat_num(0)
  20d910:	4917      	ldr	r1, [pc, #92]	; (20d970 <_ZN13StateEstimateC1Ev+0x1a4>)
  20d912:	f8c4 115c 	str.w	r1, [r4, #348]	; 0x15c
  20d916:	f8c4 3160 	str.w	r3, [r4, #352]	; 0x160
  20d91a:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
  20d91e:	f8c4 2168 	str.w	r2, [r4, #360]	; 0x168
  20d922:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
  20d926:	f8c4 2170 	str.w	r2, [r4, #368]	; 0x170
  20d92a:	f8c4 2174 	str.w	r2, [r4, #372]	; 0x174
  20d92e:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
  }
  20d932:	4620      	mov	r0, r4
  20d934:	bd38      	pop	{r3, r4, r5, pc}
  20d936:	bf00      	nop
  20d938:	00218264 	.word	0x00218264
  20d93c:	00218268 	.word	0x00218268
  20d940:	00218140 	.word	0x00218140
  20d944:	002181a0 	.word	0x002181a0
  20d948:	00218170 	.word	0x00218170
  20d94c:	0021856c 	.word	0x0021856c
  20d950:	00218188 	.word	0x00218188
  20d954:	002181c4 	.word	0x002181c4
  20d958:	00218158 	.word	0x00218158
  20d95c:	0020cead 	.word	0x0020cead
  20d960:	00218274 	.word	0x00218274
  20d964:	00218288 	.word	0x00218288
  20d968:	002181dc 	.word	0x002181dc
  20d96c:	00218290 	.word	0x00218290
  20d970:	002181f4 	.word	0x002181f4

0020d974 <HAL_SYSTICK_Callback>:
/* USER CODE BEGIN 0 */

// main subrutine for update enach instance
void HAL_SYSTICK_Callback(void)
{
 if(!start_processing_flag_) return;
  20d974:	4b65      	ldr	r3, [pc, #404]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  20d976:	781b      	ldrb	r3, [r3, #0]
  20d978:	b903      	cbnz	r3, 20d97c <HAL_SYSTICK_Callback+0x8>
  20d97a:	4770      	bx	lr
{
  20d97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  20d980:	b0ef      	sub	sp, #444	; 0x1bc

#if NERVE_COMM
  Spine::send();
  20d982:	f7f8 fbbd 	bl	206100 <_ZN5Spine4sendEv>
#endif

  /* sensors */
#if IMU_FLAG
  imu_.update();
  20d986:	4c61      	ldr	r4, [pc, #388]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  20d988:	1d20      	adds	r0, r4, #4
  20d98a:	f7fd fbed 	bl	20b168 <_ZN3IMU6updateEv>
#endif

#if BARO_FLAG
  baro_.update();
  20d98e:	2100      	movs	r1, #0
  20d990:	f504 708e 	add.w	r0, r4, #284	; 0x11c
  20d994:	f7fc f97c 	bl	209c90 <_ZN4Baro6updateEb>
#endif

#if GPS_FLAG
  gps_.update();
  20d998:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
  20d99c:	f7fc fc98 	bl	20a2d0 <_ZN3GPS6updateEv>
      }
  }

  void update()
  {
    if(attitude_estimate_flag_) attitude_estimator_.update();
  20d9a0:	f894 3464 	ldrb.w	r3, [r4, #1124]	; 0x464
  20d9a4:	2b00      	cmp	r3, #0
  20d9a6:	d13b      	bne.n	20da20 <HAL_SYSTICK_Callback+0xac>
    if(altitude_estimate_flag_) altitude_estimator_.update();
  20d9a8:	4b58      	ldr	r3, [pc, #352]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  20d9aa:	f893 3465 	ldrb.w	r3, [r3, #1125]	; 0x465
  20d9ae:	2b00      	cmp	r3, #0
  20d9b0:	f040 827b 	bne.w	20deaa <HAL_SYSTICK_Callback+0x536>
    if(pos_estimate_flag_) pos_estimator_.update();
  20d9b4:	4b55      	ldr	r3, [pc, #340]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  20d9b6:	f893 3466 	ldrb.w	r3, [r3, #1126]	; 0x466
  20d9ba:	b13b      	cbz	r3, 20d9cc <HAL_SYSTICK_Callback+0x58>
    gps_ = gps;
  }

  void update()
  {
    if(gps_->getUpdate())
  20d9bc:	4b53      	ldr	r3, [pc, #332]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  bool getUpdate() { return update_; }
  20d9be:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
  20d9c2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
  20d9c6:	2b00      	cmp	r3, #0
  20d9c8:	f040 82ca 	bne.w	20df60 <HAL_SYSTICK_Callback+0x5ec>
    att_controller_.update();
  20d9cc:	4c4f      	ldr	r4, [pc, #316]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  20d9ce:	f204 40d4 	addw	r0, r4, #1236	; 0x4d4
  20d9d2:	f7fb f93d 	bl	208c50 <_ZN18AttitudeController6updateEv>
#if FLIGHT_CONTROL_FLAG
  controller_.update();
#endif

#if NERVE_COMM
  Spine::update();
  20d9d6:	f7f8 fbcf 	bl	206178 <_ZN5Spine6updateEv>
  20d9da:	f001 ff63 	bl	20f8a4 <HAL_GetTick>
  20d9de:	4605      	mov	r5, r0
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
  20d9e0:	f8d4 3cf0 	ldr.w	r3, [r4, #3312]	; 0xcf0
  20d9e4:	1ac3      	subs	r3, r0, r3
  20d9e6:	f642 22f8 	movw	r2, #11000	; 0x2af8
  20d9ea:	4293      	cmp	r3, r2
  20d9ec:	d902      	bls.n	20d9f4 <HAL_SYSTICK_Callback+0x80>
      configured_ = false;
  20d9ee:	2200      	movs	r2, #0
  20d9f0:	f884 2ce8 	strb.w	r2, [r4, #3304]	; 0xce8
    if (mode_ != MODE_FIRST_FF)
  20d9f4:	4b45      	ldr	r3, [pc, #276]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  20d9f6:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
  20d9fa:	b143      	cbz	r3, 20da0e <HAL_SYSTICK_Callback+0x9a>
      if (c_time > last_msg_timeout_time)
  20d9fc:	4b43      	ldr	r3, [pc, #268]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  20d9fe:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
  20da02:	429d      	cmp	r5, r3
  20da04:	d903      	bls.n	20da0e <HAL_SYSTICK_Callback+0x9a>
        mode_ = MODE_FIRST_FF;
  20da06:	2200      	movs	r2, #0
  20da08:	4b40      	ldr	r3, [pc, #256]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  20da0a:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
      if (spin_timeout_ > 0)
  20da0e:	4c3f      	ldr	r4, [pc, #252]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  20da10:	f604 271c 	addw	r7, r4, #2588	; 0xa1c
  20da14:	9701      	str	r7, [sp, #4]
    t.data.sec += offset / 1000;
  20da16:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 20db10 <HAL_SYSTICK_Callback+0x19c>
    t.data.nsec += (offset % 1000) * 1000000UL;
  20da1a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 20db14 <HAL_SYSTICK_Callback+0x1a0>
  20da1e:	e310      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
      { return *(this->_M_impl._M_start + __n); }
  20da20:	f8d4 c3c4 	ldr.w	ip, [r4, #964]	; 0x3c4
    if(imu_list_[0]->getUpdate())
  20da24:	f8dc 3000 	ldr.w	r3, [ip]
  20da28:	791a      	ldrb	r2, [r3, #4]
  20da2a:	2a00      	cmp	r2, #0
  20da2c:	d0bc      	beq.n	20d9a8 <HAL_SYSTICK_Callback+0x34>
	  if(!calibrate_acc_ && !calibrate_gyro_ && !calibrate_mag_) return true;
  20da2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  20da30:	2a00      	cmp	r2, #0
  20da32:	d1b9      	bne.n	20d9a8 <HAL_SYSTICK_Callback+0x34>
  20da34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  20da36:	2a00      	cmp	r2, #0
  20da38:	d1b6      	bne.n	20d9a8 <HAL_SYSTICK_Callback+0x34>
  20da3a:	f8d3 805c 	ldr.w	r8, [r3, #92]	; 0x5c
  20da3e:	f1b8 0f00 	cmp.w	r8, #0
  20da42:	d1b1      	bne.n	20d9a8 <HAL_SYSTICK_Callback+0x34>
        x = y = z = 0;
  20da44:	2300      	movs	r3, #0
  20da46:	9311      	str	r3, [sp, #68]	; 0x44
  20da48:	9310      	str	r3, [sp, #64]	; 0x40
  20da4a:	930f      	str	r3, [sp, #60]	; 0x3c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  20da4c:	4b2f      	ldr	r3, [pc, #188]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  20da4e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
  20da52:	eba3 030c 	sub.w	r3, r3, ip
	  for(unsigned int i = 0; i < imu_list_.size(); i++)
  20da56:	089b      	lsrs	r3, r3, #2
  20da58:	d03b      	beq.n	20dad2 <HAL_SYSTICK_Callback+0x15e>
  20da5a:	2600      	movs	r6, #0
		else return gyro_;
  20da5c:	ad21      	add	r5, sp, #132	; 0x84
  20da5e:	ac24      	add	r4, sp, #144	; 0x90
      { return *(this->_M_impl._M_start + __n); }
  20da60:	4f2a      	ldr	r7, [pc, #168]	; (20db0c <HAL_SYSTICK_Callback+0x198>)
  20da62:	4662      	mov	r2, ip
  20da64:	e026      	b.n	20dab4 <HAL_SYSTICK_Callback+0x140>
  20da66:	3308      	adds	r3, #8
  20da68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  20da6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20da70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  20da74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		 sum_gyro += (imu_list_[i]->getGyro() * imu_weights_[i]);
  20da78:	ab27      	add	r3, sp, #156	; 0x9c
  20da7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  20da7e:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
  20da82:	4472      	add	r2, lr
  20da84:	ed92 0a00 	vldr	s0, [r2]
  20da88:	4618      	mov	r0, r3
  20da8a:	f7fb fdd5 	bl	209638 <_ZNK7Vector3IfEmlEf>
  20da8e:	ed8d 0a2a 	vstr	s0, [sp, #168]	; 0xa8
  20da92:	edcd 0a2b 	vstr	s1, [sp, #172]	; 0xac
  20da96:	ed8d 1a2c 	vstr	s2, [sp, #176]	; 0xb0
  20da9a:	a92a      	add	r1, sp, #168	; 0xa8
  20da9c:	a80f      	add	r0, sp, #60	; 0x3c
  20da9e:	f7fb fda1 	bl	2095e4 <_ZN7Vector3IfEpLERKS0_>
	  for(unsigned int i = 0; i < imu_list_.size(); i++)
  20daa2:	3601      	adds	r6, #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
  20daa4:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
  20daa8:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
  20daac:	1a9b      	subs	r3, r3, r2
  20daae:	ebb6 0fa3 	cmp.w	r6, r3, asr #2
  20dab2:	d20d      	bcs.n	20dad0 <HAL_SYSTICK_Callback+0x15c>
      { return *(this->_M_impl._M_start + __n); }
  20dab4:	ea4f 0e86 	mov.w	lr, r6, lsl #2
		 sum_gyro += (imu_list_[i]->getGyro() * imu_weights_[i]);
  20dab8:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
		if(virtual_frame_) return gyro_v_;
  20dabc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
  20dac0:	2a00      	cmp	r2, #0
  20dac2:	d0d0      	beq.n	20da66 <HAL_SYSTICK_Callback+0xf2>
  20dac4:	332c      	adds	r3, #44	; 0x2c
  20dac6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  20daca:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20dace:	e7cf      	b.n	20da70 <HAL_SYSTICK_Callback+0xfc>
  20dad0:	4694      	mov	ip, r2
	  gyro = sum_gyro;
  20dad2:	ab03      	add	r3, sp, #12
  20dad4:	aa0f      	add	r2, sp, #60	; 0x3c
  20dad6:	ca07      	ldmia	r2, {r0, r1, r2}
  20dad8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  acc = imu_list_[0]->getAcc();
  20dadc:	f8dc 3000 	ldr.w	r3, [ip]
		if(virtual_frame_) return acc_v_;
  20dae0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
  20dae4:	b1c2      	cbz	r2, 20db18 <HAL_SYSTICK_Callback+0x1a4>
  20dae6:	ad15      	add	r5, sp, #84	; 0x54
  20dae8:	f103 0238 	add.w	r2, r3, #56	; 0x38
  20daec:	ca07      	ldmia	r2, {r0, r1, r2}
  20daee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20daf2:	ac18      	add	r4, sp, #96	; 0x60
  20daf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20daf8:	ad06      	add	r5, sp, #24
  20dafa:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		if(virtual_frame_) return mag_v_;
  20dafe:	ac1b      	add	r4, sp, #108	; 0x6c
  20db00:	3344      	adds	r3, #68	; 0x44
  20db02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  20db06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20db0a:	e017      	b.n	20db3c <HAL_SYSTICK_Callback+0x1c8>
  20db0c:	20000470 	.word	0x20000470
  20db10:	10624dd3 	.word	0x10624dd3
  20db14:	000f4240 	.word	0x000f4240
		else return acc_;
  20db18:	ad15      	add	r5, sp, #84	; 0x54
  20db1a:	f103 0214 	add.w	r2, r3, #20
  20db1e:	ca07      	ldmia	r2, {r0, r1, r2}
  20db20:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  20db24:	ac18      	add	r4, sp, #96	; 0x60
  20db26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20db2a:	ad06      	add	r5, sp, #24
  20db2c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		else return mag_;
  20db30:	ac1b      	add	r4, sp, #108	; 0x6c
  20db32:	3320      	adds	r3, #32
  20db34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  20db38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  20db3c:	ac1e      	add	r4, sp, #120	; 0x78
  20db3e:	ab1b      	add	r3, sp, #108	; 0x6c
  20db40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  20db44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  mag = imu_list_[0]->getMag();
  20db48:	ab09      	add	r3, sp, #36	; 0x24
  20db4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        estimator_->update(gyro, acc, mag);
  20db4e:	f8df 94b4 	ldr.w	r9, [pc, #1204]	; 20e004 <HAL_SYSTICK_Callback+0x690>
  20db52:	f8d9 43c0 	ldr.w	r4, [r9, #960]	; 0x3c0
    acc_[Frame::BODY] = acc;
  20db56:	aa06      	add	r2, sp, #24
  20db58:	f104 0e04 	add.w	lr, r4, #4
  20db5c:	ca07      	ldmia	r2, {r0, r1, r2}
  20db5e:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
    gyro_[Frame::BODY] = gyro;
  20db62:	aa03      	add	r2, sp, #12
  20db64:	f104 051c 	add.w	r5, r4, #28
  20db68:	ca07      	ldmia	r2, {r0, r1, r2}
  20db6a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    mag_[Frame::BODY] = mag;
  20db6e:	f104 0634 	add.w	r6, r4, #52	; 0x34
  20db72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  20db76:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    acc_[Frame::VIRTUAL] = r_* acc_[Frame::BODY];
  20db7a:	f104 0770 	add.w	r7, r4, #112	; 0x70
  20db7e:	4671      	mov	r1, lr
  20db80:	4638      	mov	r0, r7
  20db82:	f7fb fca3 	bl	2094cc <_ZNK7Matrix3IfEmlERK7Vector3IfE>
  20db86:	ed84 0a04 	vstr	s0, [r4, #16]
  20db8a:	edc4 0a05 	vstr	s1, [r4, #20]
  20db8e:	ed84 1a06 	vstr	s2, [r4, #24]
    gyro_[Frame::VIRTUAL] = r_*  gyro_[Frame::BODY];
  20db92:	4629      	mov	r1, r5
  20db94:	4638      	mov	r0, r7
  20db96:	f7fb fc99 	bl	2094cc <_ZNK7Matrix3IfEmlERK7Vector3IfE>
  20db9a:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
  20db9e:	edc4 0a0b 	vstr	s1, [r4, #44]	; 0x2c
  20dba2:	ed84 1a0c 	vstr	s2, [r4, #48]	; 0x30
    mag_[Frame::VIRTUAL] = r_ * mag_[Frame::BODY];
  20dba6:	4631      	mov	r1, r6
  20dba8:	4638      	mov	r0, r7
  20dbaa:	f7fb fc8f 	bl	2094cc <_ZNK7Matrix3IfEmlERK7Vector3IfE>
  20dbae:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
  20dbb2:	edc4 0a11 	vstr	s1, [r4, #68]	; 0x44
  20dbb6:	ed84 1a12 	vstr	s2, [r4, #72]	; 0x48
  20dbba:	f104 0a4c 	add.w	sl, r4, #76	; 0x4c
  20dbbe:	ae0c      	add	r6, sp, #48	; 0x30
  20dbc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  20dbc4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  double b2_;
  Vector3f pre1_, pre2_;

  void filterFunction(Vector3f input, Vector3f& output)
  {
    Vector3f reg = input + pre1_  *  a1_ + pre2_ * a2_;
  20dbc8:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
  20dbcc:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
  20dbd0:	f7f2 ff7e 	bl	200ad0 <__aeabi_d2f>
  20dbd4:	ee00 0a10 	vmov	s0, r0
  20dbd8:	4628      	mov	r0, r5
  20dbda:	f7fb fd2d 	bl	209638 <_ZNK7Vector3IfEmlEf>
  20dbde:	ed8d 0a3c 	vstr	s0, [sp, #240]	; 0xf0
  20dbe2:	edcd 0a3d 	vstr	s1, [sp, #244]	; 0xf4
  20dbe6:	ed8d 1a3e 	vstr	s2, [sp, #248]	; 0xf8
  20dbea:	a93c      	add	r1, sp, #240	; 0xf0
  20dbec:	4630      	mov	r0, r6
  20dbee:	f7fb fd33 	bl	209658 <_ZNK7Vector3IfEplERKS0_>
  20dbf2:	ed8d 0a3f 	vstr	s0, [sp, #252]	; 0xfc
  20dbf6:	edcd 0a40 	vstr	s1, [sp, #256]	; 0x100
  20dbfa:	ed8d 1a41 	vstr	s2, [sp, #260]	; 0x104
  20dbfe:	f104 0bfc 	add.w	fp, r4, #252	; 0xfc
  20dc02:	e9d4 0134 	ldrd	r0, r1, [r4, #208]	; 0xd0
  20dc06:	f7f2 ff63 	bl	200ad0 <__aeabi_d2f>
  20dc0a:	ee00 0a10 	vmov	s0, r0
  20dc0e:	4658      	mov	r0, fp
  20dc10:	f7fb fd12 	bl	209638 <_ZNK7Vector3IfEmlEf>
  20dc14:	ed8d 0a39 	vstr	s0, [sp, #228]	; 0xe4
  20dc18:	edcd 0a3a 	vstr	s1, [sp, #232]	; 0xe8
  20dc1c:	ed8d 1a3b 	vstr	s2, [sp, #236]	; 0xec
  20dc20:	a939      	add	r1, sp, #228	; 0xe4
  20dc22:	a83f      	add	r0, sp, #252	; 0xfc
  20dc24:	f7fb fd18 	bl	209658 <_ZNK7Vector3IfEplERKS0_>
  20dc28:	ae0f      	add	r6, sp, #60	; 0x3c
  20dc2a:	ed8d 0a0f 	vstr	s0, [sp, #60]	; 0x3c
  20dc2e:	edcd 0a10 	vstr	s1, [sp, #64]	; 0x40
  20dc32:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
    output = reg  * b0_ +   pre1_ * b1_ + pre2_ * b2_;
  20dc36:	e9d4 0136 	ldrd	r0, r1, [r4, #216]	; 0xd8
  20dc3a:	f7f2 ff49 	bl	200ad0 <__aeabi_d2f>
  20dc3e:	ee00 0a10 	vmov	s0, r0
  20dc42:	4630      	mov	r0, r6
  20dc44:	f7fb fcf8 	bl	209638 <_ZNK7Vector3IfEmlEf>
  20dc48:	ed8d 0a33 	vstr	s0, [sp, #204]	; 0xcc
  20dc4c:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
  20dc50:	ed8d 1a35 	vstr	s2, [sp, #212]	; 0xd4
  20dc54:	e9d4 0138 	ldrd	r0, r1, [r4, #224]	; 0xe0
  20dc58:	f7f2 ff3a 	bl	200ad0 <__aeabi_d2f>
  20dc5c:	ee00 0a10 	vmov	s0, r0
  20dc60:	4628      	mov	r0, r5
  20dc62:	f7fb fce9 	bl	209638 <_ZNK7Vector3IfEmlEf>
  20dc66:	ed8d 0a30 	vstr	s0, [sp, #192]	; 0xc0
  20dc6a:	edcd 0a31 	vstr	s1, [sp, #196]	; 0xc4
  20dc6e:	ed8d 1a32 	vstr	s2, [sp, #200]	; 0xc8
  20dc72:	a930      	add	r1, sp, #192	; 0xc0
  20dc74:	a833      	add	r0, sp, #204	; 0xcc
  20dc76:	f7fb fcef 	bl	209658 <_ZNK7Vector3IfEplERKS0_>
  20dc7a:	ed8d 0a36 	vstr	s0, [sp, #216]	; 0xd8
  20dc7e:	edcd 0a37 	vstr	s1, [sp, #220]	; 0xdc
  20dc82:	ed8d 1a38 	vstr	s2, [sp, #224]	; 0xe0
  20dc86:	e9d4 013a 	ldrd	r0, r1, [r4, #232]	; 0xe8
  20dc8a:	f7f2 ff21 	bl	200ad0 <__aeabi_d2f>
  20dc8e:	ee00 0a10 	vmov	s0, r0
  20dc92:	4658      	mov	r0, fp
  20dc94:	f7fb fcd0 	bl	209638 <_ZNK7Vector3IfEmlEf>
  20dc98:	ed8d 0a2d 	vstr	s0, [sp, #180]	; 0xb4
  20dc9c:	edcd 0a2e 	vstr	s1, [sp, #184]	; 0xb8
  20dca0:	ed8d 1a2f 	vstr	s2, [sp, #188]	; 0xbc
  20dca4:	a92d      	add	r1, sp, #180	; 0xb4
  20dca6:	a836      	add	r0, sp, #216	; 0xd8
  20dca8:	f7fb fcd6 	bl	209658 <_ZNK7Vector3IfEplERKS0_>
  20dcac:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
  20dcb0:	edc4 0a14 	vstr	s1, [r4, #80]	; 0x50
  20dcb4:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
    pre2_ = pre1_;
  20dcb8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  20dcbc:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
    pre1_ = reg;
  20dcc0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  20dcc4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    gyro_smooth_[Frame::VIRTUAL] = r_*  gyro_smooth_[Frame::BODY];
  20dcc8:	4651      	mov	r1, sl
  20dcca:	4638      	mov	r0, r7
  20dccc:	f7fb fbfe 	bl	2094cc <_ZNK7Matrix3IfEmlERK7Vector3IfE>
  20dcd0:	ed84 0a16 	vstr	s0, [r4, #88]	; 0x58
  20dcd4:	edc4 0a17 	vstr	s1, [r4, #92]	; 0x5c
  20dcd8:	ed84 1a18 	vstr	s2, [r4, #96]	; 0x60
    estimation();
  20dcdc:	6823      	ldr	r3, [r4, #0]
  20dcde:	681b      	ldr	r3, [r3, #0]
  20dce0:	4620      	mov	r0, r4
  20dce2:	4798      	blx	r3
        if(nh_->connected())  publish();
  20dce4:	f8d9 02f0 	ldr.w	r0, [r9, #752]	; 0x2f0
  20dce8:	6803      	ldr	r3, [r0, #0]
  20dcea:	689b      	ldr	r3, [r3, #8]
  20dcec:	4798      	blx	r3
  20dcee:	b930      	cbnz	r0, 20dcfe <HAL_SYSTICK_Callback+0x38a>
  20dcf0:	4bc4      	ldr	r3, [pc, #784]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
        imu_list_[0]->setUpdate(false);
  20dcf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
  20dcf6:	681b      	ldr	r3, [r3, #0]
	void setUpdate(bool update) {update_ = update;}
  20dcf8:	2200      	movs	r2, #0
  20dcfa:	711a      	strb	r2, [r3, #4]
  20dcfc:	e654      	b.n	20d9a8 <HAL_SYSTICK_Callback+0x34>
	uint32_t now_time = HAL_GetTick();
  20dcfe:	f001 fdd1 	bl	20f8a4 <HAL_GetTick>
  20dd02:	4681      	mov	r9, r0
    if( now_time - last_imu_pub_time_ >= IMU_PUB_INTERVAL)
  20dd04:	4bbf      	ldr	r3, [pc, #764]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  20dd06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
  20dd0a:	1ac3      	subs	r3, r0, r3
  20dd0c:	2b04      	cmp	r3, #4
  20dd0e:	d846      	bhi.n	20dd9e <HAL_SYSTICK_Callback+0x42a>
      if( now_time - last_attitude_pub_time_ >= ATTITUDE_PUB_INTERVAL)
  20dd10:	4bbc      	ldr	r3, [pc, #752]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  20dd12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
  20dd16:	eba9 0303 	sub.w	r3, r9, r3
  20dd1a:	2b63      	cmp	r3, #99	; 0x63
  20dd1c:	d9e8      	bls.n	20dcf0 <HAL_SYSTICK_Callback+0x37c>
        last_attitude_pub_time_ = now_time;
  20dd1e:	4cb9      	ldr	r4, [pc, #740]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  20dd20:	f8c4 93e0 	str.w	r9, [r4, #992]	; 0x3e0
        attitude_msg_.header.stamp = nh_->now();
  20dd24:	f8d4 52f0 	ldr.w	r5, [r4, #752]	; 0x2f0
  20dd28:	f001 fdbc 	bl	20f8a4 <HAL_GetTick>
    current_time.sec = ms / 1000 + sec_offset;
  20dd2c:	4bb6      	ldr	r3, [pc, #728]	; (20e008 <HAL_SYSTICK_Callback+0x694>)
  20dd2e:	fba3 2300 	umull	r2, r3, r3, r0
  20dd32:	099b      	lsrs	r3, r3, #6
  20dd34:	68ea      	ldr	r2, [r5, #12]
  20dd36:	441a      	add	r2, r3
  20dd38:	9268      	str	r2, [sp, #416]	; 0x1a0
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
  20dd3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  20dd3e:	fb02 0313 	mls	r3, r2, r3, r0
  20dd42:	692a      	ldr	r2, [r5, #16]
  20dd44:	49b1      	ldr	r1, [pc, #708]	; (20e00c <HAL_SYSTICK_Callback+0x698>)
  20dd46:	fb01 2303 	mla	r3, r1, r3, r2
  20dd4a:	9369      	str	r3, [sp, #420]	; 0x1a4
    normalizeSecNSec(current_time.sec, current_time.nsec);
  20dd4c:	ad68      	add	r5, sp, #416	; 0x1a0
  20dd4e:	a969      	add	r1, sp, #420	; 0x1a4
  20dd50:	4628      	mov	r0, r5
  20dd52:	f001 fd3b 	bl	20f7cc <_ZN3ros16normalizeSecNSecERmS0_>
  20dd56:	f504 7359 	add.w	r3, r4, #868	; 0x364
  20dd5a:	e895 0003 	ldmia.w	r5, {r0, r1}
  20dd5e:	e883 0003 	stmia.w	r3, {r0, r1}
        attitude_msg_.vector.x = estimator_->getAttitude(Frame::VIRTUAL).x;
  20dd62:	f8d4 53c0 	ldr.w	r5, [r4, #960]	; 0x3c0
  20dd66:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
  20dd6a:	f7f2 fbc3 	bl	2004f4 <__aeabi_f2d>
  20dd6e:	e9c4 01de 	strd	r0, r1, [r4, #888]	; 0x378
        attitude_msg_.vector.y = estimator_->getAttitude(Frame::VIRTUAL).y;
  20dd72:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
  20dd76:	f7f2 fbbd 	bl	2004f4 <__aeabi_f2d>
  20dd7a:	e9c4 01e0 	strd	r0, r1, [r4, #896]	; 0x380
        attitude_msg_.vector.z = estimator_->getAttitude(Frame::VIRTUAL).z;
  20dd7e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
  20dd82:	f7f2 fbb7 	bl	2004f4 <__aeabi_f2d>
  20dd86:	e9c4 01e2 	strd	r0, r1, [r4, #904]	; 0x388
    return nh_->publish(id_, msg);
  20dd8a:	f8d4 0314 	ldr.w	r0, [r4, #788]	; 0x314
  20dd8e:	6803      	ldr	r3, [r0, #0]
  20dd90:	681b      	ldr	r3, [r3, #0]
  20dd92:	f504 7256 	add.w	r2, r4, #856	; 0x358
  20dd96:	f8d4 1310 	ldr.w	r1, [r4, #784]	; 0x310
  20dd9a:	4798      	blx	r3
  20dd9c:	e7a8      	b.n	20dcf0 <HAL_SYSTICK_Callback+0x37c>
        last_imu_pub_time_ = now_time;
  20dd9e:	4d99      	ldr	r5, [pc, #612]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  20dda0:	f8c5 03dc 	str.w	r0, [r5, #988]	; 0x3dc
        imu_msg_.stamp = nh_->now();
  20dda4:	f8d5 42f0 	ldr.w	r4, [r5, #752]	; 0x2f0
  20dda8:	f001 fd7c 	bl	20f8a4 <HAL_GetTick>
    current_time.sec = ms / 1000 + sec_offset;
  20ddac:	4b96      	ldr	r3, [pc, #600]	; (20e008 <HAL_SYSTICK_Callback+0x694>)
  20ddae:	fba3 2300 	umull	r2, r3, r3, r0
  20ddb2:	099b      	lsrs	r3, r3, #6
  20ddb4:	68e2      	ldr	r2, [r4, #12]
  20ddb6:	441a      	add	r2, r3
  20ddb8:	9266      	str	r2, [sp, #408]	; 0x198
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
  20ddba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  20ddbe:	fb02 0313 	mls	r3, r2, r3, r0
  20ddc2:	6922      	ldr	r2, [r4, #16]
  20ddc4:	4991      	ldr	r1, [pc, #580]	; (20e00c <HAL_SYSTICK_Callback+0x698>)
  20ddc6:	fb01 2303 	mla	r3, r1, r3, r2
  20ddca:	9367      	str	r3, [sp, #412]	; 0x19c
    normalizeSecNSec(current_time.sec, current_time.nsec);
  20ddcc:	ac66      	add	r4, sp, #408	; 0x198
  20ddce:	a967      	add	r1, sp, #412	; 0x19c
  20ddd0:	4620      	mov	r0, r4
  20ddd2:	f001 fcfb 	bl	20f7cc <_ZN3ros16normalizeSecNSecERmS0_>
  20ddd6:	f505 7348 	add.w	r3, r5, #800	; 0x320
  20ddda:	e894 0003 	ldmia.w	r4, {r0, r1}
  20ddde:	e883 0003 	stmia.w	r3, {r0, r1}
  20dde2:	f505 754a 	add.w	r5, r5, #808	; 0x328
  Vector3f getAngular(uint8_t frame){return gyro_[frame];}
  20dde6:	f50d 7c84 	add.w	ip, sp, #264	; 0x108
  20ddea:	f50d 7e8a 	add.w	lr, sp, #276	; 0x114
            imu_msg_.gyro_data[i] = estimator_->getAngular(Frame::BODY)[i];
  20ddee:	f50d 7bc6 	add.w	fp, sp, #396	; 0x18c
  Vector3f getMag(uint8_t frame){return mag_[frame];}
  20ddf2:	af48      	add	r7, sp, #288	; 0x120
  20ddf4:	ae4b      	add	r6, sp, #300	; 0x12c
  20ddf6:	4b83      	ldr	r3, [pc, #524]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  20ddf8:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
  Vector3f getAngular(uint8_t frame){return gyro_[frame];}
  20ddfc:	f103 021c 	add.w	r2, r3, #28
  20de00:	ca07      	ldmia	r2, {r0, r1, r2}
  20de02:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  20de06:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  20de0a:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
        return _v[i];
  20de0e:	fa5f f488 	uxtb.w	r4, r8
  20de12:	00a4      	lsls	r4, r4, #2
  20de14:	eb0b 0204 	add.w	r2, fp, r4
  20de18:	6812      	ldr	r2, [r2, #0]
  20de1a:	60ea      	str	r2, [r5, #12]
  Vector3f getMag(uint8_t frame){return mag_[frame];}
  20de1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
  20de20:	ca07      	ldmia	r2, {r0, r1, r2}
  20de22:	e887 0007 	stmia.w	r7, {r0, r1, r2}
  20de26:	e886 0007 	stmia.w	r6, {r0, r1, r2}
            imu_msg_.mag_data[i] = estimator_->getMag(Frame::BODY)[i];
  20de2a:	f50d 7ac0 	add.w	sl, sp, #384	; 0x180
  20de2e:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
  20de32:	4652      	mov	r2, sl
  20de34:	4422      	add	r2, r4
  20de36:	6812      	ldr	r2, [r2, #0]
  20de38:	61aa      	str	r2, [r5, #24]
  Vector3f getAcc(uint8_t frame){return acc_[frame];}
  20de3a:	1d1a      	adds	r2, r3, #4
  20de3c:	ca07      	ldmia	r2, {r0, r1, r2}
  20de3e:	f50d 7a9c 	add.w	sl, sp, #312	; 0x138
  20de42:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
  20de46:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
  20de4a:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
  20de4e:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
            imu_msg_.acc_data[i] = estimator_->getAcc(Frame::BODY)[i];
  20de52:	f50d 7aba 	add.w	sl, sp, #372	; 0x174
  20de56:	aa51      	add	r2, sp, #324	; 0x144
  20de58:	ca07      	ldmia	r2, {r0, r1, r2}
  20de5a:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
  20de5e:	44a2      	add	sl, r4
  20de60:	f8da 2000 	ldr.w	r2, [sl]
  20de64:	f845 2b04 	str.w	r2, [r5], #4
  Vector3f getAttitude(uint8_t frame){return rpy_[frame];}
  20de68:	f50d 7aa8 	add.w	sl, sp, #336	; 0x150
  20de6c:	3394      	adds	r3, #148	; 0x94
  20de6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  20de72:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
  20de76:	ab57      	add	r3, sp, #348	; 0x15c
  20de78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            imu_msg_.angles[i] = estimator_->getAttitude(Frame::BODY)[i]; // get the attitude at body frame
  20de7c:	f50d 7ab4 	add.w	sl, sp, #360	; 0x168
  20de80:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
  20de84:	4454      	add	r4, sl
  20de86:	6823      	ldr	r3, [r4, #0]
  20de88:	622b      	str	r3, [r5, #32]
        for(int i = 0; i < 3 ; i ++)
  20de8a:	f108 0801 	add.w	r8, r8, #1
  20de8e:	f1b8 0f03 	cmp.w	r8, #3
  20de92:	d1b0      	bne.n	20ddf6 <HAL_SYSTICK_Callback+0x482>
  20de94:	4b5b      	ldr	r3, [pc, #364]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  20de96:	f8d3 0300 	ldr.w	r0, [r3, #768]	; 0x300
  20de9a:	6802      	ldr	r2, [r0, #0]
  20de9c:	6814      	ldr	r4, [r2, #0]
  20de9e:	f503 7247 	add.w	r2, r3, #796	; 0x31c
  20dea2:	f8d3 12fc 	ldr.w	r1, [r3, #764]	; 0x2fc
  20dea6:	47a0      	blx	r4
  20dea8:	e732      	b.n	20dd10 <HAL_SYSTICK_Callback+0x39c>
  }

  void update()
  {
    /* do nothing if baro is not updated */
    if(!baro_->getUpdate()) return;
  20deaa:	4b56      	ldr	r3, [pc, #344]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  // get current climb rate in meters/s. A positive number means
  float getClimbRate(void);
  // get last time sample was taken (in ms)
  uint32_t getLastUpdate(void) const { return last_timer_; }

  bool getUpdate() { return update_; }
  20deac:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
  20deb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
  20deb4:	2b00      	cmp	r3, #0
  20deb6:	f43f ad7d 	beq.w	20d9b4 <HAL_SYSTICK_Callback+0x40>

    /* reading stage */
    if(stage_ == READING_STAGE)
  20deba:	4b52      	ldr	r3, [pc, #328]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  20debc:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
  20dec0:	2b00      	cmp	r3, #0
  20dec2:	d043      	beq.n	20df4c <HAL_SYSTICK_Callback+0x5d8>
        stage_ = PROCESS_STAGE;
        return;
      }

    /* process stage */
    if(stage_ == PROCESS_STAGE)
  20dec4:	2b01      	cmp	r3, #1
  20dec6:	d046      	beq.n	20df56 <HAL_SYSTICK_Callback+0x5e2>
        stage_ = PUBLISH_STAGE;
        return;
      }

    /* publish stage */
    if(stage_ == PUBLISH_STAGE)
  20dec8:	2b02      	cmp	r3, #2
  20deca:	f47f ad73 	bne.w	20d9b4 <HAL_SYSTICK_Callback+0x40>
  //* so the delay from sensor reading to publish is 3ms
  uint8_t stage_;

  void publish()
  {
    baro_msg_.stamp = nh_->now();
  20dece:	4c4d      	ldr	r4, [pc, #308]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  20ded0:	f8d4 53e8 	ldr.w	r5, [r4, #1000]	; 0x3e8
  20ded4:	f001 fce6 	bl	20f8a4 <HAL_GetTick>
    current_time.sec = ms / 1000 + sec_offset;
  20ded8:	4b4b      	ldr	r3, [pc, #300]	; (20e008 <HAL_SYSTICK_Callback+0x694>)
  20deda:	fba3 2300 	umull	r2, r3, r3, r0
  20dede:	099b      	lsrs	r3, r3, #6
  20dee0:	68ea      	ldr	r2, [r5, #12]
  20dee2:	441a      	add	r2, r3
  20dee4:	926a      	str	r2, [sp, #424]	; 0x1a8
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
  20dee6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  20deea:	fb02 0313 	mls	r3, r2, r3, r0
  20deee:	692a      	ldr	r2, [r5, #16]
  20def0:	4946      	ldr	r1, [pc, #280]	; (20e00c <HAL_SYSTICK_Callback+0x698>)
  20def2:	fb01 2303 	mla	r3, r1, r3, r2
  20def6:	936b      	str	r3, [sp, #428]	; 0x1ac
    normalizeSecNSec(current_time.sec, current_time.nsec);
  20def8:	ad6a      	add	r5, sp, #424	; 0x1a8
  20defa:	a96b      	add	r1, sp, #428	; 0x1ac
  20defc:	4628      	mov	r0, r5
  20defe:	f001 fc65 	bl	20f7cc <_ZN3ros16normalizeSecNSecERmS0_>
  20df02:	f204 4304 	addw	r3, r4, #1028	; 0x404
  20df06:	e895 0003 	ldmia.w	r5, {r0, r1}
  20df0a:	e883 0003 	stmia.w	r3, {r0, r1}
    baro_msg_.pressure = baro_->getPressure();
  20df0e:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
  void setUpdate(bool update) { update_ = update; }

  inline float getPressure(){return pressure_;}
  20df12:	6819      	ldr	r1, [r3, #0]
  20df14:	f504 6282 	add.w	r2, r4, #1040	; 0x410
  20df18:	6011      	str	r1, [r2, #0]
  inline float getTemperature(){return temperature_;}
  20df1a:	6899      	ldr	r1, [r3, #8]
    baro_msg_.temperature = baro_->getTemperature();
  20df1c:	f204 4214 	addw	r2, r4, #1044	; 0x414
  20df20:	6011      	str	r1, [r2, #0]
  inline float getAltitude(){return altitude_;}
  20df22:	68da      	ldr	r2, [r3, #12]
    baro_msg_.altitude = baro_->getAltitude();
  20df24:	f204 430c 	addw	r3, r4, #1036	; 0x40c
  20df28:	601a      	str	r2, [r3, #0]
  20df2a:	f8d4 03f8 	ldr.w	r0, [r4, #1016]	; 0x3f8
  20df2e:	6803      	ldr	r3, [r0, #0]
  20df30:	681b      	ldr	r3, [r3, #0]
  20df32:	f504 6280 	add.w	r2, r4, #1024	; 0x400
  20df36:	f8d4 13f4 	ldr.w	r1, [r4, #1012]	; 0x3f4
  20df3a:	4798      	blx	r3
        stage_ = READING_STAGE;
  20df3c:	2300      	movs	r3, #0
  20df3e:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
        baro_->setUpdate(false);
  20df42:	f8d4 241c 	ldr.w	r2, [r4, #1052]	; 0x41c
  void setUpdate(bool update) { update_ = update; }
  20df46:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  20df4a:	e533      	b.n	20d9b4 <HAL_SYSTICK_Callback+0x40>
        stage_ = PROCESS_STAGE;
  20df4c:	2201      	movs	r2, #1
  20df4e:	4b2d      	ldr	r3, [pc, #180]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  20df50:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  20df54:	e52e      	b.n	20d9b4 <HAL_SYSTICK_Callback+0x40>
        stage_ = PUBLISH_STAGE;
  20df56:	2202      	movs	r2, #2
  20df58:	4b2a      	ldr	r3, [pc, #168]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  20df5a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
  20df5e:	e529      	b.n	20d9b4 <HAL_SYSTICK_Callback+0x40>
  GPS* gps_;
  //nav-ekf2

  void publish()
  {
    gps_msg_.stamp = nh_->now();
  20df60:	4c28      	ldr	r4, [pc, #160]	; (20e004 <HAL_SYSTICK_Callback+0x690>)
  20df62:	f8d4 5424 	ldr.w	r5, [r4, #1060]	; 0x424
  20df66:	f001 fc9d 	bl	20f8a4 <HAL_GetTick>
    current_time.sec = ms / 1000 + sec_offset;
  20df6a:	4b27      	ldr	r3, [pc, #156]	; (20e008 <HAL_SYSTICK_Callback+0x694>)
  20df6c:	fba3 2300 	umull	r2, r3, r3, r0
  20df70:	099b      	lsrs	r3, r3, #6
  20df72:	68ea      	ldr	r2, [r5, #12]
  20df74:	441a      	add	r2, r3
  20df76:	926c      	str	r2, [sp, #432]	; 0x1b0
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
  20df78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  20df7c:	fb02 0313 	mls	r3, r2, r3, r0
  20df80:	692a      	ldr	r2, [r5, #16]
  20df82:	4922      	ldr	r1, [pc, #136]	; (20e00c <HAL_SYSTICK_Callback+0x698>)
  20df84:	fb01 2303 	mla	r3, r1, r3, r2
  20df88:	936d      	str	r3, [sp, #436]	; 0x1b4
    normalizeSecNSec(current_time.sec, current_time.nsec);
  20df8a:	ad6c      	add	r5, sp, #432	; 0x1b0
  20df8c:	a96d      	add	r1, sp, #436	; 0x1b4
  20df8e:	4628      	mov	r0, r5
  20df90:	f001 fc1c 	bl	20f7cc <_ZN3ros16normalizeSecNSecERmS0_>
  20df94:	f504 6388 	add.w	r3, r4, #1088	; 0x440
  20df98:	e895 0003 	ldmia.w	r5, {r0, r1}
  20df9c:	e883 0003 	stmia.w	r3, {r0, r1}

    gps_msg_.location[0] = gps_->getGpsState().location.lat; // lat
  20dfa0:	f8d4 3460 	ldr.w	r3, [r4, #1120]	; 0x460
  20dfa4:	f504 6289 	add.w	r2, r4, #1096	; 0x448
    return state;
  20dfa8:	f8d3 103e 	ldr.w	r1, [r3, #62]	; 0x3e
  20dfac:	ee07 1a90 	vmov	s15, r1
  20dfb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  20dfb4:	edc2 7a00 	vstr	s15, [r2]
    gps_msg_.location[1] = gps_->getGpsState().location.lng; // lng
  20dfb8:	f204 424c 	addw	r2, r4, #1100	; 0x44c
  20dfbc:	f8d3 1042 	ldr.w	r1, [r3, #66]	; 0x42
  20dfc0:	ee07 1a90 	vmov	s15, r1
  20dfc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  20dfc8:	edc2 7a00 	vstr	s15, [r2]
  20dfcc:	6d99      	ldr	r1, [r3, #88]	; 0x58

    gps_msg_.velocity[0] = gps_->getGpsState().velocity.x;
  20dfce:	f504 628a 	add.w	r2, r4, #1104	; 0x450
  20dfd2:	6011      	str	r1, [r2, #0]
  20dfd4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    gps_msg_.velocity[1] = gps_->getGpsState().velocity.y;
  20dfd6:	f204 4254 	addw	r2, r4, #1108	; 0x454
  20dfda:	6011      	str	r1, [r2, #0]
  20dfdc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54

    gps_msg_.sat_num = gps_->getGpsState().num_sats;
  20dfe0:	f884 3458 	strb.w	r3, [r4, #1112]	; 0x458
  20dfe4:	f8d4 0434 	ldr.w	r0, [r4, #1076]	; 0x434
  20dfe8:	6803      	ldr	r3, [r0, #0]
  20dfea:	681b      	ldr	r3, [r3, #0]
  20dfec:	f204 423c 	addw	r2, r4, #1084	; 0x43c
  20dff0:	f8d4 1430 	ldr.w	r1, [r4, #1072]	; 0x430
  20dff4:	4798      	blx	r3
        gps_->setUpdate(false);
  20dff6:	f8d4 3460 	ldr.w	r3, [r4, #1120]	; 0x460
  void setUpdate(bool update) { update_ = update; }
  20dffa:	2200      	movs	r2, #0
  20dffc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  20e000:	e4e4      	b.n	20d9cc <HAL_SYSTICK_Callback+0x58>
  20e002:	bf00      	nop
  20e004:	20000470 	.word	0x20000470
  20e008:	10624dd3 	.word	0x10624dd3
  20e00c:	000f4240 	.word	0x000f4240
        message_in[index_++] = data;
  20e010:	f8d4 3ce0 	ldr.w	r3, [r4, #3296]	; 0xce0
  20e014:	1c5a      	adds	r2, r3, #1
  20e016:	f8c4 2ce0 	str.w	r2, [r4, #3296]	; 0xce0
  20e01a:	4423      	add	r3, r4
  20e01c:	f883 0a34 	strb.w	r0, [r3, #2612]	; 0xa34
        bytes_--;
  20e020:	f8d4 3cd8 	ldr.w	r3, [r4, #3288]	; 0xcd8
  20e024:	3b01      	subs	r3, #1
  20e026:	f8c4 3cd8 	str.w	r3, [r4, #3288]	; 0xcd8
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
  20e02a:	b953      	cbnz	r3, 20e042 <HAL_SYSTICK_Callback+0x6ce>
          mode_ = MODE_MSG_CHECKSUM;
  20e02c:	2308      	movs	r3, #8
  20e02e:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
  20e032:	e006      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
          mode_++;
  20e034:	2301      	movs	r3, #1
  20e036:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
  20e03a:	f105 0314 	add.w	r3, r5, #20
  20e03e:	f8c4 3cf4 	str.w	r3, [r4, #3316]	; 0xcf4
      if (spin_timeout_ > 0)
  20e042:	f8d4 3a30 	ldr.w	r3, [r4, #2608]	; 0xa30
  20e046:	b13b      	cbz	r3, 20e058 <HAL_SYSTICK_Callback+0x6e4>
  20e048:	f001 fc2c 	bl	20f8a4 <HAL_GetTick>
        if ((hardware_.time() - c_time) > spin_timeout_)
  20e04c:	1b40      	subs	r0, r0, r5
  20e04e:	f8d4 3a30 	ldr.w	r3, [r4, #2608]	; 0xa30
  20e052:	4298      	cmp	r0, r3
  20e054:	f200 825e 	bhi.w	20e514 <HAL_SYSTICK_Callback+0xba0>
    return rx::read();
  20e058:	f001 fade 	bl	20f618 <_ZN2rx4readEv>
      if (data < 0)
  20e05c:	2800      	cmp	r0, #0
  20e05e:	f2c0 824d 	blt.w	20e4fc <HAL_SYSTICK_Callback+0xb88>
      checksum_ += data;
  20e062:	f8d4 3ce4 	ldr.w	r3, [r4, #3300]	; 0xce4
  20e066:	4403      	add	r3, r0
  20e068:	f8c4 3ce4 	str.w	r3, [r4, #3300]	; 0xce4
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
  20e06c:	f8d4 2cd4 	ldr.w	r2, [r4, #3284]	; 0xcd4
  20e070:	2a07      	cmp	r2, #7
  20e072:	d0cd      	beq.n	20e010 <HAL_SYSTICK_Callback+0x69c>
      else if (mode_ == MODE_FIRST_FF)
  20e074:	b96a      	cbnz	r2, 20e092 <HAL_SYSTICK_Callback+0x71e>
        if (data == 0xff)
  20e076:	28ff      	cmp	r0, #255	; 0xff
  20e078:	d0dc      	beq.n	20e034 <HAL_SYSTICK_Callback+0x6c0>
  uint32_t time(){return HAL_GetTick();}
  20e07a:	f001 fc13 	bl	20f8a4 <HAL_GetTick>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
  20e07e:	1b40      	subs	r0, r0, r5
  20e080:	f241 3388 	movw	r3, #5000	; 0x1388
  20e084:	4298      	cmp	r0, r3
  20e086:	d9dc      	bls.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
          configured_ = false;
  20e088:	2200      	movs	r2, #0
  20e08a:	4baa      	ldr	r3, [pc, #680]	; (20e334 <HAL_SYSTICK_Callback+0x9c0>)
  20e08c:	f883 2ce8 	strb.w	r2, [r3, #3304]	; 0xce8
  20e090:	e240      	b.n	20e514 <HAL_SYSTICK_Callback+0xba0>
      else if (mode_ == MODE_PROTOCOL_VER)
  20e092:	2a01      	cmp	r2, #1
  20e094:	d02e      	beq.n	20e0f4 <HAL_SYSTICK_Callback+0x780>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
  20e096:	2a02      	cmp	r2, #2
  20e098:	d04a      	beq.n	20e130 <HAL_SYSTICK_Callback+0x7bc>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
  20e09a:	2a03      	cmp	r2, #3
  20e09c:	d053      	beq.n	20e146 <HAL_SYSTICK_Callback+0x7d2>
      else if (mode_ == MODE_SIZE_CHECKSUM)
  20e09e:	2a04      	cmp	r2, #4
  20e0a0:	d05b      	beq.n	20e15a <HAL_SYSTICK_Callback+0x7e6>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
  20e0a2:	2a05      	cmp	r2, #5
  20e0a4:	d065      	beq.n	20e172 <HAL_SYSTICK_Callback+0x7fe>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
  20e0a6:	2a06      	cmp	r2, #6
  20e0a8:	d06b      	beq.n	20e182 <HAL_SYSTICK_Callback+0x80e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
  20e0aa:	2a08      	cmp	r2, #8
  20e0ac:	d1c9      	bne.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
        mode_ = MODE_FIRST_FF;
  20e0ae:	2200      	movs	r2, #0
  20e0b0:	f8c4 2cd4 	str.w	r2, [r4, #3284]	; 0xcd4
        if ((checksum_ % 256) == 255)
  20e0b4:	1ad2      	subs	r2, r2, r3
  20e0b6:	b2db      	uxtb	r3, r3
  20e0b8:	b2d2      	uxtb	r2, r2
  20e0ba:	bf58      	it	pl
  20e0bc:	4253      	negpl	r3, r2
  20e0be:	2bff      	cmp	r3, #255	; 0xff
  20e0c0:	d1bf      	bne.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
          if (topic_ == TopicInfo::ID_PUBLISHER)
  20e0c2:	f8d4 3cdc 	ldr.w	r3, [r4, #3292]	; 0xcdc
  20e0c6:	2b00      	cmp	r3, #0
  20e0c8:	d06d      	beq.n	20e1a6 <HAL_SYSTICK_Callback+0x832>
          else if (topic_ == TopicInfo::ID_TIME)
  20e0ca:	2b0a      	cmp	r3, #10
  20e0cc:	f000 80e3 	beq.w	20e296 <HAL_SYSTICK_Callback+0x922>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
  20e0d0:	2b06      	cmp	r3, #6
  20e0d2:	f000 8139 	beq.w	20e348 <HAL_SYSTICK_Callback+0x9d4>
          else if (topic_ == TopicInfo::ID_TX_STOP)
  20e0d6:	2b0b      	cmp	r3, #11
  20e0d8:	f000 820c 	beq.w	20e4f4 <HAL_SYSTICK_Callback+0xb80>
            if (subscribers[topic_ - 100])
  20e0dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  20e0e0:	f8d3 0af4 	ldr.w	r0, [r3, #2804]	; 0xaf4
  20e0e4:	2800      	cmp	r0, #0
  20e0e6:	d0ac      	beq.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
              subscribers[topic_ - 100]->callback(message_in);
  20e0e8:	6803      	ldr	r3, [r0, #0]
  20e0ea:	681b      	ldr	r3, [r3, #0]
  20e0ec:	f604 2134 	addw	r1, r4, #2612	; 0xa34
  20e0f0:	4798      	blx	r3
  20e0f2:	e7a6      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
        if (data == PROTOCOL_VER)
  20e0f4:	28fe      	cmp	r0, #254	; 0xfe
  20e0f6:	d017      	beq.n	20e128 <HAL_SYSTICK_Callback+0x7b4>
          mode_ = MODE_FIRST_FF;
  20e0f8:	2300      	movs	r3, #0
  20e0fa:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
          if (configured_ == false)
  20e0fe:	f894 3ce8 	ldrb.w	r3, [r4, #3304]	; 0xce8
  20e102:	2b00      	cmp	r3, #0
  20e104:	d19d      	bne.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
  20e106:	4b8c      	ldr	r3, [pc, #560]	; (20e338 <HAL_SYSTICK_Callback+0x9c4>)
  20e108:	930f      	str	r3, [sp, #60]	; 0x3c
  20e10a:	2300      	movs	r3, #0
  20e10c:	9310      	str	r3, [sp, #64]	; 0x40
  20e10e:	9311      	str	r3, [sp, #68]	; 0x44
    publish(TopicInfo::ID_TIME, &t);
  20e110:	f8d4 3a1c 	ldr.w	r3, [r4, #2588]	; 0xa1c
  20e114:	681b      	ldr	r3, [r3, #0]
  20e116:	aa0f      	add	r2, sp, #60	; 0x3c
  20e118:	210a      	movs	r1, #10
  20e11a:	9801      	ldr	r0, [sp, #4]
  20e11c:	4798      	blx	r3
  20e11e:	f001 fbc1 	bl	20f8a4 <HAL_GetTick>
    rt_time = hardware_.time();
  20e122:	f8c4 0a24 	str.w	r0, [r4, #2596]	; 0xa24
  20e126:	e78c      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
          mode_++;
  20e128:	2302      	movs	r3, #2
  20e12a:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
  20e12e:	e788      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
        bytes_ = data;
  20e130:	f8c4 0cd8 	str.w	r0, [r4, #3288]	; 0xcd8
        index_ = 0;
  20e134:	2300      	movs	r3, #0
  20e136:	f8c4 3ce0 	str.w	r3, [r4, #3296]	; 0xce0
        mode_++;
  20e13a:	2303      	movs	r3, #3
  20e13c:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
        checksum_ = data;               /* first byte for calculating size checksum */
  20e140:	f8c4 0ce4 	str.w	r0, [r4, #3300]	; 0xce4
  20e144:	e77d      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
        bytes_ += data << 8;
  20e146:	f8d4 3cd8 	ldr.w	r3, [r4, #3288]	; 0xcd8
  20e14a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
  20e14e:	f8c4 0cd8 	str.w	r0, [r4, #3288]	; 0xcd8
        mode_++;
  20e152:	2304      	movs	r3, #4
  20e154:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
  20e158:	e773      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
        if ((checksum_ % 256) == 255)
  20e15a:	425a      	negs	r2, r3
  20e15c:	b2db      	uxtb	r3, r3
  20e15e:	b2d2      	uxtb	r2, r2
  20e160:	bf58      	it	pl
  20e162:	4253      	negpl	r3, r2
  20e164:	2bff      	cmp	r3, #255	; 0xff
          mode_++;
  20e166:	bf0c      	ite	eq
  20e168:	2305      	moveq	r3, #5
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
  20e16a:	2300      	movne	r3, #0
  20e16c:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
  20e170:	e767      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
        topic_ = data;
  20e172:	f8c4 0cdc 	str.w	r0, [r4, #3292]	; 0xcdc
        mode_++;
  20e176:	2306      	movs	r3, #6
  20e178:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
        checksum_ = data;               /* first byte included in checksum */
  20e17c:	f8c4 0ce4 	str.w	r0, [r4, #3300]	; 0xce4
  20e180:	e75f      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
        topic_ += data << 8;
  20e182:	f8d4 3cdc 	ldr.w	r3, [r4, #3292]	; 0xcdc
  20e186:	eb03 2000 	add.w	r0, r3, r0, lsl #8
  20e18a:	f8c4 0cdc 	str.w	r0, [r4, #3292]	; 0xcdc
        mode_ = MODE_MESSAGE;
  20e18e:	2307      	movs	r3, #7
  20e190:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
        if (bytes_ == 0)
  20e194:	f8d4 3cd8 	ldr.w	r3, [r4, #3288]	; 0xcd8
  20e198:	2b00      	cmp	r3, #0
  20e19a:	f47f af52 	bne.w	20e042 <HAL_SYSTICK_Callback+0x6ce>
          mode_ = MODE_MSG_CHECKSUM;
  20e19e:	2308      	movs	r3, #8
  20e1a0:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
  20e1a4:	e74d      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
  20e1a6:	4b64      	ldr	r3, [pc, #400]	; (20e338 <HAL_SYSTICK_Callback+0x9c4>)
  20e1a8:	930f      	str	r3, [sp, #60]	; 0x3c
  20e1aa:	2400      	movs	r4, #0
  20e1ac:	9410      	str	r4, [sp, #64]	; 0x40
  20e1ae:	9411      	str	r4, [sp, #68]	; 0x44
    publish(TopicInfo::ID_TIME, &t);
  20e1b0:	4e60      	ldr	r6, [pc, #384]	; (20e334 <HAL_SYSTICK_Callback+0x9c0>)
  20e1b2:	f8d6 3a1c 	ldr.w	r3, [r6, #2588]	; 0xa1c
  20e1b6:	681b      	ldr	r3, [r3, #0]
  20e1b8:	aa0f      	add	r2, sp, #60	; 0x3c
  20e1ba:	210a      	movs	r1, #10
  20e1bc:	f606 201c 	addw	r0, r6, #2588	; 0xa1c
  20e1c0:	4798      	blx	r3
  20e1c2:	f001 fb6f 	bl	20f8a4 <HAL_GetTick>
    rt_time = hardware_.time();
  20e1c6:	f8c6 0a24 	str.w	r0, [r6, #2596]	; 0xa24
  20e1ca:	4b5c      	ldr	r3, [pc, #368]	; (20e33c <HAL_SYSTICK_Callback+0x9c8>)
  20e1cc:	930f      	str	r3, [sp, #60]	; 0x3c
  20e1ce:	f8ad 4040 	strh.w	r4, [sp, #64]	; 0x40
  20e1d2:	4b5b      	ldr	r3, [pc, #364]	; (20e340 <HAL_SYSTICK_Callback+0x9cc>)
  20e1d4:	9311      	str	r3, [sp, #68]	; 0x44
  20e1d6:	9312      	str	r3, [sp, #72]	; 0x48
  20e1d8:	9313      	str	r3, [sp, #76]	; 0x4c
  20e1da:	9414      	str	r4, [sp, #80]	; 0x50
  20e1dc:	f606 4434 	addw	r4, r6, #3124	; 0xc34
  20e1e0:	f606 4684 	addw	r6, r6, #3204	; 0xc84
        publish(publishers[i]->getEndpointType(), &ti);
  20e1e4:	f6a4 4734 	subw	r7, r4, #3124	; 0xc34
  20e1e8:	f607 281c 	addw	r8, r7, #2588	; 0xa1c
  20e1ec:	e002      	b.n	20e1f4 <HAL_SYSTICK_Callback+0x880>
  20e1ee:	3404      	adds	r4, #4
    for (i = 0; i < MAX_PUBLISHERS; i++)
  20e1f0:	42b4      	cmp	r4, r6
  20e1f2:	d01d      	beq.n	20e230 <HAL_SYSTICK_Callback+0x8bc>
      if (publishers[i] != 0) // non-empty slot
  20e1f4:	6823      	ldr	r3, [r4, #0]
  20e1f6:	2b00      	cmp	r3, #0
  20e1f8:	d0f9      	beq.n	20e1ee <HAL_SYSTICK_Callback+0x87a>
        ti.topic_id = publishers[i]->id_;
  20e1fa:	689a      	ldr	r2, [r3, #8]
  20e1fc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
        ti.topic_name = (char *) publishers[i]->topic_;
  20e200:	681a      	ldr	r2, [r3, #0]
  20e202:	9211      	str	r2, [sp, #68]	; 0x44
        ti.message_type = (char *) publishers[i]->msg_->getType();
  20e204:	6858      	ldr	r0, [r3, #4]
  20e206:	6803      	ldr	r3, [r0, #0]
  20e208:	689b      	ldr	r3, [r3, #8]
  20e20a:	4798      	blx	r3
  20e20c:	9012      	str	r0, [sp, #72]	; 0x48
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
  20e20e:	6823      	ldr	r3, [r4, #0]
  20e210:	6858      	ldr	r0, [r3, #4]
  20e212:	6803      	ldr	r3, [r0, #0]
  20e214:	68db      	ldr	r3, [r3, #12]
  20e216:	4798      	blx	r3
  20e218:	9013      	str	r0, [sp, #76]	; 0x4c
        ti.buffer_size = OUTPUT_SIZE;
  20e21a:	23ff      	movs	r3, #255	; 0xff
  20e21c:	9314      	str	r3, [sp, #80]	; 0x50
    return endpoint_;
  20e21e:	6821      	ldr	r1, [r4, #0]
        publish(publishers[i]->getEndpointType(), &ti);
  20e220:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
  20e224:	681b      	ldr	r3, [r3, #0]
  20e226:	aa0f      	add	r2, sp, #60	; 0x3c
  20e228:	6909      	ldr	r1, [r1, #16]
  20e22a:	4640      	mov	r0, r8
  20e22c:	4798      	blx	r3
  20e22e:	e7de      	b.n	20e1ee <HAL_SYSTICK_Callback+0x87a>
  20e230:	f8df 8110 	ldr.w	r8, [pc, #272]	; 20e344 <HAL_SYSTICK_Callback+0x9d0>
        publish(subscribers[i]->getEndpointType(), &ti);
  20e234:	f6a8 46d4 	subw	r6, r8, #3284	; 0xcd4
  20e238:	f606 271c 	addw	r7, r6, #2588	; 0xa1c
  20e23c:	e002      	b.n	20e244 <HAL_SYSTICK_Callback+0x8d0>
  20e23e:	3404      	adds	r4, #4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
  20e240:	45a0      	cmp	r8, r4
  20e242:	d01f      	beq.n	20e284 <HAL_SYSTICK_Callback+0x910>
      if (subscribers[i] != 0) // non-empty slot
  20e244:	6820      	ldr	r0, [r4, #0]
  20e246:	2800      	cmp	r0, #0
  20e248:	d0f9      	beq.n	20e23e <HAL_SYSTICK_Callback+0x8ca>
        ti.topic_id = subscribers[i]->id_;
  20e24a:	6843      	ldr	r3, [r0, #4]
  20e24c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        ti.topic_name = (char *) subscribers[i]->topic_;
  20e250:	6883      	ldr	r3, [r0, #8]
  20e252:	9311      	str	r3, [sp, #68]	; 0x44
        ti.message_type = (char *) subscribers[i]->getMsgType();
  20e254:	6803      	ldr	r3, [r0, #0]
  20e256:	689b      	ldr	r3, [r3, #8]
  20e258:	4798      	blx	r3
  20e25a:	9012      	str	r0, [sp, #72]	; 0x48
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
  20e25c:	6820      	ldr	r0, [r4, #0]
  20e25e:	6803      	ldr	r3, [r0, #0]
  20e260:	68db      	ldr	r3, [r3, #12]
  20e262:	4798      	blx	r3
  20e264:	9013      	str	r0, [sp, #76]	; 0x4c
        ti.buffer_size = INPUT_SIZE;
  20e266:	23ff      	movs	r3, #255	; 0xff
  20e268:	9314      	str	r3, [sp, #80]	; 0x50
        publish(subscribers[i]->getEndpointType(), &ti);
  20e26a:	f8d6 3a1c 	ldr.w	r3, [r6, #2588]	; 0xa1c
  20e26e:	f8d3 9000 	ldr.w	r9, [r3]
  20e272:	6820      	ldr	r0, [r4, #0]
  20e274:	6803      	ldr	r3, [r0, #0]
  20e276:	685b      	ldr	r3, [r3, #4]
  20e278:	4798      	blx	r3
  20e27a:	aa0f      	add	r2, sp, #60	; 0x3c
  20e27c:	4601      	mov	r1, r0
  20e27e:	4638      	mov	r0, r7
  20e280:	47c8      	blx	r9
  20e282:	e7dc      	b.n	20e23e <HAL_SYSTICK_Callback+0x8ca>
    configured_ = true;
  20e284:	4b2b      	ldr	r3, [pc, #172]	; (20e334 <HAL_SYSTICK_Callback+0x9c0>)
  20e286:	2201      	movs	r2, #1
  20e288:	f883 2ce8 	strb.w	r2, [r3, #3304]	; 0xce8
            last_sync_time = c_time;
  20e28c:	f8c3 5cec 	str.w	r5, [r3, #3308]	; 0xcec
            last_sync_receive_time = c_time;
  20e290:	f8c3 5cf0 	str.w	r5, [r3, #3312]	; 0xcf0
  20e294:	e13e      	b.n	20e514 <HAL_SYSTICK_Callback+0xba0>
  20e296:	f001 fb05 	bl	20f8a4 <HAL_GetTick>
    uint32_t offset = hardware_.time() - rt_time;
  20e29a:	f8d4 3a24 	ldr.w	r3, [r4, #2596]	; 0xa24
  20e29e:	eba0 0b03 	sub.w	fp, r0, r3
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20e2a2:	f894 3a35 	ldrb.w	r3, [r4, #2613]	; 0xa35
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20e2a6:	f894 6a36 	ldrb.w	r6, [r4, #2614]	; 0xa36
  20e2aa:	0436      	lsls	r6, r6, #16
  20e2ac:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
  20e2b0:	f894 3a34 	ldrb.w	r3, [r4, #2612]	; 0xa34
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20e2b4:	431e      	orrs	r6, r3
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20e2b6:	f894 3a37 	ldrb.w	r3, [r4, #2615]	; 0xa37
  20e2ba:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
  20e2be:	3e01      	subs	r6, #1
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20e2c0:	f894 3a39 	ldrb.w	r3, [r4, #2617]	; 0xa39
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20e2c4:	f894 aa3a 	ldrb.w	sl, [r4, #2618]	; 0xa3a
  20e2c8:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  20e2cc:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
  20e2d0:	f894 3a38 	ldrb.w	r3, [r4, #2616]	; 0xa38
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20e2d4:	ea4a 0a03 	orr.w	sl, sl, r3
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20e2d8:	f894 3a3b 	ldrb.w	r3, [r4, #2619]	; 0xa3b
  20e2dc:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
  20e2e0:	f10a 5a6e 	add.w	sl, sl, #998244352	; 0x3b800000
  20e2e4:	f50a 1ad6 	add.w	sl, sl, #1753088	; 0x1ac000
  20e2e8:	f50a 6a20 	add.w	sl, sl, #2560	; 0xa00
  20e2ec:	f001 fada 	bl	20f8a4 <HAL_GetTick>
    t.data.sec += offset / 1000;
  20e2f0:	fba9 230b 	umull	r2, r3, r9, fp
  20e2f4:	099b      	lsrs	r3, r3, #6
    sec_offset = new_now.sec - ms / 1000 - 1;
  20e2f6:	1999      	adds	r1, r3, r6
  20e2f8:	fba9 6200 	umull	r6, r2, r9, r0
  20e2fc:	0992      	lsrs	r2, r2, #6
  20e2fe:	1a89      	subs	r1, r1, r2
  20e300:	f8c4 1a28 	str.w	r1, [r4, #2600]	; 0xa28
    t.data.nsec += (offset % 1000) * 1000000UL;
  20e304:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  20e308:	fb01 b313 	mls	r3, r1, r3, fp
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
  20e30c:	fb08 aa03 	mla	sl, r8, r3, sl
  20e310:	fb01 0312 	mls	r3, r1, r2, r0
  20e314:	fb08 a313 	mls	r3, r8, r3, sl
  20e318:	f8c4 3a2c 	str.w	r3, [r4, #2604]	; 0xa2c
    normalizeSecNSec(sec_offset, nsec_offset);
  20e31c:	f604 212c 	addw	r1, r4, #2604	; 0xa2c
  20e320:	f604 2028 	addw	r0, r4, #2600	; 0xa28
  20e324:	f001 fa52 	bl	20f7cc <_ZN3ros16normalizeSecNSecERmS0_>
  20e328:	f001 fabc 	bl	20f8a4 <HAL_GetTick>
    last_sync_receive_time = hardware_.time();
  20e32c:	f8c4 0cf0 	str.w	r0, [r4, #3312]	; 0xcf0
  20e330:	e687      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
  20e332:	bf00      	nop
  20e334:	20000470 	.word	0x20000470
  20e338:	002180c8 	.word	0x002180c8
  20e33c:	002180e0 	.word	0x002180e0
  20e340:	0021856c 	.word	0x0021856c
  20e344:	20001144 	.word	0x20001144
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20e348:	f894 3a34 	ldrb.w	r3, [r4, #2612]	; 0xa34
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  20e34c:	f894 2a35 	ldrb.w	r2, [r4, #2613]	; 0xa35
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  20e350:	f894 6a36 	ldrb.w	r6, [r4, #2614]	; 0xa36
  20e354:	0436      	lsls	r6, r6, #16
  20e356:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
  20e35a:	431e      	orrs	r6, r3
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20e35c:	f894 3a37 	ldrb.w	r3, [r4, #2615]	; 0xa37
  20e360:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
      if(ints_lengthT > ints_length)
  20e364:	f8d4 3d00 	ldr.w	r3, [r4, #3328]	; 0xd00
  20e368:	429e      	cmp	r6, r3
  20e36a:	d874      	bhi.n	20e456 <HAL_SYSTICK_Callback+0xae2>
      ints_length = ints_lengthT;
  20e36c:	f8c4 6d00 	str.w	r6, [r4, #3328]	; 0xd00
      for( uint32_t i = 0; i < ints_length; i++){
  20e370:	2e00      	cmp	r6, #0
  20e372:	d078      	beq.n	20e466 <HAL_SYSTICK_Callback+0xaf2>
  20e374:	f604 211c 	addw	r1, r4, #2588	; 0xa1c
  20e378:	2604      	movs	r6, #4
  20e37a:	2000      	movs	r0, #0
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20e37c:	7f4a      	ldrb	r2, [r1, #29]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20e37e:	7f8b      	ldrb	r3, [r1, #30]
  20e380:	041b      	lsls	r3, r3, #16
  20e382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20e386:	7f0a      	ldrb	r2, [r1, #28]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20e388:	4313      	orrs	r3, r2
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20e38a:	7fca      	ldrb	r2, [r1, #31]
  20e38c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_ints = u_st_ints.real;
  20e390:	f8c4 3d04 	str.w	r3, [r4, #3332]	; 0xd04
  20e394:	3604      	adds	r6, #4
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
  20e396:	f8d4 2d08 	ldr.w	r2, [r4, #3336]	; 0xd08
  20e39a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < ints_length; i++){
  20e39e:	3001      	adds	r0, #1
  20e3a0:	3104      	adds	r1, #4
  20e3a2:	f8d4 3d00 	ldr.w	r3, [r4, #3328]	; 0xd00
  20e3a6:	4283      	cmp	r3, r0
  20e3a8:	d8e8      	bhi.n	20e37c <HAL_SYSTICK_Callback+0xa08>
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20e3aa:	46b3      	mov	fp, r6
  20e3ac:	19a3      	adds	r3, r4, r6
  20e3ae:	f893 2a34 	ldrb.w	r2, [r3, #2612]	; 0xa34
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  20e3b2:	f893 1a35 	ldrb.w	r1, [r3, #2613]	; 0xa35
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  20e3b6:	f893 aa36 	ldrb.w	sl, [r3, #2614]	; 0xa36
  20e3ba:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  20e3be:	ea4a 2a01 	orr.w	sl, sl, r1, lsl #8
  20e3c2:	ea4a 0a02 	orr.w	sl, sl, r2
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20e3c6:	f893 3a37 	ldrb.w	r3, [r3, #2615]	; 0xa37
  20e3ca:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
      offset += sizeof(this->floats_length);
  20e3ce:	3604      	adds	r6, #4
      if(floats_lengthT > floats_length)
  20e3d0:	f8d4 3d0c 	ldr.w	r3, [r4, #3340]	; 0xd0c
  20e3d4:	459a      	cmp	sl, r3
  20e3d6:	d848      	bhi.n	20e46a <HAL_SYSTICK_Callback+0xaf6>
      floats_length = floats_lengthT;
  20e3d8:	f8c4 ad0c 	str.w	sl, [r4, #3340]	; 0xd0c
      for( uint32_t i = 0; i < floats_length; i++){
  20e3dc:	f1ba 0f00 	cmp.w	sl, #0
  20e3e0:	d019      	beq.n	20e416 <HAL_SYSTICK_Callback+0xaa2>
  20e3e2:	eb07 010b 	add.w	r1, r7, fp
  20e3e6:	2000      	movs	r0, #0
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
  20e3e8:	7f4a      	ldrb	r2, [r1, #29]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20e3ea:	7f8b      	ldrb	r3, [r1, #30]
  20e3ec:	041b      	lsls	r3, r3, #16
  20e3ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
  20e3f2:	7f0a      	ldrb	r2, [r1, #28]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
  20e3f4:	4313      	orrs	r3, r2
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
  20e3f6:	7fca      	ldrb	r2, [r1, #31]
  20e3f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      this->st_floats = u_st_floats.real;
  20e3fc:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
  20e400:	3604      	adds	r6, #4
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
  20e402:	f8d4 2d14 	ldr.w	r2, [r4, #3348]	; 0xd14
  20e406:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < floats_length; i++){
  20e40a:	3001      	adds	r0, #1
  20e40c:	3104      	adds	r1, #4
  20e40e:	f8d4 3d0c 	ldr.w	r3, [r4, #3340]	; 0xd0c
  20e412:	4283      	cmp	r3, r0
  20e414:	d8e8      	bhi.n	20e3e8 <HAL_SYSTICK_Callback+0xa74>
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
  20e416:	19a3      	adds	r3, r4, r6
  20e418:	f893 2a34 	ldrb.w	r2, [r3, #2612]	; 0xa34
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
  20e41c:	f893 1a35 	ldrb.w	r1, [r3, #2613]	; 0xa35
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
  20e420:	f893 aa36 	ldrb.w	sl, [r3, #2614]	; 0xa36
  20e424:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
  20e428:	ea4a 2a01 	orr.w	sl, sl, r1, lsl #8
  20e42c:	ea4a 0a02 	orr.w	sl, sl, r2
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
  20e430:	f893 3a37 	ldrb.w	r3, [r3, #2615]	; 0xa37
  20e434:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
      offset += sizeof(this->strings_length);
  20e438:	3604      	adds	r6, #4
      if(strings_lengthT > strings_length)
  20e43a:	f8d4 3d18 	ldr.w	r3, [r4, #3352]	; 0xd18
  20e43e:	459a      	cmp	sl, r3
  20e440:	d81c      	bhi.n	20e47c <HAL_SYSTICK_Callback+0xb08>
      strings_length = strings_lengthT;
  20e442:	f8c4 ad18 	str.w	sl, [r4, #3352]	; 0xd18
      for( uint32_t i = 0; i < strings_length; i++){
  20e446:	f1ba 0f00 	cmp.w	sl, #0
  20e44a:	d04f      	beq.n	20e4ec <HAL_SYSTICK_Callback+0xb78>
  20e44c:	2000      	movs	r0, #0
      inbuffer[offset+length_st_strings-1]=0;
  20e44e:	4684      	mov	ip, r0
      this->st_strings = (char *)(inbuffer + offset-1);
  20e450:	f604 2e34 	addw	lr, r4, #2612	; 0xa34
  20e454:	e03a      	b.n	20e4cc <HAL_SYSTICK_Callback+0xb58>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
  20e456:	00b1      	lsls	r1, r6, #2
  20e458:	f8d4 0d08 	ldr.w	r0, [r4, #3336]	; 0xd08
  20e45c:	f008 fac6 	bl	2169ec <realloc>
  20e460:	f8c4 0d08 	str.w	r0, [r4, #3336]	; 0xd08
  20e464:	e782      	b.n	20e36c <HAL_SYSTICK_Callback+0x9f8>
      offset += sizeof(this->ints_length);
  20e466:	2604      	movs	r6, #4
  20e468:	e79f      	b.n	20e3aa <HAL_SYSTICK_Callback+0xa36>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
  20e46a:	ea4f 018a 	mov.w	r1, sl, lsl #2
  20e46e:	f8d4 0d14 	ldr.w	r0, [r4, #3348]	; 0xd14
  20e472:	f008 fabb 	bl	2169ec <realloc>
  20e476:	f8c4 0d14 	str.w	r0, [r4, #3348]	; 0xd14
  20e47a:	e7ad      	b.n	20e3d8 <HAL_SYSTICK_Callback+0xa64>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
  20e47c:	ea4f 018a 	mov.w	r1, sl, lsl #2
  20e480:	f8d4 0d20 	ldr.w	r0, [r4, #3360]	; 0xd20
  20e484:	f008 fab2 	bl	2169ec <realloc>
  20e488:	f8c4 0d20 	str.w	r0, [r4, #3360]	; 0xd20
  20e48c:	e7d9      	b.n	20e442 <HAL_SYSTICK_Callback+0xace>
      offset += 4;
  20e48e:	3604      	adds	r6, #4
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
  20e490:	4431      	add	r1, r6
  20e492:	428e      	cmp	r6, r1
  20e494:	d209      	bcs.n	20e4aa <HAL_SYSTICK_Callback+0xb36>
  20e496:	331b      	adds	r3, #27
  20e498:	443b      	add	r3, r7
  20e49a:	4632      	mov	r2, r6
          inbuffer[k-1]=inbuffer[k];
  20e49c:	f893 a001 	ldrb.w	sl, [r3, #1]
  20e4a0:	f803 ab01 	strb.w	sl, [r3], #1
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
  20e4a4:	3201      	adds	r2, #1
  20e4a6:	428a      	cmp	r2, r1
  20e4a8:	d3f8      	bcc.n	20e49c <HAL_SYSTICK_Callback+0xb28>
      inbuffer[offset+length_st_strings-1]=0;
  20e4aa:	1863      	adds	r3, r4, r1
  20e4ac:	f883 ca33 	strb.w	ip, [r3, #2611]	; 0xa33
      this->st_strings = (char *)(inbuffer + offset-1);
  20e4b0:	1e73      	subs	r3, r6, #1
  20e4b2:	4473      	add	r3, lr
  20e4b4:	f8c4 3d1c 	str.w	r3, [r4, #3356]	; 0xd1c
      offset += length_st_strings;
  20e4b8:	460e      	mov	r6, r1
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
  20e4ba:	f8d4 2d20 	ldr.w	r2, [r4, #3360]	; 0xd20
  20e4be:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
      for( uint32_t i = 0; i < strings_length; i++){
  20e4c2:	3001      	adds	r0, #1
  20e4c4:	f8d4 3d18 	ldr.w	r3, [r4, #3352]	; 0xd18
  20e4c8:	4283      	cmp	r3, r0
  20e4ca:	d90f      	bls.n	20e4ec <HAL_SYSTICK_Callback+0xb78>
      arrToVar(length_st_strings, (inbuffer + offset));
  20e4cc:	4633      	mov	r3, r6
  20e4ce:	f106 0b18 	add.w	fp, r6, #24
  20e4d2:	44bb      	add	fp, r7
  20e4d4:	2200      	movs	r2, #0
    var = 0;
  20e4d6:	4611      	mov	r1, r2
      var |= (arr[i] << (8 * i));
  20e4d8:	f81b ab01 	ldrb.w	sl, [fp], #1
  20e4dc:	fa0a fa02 	lsl.w	sl, sl, r2
  20e4e0:	ea41 010a 	orr.w	r1, r1, sl
  20e4e4:	3208      	adds	r2, #8
    for (size_t i = 0; i < sizeof(V); i++)
  20e4e6:	2a20      	cmp	r2, #32
  20e4e8:	d1f6      	bne.n	20e4d8 <HAL_SYSTICK_Callback+0xb64>
  20e4ea:	e7d0      	b.n	20e48e <HAL_SYSTICK_Callback+0xb1a>
            param_recieved = true;
  20e4ec:	2301      	movs	r3, #1
  20e4ee:	f884 3cf8 	strb.w	r3, [r4, #3320]	; 0xcf8
  20e4f2:	e5a6      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
            configured_ = false;
  20e4f4:	2300      	movs	r3, #0
  20e4f6:	f884 3ce8 	strb.w	r3, [r4, #3304]	; 0xce8
  20e4fa:	e5a2      	b.n	20e042 <HAL_SYSTICK_Callback+0x6ce>
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
  20e4fc:	4b11      	ldr	r3, [pc, #68]	; (20e544 <HAL_SYSTICK_Callback+0xbd0>)
  20e4fe:	f893 3ce8 	ldrb.w	r3, [r3, #3304]	; 0xce8
  20e502:	b13b      	cbz	r3, 20e514 <HAL_SYSTICK_Callback+0xba0>
  20e504:	4b0f      	ldr	r3, [pc, #60]	; (20e544 <HAL_SYSTICK_Callback+0xbd0>)
  20e506:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
  20e50a:	1aeb      	subs	r3, r5, r3
  20e50c:	f640 12c4 	movw	r2, #2500	; 0x9c4
  20e510:	4293      	cmp	r3, r2
  20e512:	d802      	bhi.n	20e51a <HAL_SYSTICK_Callback+0xba6>
#endif

 /* ros communication */
  nh_.spinOnce();
}
  20e514:	b06f      	add	sp, #444	; 0x1bc
  20e516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      data()
  20e51a:	4b0b      	ldr	r3, [pc, #44]	; (20e548 <HAL_SYSTICK_Callback+0xbd4>)
  20e51c:	930f      	str	r3, [sp, #60]	; 0x3c
  20e51e:	2300      	movs	r3, #0
  20e520:	9310      	str	r3, [sp, #64]	; 0x40
  20e522:	9311      	str	r3, [sp, #68]	; 0x44
    publish(TopicInfo::ID_TIME, &t);
  20e524:	4c07      	ldr	r4, [pc, #28]	; (20e544 <HAL_SYSTICK_Callback+0xbd0>)
  20e526:	f8d4 3a1c 	ldr.w	r3, [r4, #2588]	; 0xa1c
  20e52a:	681b      	ldr	r3, [r3, #0]
  20e52c:	aa0f      	add	r2, sp, #60	; 0x3c
  20e52e:	210a      	movs	r1, #10
  20e530:	f604 201c 	addw	r0, r4, #2588	; 0xa1c
  20e534:	4798      	blx	r3
  20e536:	f001 f9b5 	bl	20f8a4 <HAL_GetTick>
    rt_time = hardware_.time();
  20e53a:	f8c4 0a24 	str.w	r0, [r4, #2596]	; 0xa24
      last_sync_time = c_time;
  20e53e:	f8c4 5cec 	str.w	r5, [r4, #3308]	; 0xcec
  20e542:	e7e7      	b.n	20e514 <HAL_SYSTICK_Callback+0xba0>
  20e544:	20000470 	.word	0x20000470
  20e548:	002180c8 	.word	0x002180c8

0020e54c <_Z18SystemClock_Configv>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
  20e54c:	b5f0      	push	{r4, r5, r6, r7, lr}
  20e54e:	b0b5      	sub	sp, #212	; 0xd4

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
  20e550:	2400      	movs	r4, #0
  20e552:	9400      	str	r4, [sp, #0]
  20e554:	4b2b      	ldr	r3, [pc, #172]	; (20e604 <_Z18SystemClock_Configv+0xb8>)
  20e556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  20e558:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  20e55c:	641a      	str	r2, [r3, #64]	; 0x40
  20e55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  20e560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  20e564:	9300      	str	r3, [sp, #0]
  20e566:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  20e568:	9401      	str	r4, [sp, #4]
  20e56a:	4b27      	ldr	r3, [pc, #156]	; (20e608 <_Z18SystemClock_Configv+0xbc>)
  20e56c:	681a      	ldr	r2, [r3, #0]
  20e56e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
  20e572:	601a      	str	r2, [r3, #0]
  20e574:	681b      	ldr	r3, [r3, #0]
  20e576:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  20e57a:	9301      	str	r3, [sp, #4]
  20e57c:	9b01      	ldr	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  20e57e:	2701      	movs	r7, #1
  20e580:	9728      	str	r7, [sp, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  20e582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  20e586:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  20e588:	2502      	movs	r5, #2
  20e58a:	952e      	str	r5, [sp, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  20e58c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  20e590:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
  20e592:	2604      	movs	r6, #4
  20e594:	9630      	str	r6, [sp, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
  20e596:	23d8      	movs	r3, #216	; 0xd8
  20e598:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  20e59a:	9532      	str	r5, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
  20e59c:	9533      	str	r5, [sp, #204]	; 0xcc
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
  20e59e:	a828      	add	r0, sp, #160	; 0xa0
  20e5a0:	f002 ffd2 	bl	211548 <HAL_RCC_OscConfig>

  HAL_PWREx_EnableOverDrive();
  20e5a4:	f002 ff92 	bl	2114cc <HAL_PWREx_EnableOverDrive>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
  20e5a8:	230f      	movs	r3, #15
  20e5aa:	9323      	str	r3, [sp, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  20e5ac:	9524      	str	r5, [sp, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  20e5ae:	9425      	str	r4, [sp, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  20e5b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  20e5b4:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  20e5b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  20e5ba:	9327      	str	r3, [sp, #156]	; 0x9c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
  20e5bc:	2107      	movs	r1, #7
  20e5be:	a823      	add	r0, sp, #140	; 0x8c
  20e5c0:	f003 f9ea 	bl	211998 <HAL_RCC_ClockConfig>

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
  20e5c4:	f24c 3340 	movw	r3, #49984	; 0xc340
  20e5c8:	9302      	str	r3, [sp, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
  20e5ca:	9713      	str	r7, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
  20e5cc:	2310      	movs	r3, #16
  20e5ce:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
  20e5d0:	9416      	str	r4, [sp, #88]	; 0x58
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  20e5d2:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  20e5d4:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
  20e5d6:	a802      	add	r0, sp, #8
  20e5d8:	f003 fb7e 	bl	211cd8 <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
  20e5dc:	f003 fb36 	bl	211c4c <HAL_RCC_GetHCLKFreq>
  20e5e0:	4b0a      	ldr	r3, [pc, #40]	; (20e60c <_Z18SystemClock_Configv+0xc0>)
  20e5e2:	fba3 3000 	umull	r3, r0, r3, r0
  20e5e6:	0980      	lsrs	r0, r0, #6
  20e5e8:	f002 f824 	bl	210634 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
  20e5ec:	4630      	mov	r0, r6
  20e5ee:	f002 f837 	bl	210660 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
  20e5f2:	4622      	mov	r2, r4
  20e5f4:	4621      	mov	r1, r4
  20e5f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  20e5fa:	f001 ffe1 	bl	2105c0 <HAL_NVIC_SetPriority>
}
  20e5fe:	b035      	add	sp, #212	; 0xd4
  20e600:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20e602:	bf00      	nop
  20e604:	40023800 	.word	0x40023800
  20e608:	40007000 	.word	0x40007000
  20e60c:	10624dd3 	.word	0x10624dd3

0020e610 <main>:
int main(void){
  20e610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  20e614:	ed2d 8b04 	vpush	{d8-d9}
  20e618:	b083      	sub	sp, #12
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  20e61a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  20e61e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  20e622:	4b6e      	ldr	r3, [pc, #440]	; (20e7dc <main+0x1cc>)
  20e624:	2100      	movs	r1, #0
  20e626:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  20e62a:	695a      	ldr	r2, [r3, #20]
  20e62c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  20e630:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  20e632:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  20e636:	f3bf 8f6f 	isb	sy
  #if (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
  20e63a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  20e63e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  20e642:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  20e646:	f3c0 354e 	ubfx	r5, r0, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  20e64a:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  20e64e:	016f      	lsls	r7, r5, #5
  20e650:	ea4f 7c80 	mov.w	ip, r0, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  20e654:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  20e658:	461c      	mov	r4, r3
  20e65a:	ea07 060e 	and.w	r6, r7, lr
  20e65e:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  20e660:	4603      	mov	r3, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  20e662:	ea46 0102 	orr.w	r1, r6, r2
  20e666:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways--);
  20e66a:	3b01      	subs	r3, #1
  20e66c:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
      do {
  20e670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  20e674:	d1f5      	bne.n	20e662 <main+0x52>
    } while(sets--);
  20e676:	3d01      	subs	r5, #1
  20e678:	3f20      	subs	r7, #32
    do {
  20e67a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
  20e67e:	d1ec      	bne.n	20e65a <main+0x4a>
  20e680:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  20e684:	4a55      	ldr	r2, [pc, #340]	; (20e7dc <main+0x1cc>)
  20e686:	6953      	ldr	r3, [r2, #20]
  20e688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20e68c:	6153      	str	r3, [r2, #20]
  20e68e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  20e692:	f3bf 8f6f 	isb	sy
  HAL_Init();
  20e696:	f001 f8eb 	bl	20f870 <HAL_Init>
  SystemClock_Config();
  20e69a:	f7ff ff57 	bl	20e54c <_Z18SystemClock_Configv>
  MX_GPIO_Init();
  20e69e:	f7fd fa75 	bl	20bb8c <MX_GPIO_Init>
  MX_DMA_Init();
  20e6a2:	f7fd fa49 	bl	20bb38 <MX_DMA_Init>
  MX_ADC1_Init();
  20e6a6:	f7fd f939 	bl	20b91c <MX_ADC1_Init>
  MX_ADC2_Init();
  20e6aa:	f7fd f959 	bl	20b960 <MX_ADC2_Init>
  MX_ADC3_Init();
  20e6ae:	f7fd f97b 	bl	20b9a8 <MX_ADC3_Init>
  MX_CAN1_Init();
  20e6b2:	f7fd f9f5 	bl	20baa0 <MX_CAN1_Init>
  MX_I2C1_Init();
  20e6b6:	f7fd fadf 	bl	20bc78 <MX_I2C1_Init>
  MX_SPI1_Init();
  20e6ba:	f000 fc21 	bl	20ef00 <MX_SPI1_Init>
  MX_TIM4_Init();
  20e6be:	f000 fddd 	bl	20f27c <MX_TIM4_Init>
  MX_TIM5_Init();
  20e6c2:	f000 fcf3 	bl	20f0ac <MX_TIM5_Init>
  MX_TIM8_Init();
  20e6c6:	f000 fe23 	bl	20f310 <MX_TIM8_Init>
  MX_USART1_UART_Init();
  20e6ca:	f000 fe9b 	bl	20f404 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
  20e6ce:	f000 feb1 	bl	20f434 <MX_USART3_UART_Init>
  MX_TIM3_Init();
  20e6d2:	f000 fcc5 	bl	20f060 <MX_TIM3_Init>
  MX_I2C2_Init();
  20e6d6:	f7fd faed 	bl	20bcb4 <MX_I2C2_Init>
  MX_UART4_Init();
  20e6da:	f000 fe79 	bl	20f3d0 <MX_UART4_Init>
  MX_TIM2_Init();
  20e6de:	f000 fc9b 	bl	20f018 <MX_TIM2_Init>
	  rx::init(huart);
  20e6e2:	4c3f      	ldr	r4, [pc, #252]	; (20e7e0 <main+0x1d0>)
  20e6e4:	4620      	mov	r0, r4
  20e6e6:	f000 ff73 	bl	20f5d0 <_ZN2rx4initEP18UART_HandleTypeDef>
	  tx::init(huart);
  20e6ea:	4620      	mov	r0, r4
  20e6ec:	f000 ffd4 	bl	20f698 <_ZN2tx4initEP18UART_HandleTypeDef>
      parent::mode_ = 0;
  20e6f0:	4c3c      	ldr	r4, [pc, #240]	; (20e7e4 <main+0x1d4>)
  20e6f2:	2300      	movs	r3, #0
  20e6f4:	f8c4 3cd4 	str.w	r3, [r4, #3284]	; 0xcd4
      parent::bytes_ = 0;
  20e6f8:	f8c4 3cd8 	str.w	r3, [r4, #3288]	; 0xcd8
      parent::index_ = 0;
  20e6fc:	f8c4 3ce0 	str.w	r3, [r4, #3296]	; 0xce0
      parent::topic_ = 0;
  20e700:	f8c4 3cdc 	str.w	r3, [r4, #3292]	; 0xcdc
  FlashMemory::init(0x08080000, FLASH_SECTOR_6);
  20e704:	2106      	movs	r1, #6
  20e706:	4838      	ldr	r0, [pc, #224]	; (20e7e8 <main+0x1d8>)
  20e708:	f7f8 fcba 	bl	207080 <_ZN11FlashMemory4initEmm>
 gps_.init(&huart3, &nh_);
  20e70c:	f604 251c 	addw	r5, r4, #2588	; 0xa1c
  20e710:	462a      	mov	r2, r5
  20e712:	4936      	ldr	r1, [pc, #216]	; (20e7ec <main+0x1dc>)
  20e714:	f504 70ce 	add.w	r0, r4, #412	; 0x19c
  20e718:	f7fb fbb6 	bl	209e88 <_ZN3GPS4initEP18UART_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>
  imu_.init(&hspi1, &hi2c2, &nh_);
  20e71c:	1d26      	adds	r6, r4, #4
  20e71e:	462b      	mov	r3, r5
  20e720:	4a33      	ldr	r2, [pc, #204]	; (20e7f0 <main+0x1e0>)
  20e722:	4934      	ldr	r1, [pc, #208]	; (20e7f4 <main+0x1e4>)
  20e724:	4630      	mov	r0, r6
  20e726:	f7fc ffdd 	bl	20b6e4 <_ZN10IMUOnboard4initEP19__SPI_HandleTypeDefP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>
  IMU_ROS_CMD::init(&nh_);
  20e72a:	4628      	mov	r0, r5
  20e72c:	f7fd f870 	bl	20b810 <_ZN11IMU_ROS_CMD4initEPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>
  IMU_ROS_CMD::addImu(&imu_);
  20e730:	4630      	mov	r0, r6
  20e732:	f7fd f88b 	bl	20b84c <_ZN11IMU_ROS_CMD6addImuEP3IMU>
  baro_.init(&hi2c1, &nh_);
  20e736:	462a      	mov	r2, r5
  20e738:	492f      	ldr	r1, [pc, #188]	; (20e7f8 <main+0x1e8>)
  20e73a:	f504 708e 	add.w	r0, r4, #284	; 0x11c
  20e73e:	f7fb f8eb 	bl	209918 <_ZN4Baro4initEP17I2C_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>
    nh_ = nh;
  20e742:	f8c4 52e0 	str.w	r5, [r4, #736]	; 0x2e0
        attitude_estimate_flag_ = true;
  20e746:	2301      	movs	r3, #1
  20e748:	f884 3464 	strb.w	r3, [r4, #1124]	; 0x464
        imu_ = imu;
  20e74c:	f8c4 62e4 	str.w	r6, [r4, #740]	; 0x2e4
    nh_ = nh;
  20e750:	f8c4 52f0 	str.w	r5, [r4, #752]	; 0x2f0
      if (publishers[i] == 0) // empty slot
  20e754:	f8d4 3c34 	ldr.w	r3, [r4, #3124]	; 0xc34
  20e758:	b18b      	cbz	r3, 20e77e <main+0x16e>
  20e75a:	f604 4234 	addw	r2, r4, #3124	; 0xc34
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20e75e:	2301      	movs	r3, #1
      if (publishers[i] == 0) // empty slot
  20e760:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20e764:	b161      	cbz	r1, 20e780 <main+0x170>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20e766:	3301      	adds	r3, #1
  20e768:	2b14      	cmp	r3, #20
  20e76a:	d1f9      	bne.n	20e760 <main+0x150>
  20e76c:	4a23      	ldr	r2, [pc, #140]	; (20e7fc <main+0x1ec>)
  20e76e:	2301      	movs	r3, #1
      if (publishers[i] == 0) // empty slot
  20e770:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20e774:	b1b9      	cbz	r1, 20e7a6 <main+0x196>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20e776:	3301      	adds	r3, #1
  20e778:	2b14      	cmp	r3, #20
  20e77a:	d1f9      	bne.n	20e770 <main+0x160>
  20e77c:	e021      	b.n	20e7c2 <main+0x1b2>
  20e77e:	2300      	movs	r3, #0
        publishers[i] = &p;
  20e780:	4a18      	ldr	r2, [pc, #96]	; (20e7e4 <main+0x1d4>)
  20e782:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  20e786:	f502 703d 	add.w	r0, r2, #756	; 0x2f4
  20e78a:	f8c1 0c34 	str.w	r0, [r1, #3124]	; 0xc34
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
  20e78e:	3378      	adds	r3, #120	; 0x78
  20e790:	f8c2 32fc 	str.w	r3, [r2, #764]	; 0x2fc
        p.nh_ = this;
  20e794:	f602 231c 	addw	r3, r2, #2588	; 0xa1c
  20e798:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
      if (publishers[i] == 0) // empty slot
  20e79c:	f8d2 3c34 	ldr.w	r3, [r2, #3124]	; 0xc34
  20e7a0:	2b00      	cmp	r3, #0
  20e7a2:	d1e3      	bne.n	20e76c <main+0x15c>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20e7a4:	2300      	movs	r3, #0
        publishers[i] = &p;
  20e7a6:	4a0f      	ldr	r2, [pc, #60]	; (20e7e4 <main+0x1d4>)
  20e7a8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  20e7ac:	f502 7042 	add.w	r0, r2, #776	; 0x308
  20e7b0:	f8c1 0c34 	str.w	r0, [r1, #3124]	; 0xc34
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
  20e7b4:	3378      	adds	r3, #120	; 0x78
  20e7b6:	f8c2 3310 	str.w	r3, [r2, #784]	; 0x310
        p.nh_ = this;
  20e7ba:	f602 231c 	addw	r3, r2, #2588	; 0xa1c
  20e7be:	f8c2 3314 	str.w	r3, [r2, #788]	; 0x314
      if (subscribers[i] == 0) // empty slot
  20e7c2:	4b08      	ldr	r3, [pc, #32]	; (20e7e4 <main+0x1d4>)
  20e7c4:	f8d3 3c84 	ldr.w	r3, [r3, #3204]	; 0xc84
  20e7c8:	b1e3      	cbz	r3, 20e804 <main+0x1f4>
  20e7ca:	4a0d      	ldr	r2, [pc, #52]	; (20e800 <main+0x1f0>)
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20e7cc:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  20e7ce:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20e7d2:	b1c1      	cbz	r1, 20e806 <main+0x1f6>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20e7d4:	3301      	adds	r3, #1
  20e7d6:	2b14      	cmp	r3, #20
  20e7d8:	d1f9      	bne.n	20e7ce <main+0x1be>
  20e7da:	e01e      	b.n	20e81a <main+0x20a>
  20e7dc:	e000ed00 	.word	0xe000ed00
  20e7e0:	2000485c 	.word	0x2000485c
  20e7e4:	20000470 	.word	0x20000470
  20e7e8:	08080000 	.word	0x08080000
  20e7ec:	200048cc 	.word	0x200048cc
  20e7f0:	200045cc 	.word	0x200045cc
  20e7f4:	2000461c 	.word	0x2000461c
  20e7f8:	20004590 	.word	0x20004590
  20e7fc:	200010a4 	.word	0x200010a4
  20e800:	200010f4 	.word	0x200010f4
  20e804:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  20e806:	4ac2      	ldr	r2, [pc, #776]	; (20eb10 <main+0x500>)
  20e808:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  20e80c:	f502 7064 	add.w	r0, r2, #912	; 0x390
  20e810:	f8c1 0c84 	str.w	r0, [r1, #3204]	; 0xc84
        s.id_ = i + 100;
  20e814:	3364      	adds	r3, #100	; 0x64
  20e816:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
  20e81a:	4cbd      	ldr	r4, [pc, #756]	; (20eb10 <main+0x500>)
  20e81c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
    imu_list_[0] = imu;
  20e820:	1d22      	adds	r2, r4, #4
  20e822:	601a      	str	r2, [r3, #0]
    last_imu_pub_time_ = HAL_GetTick();
  20e824:	f001 f83e 	bl	20f8a4 <HAL_GetTick>
  20e828:	f8c4 03dc 	str.w	r0, [r4, #988]	; 0x3dc
    last_attitude_pub_time_ = HAL_GetTick();
  20e82c:	f001 f83a 	bl	20f8a4 <HAL_GetTick>
  20e830:	f8c4 03e0 	str.w	r0, [r4, #992]	; 0x3e0
    estimator_ = new ComplementaryAHRS();
  20e834:	f44f 70a0 	mov.w	r0, #320	; 0x140
  20e838:	f005 fc47 	bl	2140ca <_Znwj>
        x = y = z = 0;
  20e83c:	2300      	movs	r3, #0
  20e83e:	60c3      	str	r3, [r0, #12]
  20e840:	6083      	str	r3, [r0, #8]
  20e842:	6043      	str	r3, [r0, #4]
  20e844:	6183      	str	r3, [r0, #24]
  20e846:	6143      	str	r3, [r0, #20]
  20e848:	6103      	str	r3, [r0, #16]
  20e84a:	6243      	str	r3, [r0, #36]	; 0x24
  20e84c:	6203      	str	r3, [r0, #32]
  20e84e:	61c3      	str	r3, [r0, #28]
  20e850:	6303      	str	r3, [r0, #48]	; 0x30
  20e852:	62c3      	str	r3, [r0, #44]	; 0x2c
  20e854:	6283      	str	r3, [r0, #40]	; 0x28
  20e856:	63c3      	str	r3, [r0, #60]	; 0x3c
  20e858:	6383      	str	r3, [r0, #56]	; 0x38
  20e85a:	6343      	str	r3, [r0, #52]	; 0x34
  20e85c:	6483      	str	r3, [r0, #72]	; 0x48
  20e85e:	6443      	str	r3, [r0, #68]	; 0x44
  20e860:	6403      	str	r3, [r0, #64]	; 0x40
  20e862:	6543      	str	r3, [r0, #84]	; 0x54
  20e864:	6503      	str	r3, [r0, #80]	; 0x50
  20e866:	64c3      	str	r3, [r0, #76]	; 0x4c
  20e868:	6603      	str	r3, [r0, #96]	; 0x60
  20e86a:	65c3      	str	r3, [r0, #92]	; 0x5c
  20e86c:	6583      	str	r3, [r0, #88]	; 0x58
  20e86e:	66c3      	str	r3, [r0, #108]	; 0x6c
  20e870:	6683      	str	r3, [r0, #104]	; 0x68
  20e872:	6643      	str	r3, [r0, #100]	; 0x64
  20e874:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
  20e878:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  20e87c:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  20e880:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  20e884:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
  20e888:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  20e88c:	f8c0 30f8 	str.w	r3, [r0, #248]	; 0xf8
  20e890:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  20e894:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  20e898:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
  20e89c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
  20e8a0:	f8c0 30fc 	str.w	r3, [r0, #252]	; 0xfc
    // zero the matrix
    void        zero(void);

    // setup the identity matrix
    void        identity(void) {
        a.x = b.y = c.z = 1;
  20e8a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  20e8a8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  20e8ac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  20e8b0:	6702      	str	r2, [r0, #112]	; 0x70
        a.y = a.z = 0;
  20e8b2:	6783      	str	r3, [r0, #120]	; 0x78
  20e8b4:	6743      	str	r3, [r0, #116]	; 0x74
        b.x = b.z = 0;
  20e8b6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  20e8ba:	67c3      	str	r3, [r0, #124]	; 0x7c
        c.x = c.y = 0;
  20e8bc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  20e8c0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    gyro_amp_ = 1.0f;
  20e8c4:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    rx_freq_ = 1000.0f;
  20e8c8:	4a92      	ldr	r2, [pc, #584]	; (20eb14 <main+0x504>)
  20e8ca:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
    cutoff_freq_ = 10.0f;
  20e8ce:	4a92      	ldr	r2, [pc, #584]	; (20eb18 <main+0x508>)
  20e8d0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
    w0_ = tan(M_PI * cutoff_freq_ / rx_freq_);
  20e8d4:	a782      	add	r7, pc, #520	; (adr r7, 20eae0 <main+0x4d0>)
  20e8d6:	e9d7 6700 	ldrd	r6, r7, [r7]
  20e8da:	e9c0 6730 	strd	r6, r7, [r0, #192]	; 0xc0
    a_  = sin(w0_) / 0.707;
  20e8de:	a782      	add	r7, pc, #520	; (adr r7, 20eae8 <main+0x4d8>)
  20e8e0:	e9d7 6700 	ldrd	r6, r7, [r7]
  20e8e4:	e9c0 672e 	strd	r6, r7, [r0, #184]	; 0xb8
    a1_ = 2 * cos(w0_) / (1 + a_ );
  20e8e8:	a781      	add	r7, pc, #516	; (adr r7, 20eaf0 <main+0x4e0>)
  20e8ea:	e9d7 6700 	ldrd	r6, r7, [r7]
  20e8ee:	e9c0 6732 	strd	r6, r7, [r0, #200]	; 0xc8
    a2_ = (a_ - 1) / (a_ + 1);
  20e8f2:	a781      	add	r7, pc, #516	; (adr r7, 20eaf8 <main+0x4e8>)
  20e8f4:	e9d7 6700 	ldrd	r6, r7, [r7]
  20e8f8:	e9c0 6734 	strd	r6, r7, [r0, #208]	; 0xd0
    b0_ = (1 - cos(w0_)) / 2 / (1 + a_);
  20e8fc:	a780      	add	r7, pc, #512	; (adr r7, 20eb00 <main+0x4f0>)
  20e8fe:	e9d7 6700 	ldrd	r6, r7, [r7]
  20e902:	e9c0 6736 	strd	r6, r7, [r0, #216]	; 0xd8
    b1_ =  (1 - cos(w0_)) / (1 + a_);
  20e906:	f20f 2900 	addw	r9, pc, #512	; 0x200
  20e90a:	e9d9 8900 	ldrd	r8, r9, [r9]
  20e90e:	e9c0 8938 	strd	r8, r9, [r0, #224]	; 0xe0
    b2_ = (1 - cos(w0_)) / 2 / (1 + a_);
  20e912:	e9c0 673a 	strd	r6, r7, [r0, #232]	; 0xe8
  ComplementaryAHRS():EstimatorAlgorithm(), est_g_(),  est_m_(){}
  20e916:	4a81      	ldr	r2, [pc, #516]	; (20eb1c <main+0x50c>)
  20e918:	6002      	str	r2, [r0, #0]
  20e91a:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
  20e91e:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
  20e922:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  20e926:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
  20e92a:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
  20e92e:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
  20e932:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
  20e936:	f8c0 3128 	str.w	r3, [r0, #296]	; 0x128
  20e93a:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
  20e93e:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
  20e942:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
  20e946:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
  20e94a:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0
        altitude_estimate_flag_ = true;
  20e94e:	2301      	movs	r3, #1
  20e950:	f884 3465 	strb.w	r3, [r4, #1125]	; 0x465
        baro_ = baro;
  20e954:	f504 738e 	add.w	r3, r4, #284	; 0x11c
  20e958:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
        altitude_estimator_.init(imu_, baro_, nh_);
  20e95c:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
  20e960:	f8d4 32e0 	ldr.w	r3, [r4, #736]	; 0x2e0
    nh_ = nh;
  20e964:	f8c4 33e8 	str.w	r3, [r4, #1000]	; 0x3e8
      if (publishers[i] == 0) // empty slot
  20e968:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  20e96c:	b14a      	cbz	r2, 20e982 <main+0x372>
  20e96e:	f503 7106 	add.w	r1, r3, #536	; 0x218
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20e972:	2201      	movs	r2, #1
      if (publishers[i] == 0) // empty slot
  20e974:	f851 4f04 	ldr.w	r4, [r1, #4]!
  20e978:	b124      	cbz	r4, 20e984 <main+0x374>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20e97a:	3201      	adds	r2, #1
  20e97c:	2a14      	cmp	r2, #20
  20e97e:	d1f9      	bne.n	20e974 <main+0x364>
  20e980:	e00c      	b.n	20e99c <main+0x38c>
  20e982:	2200      	movs	r2, #0
        publishers[i] = &p;
  20e984:	f102 0486 	add.w	r4, r2, #134	; 0x86
  20e988:	4961      	ldr	r1, [pc, #388]	; (20eb10 <main+0x500>)
  20e98a:	f501 757b 	add.w	r5, r1, #1004	; 0x3ec
  20e98e:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
  20e992:	3278      	adds	r2, #120	; 0x78
  20e994:	f8c1 23f4 	str.w	r2, [r1, #1012]	; 0x3f4
        p.nh_ = this;
  20e998:	f8c1 33f8 	str.w	r3, [r1, #1016]	; 0x3f8
    imu_ = imu;
  20e99c:	4a5c      	ldr	r2, [pc, #368]	; (20eb10 <main+0x500>)
  20e99e:	f8c2 0418 	str.w	r0, [r2, #1048]	; 0x418
    baro_= baro;
  20e9a2:	f502 718e 	add.w	r1, r2, #284	; 0x11c
  20e9a6:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c
    stage_ = READING_STAGE;
  20e9aa:	2100      	movs	r1, #0
  20e9ac:	f882 1420 	strb.w	r1, [r2, #1056]	; 0x420
        pos_estimate_flag_ = true;
  20e9b0:	2101      	movs	r1, #1
  20e9b2:	f882 1466 	strb.w	r1, [r2, #1126]	; 0x466
        gps_ = gps;
  20e9b6:	f502 71ce 	add.w	r1, r2, #412	; 0x19c
  20e9ba:	f8c2 12ec 	str.w	r1, [r2, #748]	; 0x2ec
    nh_ = nh;
  20e9be:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
      if (publishers[i] == 0) // empty slot
  20e9c2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
  20e9c6:	b14a      	cbz	r2, 20e9dc <main+0x3cc>
  20e9c8:	f503 7106 	add.w	r1, r3, #536	; 0x218
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20e9cc:	2201      	movs	r2, #1
      if (publishers[i] == 0) // empty slot
  20e9ce:	f851 4f04 	ldr.w	r4, [r1, #4]!
  20e9d2:	b124      	cbz	r4, 20e9de <main+0x3ce>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20e9d4:	3201      	adds	r2, #1
  20e9d6:	2a14      	cmp	r2, #20
  20e9d8:	d1f9      	bne.n	20e9ce <main+0x3be>
  20e9da:	e00c      	b.n	20e9f6 <main+0x3e6>
  20e9dc:	2200      	movs	r2, #0
        publishers[i] = &p;
  20e9de:	f102 0486 	add.w	r4, r2, #134	; 0x86
  20e9e2:	494b      	ldr	r1, [pc, #300]	; (20eb10 <main+0x500>)
  20e9e4:	f501 6585 	add.w	r5, r1, #1064	; 0x428
  20e9e8:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
  20e9ec:	3278      	adds	r2, #120	; 0x78
  20e9ee:	f8c1 2430 	str.w	r2, [r1, #1072]	; 0x430
        p.nh_ = this;
  20e9f2:	f8c1 3434 	str.w	r3, [r1, #1076]	; 0x434
    imu_ = imu;
  20e9f6:	4c46      	ldr	r4, [pc, #280]	; (20eb10 <main+0x500>)
  20e9f8:	f8c4 045c 	str.w	r0, [r4, #1116]	; 0x45c
    gps_ = gps;
  20e9fc:	f504 73ce 	add.w	r3, r4, #412	; 0x19c
  20ea00:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
  FlashMemory::read(); //IMU calib data, uav type
  20ea04:	f7f8 fba0 	bl	207148 <_ZN11FlashMemory4readEv>
  Spine::init(&hcan1, &nh_, &estimator_, GPIOE, GPIO_PIN_3);
  20ea08:	f604 251c 	addw	r5, r4, #2588	; 0xa1c
  20ea0c:	2308      	movs	r3, #8
  20ea0e:	9300      	str	r3, [sp, #0]
  20ea10:	4b43      	ldr	r3, [pc, #268]	; (20eb20 <main+0x510>)
  20ea12:	f504 7238 	add.w	r2, r4, #736	; 0x2e0
  20ea16:	4629      	mov	r1, r5
  20ea18:	4842      	ldr	r0, [pc, #264]	; (20eb24 <main+0x514>)
  20ea1a:	f7f7 fded 	bl	2065f8 <_ZN5Spine4initEP17CAN_HandleTypeDefPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEEP13StateEstimateP12GPIO_TypeDeft>
    nh_ = nh;
  20ea1e:	f8c4 5d40 	str.w	r5, [r4, #3392]	; 0xd40
      if (publishers[i] == 0) // empty slot
  20ea22:	f8d4 3c34 	ldr.w	r3, [r4, #3124]	; 0xc34
  20ea26:	b14b      	cbz	r3, 20ea3c <main+0x42c>
  20ea28:	f604 4234 	addw	r2, r4, #3124	; 0xc34
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20ea2c:	2301      	movs	r3, #1
      if (publishers[i] == 0) // empty slot
  20ea2e:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20ea32:	b121      	cbz	r1, 20ea3e <main+0x42e>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20ea34:	3301      	adds	r3, #1
  20ea36:	2b14      	cmp	r3, #20
  20ea38:	d1f9      	bne.n	20ea2e <main+0x41e>
  20ea3a:	e00e      	b.n	20ea5a <main+0x44a>
  20ea3c:	2300      	movs	r3, #0
        publishers[i] = &p;
  20ea3e:	4a34      	ldr	r2, [pc, #208]	; (20eb10 <main+0x500>)
  20ea40:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  20ea44:	f602 5024 	addw	r0, r2, #3364	; 0xd24
  20ea48:	f8c1 0c34 	str.w	r0, [r1, #3124]	; 0xc34
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
  20ea4c:	3378      	adds	r3, #120	; 0x78
  20ea4e:	f8c2 3d2c 	str.w	r3, [r2, #3372]	; 0xd2c
        p.nh_ = this;
  20ea52:	f602 231c 	addw	r3, r2, #2588	; 0xa1c
  20ea56:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
    hadc_ = hadc;
  20ea5a:	4c2d      	ldr	r4, [pc, #180]	; (20eb10 <main+0x500>)
  20ea5c:	4832      	ldr	r0, [pc, #200]	; (20eb28 <main+0x518>)
  20ea5e:	f8c4 0d44 	str.w	r0, [r4, #3396]	; 0xd44
    voltage_ = -1;
  20ea62:	f604 5324 	addw	r3, r4, #3364	; 0xd24
  20ea66:	4a31      	ldr	r2, [pc, #196]	; (20eb2c <main+0x51c>)
  20ea68:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_ADC_Start(hadc_);
  20ea6a:	f000 fff5 	bl	20fa58 <HAL_ADC_Start>
    nh_ = nh;
  20ea6e:	f604 231c 	addw	r3, r4, #2588	; 0xa1c
  20ea72:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
      if (publishers[i] == 0) // empty slot
  20ea76:	f8d4 3c34 	ldr.w	r3, [r4, #3124]	; 0xc34
  20ea7a:	b14b      	cbz	r3, 20ea90 <main+0x480>
  20ea7c:	f604 4234 	addw	r2, r4, #3124	; 0xc34
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20ea80:	2301      	movs	r3, #1
      if (publishers[i] == 0) // empty slot
  20ea82:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20ea86:	b121      	cbz	r1, 20ea92 <main+0x482>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
  20ea88:	3301      	adds	r3, #1
  20ea8a:	2b14      	cmp	r3, #20
  20ea8c:	d1f9      	bne.n	20ea82 <main+0x472>
  20ea8e:	e00e      	b.n	20eaae <main+0x49e>
  20ea90:	2300      	movs	r3, #0
        publishers[i] = &p;
  20ea92:	4a1f      	ldr	r2, [pc, #124]	; (20eb10 <main+0x500>)
  20ea94:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  20ea98:	f202 406c 	addw	r0, r2, #1132	; 0x46c
  20ea9c:	f8c1 0c34 	str.w	r0, [r1, #3124]	; 0xc34
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
  20eaa0:	3378      	adds	r3, #120	; 0x78
  20eaa2:	f8c2 3474 	str.w	r3, [r2, #1140]	; 0x474
        p.nh_ = this;
  20eaa6:	f602 231c 	addw	r3, r2, #2588	; 0xa1c
  20eaaa:	f8c2 3478 	str.w	r3, [r2, #1144]	; 0x478
      if (subscribers[i] == 0) // empty slot
  20eaae:	4b18      	ldr	r3, [pc, #96]	; (20eb10 <main+0x500>)
  20eab0:	f8d3 3c84 	ldr.w	r3, [r3, #3204]	; 0xc84
  20eab4:	2b00      	cmp	r3, #0
  20eab6:	d03d      	beq.n	20eb34 <main+0x524>
  20eab8:	4a1d      	ldr	r2, [pc, #116]	; (20eb30 <main+0x520>)
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20eaba:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  20eabc:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20eac0:	b3c9      	cbz	r1, 20eb36 <main+0x526>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20eac2:	3301      	adds	r3, #1
  20eac4:	2b14      	cmp	r3, #20
  20eac6:	d1f9      	bne.n	20eabc <main+0x4ac>
  20eac8:	4a19      	ldr	r2, [pc, #100]	; (20eb30 <main+0x520>)
  20eaca:	2301      	movs	r3, #1
      if (subscribers[i] == 0) // empty slot
  20eacc:	f852 1f04 	ldr.w	r1, [r2, #4]!
  20ead0:	2900      	cmp	r1, #0
  20ead2:	d03f      	beq.n	20eb54 <main+0x544>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20ead4:	3301      	adds	r3, #1
  20ead6:	2b14      	cmp	r3, #20
  20ead8:	d1f8      	bne.n	20eacc <main+0x4bc>
  20eada:	e045      	b.n	20eb68 <main+0x558>
  20eadc:	f3af 8000 	nop.w
  20eae0:	80000000 	.word	0x80000000
  20eae4:	3fa0171a 	.word	0x3fa0171a
  20eae8:	82399501 	.word	0x82399501
  20eaec:	3fa6c136 	.word	0x3fa6c136
  20eaf0:	1f52d501 	.word	0x1f52d501
  20eaf4:	3ffe9f8b 	.word	0x3ffe9f8b
  20eaf8:	1e4e5b07 	.word	0x1e4e5b07
  20eafc:	bfed46d5 	.word	0xbfed46d5
  20eb00:	a2c415d0 	.word	0xa2c415d0
  20eb04:	3f2efb7e 	.word	0x3f2efb7e
  20eb08:	a2c415d0 	.word	0xa2c415d0
  20eb0c:	3f3efb7e 	.word	0x3f3efb7e
  20eb10:	20000470 	.word	0x20000470
  20eb14:	447a0000 	.word	0x447a0000
  20eb18:	41200000 	.word	0x41200000
  20eb1c:	002181b8 	.word	0x002181b8
  20eb20:	40021000 	.word	0x40021000
  20eb24:	20004550 	.word	0x20004550
  20eb28:	200044c0 	.word	0x200044c0
  20eb2c:	bf800000 	.word	0xbf800000
  20eb30:	200010f4 	.word	0x200010f4
  20eb34:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  20eb36:	4a70      	ldr	r2, [pc, #448]	; (20ecf8 <main+0x6e8>)
  20eb38:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  20eb3c:	f502 6091 	add.w	r0, r2, #1160	; 0x488
  20eb40:	f8c1 0c84 	str.w	r0, [r1, #3204]	; 0xc84
        s.id_ = i + 100;
  20eb44:	3364      	adds	r3, #100	; 0x64
  20eb46:	f8c2 348c 	str.w	r3, [r2, #1164]	; 0x48c
      if (subscribers[i] == 0) // empty slot
  20eb4a:	f8d2 3c84 	ldr.w	r3, [r2, #3204]	; 0xc84
  20eb4e:	2b00      	cmp	r3, #0
  20eb50:	d1ba      	bne.n	20eac8 <main+0x4b8>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
  20eb52:	2300      	movs	r3, #0
        subscribers[i] = static_cast<Subscriber_*>(&s);
  20eb54:	4a68      	ldr	r2, [pc, #416]	; (20ecf8 <main+0x6e8>)
  20eb56:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  20eb5a:	f202 40ac 	addw	r0, r2, #1196	; 0x4ac
  20eb5e:	f8c1 0c84 	str.w	r0, [r1, #3204]	; 0xc84
        s.id_ = i + 100;
  20eb62:	3364      	adds	r3, #100	; 0x64
  20eb64:	f8c2 34b0 	str.w	r3, [r2, #1200]	; 0x4b0
    estimator_ = estimator;
  20eb68:	4c63      	ldr	r4, [pc, #396]	; (20ecf8 <main+0x6e8>)
  20eb6a:	f504 7338 	add.w	r3, r4, #736	; 0x2e0
  20eb6e:	f8c4 3a0c 	str.w	r3, [r4, #2572]	; 0xa0c
    bat_ = bat;
  20eb72:	f604 5024 	addw	r0, r4, #3364	; 0xd24
  20eb76:	f8c4 0a10 	str.w	r0, [r4, #2576]	; 0xa10
    pwm_htim1_ = htim1;
  20eb7a:	4960      	ldr	r1, [pc, #384]	; (20ecfc <main+0x6ec>)
  20eb7c:	f8c4 1a14 	str.w	r1, [r4, #2580]	; 0xa14
    pwm_htim2_ = htim2;
  20eb80:	4a5f      	ldr	r2, [pc, #380]	; (20ed00 <main+0x6f0>)
  20eb82:	f8c4 2a18 	str.w	r2, [r4, #2584]	; 0xa18
    att_controller_.init(htim1, htim2, estimator, bat, nh);
  20eb86:	f204 45d4 	addw	r5, r4, #1236	; 0x4d4
  20eb8a:	f604 261c 	addw	r6, r4, #2588	; 0xa1c
  20eb8e:	9601      	str	r6, [sp, #4]
  20eb90:	9000      	str	r0, [sp, #0]
  20eb92:	4628      	mov	r0, r5
  20eb94:	f7f9 fd96 	bl	2086c4 <_ZN18AttitudeController4initEP17TIM_HandleTypeDefS1_P13StateEstimateP13BatteryStatusPN3ros14NodeHandleStm_I13STMF7HardwareLi20ELi20ELi255ELi255EEE>
    start_control_flag_ = false;
  20eb98:	2300      	movs	r3, #0
  20eb9a:	f884 34d0 	strb.w	r3, [r4, #1232]	; 0x4d0
    pwm_test_flag_ = false;
  20eb9e:	f884 34d1 	strb.w	r3, [r4, #1233]	; 0x4d1
    integrate_flag_ = false;
  20eba2:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
  controller_.setMotorNumber(Spine::getSlaveNum());
  20eba6:	f7f7 fb99 	bl	2062dc <_ZN5Spine11getSlaveNumEv>
    att_controller_.setMotorNumber(motor_number);
  20ebaa:	4601      	mov	r1, r0
  20ebac:	4628      	mov	r0, r5
  20ebae:	f7f9 fe6d 	bl	20888c <_ZN18AttitudeController14setMotorNumberEh>
  controller_.setUavModel(Spine::getUavModel());
  20ebb2:	f7f7 fb99 	bl	2062e8 <_ZN5Spine11getUavModelEv>
    att_controller_.setUavModel(uav_model);
  20ebb6:	4601      	mov	r1, r0
  20ebb8:	4628      	mov	r0, r5
  20ebba:	f7f9 fe9d 	bl	2088f8 <_ZN18AttitudeController11setUavModelEa>
  start_processing_flag_ = true;
  20ebbe:	2301      	movs	r3, #1
  20ebc0:	7023      	strb	r3, [r4, #0]
    static uint32_t ros_pub_last_time = HAL_GetTick();
  20ebc2:	f8df b154 	ldr.w	fp, [pc, #340]	; 20ed18 <main+0x708>
        if(voltage  > 0) voltage_ = 0.99 * voltage_  + 0.01 * voltage;
  20ebc6:	f20f 1920 	addw	r9, pc, #288	; 0x120
  20ebca:	e9d9 8900 	ldrd	r8, r9, [r9]
        if(HAL_ADC_PollForConversion(hadc_,10) == HAL_OK)
  20ebce:	46a2      	mov	sl, r4
        float voltage =  adc_value_ * ADC_SCALE * VOLTAGE_DIVISION ;
  20ebd0:	f604 5524 	addw	r5, r4, #3364	; 0xd24
    static uint32_t last_time = HAL_GetTick();
  20ebd4:	4c4b      	ldr	r4, [pc, #300]	; (20ed04 <main+0x6f4>)
        float voltage =  adc_value_ * ADC_SCALE * VOLTAGE_DIVISION ;
  20ebd6:	ed9f 9a4c 	vldr	s18, [pc, #304]	; 20ed08 <main+0x6f8>
  20ebda:	eddf 8a4c 	vldr	s17, [pc, #304]	; 20ed0c <main+0x6fc>
    return tx::publish();
  20ebde:	f000 fd7b 	bl	20f6d8 <_ZN2tx7publishEv>
    static uint32_t last_time = HAL_GetTick();
  20ebe2:	4b4b      	ldr	r3, [pc, #300]	; (20ed10 <main+0x700>)
  20ebe4:	681b      	ldr	r3, [r3, #0]
  20ebe6:	f013 0f01 	tst.w	r3, #1
  20ebea:	d021      	beq.n	20ec30 <main+0x620>
    static uint32_t ros_pub_last_time = HAL_GetTick();
  20ebec:	4b49      	ldr	r3, [pc, #292]	; (20ed14 <main+0x704>)
  20ebee:	681b      	ldr	r3, [r3, #0]
  20ebf0:	f013 0f01 	tst.w	r3, #1
  20ebf4:	d023      	beq.n	20ec3e <main+0x62e>
    if(HAL_GetTick() - last_time > VOLTAGE_CECK_INTERVAL)
  20ebf6:	f000 fe55 	bl	20f8a4 <HAL_GetTick>
  20ebfa:	6823      	ldr	r3, [r4, #0]
  20ebfc:	1ac0      	subs	r0, r0, r3
  20ebfe:	2814      	cmp	r0, #20
  20ec00:	d825      	bhi.n	20ec4e <main+0x63e>
    if(HAL_GetTick() - ros_pub_last_time > ROS_PUB_INTERVAL)
  20ec02:	f000 fe4f 	bl	20f8a4 <HAL_GetTick>
  20ec06:	f8db 3000 	ldr.w	r3, [fp]
  20ec0a:	1ac0      	subs	r0, r0, r3
  20ec0c:	2864      	cmp	r0, #100	; 0x64
  20ec0e:	d9e6      	bls.n	20ebde <main+0x5ce>
			ros_pub_last_time = HAL_GetTick();
  20ec10:	f000 fe48 	bl	20f8a4 <HAL_GetTick>
  20ec14:	f8cb 0000 	str.w	r0, [fp]
			voltage_status_msg_.data = voltage_;
  20ec18:	6aab      	ldr	r3, [r5, #40]	; 0x28
  20ec1a:	61ab      	str	r3, [r5, #24]
    return nh_->publish(id_, msg);
  20ec1c:	f8da 0d30 	ldr.w	r0, [sl, #3376]	; 0xd30
  20ec20:	6803      	ldr	r3, [r0, #0]
  20ec22:	681b      	ldr	r3, [r3, #0]
  20ec24:	f60a 5238 	addw	r2, sl, #3384	; 0xd38
  20ec28:	f8da 1d2c 	ldr.w	r1, [sl, #3372]	; 0xd2c
  20ec2c:	4798      	blx	r3
  20ec2e:	e7d1      	b.n	20ebd4 <main+0x5c4>
    static uint32_t last_time = HAL_GetTick();
  20ec30:	f000 fe38 	bl	20f8a4 <HAL_GetTick>
  20ec34:	6020      	str	r0, [r4, #0]
  20ec36:	2201      	movs	r2, #1
  20ec38:	4b35      	ldr	r3, [pc, #212]	; (20ed10 <main+0x700>)
  20ec3a:	601a      	str	r2, [r3, #0]
  20ec3c:	e7d6      	b.n	20ebec <main+0x5dc>
    static uint32_t ros_pub_last_time = HAL_GetTick();
  20ec3e:	f000 fe31 	bl	20f8a4 <HAL_GetTick>
  20ec42:	f8cb 0000 	str.w	r0, [fp]
  20ec46:	2201      	movs	r2, #1
  20ec48:	4b32      	ldr	r3, [pc, #200]	; (20ed14 <main+0x704>)
  20ec4a:	601a      	str	r2, [r3, #0]
  20ec4c:	e7d3      	b.n	20ebf6 <main+0x5e6>
        last_time = HAL_GetTick();
  20ec4e:	f000 fe29 	bl	20f8a4 <HAL_GetTick>
  20ec52:	6020      	str	r0, [r4, #0]
        if(HAL_ADC_PollForConversion(hadc_,10) == HAL_OK)
  20ec54:	210a      	movs	r1, #10
  20ec56:	f8da 0d44 	ldr.w	r0, [sl, #3396]	; 0xd44
  20ec5a:	f000 ff7b 	bl	20fb54 <HAL_ADC_PollForConversion>
  20ec5e:	b3b8      	cbz	r0, 20ecd0 <main+0x6c0>
        HAL_ADC_Start(hadc_);
  20ec60:	f8da 0d44 	ldr.w	r0, [sl, #3396]	; 0xd44
  20ec64:	f000 fef8 	bl	20fa58 <HAL_ADC_Start>
        float voltage =  adc_value_ * ADC_SCALE * VOLTAGE_DIVISION ;
  20ec68:	ed95 8a09 	vldr	s16, [r5, #36]	; 0x24
  20ec6c:	ee28 8a09 	vmul.f32	s16, s16, s18
  20ec70:	ee28 8a28 	vmul.f32	s16, s16, s17
  20ec74:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
  20ec78:	ee28 8a27 	vmul.f32	s16, s16, s15
        if(voltage_ < 0) voltage_ = voltage;
  20ec7c:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
  20ec80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  20ec84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  20ec88:	bf48      	it	mi
  20ec8a:	ed85 8a0a 	vstrmi	s16, [r5, #40]	; 0x28
        if(voltage  > 0) voltage_ = 0.99 * voltage_  + 0.01 * voltage;
  20ec8e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
  20ec92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  20ec96:	ddb4      	ble.n	20ec02 <main+0x5f2>
  20ec98:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  20ec9a:	f7f1 fc2b 	bl	2004f4 <__aeabi_f2d>
  20ec9e:	4642      	mov	r2, r8
  20eca0:	464b      	mov	r3, r9
  20eca2:	f7f1 fc7b 	bl	20059c <__aeabi_dmul>
  20eca6:	4606      	mov	r6, r0
  20eca8:	460f      	mov	r7, r1
  20ecaa:	ee18 0a10 	vmov	r0, s16
  20ecae:	f7f1 fc21 	bl	2004f4 <__aeabi_f2d>
  20ecb2:	a30f      	add	r3, pc, #60	; (adr r3, 20ecf0 <main+0x6e0>)
  20ecb4:	e9d3 2300 	ldrd	r2, r3, [r3]
  20ecb8:	f7f1 fc70 	bl	20059c <__aeabi_dmul>
  20ecbc:	4602      	mov	r2, r0
  20ecbe:	460b      	mov	r3, r1
  20ecc0:	4630      	mov	r0, r6
  20ecc2:	4639      	mov	r1, r7
  20ecc4:	f7f1 fab8 	bl	200238 <__adddf3>
  20ecc8:	f7f1 ff02 	bl	200ad0 <__aeabi_d2f>
  20eccc:	62a8      	str	r0, [r5, #40]	; 0x28
  20ecce:	e798      	b.n	20ec02 <main+0x5f2>
        	adc_value_ = HAL_ADC_GetValue(hadc_);
  20ecd0:	f8da 0d44 	ldr.w	r0, [sl, #3396]	; 0xd44
  20ecd4:	f000 ff9a 	bl	20fc0c <HAL_ADC_GetValue>
  20ecd8:	ee07 0a90 	vmov	s15, r0
  20ecdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
  20ece0:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
  20ece4:	e7bc      	b.n	20ec60 <main+0x650>
  20ece6:	bf00      	nop
  20ece8:	7ae147ae 	.word	0x7ae147ae
  20ecec:	3fefae14 	.word	0x3fefae14
  20ecf0:	47ae147b 	.word	0x47ae147b
  20ecf4:	3f847ae1 	.word	0x3f847ae1
  20ecf8:	20000470 	.word	0x20000470
  20ecfc:	200046f8 	.word	0x200046f8
  20ed00:	20004770 	.word	0x20004770
  20ed04:	20004614 	.word	0x20004614
  20ed08:	414a6666 	.word	0x414a6666
  20ed0c:	3a83126f 	.word	0x3a83126f
  20ed10:	20004610 	.word	0x20004610
  20ed14:	20004608 	.word	0x20004608
  20ed18:	2000460c 	.word	0x2000460c

0020ed1c <_GLOBAL__sub_I_start_processing_flag_>:
}
  20ed1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  NodeHandle_() : configured_(false)
  20ed1e:	4a5f      	ldr	r2, [pc, #380]	; (20ee9c <_GLOBAL__sub_I_start_processing_flag_+0x180>)
  20ed20:	2300      	movs	r3, #0
  20ed22:	f882 3ce8 	strb.w	r3, [r2, #3304]	; 0xce8
      strings_length(0), strings(NULL)
  20ed26:	495e      	ldr	r1, [pc, #376]	; (20eea0 <_GLOBAL__sub_I_start_processing_flag_+0x184>)
  20ed28:	f8c2 1cfc 	str.w	r1, [r2, #3324]	; 0xcfc
  20ed2c:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  20ed30:	f8c2 3d08 	str.w	r3, [r2, #3336]	; 0xd08
  20ed34:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
  20ed38:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
  20ed3c:	f8c2 3d18 	str.w	r3, [r2, #3352]	; 0xd18
  20ed40:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
  20ed44:	f502 6343 	add.w	r3, r2, #3120	; 0xc30
  20ed48:	f502 6248 	add.w	r2, r2, #3200	; 0xc80
      publishers[i] = 0;
  20ed4c:	2100      	movs	r1, #0
  20ed4e:	f843 1f04 	str.w	r1, [r3, #4]!
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
  20ed52:	4293      	cmp	r3, r2
  20ed54:	d1fb      	bne.n	20ed4e <_GLOBAL__sub_I_start_processing_flag_+0x32>
  20ed56:	4953      	ldr	r1, [pc, #332]	; (20eea4 <_GLOBAL__sub_I_start_processing_flag_+0x188>)
      subscribers[i] = 0;
  20ed58:	2200      	movs	r2, #0
  20ed5a:	f843 2f04 	str.w	r2, [r3, #4]!
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
  20ed5e:	428b      	cmp	r3, r1
  20ed60:	d1fb      	bne.n	20ed5a <_GLOBAL__sub_I_start_processing_flag_+0x3e>
  20ed62:	4a4e      	ldr	r2, [pc, #312]	; (20ee9c <_GLOBAL__sub_I_start_processing_flag_+0x180>)
  20ed64:	f602 2333 	addw	r3, r2, #2611	; 0xa33
  20ed68:	f602 3232 	addw	r2, r2, #2866	; 0xb32
      message_in[i] = 0;
  20ed6c:	2100      	movs	r1, #0
  20ed6e:	f803 1f01 	strb.w	r1, [r3, #1]!
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
  20ed72:	4293      	cmp	r3, r2
  20ed74:	d1fb      	bne.n	20ed6e <_GLOBAL__sub_I_start_processing_flag_+0x52>
  20ed76:	494c      	ldr	r1, [pc, #304]	; (20eea8 <_GLOBAL__sub_I_start_processing_flag_+0x18c>)
      message_out[i] = 0;
  20ed78:	2200      	movs	r2, #0
  20ed7a:	f803 2f01 	strb.w	r2, [r3, #1]!
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
  20ed7e:	428b      	cmp	r3, r1
  20ed80:	d1fb      	bne.n	20ed7a <_GLOBAL__sub_I_start_processing_flag_+0x5e>
    spin_timeout_ = 0;
  20ed82:	4c46      	ldr	r4, [pc, #280]	; (20ee9c <_GLOBAL__sub_I_start_processing_flag_+0x180>)
  20ed84:	2500      	movs	r5, #0
  20ed86:	f8c4 5a30 	str.w	r5, [r4, #2608]	; 0xa30
	NodeHandleStm_(): parent::NodeHandle_()
  20ed8a:	4b48      	ldr	r3, [pc, #288]	; (20eeac <_GLOBAL__sub_I_start_processing_flag_+0x190>)
  20ed8c:	f8c4 3a1c 	str.w	r3, [r4, #2588]	; 0xa1c
  IMUOnboard():IMU(){}
  20ed90:	1d27      	adds	r7, r4, #4
  20ed92:	4638      	mov	r0, r7
  20ed94:	f7fb ffa4 	bl	20ace0 <_ZN3IMUC1Ev>
  20ed98:	4b45      	ldr	r3, [pc, #276]	; (20eeb0 <_GLOBAL__sub_I_start_processing_flag_+0x194>)
  20ed9a:	6063      	str	r3, [r4, #4]
IMUOnboard imu_;
  20ed9c:	4e45      	ldr	r6, [pc, #276]	; (20eeb4 <_GLOBAL__sub_I_start_processing_flag_+0x198>)
  20ed9e:	4632      	mov	r2, r6
  20eda0:	4945      	ldr	r1, [pc, #276]	; (20eeb8 <_GLOBAL__sub_I_start_processing_flag_+0x19c>)
  20eda2:	4638      	mov	r0, r7
  20eda4:	f005 f966 	bl	214074 <__aeabi_atexit>
Baro baro_;
  20eda8:	f504 778e 	add.w	r7, r4, #284	; 0x11c
  20edac:	4638      	mov	r0, r7
  20edae:	f7fa fd37 	bl	209820 <_ZN4BaroC1Ev>
  20edb2:	4632      	mov	r2, r6
  20edb4:	4941      	ldr	r1, [pc, #260]	; (20eebc <_GLOBAL__sub_I_start_processing_flag_+0x1a0>)
  20edb6:	4638      	mov	r0, r7
  20edb8:	f005 f95c 	bl	214074 <__aeabi_atexit>
GPS gps_;
  20edbc:	f504 77ce 	add.w	r7, r4, #412	; 0x19c
  20edc0:	4638      	mov	r0, r7
  20edc2:	f7fb f841 	bl	209e48 <_ZN3GPSC1Ev>
  20edc6:	4632      	mov	r2, r6
  20edc8:	493d      	ldr	r1, [pc, #244]	; (20eec0 <_GLOBAL__sub_I_start_processing_flag_+0x1a4>)
  20edca:	4638      	mov	r0, r7
  20edcc:	f005 f952 	bl	214074 <__aeabi_atexit>
StateEstimate estimator_;
  20edd0:	f504 7738 	add.w	r7, r4, #736	; 0x2e0
  20edd4:	4638      	mov	r0, r7
  20edd6:	f7fe fcf9 	bl	20d7cc <_ZN13StateEstimateC1Ev>
  20edda:	4632      	mov	r2, r6
  20eddc:	4939      	ldr	r1, [pc, #228]	; (20eec4 <_GLOBAL__sub_I_start_processing_flag_+0x1a8>)
  20edde:	4638      	mov	r0, r7
  20ede0:	f005 f948 	bl	214074 <__aeabi_atexit>
    endpoint_(endpoint) {};
  20ede4:	4b38      	ldr	r3, [pc, #224]	; (20eec8 <_GLOBAL__sub_I_start_processing_flag_+0x1ac>)
  20ede6:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
  20edea:	f604 5024 	addw	r0, r4, #3364	; 0xd24
  20edee:	f604 5338 	addw	r3, r4, #3384	; 0xd38
  20edf2:	f8c4 3d28 	str.w	r3, [r4, #3368]	; 0xd28
  20edf6:	f8c4 5d34 	str.w	r5, [r4, #3380]	; 0xd34
  20edfa:	4b34      	ldr	r3, [pc, #208]	; (20eecc <_GLOBAL__sub_I_start_processing_flag_+0x1b0>)
  20edfc:	f8c4 3d38 	str.w	r3, [r4, #3384]	; 0xd38
  20ee00:	2300      	movs	r3, #0
  20ee02:	6183      	str	r3, [r0, #24]
BatteryStatus battery_status_;
  20ee04:	4632      	mov	r2, r6
  20ee06:	4932      	ldr	r1, [pc, #200]	; (20eed0 <_GLOBAL__sub_I_start_processing_flag_+0x1b4>)
  20ee08:	f005 f934 	bl	214074 <__aeabi_atexit>
  20ee0c:	4b31      	ldr	r3, [pc, #196]	; (20eed4 <_GLOBAL__sub_I_start_processing_flag_+0x1b8>)
  20ee0e:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
  20ee12:	f504 678d 	add.w	r7, r4, #1128	; 0x468
  20ee16:	f504 6390 	add.w	r3, r4, #1152	; 0x480
  20ee1a:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
  20ee1e:	f8c4 547c 	str.w	r5, [r4, #1148]	; 0x47c
  20ee22:	4b2d      	ldr	r3, [pc, #180]	; (20eed8 <_GLOBAL__sub_I_start_processing_flag_+0x1bc>)
  20ee24:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
  20ee28:	f884 5484 	strb.w	r5, [r4, #1156]	; 0x484
    endpoint_(endpoint)
  20ee2c:	4b2b      	ldr	r3, [pc, #172]	; (20eedc <_GLOBAL__sub_I_start_processing_flag_+0x1c0>)
  20ee2e:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
      baselink(0)
  20ee32:	4b2b      	ldr	r3, [pc, #172]	; (20eee0 <_GLOBAL__sub_I_start_processing_flag_+0x1c4>)
  20ee34:	f8c4 3494 	str.w	r3, [r4, #1172]	; 0x494
  20ee38:	f884 5498 	strb.w	r5, [r4, #1176]	; 0x498
  20ee3c:	f884 5499 	strb.w	r5, [r4, #1177]	; 0x499
  20ee40:	f884 549a 	strb.w	r5, [r4, #1178]	; 0x49a
  20ee44:	4b27      	ldr	r3, [pc, #156]	; (20eee4 <_GLOBAL__sub_I_start_processing_flag_+0x1c8>)
  20ee46:	f8c4 349c 	str.w	r3, [r4, #1180]	; 0x49c
  20ee4a:	f8c4 54a0 	str.w	r5, [r4, #1184]	; 0x4a0
  20ee4e:	f8c4 74a4 	str.w	r7, [r4, #1188]	; 0x4a4
  20ee52:	2301      	movs	r3, #1
  20ee54:	f8c4 34a8 	str.w	r3, [r4, #1192]	; 0x4a8
    topic_ = topic_name;
  20ee58:	4a23      	ldr	r2, [pc, #140]	; (20eee8 <_GLOBAL__sub_I_start_processing_flag_+0x1cc>)
  20ee5a:	f8c4 2490 	str.w	r2, [r4, #1168]	; 0x490
    endpoint_(endpoint)
  20ee5e:	4a23      	ldr	r2, [pc, #140]	; (20eeec <_GLOBAL__sub_I_start_processing_flag_+0x1d0>)
  20ee60:	f8c4 24ac 	str.w	r2, [r4, #1196]	; 0x4ac
      cmd(0)
  20ee64:	4a22      	ldr	r2, [pc, #136]	; (20eef0 <_GLOBAL__sub_I_start_processing_flag_+0x1d4>)
  20ee66:	f8c4 24b8 	str.w	r2, [r4, #1208]	; 0x4b8
  20ee6a:	f884 54bc 	strb.w	r5, [r4, #1212]	; 0x4bc
  20ee6e:	4a21      	ldr	r2, [pc, #132]	; (20eef4 <_GLOBAL__sub_I_start_processing_flag_+0x1d8>)
  20ee70:	f8c4 24c0 	str.w	r2, [r4, #1216]	; 0x4c0
  20ee74:	f8c4 54c4 	str.w	r5, [r4, #1220]	; 0x4c4
  20ee78:	f8c4 74c8 	str.w	r7, [r4, #1224]	; 0x4c8
  20ee7c:	f8c4 34cc 	str.w	r3, [r4, #1228]	; 0x4cc
    topic_ = topic_name;
  20ee80:	4b1d      	ldr	r3, [pc, #116]	; (20eef8 <_GLOBAL__sub_I_start_processing_flag_+0x1dc>)
  20ee82:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
    att_controller_()
  20ee86:	f204 40d4 	addw	r0, r4, #1236	; 0x4d4
  20ee8a:	f7f9 f9e5 	bl	208258 <_ZN18AttitudeControllerC1Ev>
FlightControl controller_;
  20ee8e:	4632      	mov	r2, r6
  20ee90:	491a      	ldr	r1, [pc, #104]	; (20eefc <_GLOBAL__sub_I_start_processing_flag_+0x1e0>)
  20ee92:	4638      	mov	r0, r7
  20ee94:	f005 f8ee 	bl	214074 <__aeabi_atexit>
  20ee98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  20ee9a:	bf00      	nop
  20ee9c:	20000470 	.word	0x20000470
  20eea0:	00218110 	.word	0x00218110
  20eea4:	20001140 	.word	0x20001140
  20eea8:	200010a1 	.word	0x200010a1
  20eeac:	00218128 	.word	0x00218128
  20eeb0:	00216ce4 	.word	0x00216ce4
  20eeb4:	20000000 	.word	0x20000000
  20eeb8:	0020bf3d 	.word	0x0020bf3d
  20eebc:	0020c60f 	.word	0x0020c60f
  20eec0:	00209dfd 	.word	0x00209dfd
  20eec4:	0020ca27 	.word	0x0020ca27
  20eec8:	002185d8 	.word	0x002185d8
  20eecc:	00217738 	.word	0x00217738
  20eed0:	0020c5b5 	.word	0x0020c5b5
  20eed4:	002185f0 	.word	0x002185f0
  20eed8:	0021738c 	.word	0x0021738c
  20eedc:	0021823c 	.word	0x0021823c
  20eee0:	0021820c 	.word	0x0021820c
  20eee4:	0020cdc5 	.word	0x0020cdc5
  20eee8:	00218604 	.word	0x00218604
  20eeec:	00218254 	.word	0x00218254
  20eef0:	00218224 	.word	0x00218224
  20eef4:	0020cec7 	.word	0x0020cec7
  20eef8:	00218610 	.word	0x00218610
  20eefc:	0020ca43 	.word	0x0020ca43

0020ef00 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
  20ef00:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
  20ef02:	480e      	ldr	r0, [pc, #56]	; (20ef3c <MX_SPI1_Init+0x3c>)
  20ef04:	4b0e      	ldr	r3, [pc, #56]	; (20ef40 <MX_SPI1_Init+0x40>)
  20ef06:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
  20ef08:	f44f 7382 	mov.w	r3, #260	; 0x104
  20ef0c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  20ef0e:	2300      	movs	r3, #0
  20ef10:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  20ef12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  20ef16:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  20ef18:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  20ef1a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
  20ef1c:	f44f 7200 	mov.w	r2, #512	; 0x200
  20ef20:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
  20ef22:	2230      	movs	r2, #48	; 0x30
  20ef24:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  20ef26:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  20ef28:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  20ef2a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
  20ef2c:	2207      	movs	r2, #7
  20ef2e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  20ef30:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  20ef32:	2308      	movs	r3, #8
  20ef34:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_SPI_Init(&hspi1);
  20ef36:	f003 fbb5 	bl	2126a4 <HAL_SPI_Init>
  20ef3a:	bd08      	pop	{r3, pc}
  20ef3c:	2000461c 	.word	0x2000461c
  20ef40:	40013000 	.word	0x40013000

0020ef44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
  20ef44:	6802      	ldr	r2, [r0, #0]
  20ef46:	4b11      	ldr	r3, [pc, #68]	; (20ef8c <HAL_SPI_MspInit+0x48>)
  20ef48:	429a      	cmp	r2, r3
  20ef4a:	d000      	beq.n	20ef4e <HAL_SPI_MspInit+0xa>
  20ef4c:	4770      	bx	lr
{
  20ef4e:	b500      	push	{lr}
  20ef50:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
  20ef52:	2100      	movs	r1, #0
  20ef54:	9100      	str	r1, [sp, #0]
  20ef56:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
  20ef5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  20ef5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  20ef60:	645a      	str	r2, [r3, #68]	; 0x44
  20ef62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  20ef64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  20ef68:	9300      	str	r3, [sp, #0]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  20ef6a:	2338      	movs	r3, #56	; 0x38
  20ef6c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  20ef6e:	2302      	movs	r3, #2
  20ef70:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
  20ef72:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  20ef74:	2303      	movs	r3, #3
  20ef76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  20ef78:	2305      	movs	r3, #5
  20ef7a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  20ef7c:	a901      	add	r1, sp, #4
  20ef7e:	4804      	ldr	r0, [pc, #16]	; (20ef90 <HAL_SPI_MspInit+0x4c>)
  20ef80:	f001 fe92 	bl	210ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
  20ef84:	b007      	add	sp, #28
  20ef86:	f85d fb04 	ldr.w	pc, [sp], #4
  20ef8a:	bf00      	nop
  20ef8c:	40013000 	.word	0x40013000
  20ef90:	40020400 	.word	0x40020400

0020ef94 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
  20ef94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
  20ef96:	2005      	movs	r0, #5
  20ef98:	f001 fb00 	bl	21059c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
  20ef9c:	2200      	movs	r2, #0
  20ef9e:	4611      	mov	r1, r2
  20efa0:	f06f 000b 	mvn.w	r0, #11
  20efa4:	f001 fb0c 	bl	2105c0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
  20efa8:	2200      	movs	r2, #0
  20efaa:	4611      	mov	r1, r2
  20efac:	f06f 000a 	mvn.w	r0, #10
  20efb0:	f001 fb06 	bl	2105c0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
  20efb4:	2200      	movs	r2, #0
  20efb6:	4611      	mov	r1, r2
  20efb8:	f06f 0009 	mvn.w	r0, #9
  20efbc:	f001 fb00 	bl	2105c0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  20efc0:	2200      	movs	r2, #0
  20efc2:	4611      	mov	r1, r2
  20efc4:	f06f 0003 	mvn.w	r0, #3
  20efc8:	f001 fafa 	bl	2105c0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
  20efcc:	2200      	movs	r2, #0
  20efce:	4611      	mov	r1, r2
  20efd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  20efd4:	f001 faf4 	bl	2105c0 <HAL_NVIC_SetPriority>
  20efd8:	bd08      	pop	{r3, pc}

0020efda <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
  20efda:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  20efdc:	f000 fc5a 	bl	20f894 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  20efe0:	f001 fb4a 	bl	210678 <HAL_SYSTICK_IRQHandler>
  20efe4:	bd08      	pop	{r3, pc}
	...

0020efe8 <DMA1_Stream1_IRQHandler>:

/**
* @brief This function handles DMA1 stream1 global interrupt.
*/
void DMA1_Stream1_IRQHandler(void)
{
  20efe8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
  20efea:	4802      	ldr	r0, [pc, #8]	; (20eff4 <DMA1_Stream1_IRQHandler+0xc>)
  20efec:	f001 fbd8 	bl	2107a0 <HAL_DMA_IRQHandler>
  20eff0:	bd08      	pop	{r3, pc}
  20eff2:	bf00      	nop
  20eff4:	20004804 	.word	0x20004804

0020eff8 <CAN1_RX1_IRQHandler>:

/**
* @brief This function handles CAN1 RX1 interrupt.
*/
void CAN1_RX1_IRQHandler(void)
{
  20eff8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
  20effa:	4802      	ldr	r0, [pc, #8]	; (20f004 <CAN1_RX1_IRQHandler+0xc>)
  20effc:	f001 f9ec 	bl	2103d8 <HAL_CAN_IRQHandler>
  20f000:	bd08      	pop	{r3, pc}
  20f002:	bf00      	nop
  20f004:	20004550 	.word	0x20004550

0020f008 <DMA2_Stream2_IRQHandler>:

/**
* @brief This function handles DMA2 stream2 global interrupt.
*/
void DMA2_Stream2_IRQHandler(void)
{
  20f008:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  20f00a:	4802      	ldr	r0, [pc, #8]	; (20f014 <DMA2_Stream2_IRQHandler+0xc>)
  20f00c:	f001 fbc8 	bl	2107a0 <HAL_DMA_IRQHandler>
  20f010:	bd08      	pop	{r3, pc}
  20f012:	bf00      	nop
  20f014:	200047ac 	.word	0x200047ac

0020f018 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
  20f018:	b530      	push	{r4, r5, lr}
  20f01a:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  20f01c:	4c0f      	ldr	r4, [pc, #60]	; (20f05c <MX_TIM2_Init+0x44>)
  20f01e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  20f022:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 53;
  20f024:	2335      	movs	r3, #53	; 0x35
  20f026:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  20f028:	2500      	movs	r5, #0
  20f02a:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 40000;
  20f02c:	f649 4340 	movw	r3, #40000	; 0x9c40
  20f030:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  20f032:	6125      	str	r5, [r4, #16]
  HAL_TIM_Base_Init(&htim2);
  20f034:	4620      	mov	r0, r4
  20f036:	f003 ff9f 	bl	212f78 <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  20f03a:	a908      	add	r1, sp, #32
  20f03c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  20f040:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
  20f044:	4620      	mov	r0, r4
  20f046:	f004 f9e1 	bl	21340c <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  20f04a:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  20f04c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
  20f04e:	a901      	add	r1, sp, #4
  20f050:	4620      	mov	r0, r4
  20f052:	f004 fb93 	bl	21377c <HAL_TIMEx_MasterConfigSynchronization>

}
  20f056:	b009      	add	sp, #36	; 0x24
  20f058:	bd30      	pop	{r4, r5, pc}
  20f05a:	bf00      	nop
  20f05c:	20004680 	.word	0x20004680

0020f060 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
  20f060:	b530      	push	{r4, r5, lr}
  20f062:	b08d      	sub	sp, #52	; 0x34
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  20f064:	4d0f      	ldr	r5, [pc, #60]	; (20f0a4 <MX_TIM3_Init+0x44>)
  20f066:	4b10      	ldr	r3, [pc, #64]	; (20f0a8 <MX_TIM3_Init+0x48>)
  20f068:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 0;
  20f06a:	2400      	movs	r4, #0
  20f06c:	606c      	str	r4, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  20f06e:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 0;
  20f070:	60ec      	str	r4, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  20f072:	612c      	str	r4, [r5, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  20f074:	2303      	movs	r3, #3
  20f076:	9303      	str	r3, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  20f078:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  20f07a:	2301      	movs	r3, #1
  20f07c:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  20f07e:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
  20f080:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  20f082:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  20f084:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  20f086:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
  20f088:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_TIM_Encoder_Init(&htim3, &sConfig);
  20f08a:	a903      	add	r1, sp, #12
  20f08c:	4628      	mov	r0, r5
  20f08e:	f003 ffbd 	bl	21300c <HAL_TIM_Encoder_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  20f092:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  20f094:	9402      	str	r4, [sp, #8]
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
  20f096:	4669      	mov	r1, sp
  20f098:	4628      	mov	r0, r5
  20f09a:	f004 fb6f 	bl	21377c <HAL_TIMEx_MasterConfigSynchronization>

}
  20f09e:	b00d      	add	sp, #52	; 0x34
  20f0a0:	bd30      	pop	{r4, r5, pc}
  20f0a2:	bf00      	nop
  20f0a4:	200046bc 	.word	0x200046bc
  20f0a8:	40000400 	.word	0x40000400

0020f0ac <MX_TIM5_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM5 init function */
void MX_TIM5_Init(void)
{
  20f0ac:	b570      	push	{r4, r5, r6, lr}
  20f0ae:	b090      	sub	sp, #64	; 0x40
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_IC_InitTypeDef sConfigIC;

  htim5.Instance = TIM5;
  20f0b0:	4d15      	ldr	r5, [pc, #84]	; (20f108 <MX_TIM5_Init+0x5c>)
  20f0b2:	4b16      	ldr	r3, [pc, #88]	; (20f10c <MX_TIM5_Init+0x60>)
  20f0b4:	602b      	str	r3, [r5, #0]
  htim5.Init.Prescaler = 0;
  20f0b6:	2400      	movs	r4, #0
  20f0b8:	606c      	str	r4, [r5, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  20f0ba:	60ac      	str	r4, [r5, #8]
  htim5.Init.Period = 0;
  20f0bc:	60ec      	str	r4, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  20f0be:	612c      	str	r4, [r5, #16]
  HAL_TIM_IC_Init(&htim5);
  20f0c0:	4628      	mov	r0, r5
  20f0c2:	f003 ff89 	bl	212fd8 <HAL_TIM_IC_Init>

  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  20f0c6:	2303      	movs	r3, #3
  20f0c8:	9307      	str	r3, [sp, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  20f0ca:	9408      	str	r4, [sp, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  20f0cc:	2601      	movs	r6, #1
  20f0ce:	9609      	str	r6, [sp, #36]	; 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  20f0d0:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC1Filter = 0;
  20f0d2:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  20f0d4:	940c      	str	r4, [sp, #48]	; 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  20f0d6:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  20f0d8:	940e      	str	r4, [sp, #56]	; 0x38
  sConfig.IC2Filter = 0;
  20f0da:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_TIM_Encoder_Init(&htim5, &sConfig);
  20f0dc:	a907      	add	r1, sp, #28
  20f0de:	4628      	mov	r0, r5
  20f0e0:	f003 ff94 	bl	21300c <HAL_TIM_Encoder_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  20f0e4:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  20f0e6:	9406      	str	r4, [sp, #24]
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
  20f0e8:	a904      	add	r1, sp, #16
  20f0ea:	4628      	mov	r0, r5
  20f0ec:	f004 fb46 	bl	21377c <HAL_TIMEx_MasterConfigSynchronization>

  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
  20f0f0:	9400      	str	r4, [sp, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
  20f0f2:	9601      	str	r6, [sp, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  20f0f4:	9402      	str	r4, [sp, #8]
  sConfigIC.ICFilter = 0;
  20f0f6:	9403      	str	r4, [sp, #12]
  HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_3);
  20f0f8:	2208      	movs	r2, #8
  20f0fa:	4669      	mov	r1, sp
  20f0fc:	4628      	mov	r0, r5
  20f0fe:	f004 f8d9 	bl	2132b4 <HAL_TIM_IC_ConfigChannel>

}
  20f102:	b010      	add	sp, #64	; 0x40
  20f104:	bd70      	pop	{r4, r5, r6, pc}
  20f106:	bf00      	nop
  20f108:	20004734 	.word	0x20004734
  20f10c:	40000c00 	.word	0x40000c00

0020f110 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  20f110:	b084      	sub	sp, #16

  if(htim_base->Instance==TIM2)
  20f112:	6803      	ldr	r3, [r0, #0]
  20f114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  20f118:	d007      	beq.n	20f12a <HAL_TIM_Base_MspInit+0x1a>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
  20f11a:	4a16      	ldr	r2, [pc, #88]	; (20f174 <HAL_TIM_Base_MspInit+0x64>)
  20f11c:	4293      	cmp	r3, r2
  20f11e:	d010      	beq.n	20f142 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
  20f120:	4a15      	ldr	r2, [pc, #84]	; (20f178 <HAL_TIM_Base_MspInit+0x68>)
  20f122:	4293      	cmp	r3, r2
  20f124:	d019      	beq.n	20f15a <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
  20f126:	b004      	add	sp, #16
  20f128:	4770      	bx	lr
    __HAL_RCC_TIM2_CLK_ENABLE();
  20f12a:	2300      	movs	r3, #0
  20f12c:	9301      	str	r3, [sp, #4]
  20f12e:	4b13      	ldr	r3, [pc, #76]	; (20f17c <HAL_TIM_Base_MspInit+0x6c>)
  20f130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  20f132:	f042 0201 	orr.w	r2, r2, #1
  20f136:	641a      	str	r2, [r3, #64]	; 0x40
  20f138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  20f13a:	f003 0301 	and.w	r3, r3, #1
  20f13e:	9301      	str	r3, [sp, #4]
  20f140:	e7f1      	b.n	20f126 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM4_CLK_ENABLE();
  20f142:	2300      	movs	r3, #0
  20f144:	9302      	str	r3, [sp, #8]
  20f146:	4b0d      	ldr	r3, [pc, #52]	; (20f17c <HAL_TIM_Base_MspInit+0x6c>)
  20f148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  20f14a:	f042 0204 	orr.w	r2, r2, #4
  20f14e:	641a      	str	r2, [r3, #64]	; 0x40
  20f150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  20f152:	f003 0304 	and.w	r3, r3, #4
  20f156:	9302      	str	r3, [sp, #8]
  20f158:	e7e5      	b.n	20f126 <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM8_CLK_ENABLE();
  20f15a:	2300      	movs	r3, #0
  20f15c:	9303      	str	r3, [sp, #12]
  20f15e:	4b07      	ldr	r3, [pc, #28]	; (20f17c <HAL_TIM_Base_MspInit+0x6c>)
  20f160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  20f162:	f042 0202 	orr.w	r2, r2, #2
  20f166:	645a      	str	r2, [r3, #68]	; 0x44
  20f168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  20f16a:	f003 0302 	and.w	r3, r3, #2
  20f16e:	9303      	str	r3, [sp, #12]
}
  20f170:	e7d9      	b.n	20f126 <HAL_TIM_Base_MspInit+0x16>
  20f172:	bf00      	nop
  20f174:	40000800 	.word	0x40000800
  20f178:	40010400 	.word	0x40010400
  20f17c:	40023800 	.word	0x40023800

0020f180 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM3)
  20f180:	6802      	ldr	r2, [r0, #0]
  20f182:	4b0f      	ldr	r3, [pc, #60]	; (20f1c0 <HAL_TIM_Encoder_MspInit+0x40>)
  20f184:	429a      	cmp	r2, r3
  20f186:	d000      	beq.n	20f18a <HAL_TIM_Encoder_MspInit+0xa>
  20f188:	4770      	bx	lr
{
  20f18a:	b500      	push	{lr}
  20f18c:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
  20f18e:	2300      	movs	r3, #0
  20f190:	9300      	str	r3, [sp, #0]
  20f192:	4a0c      	ldr	r2, [pc, #48]	; (20f1c4 <HAL_TIM_Encoder_MspInit+0x44>)
  20f194:	6c11      	ldr	r1, [r2, #64]	; 0x40
  20f196:	f041 0102 	orr.w	r1, r1, #2
  20f19a:	6411      	str	r1, [r2, #64]	; 0x40
  20f19c:	6c12      	ldr	r2, [r2, #64]	; 0x40
  20f19e:	f002 0202 	and.w	r2, r2, #2
  20f1a2:	9200      	str	r2, [sp, #0]
  
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  20f1a4:	22c0      	movs	r2, #192	; 0xc0
  20f1a6:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  20f1a8:	2202      	movs	r2, #2
  20f1aa:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
  20f1ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  20f1ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
  20f1b0:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  20f1b2:	a901      	add	r1, sp, #4
  20f1b4:	4804      	ldr	r0, [pc, #16]	; (20f1c8 <HAL_TIM_Encoder_MspInit+0x48>)
  20f1b6:	f001 fd77 	bl	210ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
  20f1ba:	b007      	add	sp, #28
  20f1bc:	f85d fb04 	ldr.w	pc, [sp], #4
  20f1c0:	40000400 	.word	0x40000400
  20f1c4:	40023800 	.word	0x40023800
  20f1c8:	40020000 	.word	0x40020000

0020f1cc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_ic->Instance==TIM5)
  20f1cc:	6802      	ldr	r2, [r0, #0]
  20f1ce:	4b0f      	ldr	r3, [pc, #60]	; (20f20c <HAL_TIM_IC_MspInit+0x40>)
  20f1d0:	429a      	cmp	r2, r3
  20f1d2:	d000      	beq.n	20f1d6 <HAL_TIM_IC_MspInit+0xa>
  20f1d4:	4770      	bx	lr
{
  20f1d6:	b500      	push	{lr}
  20f1d8:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
  20f1da:	2300      	movs	r3, #0
  20f1dc:	9300      	str	r3, [sp, #0]
  20f1de:	4a0c      	ldr	r2, [pc, #48]	; (20f210 <HAL_TIM_IC_MspInit+0x44>)
  20f1e0:	6c11      	ldr	r1, [r2, #64]	; 0x40
  20f1e2:	f041 0108 	orr.w	r1, r1, #8
  20f1e6:	6411      	str	r1, [r2, #64]	; 0x40
  20f1e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
  20f1ea:	f002 0208 	and.w	r2, r2, #8
  20f1ee:	9200      	str	r2, [sp, #0]
    /**TIM5 GPIO Configuration    
    PA0/WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  20f1f0:	2207      	movs	r2, #7
  20f1f2:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  20f1f4:	2202      	movs	r2, #2
  20f1f6:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
  20f1f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  20f1fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
  20f1fc:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  20f1fe:	a901      	add	r1, sp, #4
  20f200:	4804      	ldr	r0, [pc, #16]	; (20f214 <HAL_TIM_IC_MspInit+0x48>)
  20f202:	f001 fd51 	bl	210ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
  20f206:	b007      	add	sp, #28
  20f208:	f85d fb04 	ldr.w	pc, [sp], #4
  20f20c:	40000c00 	.word	0x40000c00
  20f210:	40023800 	.word	0x40023800
  20f214:	40020000 	.word	0x40020000

0020f218 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  20f218:	b500      	push	{lr}
  20f21a:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
  20f21c:	6803      	ldr	r3, [r0, #0]
  20f21e:	4a13      	ldr	r2, [pc, #76]	; (20f26c <HAL_TIM_MspPostInit+0x54>)
  20f220:	4293      	cmp	r3, r2
  20f222:	d005      	beq.n	20f230 <HAL_TIM_MspPostInit+0x18>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
  20f224:	4a12      	ldr	r2, [pc, #72]	; (20f270 <HAL_TIM_MspPostInit+0x58>)
  20f226:	4293      	cmp	r3, r2
  20f228:	d010      	beq.n	20f24c <HAL_TIM_MspPostInit+0x34>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
  20f22a:	b007      	add	sp, #28
  20f22c:	f85d fb04 	ldr.w	pc, [sp], #4
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  20f230:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  20f234:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  20f236:	2302      	movs	r3, #2
  20f238:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
  20f23a:	2200      	movs	r2, #0
  20f23c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  20f23e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
  20f240:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
  20f242:	a901      	add	r1, sp, #4
  20f244:	480b      	ldr	r0, [pc, #44]	; (20f274 <HAL_TIM_MspPostInit+0x5c>)
  20f246:	f001 fd2f 	bl	210ca8 <HAL_GPIO_Init>
  20f24a:	e7ee      	b.n	20f22a <HAL_TIM_MspPostInit+0x12>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  20f24c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
  20f250:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  20f252:	2302      	movs	r3, #2
  20f254:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
  20f256:	2300      	movs	r3, #0
  20f258:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  20f25a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
  20f25c:	2303      	movs	r3, #3
  20f25e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  20f260:	a901      	add	r1, sp, #4
  20f262:	4805      	ldr	r0, [pc, #20]	; (20f278 <HAL_TIM_MspPostInit+0x60>)
  20f264:	f001 fd20 	bl	210ca8 <HAL_GPIO_Init>
}
  20f268:	e7df      	b.n	20f22a <HAL_TIM_MspPostInit+0x12>
  20f26a:	bf00      	nop
  20f26c:	40000800 	.word	0x40000800
  20f270:	40010400 	.word	0x40010400
  20f274:	40020c00 	.word	0x40020c00
  20f278:	40020800 	.word	0x40020800

0020f27c <MX_TIM4_Init>:
{
  20f27c:	b530      	push	{r4, r5, lr}
  20f27e:	b08f      	sub	sp, #60	; 0x3c
  htim4.Instance = TIM4;
  20f280:	4c21      	ldr	r4, [pc, #132]	; (20f308 <MX_TIM4_Init+0x8c>)
  20f282:	4b22      	ldr	r3, [pc, #136]	; (20f30c <MX_TIM4_Init+0x90>)
  20f284:	6023      	str	r3, [r4, #0]
  htim4.Init.Prescaler = 1;
  20f286:	2301      	movs	r3, #1
  20f288:	6063      	str	r3, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
  20f28a:	2320      	movs	r3, #32
  20f28c:	60a3      	str	r3, [r4, #8]
  htim4.Init.Period = 54000;
  20f28e:	f24d 23f0 	movw	r3, #54000	; 0xd2f0
  20f292:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  20f294:	2500      	movs	r5, #0
  20f296:	6125      	str	r5, [r4, #16]
  HAL_TIM_Base_Init(&htim4);
  20f298:	4620      	mov	r0, r4
  20f29a:	f003 fe6d 	bl	212f78 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  20f29e:	a90e      	add	r1, sp, #56	; 0x38
  20f2a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  20f2a4:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
  20f2a8:	4620      	mov	r0, r4
  20f2aa:	f004 f8af 	bl	21340c <HAL_TIM_ConfigClockSource>
  HAL_TIM_PWM_Init(&htim4);
  20f2ae:	4620      	mov	r0, r4
  20f2b0:	f003 fe79 	bl	212fa6 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  20f2b4:	9507      	str	r5, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  20f2b6:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
  20f2b8:	a907      	add	r1, sp, #28
  20f2ba:	4620      	mov	r0, r4
  20f2bc:	f004 fa5e 	bl	21377c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  20f2c0:	2360      	movs	r3, #96	; 0x60
  20f2c2:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 10000;
  20f2c4:	f242 7310 	movw	r3, #10000	; 0x2710
  20f2c8:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  20f2ca:	9502      	str	r5, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  20f2cc:	9504      	str	r5, [sp, #16]
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
  20f2ce:	462a      	mov	r2, r5
  20f2d0:	4669      	mov	r1, sp
  20f2d2:	4620      	mov	r0, r4
  20f2d4:	f004 f9b8 	bl	213648 <HAL_TIM_PWM_ConfigChannel>
  sConfigOC.Pulse = 20000;
  20f2d8:	f644 6320 	movw	r3, #20000	; 0x4e20
  20f2dc:	9301      	str	r3, [sp, #4]
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
  20f2de:	2204      	movs	r2, #4
  20f2e0:	4669      	mov	r1, sp
  20f2e2:	4620      	mov	r0, r4
  20f2e4:	f004 f9b0 	bl	213648 <HAL_TIM_PWM_ConfigChannel>
  sConfigOC.Pulse = 0;
  20f2e8:	9501      	str	r5, [sp, #4]
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
  20f2ea:	2208      	movs	r2, #8
  20f2ec:	4669      	mov	r1, sp
  20f2ee:	4620      	mov	r0, r4
  20f2f0:	f004 f9aa 	bl	213648 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4);
  20f2f4:	220c      	movs	r2, #12
  20f2f6:	4669      	mov	r1, sp
  20f2f8:	4620      	mov	r0, r4
  20f2fa:	f004 f9a5 	bl	213648 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
  20f2fe:	4620      	mov	r0, r4
  20f300:	f7ff ff8a 	bl	20f218 <HAL_TIM_MspPostInit>
}
  20f304:	b00f      	add	sp, #60	; 0x3c
  20f306:	bd30      	pop	{r4, r5, pc}
  20f308:	200046f8 	.word	0x200046f8
  20f30c:	40000800 	.word	0x40000800

0020f310 <MX_TIM8_Init>:
{
  20f310:	b530      	push	{r4, r5, lr}
  20f312:	b09b      	sub	sp, #108	; 0x6c
  htim8.Instance = TIM8;
  20f314:	4d2c      	ldr	r5, [pc, #176]	; (20f3c8 <MX_TIM8_Init+0xb8>)
  20f316:	4b2d      	ldr	r3, [pc, #180]	; (20f3cc <MX_TIM8_Init+0xbc>)
  20f318:	602b      	str	r3, [r5, #0]
  htim8.Init.Prescaler = 3;
  20f31a:	2303      	movs	r3, #3
  20f31c:	606b      	str	r3, [r5, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
  20f31e:	2320      	movs	r3, #32
  20f320:	60ab      	str	r3, [r5, #8]
  htim8.Init.Period = 54000;
  20f322:	f24d 23f0 	movw	r3, #54000	; 0xd2f0
  20f326:	60eb      	str	r3, [r5, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  20f328:	2400      	movs	r4, #0
  20f32a:	612c      	str	r4, [r5, #16]
  htim8.Init.RepetitionCounter = 0;
  20f32c:	616c      	str	r4, [r5, #20]
  HAL_TIM_Base_Init(&htim8);
  20f32e:	4628      	mov	r0, r5
  20f330:	f003 fe22 	bl	212f78 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  20f334:	a91a      	add	r1, sp, #104	; 0x68
  20f336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  20f33a:	f841 3d10 	str.w	r3, [r1, #-16]!
  HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig);
  20f33e:	4628      	mov	r0, r5
  20f340:	f004 f864 	bl	21340c <HAL_TIM_ConfigClockSource>
  HAL_TIM_PWM_Init(&htim8);
  20f344:	4628      	mov	r0, r5
  20f346:	f003 fe2e 	bl	212fa6 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  20f34a:	9413      	str	r4, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  20f34c:	9414      	str	r4, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  20f34e:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig);
  20f350:	a913      	add	r1, sp, #76	; 0x4c
  20f352:	4628      	mov	r0, r5
  20f354:	f004 fa12 	bl	21377c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  20f358:	2360      	movs	r3, #96	; 0x60
  20f35a:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 10000;
  20f35c:	f242 7310 	movw	r3, #10000	; 0x2710
  20f360:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  20f362:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  20f364:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  20f366:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  20f368:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  20f36a:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1);
  20f36c:	4622      	mov	r2, r4
  20f36e:	a90c      	add	r1, sp, #48	; 0x30
  20f370:	4628      	mov	r0, r5
  20f372:	f004 f969 	bl	213648 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2);
  20f376:	2204      	movs	r2, #4
  20f378:	a90c      	add	r1, sp, #48	; 0x30
  20f37a:	4628      	mov	r0, r5
  20f37c:	f004 f964 	bl	213648 <HAL_TIM_PWM_ConfigChannel>
  sConfigOC.Pulse = 0;
  20f380:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3);
  20f382:	2208      	movs	r2, #8
  20f384:	a90c      	add	r1, sp, #48	; 0x30
  20f386:	4628      	mov	r0, r5
  20f388:	f004 f95e 	bl	213648 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4);
  20f38c:	220c      	movs	r2, #12
  20f38e:	a90c      	add	r1, sp, #48	; 0x30
  20f390:	4628      	mov	r0, r5
  20f392:	f004 f959 	bl	213648 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  20f396:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  20f398:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  20f39a:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
  20f39c:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  20f39e:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  20f3a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  20f3a4:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
  20f3a6:	9407      	str	r4, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  20f3a8:	9408      	str	r4, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  20f3aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  20f3ae:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
  20f3b0:	940a      	str	r4, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  20f3b2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig);
  20f3b4:	a901      	add	r1, sp, #4
  20f3b6:	4628      	mov	r0, r5
  20f3b8:	f004 fa0c 	bl	2137d4 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim8);
  20f3bc:	4628      	mov	r0, r5
  20f3be:	f7ff ff2b 	bl	20f218 <HAL_TIM_MspPostInit>
}
  20f3c2:	b01b      	add	sp, #108	; 0x6c
  20f3c4:	bd30      	pop	{r4, r5, pc}
  20f3c6:	bf00      	nop
  20f3c8:	20004770 	.word	0x20004770
  20f3cc:	40010400 	.word	0x40010400

0020f3d0 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart3_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
  20f3d0:	b508      	push	{r3, lr}

  huart4.Instance = UART4;
  20f3d2:	480a      	ldr	r0, [pc, #40]	; (20f3fc <MX_UART4_Init+0x2c>)
  20f3d4:	4b0a      	ldr	r3, [pc, #40]	; (20f400 <MX_UART4_Init+0x30>)
  20f3d6:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
  20f3d8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  20f3dc:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_7B;
  20f3de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  20f3e2:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
  20f3e4:	2300      	movs	r3, #0
  20f3e6:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
  20f3e8:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
  20f3ea:	220c      	movs	r2, #12
  20f3ec:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  20f3ee:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  20f3f0:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  20f3f2:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  20f3f4:	6243      	str	r3, [r0, #36]	; 0x24
  HAL_UART_Init(&huart4);
  20f3f6:	f004 fd80 	bl	213efa <HAL_UART_Init>
  20f3fa:	bd08      	pop	{r3, pc}
  20f3fc:	2000493c 	.word	0x2000493c
  20f400:	40004c00 	.word	0x40004c00

0020f404 <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
  20f404:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  20f406:	4809      	ldr	r0, [pc, #36]	; (20f42c <MX_USART1_UART_Init+0x28>)
  20f408:	4b09      	ldr	r3, [pc, #36]	; (20f430 <MX_USART1_UART_Init+0x2c>)
  20f40a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 921600;
  20f40c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
  20f410:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  20f412:	2300      	movs	r3, #0
  20f414:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
  20f416:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
  20f418:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
  20f41a:	220c      	movs	r2, #12
  20f41c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  20f41e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  20f420:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  20f422:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  20f424:	6243      	str	r3, [r0, #36]	; 0x24
  HAL_UART_Init(&huart1);
  20f426:	f004 fd68 	bl	213efa <HAL_UART_Init>
  20f42a:	bd08      	pop	{r3, pc}
  20f42c:	2000485c 	.word	0x2000485c
  20f430:	40011000 	.word	0x40011000

0020f434 <MX_USART3_UART_Init>:

}
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
  20f434:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
  20f436:	4809      	ldr	r0, [pc, #36]	; (20f45c <MX_USART3_UART_Init+0x28>)
  20f438:	4b09      	ldr	r3, [pc, #36]	; (20f460 <MX_USART3_UART_Init+0x2c>)
  20f43a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 57600;
  20f43c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
  20f440:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  20f442:	2300      	movs	r3, #0
  20f444:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
  20f446:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
  20f448:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
  20f44a:	220c      	movs	r2, #12
  20f44c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  20f44e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  20f450:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  20f452:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  20f454:	6243      	str	r3, [r0, #36]	; 0x24
  HAL_UART_Init(&huart3);
  20f456:	f004 fd50 	bl	213efa <HAL_UART_Init>
  20f45a:	bd08      	pop	{r3, pc}
  20f45c:	200048cc 	.word	0x200048cc
  20f460:	40004800 	.word	0x40004800

0020f464 <HAL_UART_MspInit>:

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  20f464:	b5f0      	push	{r4, r5, r6, r7, lr}
  20f466:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART4)
  20f468:	6803      	ldr	r3, [r0, #0]
  20f46a:	4a4d      	ldr	r2, [pc, #308]	; (20f5a0 <HAL_UART_MspInit+0x13c>)
  20f46c:	4293      	cmp	r3, r2
  20f46e:	d008      	beq.n	20f482 <HAL_UART_MspInit+0x1e>
  20f470:	4604      	mov	r4, r0

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==USART1)
  20f472:	4a4c      	ldr	r2, [pc, #304]	; (20f5a4 <HAL_UART_MspInit+0x140>)
  20f474:	4293      	cmp	r3, r2
  20f476:	d01f      	beq.n	20f4b8 <HAL_UART_MspInit+0x54>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
  20f478:	4a4b      	ldr	r2, [pc, #300]	; (20f5a8 <HAL_UART_MspInit+0x144>)
  20f47a:	4293      	cmp	r3, r2
  20f47c:	d056      	beq.n	20f52c <HAL_UART_MspInit+0xc8>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
  20f47e:	b009      	add	sp, #36	; 0x24
  20f480:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
  20f482:	2300      	movs	r3, #0
  20f484:	9300      	str	r3, [sp, #0]
  20f486:	4b49      	ldr	r3, [pc, #292]	; (20f5ac <HAL_UART_MspInit+0x148>)
  20f488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  20f48a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  20f48e:	641a      	str	r2, [r3, #64]	; 0x40
  20f490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  20f492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  20f496:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
  20f498:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  20f49c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  20f49e:	2302      	movs	r3, #2
  20f4a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
  20f4a2:	2301      	movs	r3, #1
  20f4a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  20f4a6:	2303      	movs	r3, #3
  20f4a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
  20f4aa:	2308      	movs	r3, #8
  20f4ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  20f4ae:	a903      	add	r1, sp, #12
  20f4b0:	483f      	ldr	r0, [pc, #252]	; (20f5b0 <HAL_UART_MspInit+0x14c>)
  20f4b2:	f001 fbf9 	bl	210ca8 <HAL_GPIO_Init>
  20f4b6:	e7e2      	b.n	20f47e <HAL_UART_MspInit+0x1a>
    __HAL_RCC_USART1_CLK_ENABLE();
  20f4b8:	2600      	movs	r6, #0
  20f4ba:	9601      	str	r6, [sp, #4]
  20f4bc:	4b3b      	ldr	r3, [pc, #236]	; (20f5ac <HAL_UART_MspInit+0x148>)
  20f4be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  20f4c0:	f042 0210 	orr.w	r2, r2, #16
  20f4c4:	645a      	str	r2, [r3, #68]	; 0x44
  20f4c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  20f4c8:	f003 0310 	and.w	r3, r3, #16
  20f4cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
  20f4ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  20f4d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  20f4d4:	2302      	movs	r3, #2
  20f4d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
  20f4d8:	2301      	movs	r3, #1
  20f4da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  20f4dc:	2703      	movs	r7, #3
  20f4de:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
  20f4e0:	2307      	movs	r3, #7
  20f4e2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  20f4e4:	a903      	add	r1, sp, #12
  20f4e6:	4833      	ldr	r0, [pc, #204]	; (20f5b4 <HAL_UART_MspInit+0x150>)
  20f4e8:	f001 fbde 	bl	210ca8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
  20f4ec:	4d32      	ldr	r5, [pc, #200]	; (20f5b8 <HAL_UART_MspInit+0x154>)
  20f4ee:	4b33      	ldr	r3, [pc, #204]	; (20f5bc <HAL_UART_MspInit+0x158>)
  20f4f0:	602b      	str	r3, [r5, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
  20f4f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  20f4f6:	606b      	str	r3, [r5, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
  20f4f8:	60ae      	str	r6, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
  20f4fa:	60ee      	str	r6, [r5, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
  20f4fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  20f500:	612b      	str	r3, [r5, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  20f502:	616e      	str	r6, [r5, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
  20f504:	61ae      	str	r6, [r5, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
  20f506:	f44f 7380 	mov.w	r3, #256	; 0x100
  20f50a:	61eb      	str	r3, [r5, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
  20f50c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  20f510:	622b      	str	r3, [r5, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
  20f512:	2304      	movs	r3, #4
  20f514:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
  20f516:	62af      	str	r7, [r5, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_INC16;
  20f518:	f04f 73c0 	mov.w	r3, #25165824	; 0x1800000
  20f51c:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
  20f51e:	632e      	str	r6, [r5, #48]	; 0x30
    HAL_DMA_Init(&hdma_usart1_rx);
  20f520:	4628      	mov	r0, r5
  20f522:	f001 f8c7 	bl	2106b4 <HAL_DMA_Init>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
  20f526:	6665      	str	r5, [r4, #100]	; 0x64
  20f528:	63ac      	str	r4, [r5, #56]	; 0x38
  20f52a:	e7a8      	b.n	20f47e <HAL_UART_MspInit+0x1a>
    __HAL_RCC_USART3_CLK_ENABLE();
  20f52c:	2600      	movs	r6, #0
  20f52e:	9602      	str	r6, [sp, #8]
  20f530:	4b1e      	ldr	r3, [pc, #120]	; (20f5ac <HAL_UART_MspInit+0x148>)
  20f532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  20f534:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  20f538:	641a      	str	r2, [r3, #64]	; 0x40
  20f53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  20f53c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  20f540:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  20f542:	f44f 7340 	mov.w	r3, #768	; 0x300
  20f546:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  20f548:	2302      	movs	r3, #2
  20f54a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
  20f54c:	2301      	movs	r3, #1
  20f54e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  20f550:	2303      	movs	r3, #3
  20f552:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  20f554:	2307      	movs	r3, #7
  20f556:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
  20f558:	a903      	add	r1, sp, #12
  20f55a:	4819      	ldr	r0, [pc, #100]	; (20f5c0 <HAL_UART_MspInit+0x15c>)
  20f55c:	f001 fba4 	bl	210ca8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
  20f560:	4d18      	ldr	r5, [pc, #96]	; (20f5c4 <HAL_UART_MspInit+0x160>)
  20f562:	4b19      	ldr	r3, [pc, #100]	; (20f5c8 <HAL_UART_MspInit+0x164>)
  20f564:	602b      	str	r3, [r5, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
  20f566:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  20f56a:	606b      	str	r3, [r5, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
  20f56c:	60ae      	str	r6, [r5, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
  20f56e:	60ee      	str	r6, [r5, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
  20f570:	f44f 6380 	mov.w	r3, #1024	; 0x400
  20f574:	612b      	str	r3, [r5, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
  20f576:	616e      	str	r6, [r5, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
  20f578:	61ae      	str	r6, [r5, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
  20f57a:	f44f 7380 	mov.w	r3, #256	; 0x100
  20f57e:	61eb      	str	r3, [r5, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
  20f580:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  20f584:	622b      	str	r3, [r5, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
  20f586:	2304      	movs	r3, #4
  20f588:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
  20f58a:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_INC4;
  20f58c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  20f590:	62eb      	str	r3, [r5, #44]	; 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
  20f592:	632e      	str	r6, [r5, #48]	; 0x30
    HAL_DMA_Init(&hdma_usart3_rx);
  20f594:	4628      	mov	r0, r5
  20f596:	f001 f88d 	bl	2106b4 <HAL_DMA_Init>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
  20f59a:	6665      	str	r5, [r4, #100]	; 0x64
  20f59c:	63ac      	str	r4, [r5, #56]	; 0x38
}
  20f59e:	e76e      	b.n	20f47e <HAL_UART_MspInit+0x1a>
  20f5a0:	40004c00 	.word	0x40004c00
  20f5a4:	40011000 	.word	0x40011000
  20f5a8:	40004800 	.word	0x40004800
  20f5ac:	40023800 	.word	0x40023800
  20f5b0:	40020800 	.word	0x40020800
  20f5b4:	40020000 	.word	0x40020000
  20f5b8:	200047ac 	.word	0x200047ac
  20f5bc:	40026440 	.word	0x40026440
  20f5c0:	40020c00 	.word	0x40020c00
  20f5c4:	20004804 	.word	0x20004804
  20f5c8:	40026028 	.word	0x40026028

0020f5cc <_ZN10RingBufferIhLi400EED1Ev>:
  ~RingBuffer(){  }
  20f5cc:	4770      	bx	lr
	...

0020f5d0 <_ZN2rx4initEP18UART_HandleTypeDef>:
}

namespace rx
{
 void init(UART_HandleTypeDef *huart)
 {
  20f5d0:	b510      	push	{r4, lr}
  20f5d2:	4604      	mov	r4, r0
    HAL_UART_Receive_DMA(huart, rx_value_, RX_PACKET_SIZE); //1byte receive protocol
  20f5d4:	2210      	movs	r2, #16
  20f5d6:	4904      	ldr	r1, [pc, #16]	; (20f5e8 <_ZN2rx4initEP18UART_HandleTypeDef+0x18>)
  20f5d8:	f004 f926 	bl	213828 <HAL_UART_Receive_DMA>
    __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
  20f5dc:	6822      	ldr	r2, [r4, #0]
  20f5de:	6813      	ldr	r3, [r2, #0]
  20f5e0:	f023 0320 	bic.w	r3, r3, #32
  20f5e4:	6013      	str	r3, [r2, #0]
  20f5e6:	bd10      	pop	{r4, pc}
  20f5e8:	200011c0 	.word	0x200011c0

0020f5ec <_ZN2rx9availableEv>:
    if(byte_to_add_ - byte_in_progress_ >= 0)
  20f5ec:	4b09      	ldr	r3, [pc, #36]	; (20f614 <_ZN2rx9availableEv+0x28>)
  20f5ee:	f9b3 01a2 	ldrsh.w	r0, [r3, #418]	; 0x1a2
  20f5f2:	f9b3 31a0 	ldrsh.w	r3, [r3, #416]	; 0x1a0
  20f5f6:	1ac2      	subs	r2, r0, r3
  20f5f8:	2a00      	cmp	r2, #0
  20f5fa:	db04      	blt.n	20f606 <_ZN2rx9availableEv+0x1a>
      return (byte_to_add_ - byte_in_progress_);
  20f5fc:	b290      	uxth	r0, r2
    uint8_t r_data = 0;
    rx_buf_.pop(r_data);
    return  r_data;
  }

  bool available() { return rx_buf_.length(); }
  20f5fe:	3000      	adds	r0, #0
  20f600:	bf18      	it	ne
  20f602:	2001      	movne	r0, #1
  20f604:	4770      	bx	lr
      return (byte_to_add_ - (buffer_length_ - byte_in_progress_));
  20f606:	4418      	add	r0, r3
  20f608:	4b02      	ldr	r3, [pc, #8]	; (20f614 <_ZN2rx9availableEv+0x28>)
  20f60a:	f8b3 31a4 	ldrh.w	r3, [r3, #420]	; 0x1a4
  20f60e:	1ac0      	subs	r0, r0, r3
  20f610:	b280      	uxth	r0, r0
  20f612:	e7f4      	b.n	20f5fe <_ZN2rx9availableEv+0x12>
  20f614:	200011c0 	.word	0x200011c0

0020f618 <_ZN2rx4readEv>:
  {
  20f618:	b508      	push	{r3, lr}
    if(!rx::available()) return -1;
  20f61a:	f7ff ffe7 	bl	20f5ec <_ZN2rx9availableEv>
  20f61e:	b1c8      	cbz	r0, 20f654 <_ZN2rx4readEv+0x3c>
    if (byte_in_progress_ != byte_to_add_)
  20f620:	4a0e      	ldr	r2, [pc, #56]	; (20f65c <_ZN2rx4readEv+0x44>)
  20f622:	f9b2 31a0 	ldrsh.w	r3, [r2, #416]	; 0x1a0
  20f626:	f9b2 21a2 	ldrsh.w	r2, [r2, #418]	; 0x1a2
  20f62a:	429a      	cmp	r2, r3
  20f62c:	d010      	beq.n	20f650 <_ZN2rx4readEv+0x38>
        pop_value =  buf_[byte_in_progress_];
  20f62e:	4a0b      	ldr	r2, [pc, #44]	; (20f65c <_ZN2rx4readEv+0x44>)
  20f630:	18d1      	adds	r1, r2, r3
  20f632:	7c08      	ldrb	r0, [r1, #16]
        byte_in_progress_++;
  20f634:	3301      	adds	r3, #1
  20f636:	b21b      	sxth	r3, r3
  20f638:	f8a2 31a0 	strh.w	r3, [r2, #416]	; 0x1a0
        if (byte_in_progress_ == buffer_length_)
  20f63c:	f8b2 21a4 	ldrh.w	r2, [r2, #420]	; 0x1a4
  20f640:	4293      	cmp	r3, r2
  20f642:	d000      	beq.n	20f646 <_ZN2rx4readEv+0x2e>
  }
  20f644:	bd08      	pop	{r3, pc}
          byte_in_progress_ = 0;
  20f646:	2200      	movs	r2, #0
  20f648:	4b04      	ldr	r3, [pc, #16]	; (20f65c <_ZN2rx4readEv+0x44>)
  20f64a:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
  20f64e:	bd08      	pop	{r3, pc}
    uint8_t r_data = 0;
  20f650:	2000      	movs	r0, #0
    return  r_data;
  20f652:	bd08      	pop	{r3, pc}
    if(!rx::available()) return -1;
  20f654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  20f658:	e7f4      	b.n	20f644 <_ZN2rx4readEv+0x2c>
  20f65a:	bf00      	nop
  20f65c:	200011c0 	.word	0x200011c0

0020f660 <HAL_UART_RxCpltCallback>:
  uint8_t* getRxValueP() { return rx_value_; }
};


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  20f660:	b470      	push	{r4, r5, r6}
  20f662:	4c0c      	ldr	r4, [pc, #48]	; (20f694 <HAL_UART_RxCpltCallback+0x34>)
  20f664:	f9b4 31a2 	ldrsh.w	r3, [r4, #418]	; 0x1a2
    if (byte_to_add_ == buffer_length_)
  20f668:	f8b4 61a4 	ldrh.w	r6, [r4, #420]	; 0x1a4
  20f66c:	1e62      	subs	r2, r4, #1
  20f66e:	340f      	adds	r4, #15
    buf_[byte_to_add_] = new_value;
  20f670:	1c55      	adds	r5, r2, #1
  20f672:	18e9      	adds	r1, r5, r3
  20f674:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  20f678:	7408      	strb	r0, [r1, #16]
    byte_to_add_++;
  20f67a:	3301      	adds	r3, #1
  20f67c:	b21b      	sxth	r3, r3
        byte_to_add_ = 0;
  20f67e:	42b3      	cmp	r3, r6
  20f680:	bf08      	it	eq
  20f682:	2300      	moveq	r3, #0
  for(int i = 0; i < RX_PACKET_SIZE; i++)
  20f684:	42a2      	cmp	r2, r4
  20f686:	d1f4      	bne.n	20f672 <HAL_UART_RxCpltCallback+0x12>
  20f688:	4a02      	ldr	r2, [pc, #8]	; (20f694 <HAL_UART_RxCpltCallback+0x34>)
  20f68a:	f8a2 31a2 	strh.w	r3, [r2, #418]	; 0x1a2
    rx_buf_.push(rx_value_[i]);
}
  20f68e:	bc70      	pop	{r4, r5, r6}
  20f690:	4770      	bx	lr
  20f692:	bf00      	nop
  20f694:	200011c0 	.word	0x200011c0

0020f698 <_ZN2tx4initEP18UART_HandleTypeDef>:
}

namespace tx
{
  void init(UART_HandleTypeDef *huart)
  {
  20f698:	b410      	push	{r4}
    tx_huart_ = huart;
  20f69a:	4b0e      	ldr	r3, [pc, #56]	; (20f6d4 <_ZN2tx4initEP18UART_HandleTypeDef+0x3c>)
  20f69c:	f8c3 01a8 	str.w	r0, [r3, #424]	; 0x1a8
    idle_flag_ = true;
    subscript_in_progress_ = 0;
  20f6a0:	2200      	movs	r2, #0
  20f6a2:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
    subscript_to_add_ = 0;
  20f6a6:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
  20f6aa:	f203 10af 	addw	r0, r3, #431	; 0x1af
  20f6ae:	f243 24b5 	movw	r4, #12981	; 0x32b5
  20f6b2:	441c      	add	r4, r3

    for(int i = 0; i < TX_BUFFER_SIZE; i++)
      {
        tx_buffer_unit_[i].tx_len_ = 1;
  20f6b4:	2201      	movs	r2, #1
  20f6b6:	f880 20fb 	strb.w	r2, [r0, #251]	; 0xfb
  20f6ba:	f100 01fa 	add.w	r1, r0, #250	; 0xfa
  20f6be:	4603      	mov	r3, r0
        for(int j = 0; j < TX_BUFFER_WIDTH; j++)
          tx_buffer_unit_[i].tx_data_[j]  = 1;
  20f6c0:	f803 2f01 	strb.w	r2, [r3, #1]!
        for(int j = 0; j < TX_BUFFER_WIDTH; j++)
  20f6c4:	428b      	cmp	r3, r1
  20f6c6:	d1fb      	bne.n	20f6c0 <_ZN2tx4initEP18UART_HandleTypeDef+0x28>
  20f6c8:	30fb      	adds	r0, #251	; 0xfb
    for(int i = 0; i < TX_BUFFER_SIZE; i++)
  20f6ca:	42a0      	cmp	r0, r4
  20f6cc:	d1f3      	bne.n	20f6b6 <_ZN2tx4initEP18UART_HandleTypeDef+0x1e>
      }
  }
  20f6ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  20f6d2:	4770      	bx	lr
  20f6d4:	200011c0 	.word	0x200011c0

0020f6d8 <_ZN2tx7publishEv>:
  }

  int publish()
  {
    int status = HAL_OK;
    if (subscript_in_progress_ != subscript_to_add_)
  20f6d8:	4b13      	ldr	r3, [pc, #76]	; (20f728 <_ZN2tx7publishEv+0x50>)
  20f6da:	f893 11ac 	ldrb.w	r1, [r3, #428]	; 0x1ac
  20f6de:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
  20f6e2:	428b      	cmp	r3, r1
  20f6e4:	d01e      	beq.n	20f724 <_ZN2tx7publishEv+0x4c>
  {
  20f6e6:	b510      	push	{r4, lr}
      {
        status = HAL_UART_Transmit(tx_huart_, tx_buffer_unit_[subscript_in_progress_].tx_data_, tx_buffer_unit_[subscript_in_progress_].tx_len_, 10);
  20f6e8:	4c0f      	ldr	r4, [pc, #60]	; (20f728 <_ZN2tx7publishEv+0x50>)
  20f6ea:	ebc1 1381 	rsb	r3, r1, r1, lsl #6
  20f6ee:	ebc1 0183 	rsb	r1, r1, r3, lsl #2
  20f6f2:	1862      	adds	r2, r4, r1
  20f6f4:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
  20f6f8:	230a      	movs	r3, #10
  20f6fa:	f892 22aa 	ldrb.w	r2, [r2, #682]	; 0x2aa
  20f6fe:	4401      	add	r1, r0
  20f700:	f8d4 01a8 	ldr.w	r0, [r4, #424]	; 0x1a8
  20f704:	f004 f945 	bl	213992 <HAL_UART_Transmit>

        subscript_in_progress_++;
  20f708:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
  20f70c:	3301      	adds	r3, #1
  20f70e:	b2db      	uxtb	r3, r3
        if (subscript_in_progress_ == TX_BUFFER_SIZE) subscript_in_progress_ = 0;
  20f710:	2b32      	cmp	r3, #50	; 0x32
  20f712:	d002      	beq.n	20f71a <_ZN2tx7publishEv+0x42>
        subscript_in_progress_++;
  20f714:	f884 31ac 	strb.w	r3, [r4, #428]	; 0x1ac
  20f718:	bd10      	pop	{r4, pc}
        if (subscript_in_progress_ == TX_BUFFER_SIZE) subscript_in_progress_ = 0;
  20f71a:	2200      	movs	r2, #0
  20f71c:	4b02      	ldr	r3, [pc, #8]	; (20f728 <_ZN2tx7publishEv+0x50>)
  20f71e:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
  20f722:	bd10      	pop	{r4, pc}
    int status = HAL_OK;
  20f724:	2000      	movs	r0, #0
      }
    return status;
  20f726:	4770      	bx	lr
  20f728:	200011c0 	.word	0x200011c0

0020f72c <_ZN2tx5writeEPhh>:
  }

  void write(uint8_t * new_data, uint8_t new_size)
  {
  20f72c:	b570      	push	{r4, r5, r6, lr}
    /* if subscript comes around and get to one in progress_, then wait. */
    if (subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_BUFFER_SIZE - 1 && subscript_in_progress_ == 0) )
  20f72e:	4a1a      	ldr	r2, [pc, #104]	; (20f798 <_ZN2tx5writeEPhh+0x6c>)
  20f730:	f892 31ac 	ldrb.w	r3, [r2, #428]	; 0x1ac
  20f734:	461e      	mov	r6, r3
  20f736:	f892 41ad 	ldrb.w	r4, [r2, #429]	; 0x1ad
  20f73a:	1c65      	adds	r5, r4, #1
  20f73c:	42ab      	cmp	r3, r5
  20f73e:	d022      	beq.n	20f786 <_ZN2tx5writeEPhh+0x5a>
  20f740:	b90b      	cbnz	r3, 20f746 <_ZN2tx5writeEPhh+0x1a>
  20f742:	2c31      	cmp	r4, #49	; 0x31
  20f744:	d01f      	beq.n	20f786 <_ZN2tx5writeEPhh+0x5a>
  20f746:	460a      	mov	r2, r1
  20f748:	4601      	mov	r1, r0
        //TODO: address the overflow
        while(subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_BUFFER_SIZE - 1 && subscript_in_progress_ == 0)){}
      //  return;
      }

    tx_buffer_unit_[subscript_to_add_].tx_len_ = new_size;
  20f74a:	4d13      	ldr	r5, [pc, #76]	; (20f798 <_ZN2tx5writeEPhh+0x6c>)
  20f74c:	ebc4 1384 	rsb	r3, r4, r4, lsl #6
  20f750:	ebc4 0383 	rsb	r3, r4, r3, lsl #2
  20f754:	442b      	add	r3, r5
  20f756:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
    memcpy(tx_buffer_unit_[subscript_to_add_].tx_data_, new_data, new_size);
  20f75a:	f505 75d8 	add.w	r5, r5, #432	; 0x1b0
  20f75e:	ebc4 1384 	rsb	r3, r4, r4, lsl #6
  20f762:	ebc4 0383 	rsb	r3, r4, r3, lsl #2
  20f766:	18e8      	adds	r0, r5, r3
  20f768:	f007 f86f 	bl	21684a <memcpy>

    subscript_to_add_++;
  20f76c:	3401      	adds	r4, #1
  20f76e:	b2e4      	uxtb	r4, r4

    if (subscript_to_add_ == TX_BUFFER_SIZE) subscript_to_add_ = 0;
  20f770:	2c32      	cmp	r4, #50	; 0x32
  20f772:	d00b      	beq.n	20f78c <_ZN2tx5writeEPhh+0x60>
    subscript_to_add_++;
  20f774:	f5a5 73d8 	sub.w	r3, r5, #432	; 0x1b0
  20f778:	f883 41ad 	strb.w	r4, [r3, #429]	; 0x1ad
  20f77c:	bd70      	pop	{r4, r5, r6, pc}
        while(subscript_in_progress_ == subscript_to_add_ + 1 || ( subscript_to_add_ == TX_BUFFER_SIZE - 1 && subscript_in_progress_ == 0)){}
  20f77e:	2b00      	cmp	r3, #0
  20f780:	d1e1      	bne.n	20f746 <_ZN2tx5writeEPhh+0x1a>
  20f782:	2c31      	cmp	r4, #49	; 0x31
  20f784:	d1df      	bne.n	20f746 <_ZN2tx5writeEPhh+0x1a>
  20f786:	42ae      	cmp	r6, r5
  20f788:	d1f9      	bne.n	20f77e <_ZN2tx5writeEPhh+0x52>
  20f78a:	e7fe      	b.n	20f78a <_ZN2tx5writeEPhh+0x5e>
    if (subscript_to_add_ == TX_BUFFER_SIZE) subscript_to_add_ = 0;
  20f78c:	2200      	movs	r2, #0
  20f78e:	4b02      	ldr	r3, [pc, #8]	; (20f798 <_ZN2tx5writeEPhh+0x6c>)
  20f790:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
  20f794:	bd70      	pop	{r4, r5, r6, pc}
  20f796:	bf00      	nop
  20f798:	200011c0 	.word	0x200011c0

0020f79c <_GLOBAL__sub_I__ZN2rx4initEP18UART_HandleTypeDef>:
  }

};
  20f79c:	b508      	push	{r3, lr}
    byte_in_progress_ = 0;
  20f79e:	4808      	ldr	r0, [pc, #32]	; (20f7c0 <_GLOBAL__sub_I__ZN2rx4initEP18UART_HandleTypeDef+0x24>)
  20f7a0:	2300      	movs	r3, #0
  20f7a2:	f8a0 31a0 	strh.w	r3, [r0, #416]	; 0x1a0
    byte_to_add_ = 0;
  20f7a6:	f8a0 31a2 	strh.w	r3, [r0, #418]	; 0x1a2
    buffer_length_ = (uint16_t)SIZE;
  20f7aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
  20f7ae:	f8a0 31a4 	strh.w	r3, [r0, #420]	; 0x1a4
RingBuffer<uint8_t, RX_BUFFER_SIZE>  rx_buf_;
  20f7b2:	4a04      	ldr	r2, [pc, #16]	; (20f7c4 <_GLOBAL__sub_I__ZN2rx4initEP18UART_HandleTypeDef+0x28>)
  20f7b4:	4904      	ldr	r1, [pc, #16]	; (20f7c8 <_GLOBAL__sub_I__ZN2rx4initEP18UART_HandleTypeDef+0x2c>)
  20f7b6:	3010      	adds	r0, #16
  20f7b8:	f004 fc5c 	bl	214074 <__aeabi_atexit>
  20f7bc:	bd08      	pop	{r3, pc}
  20f7be:	bf00      	nop
  20f7c0:	200011c0 	.word	0x200011c0
  20f7c4:	20000000 	.word	0x20000000
  20f7c8:	0020f5cd 	.word	0x0020f5cd

0020f7cc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
  20f7cc:	b410      	push	{r4}
  uint32_t nsec_part = nsec % 1000000000UL;
  20f7ce:	680c      	ldr	r4, [r1, #0]
  uint32_t sec_part = nsec / 1000000000UL;
  20f7d0:	0a63      	lsrs	r3, r4, #9
  20f7d2:	4a07      	ldr	r2, [pc, #28]	; (20f7f0 <_ZN3ros16normalizeSecNSecERmS0_+0x24>)
  20f7d4:	fba2 2303 	umull	r2, r3, r2, r3
  20f7d8:	09db      	lsrs	r3, r3, #7
  sec += sec_part;
  20f7da:	6802      	ldr	r2, [r0, #0]
  20f7dc:	441a      	add	r2, r3
  20f7de:	6002      	str	r2, [r0, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
  20f7e0:	4a04      	ldr	r2, [pc, #16]	; (20f7f4 <_ZN3ros16normalizeSecNSecERmS0_+0x28>)
  20f7e2:	fb02 4313 	mls	r3, r2, r3, r4
  nsec = nsec_part;
  20f7e6:	600b      	str	r3, [r1, #0]
}
  20f7e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  20f7ec:	4770      	bx	lr
  20f7ee:	bf00      	nop
  20f7f0:	00044b83 	.word	0x00044b83
  20f7f4:	3b9aca00 	.word	0x3b9aca00

0020f7f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
  20f7f8:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  20f7fa:	4a0f      	ldr	r2, [pc, #60]	; (20f838 <SystemInit+0x40>)
  20f7fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  20f800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  20f804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
  20f808:	4b0c      	ldr	r3, [pc, #48]	; (20f83c <SystemInit+0x44>)
  20f80a:	6819      	ldr	r1, [r3, #0]
  20f80c:	f041 0101 	orr.w	r1, r1, #1
  20f810:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
  20f812:	2000      	movs	r0, #0
  20f814:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
  20f816:	681c      	ldr	r4, [r3, #0]
  20f818:	4909      	ldr	r1, [pc, #36]	; (20f840 <SystemInit+0x48>)
  20f81a:	4021      	ands	r1, r4
  20f81c:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
  20f81e:	4909      	ldr	r1, [pc, #36]	; (20f844 <SystemInit+0x4c>)
  20f820:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
  20f822:	6819      	ldr	r1, [r3, #0]
  20f824:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
  20f828:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
  20f82a:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
  20f82c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  20f830:	6093      	str	r3, [r2, #8]
#endif
}
  20f832:	f85d 4b04 	ldr.w	r4, [sp], #4
  20f836:	4770      	bx	lr
  20f838:	e000ed00 	.word	0xe000ed00
  20f83c:	40023800 	.word	0x40023800
  20f840:	fef6ffff 	.word	0xfef6ffff
  20f844:	24003010 	.word	0x24003010

0020f848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  20f848:	b510      	push	{r4, lr}
  20f84a:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
  20f84c:	f002 f9fe 	bl	211c4c <HAL_RCC_GetHCLKFreq>
  20f850:	4b06      	ldr	r3, [pc, #24]	; (20f86c <HAL_InitTick+0x24>)
  20f852:	fba3 3000 	umull	r3, r0, r3, r0
  20f856:	0980      	lsrs	r0, r0, #6
  20f858:	f000 feec 	bl	210634 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
  20f85c:	2200      	movs	r2, #0
  20f85e:	4621      	mov	r1, r4
  20f860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  20f864:	f000 feac 	bl	2105c0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
  20f868:	2000      	movs	r0, #0
  20f86a:	bd10      	pop	{r4, pc}
  20f86c:	10624dd3 	.word	0x10624dd3

0020f870 <HAL_Init>:
{
  20f870:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
  20f872:	4a07      	ldr	r2, [pc, #28]	; (20f890 <HAL_Init+0x20>)
  20f874:	6813      	ldr	r3, [r2, #0]
  20f876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  20f87a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
  20f87c:	2003      	movs	r0, #3
  20f87e:	f000 fe8d 	bl	21059c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
  20f882:	2000      	movs	r0, #0
  20f884:	f7ff ffe0 	bl	20f848 <HAL_InitTick>
  HAL_MspInit();
  20f888:	f7ff fb84 	bl	20ef94 <HAL_MspInit>
}
  20f88c:	2000      	movs	r0, #0
  20f88e:	bd08      	pop	{r3, pc}
  20f890:	40023c00 	.word	0x40023c00

0020f894 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
  20f894:	4a02      	ldr	r2, [pc, #8]	; (20f8a0 <HAL_IncTick+0xc>)
  20f896:	6813      	ldr	r3, [r2, #0]
  20f898:	3301      	adds	r3, #1
  20f89a:	6013      	str	r3, [r2, #0]
  20f89c:	4770      	bx	lr
  20f89e:	bf00      	nop
  20f8a0:	200049ac 	.word	0x200049ac

0020f8a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
  20f8a4:	4b01      	ldr	r3, [pc, #4]	; (20f8ac <HAL_GetTick+0x8>)
  20f8a6:	6818      	ldr	r0, [r3, #0]
}
  20f8a8:	4770      	bx	lr
  20f8aa:	bf00      	nop
  20f8ac:	200049ac 	.word	0x200049ac

0020f8b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
  20f8b0:	b510      	push	{r4, lr}
  20f8b2:	b082      	sub	sp, #8
  20f8b4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
  20f8b6:	f7ff fff5 	bl	20f8a4 <HAL_GetTick>
  20f8ba:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
  20f8bc:	f7ff fff2 	bl	20f8a4 <HAL_GetTick>
  20f8c0:	9b01      	ldr	r3, [sp, #4]
  20f8c2:	1b00      	subs	r0, r0, r4
  20f8c4:	4298      	cmp	r0, r3
  20f8c6:	d3f9      	bcc.n	20f8bc <HAL_Delay+0xc>
  {
  }
}
  20f8c8:	b002      	add	sp, #8
  20f8ca:	bd10      	pop	{r4, pc}

0020f8cc <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
  20f8cc:	2800      	cmp	r0, #0
  20f8ce:	f000 80ba 	beq.w	20fa46 <HAL_ADC_Init+0x17a>
{
  20f8d2:	b510      	push	{r4, lr}
  20f8d4:	4604      	mov	r4, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
  20f8d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  20f8d8:	b143      	cbz	r3, 20f8ec <HAL_ADC_Init+0x20>
    HAL_ADC_MspInit(hadc);
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
  20f8da:	6c23      	ldr	r3, [r4, #64]	; 0x40
  20f8dc:	f013 0f10 	tst.w	r3, #16
  20f8e0:	d00a      	beq.n	20f8f8 <HAL_ADC_Init+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
  20f8e2:	2001      	movs	r0, #1
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
  20f8e4:	2300      	movs	r3, #0
  20f8e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
  20f8ea:	bd10      	pop	{r4, pc}
    ADC_CLEAR_ERRORCODE(hadc);
  20f8ec:	6443      	str	r3, [r0, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
  20f8ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
  20f8f2:	f7fc f87b 	bl	20b9ec <HAL_ADC_MspInit>
  20f8f6:	e7f0      	b.n	20f8da <HAL_ADC_Init+0xe>
    ADC_STATE_CLR_SET(hadc->State,
  20f8f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
  20f8fa:	4b54      	ldr	r3, [pc, #336]	; (20fa4c <HAL_ADC_Init+0x180>)
  20f8fc:	4013      	ands	r3, r2
  20f8fe:	f043 0302 	orr.w	r3, r3, #2
  20f902:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
  20f904:	4b52      	ldr	r3, [pc, #328]	; (20fa50 <HAL_ADC_Init+0x184>)
  20f906:	685a      	ldr	r2, [r3, #4]
  20f908:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
  20f90c:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  20f90e:	685a      	ldr	r2, [r3, #4]
  20f910:	6861      	ldr	r1, [r4, #4]
  20f912:	430a      	orrs	r2, r1
  20f914:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
  20f916:	6822      	ldr	r2, [r4, #0]
  20f918:	6853      	ldr	r3, [r2, #4]
  20f91a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  20f91e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
  20f920:	6822      	ldr	r2, [r4, #0]
  20f922:	6853      	ldr	r3, [r2, #4]
  20f924:	6921      	ldr	r1, [r4, #16]
  20f926:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  20f92a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  20f92c:	6822      	ldr	r2, [r4, #0]
  20f92e:	6853      	ldr	r3, [r2, #4]
  20f930:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
  20f934:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
  20f936:	6822      	ldr	r2, [r4, #0]
  20f938:	6853      	ldr	r3, [r2, #4]
  20f93a:	68a1      	ldr	r1, [r4, #8]
  20f93c:	430b      	orrs	r3, r1
  20f93e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  20f940:	6822      	ldr	r2, [r4, #0]
  20f942:	6893      	ldr	r3, [r2, #8]
  20f944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  20f948:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
  20f94a:	6822      	ldr	r2, [r4, #0]
  20f94c:	6893      	ldr	r3, [r2, #8]
  20f94e:	68e1      	ldr	r1, [r4, #12]
  20f950:	430b      	orrs	r3, r1
  20f952:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  20f954:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  20f956:	4b3f      	ldr	r3, [pc, #252]	; (20fa54 <HAL_ADC_Init+0x188>)
  20f958:	429a      	cmp	r2, r3
  20f95a:	d051      	beq.n	20fa00 <HAL_ADC_Init+0x134>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
  20f95c:	6822      	ldr	r2, [r4, #0]
  20f95e:	6893      	ldr	r3, [r2, #8]
  20f960:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
  20f964:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
  20f966:	6822      	ldr	r2, [r4, #0]
  20f968:	6893      	ldr	r3, [r2, #8]
  20f96a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  20f96c:	430b      	orrs	r3, r1
  20f96e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  20f970:	6822      	ldr	r2, [r4, #0]
  20f972:	6893      	ldr	r3, [r2, #8]
  20f974:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
  20f978:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
  20f97a:	6822      	ldr	r2, [r4, #0]
  20f97c:	6893      	ldr	r3, [r2, #8]
  20f97e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  20f980:	430b      	orrs	r3, r1
  20f982:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
  20f984:	6822      	ldr	r2, [r4, #0]
  20f986:	6893      	ldr	r3, [r2, #8]
  20f988:	f023 0302 	bic.w	r3, r3, #2
  20f98c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
  20f98e:	6822      	ldr	r2, [r4, #0]
  20f990:	6893      	ldr	r3, [r2, #8]
  20f992:	69a1      	ldr	r1, [r4, #24]
  20f994:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  20f998:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
  20f99a:	6a23      	ldr	r3, [r4, #32]
  20f99c:	2b00      	cmp	r3, #0
  20f99e:	d13a      	bne.n	20fa16 <HAL_ADC_Init+0x14a>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  20f9a0:	6822      	ldr	r2, [r4, #0]
  20f9a2:	6853      	ldr	r3, [r2, #4]
  20f9a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  20f9a8:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
  20f9aa:	6822      	ldr	r2, [r4, #0]
  20f9ac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  20f9ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  20f9b2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
  20f9b4:	6821      	ldr	r1, [r4, #0]
  20f9b6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  20f9b8:	69e2      	ldr	r2, [r4, #28]
  20f9ba:	3a01      	subs	r2, #1
  20f9bc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  20f9c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  20f9c2:	6822      	ldr	r2, [r4, #0]
  20f9c4:	6893      	ldr	r3, [r2, #8]
  20f9c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  20f9ca:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
  20f9cc:	6822      	ldr	r2, [r4, #0]
  20f9ce:	6893      	ldr	r3, [r2, #8]
  20f9d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  20f9d2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
  20f9d6:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  20f9d8:	6822      	ldr	r2, [r4, #0]
  20f9da:	6893      	ldr	r3, [r2, #8]
  20f9dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  20f9e0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
  20f9e2:	6822      	ldr	r2, [r4, #0]
  20f9e4:	6893      	ldr	r3, [r2, #8]
  20f9e6:	6961      	ldr	r1, [r4, #20]
  20f9e8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
  20f9ec:	6093      	str	r3, [r2, #8]
    ADC_CLEAR_ERRORCODE(hadc);
  20f9ee:	2000      	movs	r0, #0
  20f9f0:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
  20f9f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  20f9f4:	f023 0303 	bic.w	r3, r3, #3
  20f9f8:	f043 0301 	orr.w	r3, r3, #1
  20f9fc:	6423      	str	r3, [r4, #64]	; 0x40
  20f9fe:	e771      	b.n	20f8e4 <HAL_ADC_Init+0x18>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
  20fa00:	6822      	ldr	r2, [r4, #0]
  20fa02:	6893      	ldr	r3, [r2, #8]
  20fa04:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
  20fa08:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  20fa0a:	6822      	ldr	r2, [r4, #0]
  20fa0c:	6893      	ldr	r3, [r2, #8]
  20fa0e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
  20fa12:	6093      	str	r3, [r2, #8]
  20fa14:	e7b6      	b.n	20f984 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
  20fa16:	6822      	ldr	r2, [r4, #0]
  20fa18:	6853      	ldr	r3, [r2, #4]
  20fa1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  20fa1e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
  20fa20:	6822      	ldr	r2, [r4, #0]
  20fa22:	6853      	ldr	r3, [r2, #4]
  20fa24:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  20fa28:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  20fa2a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  20fa2e:	fa93 f3a3 	rbit	r3, r3
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  20fa32:	fab3 f283 	clz	r2, r3
  20fa36:	6821      	ldr	r1, [r4, #0]
  20fa38:	6848      	ldr	r0, [r1, #4]
  20fa3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  20fa3c:	3b01      	subs	r3, #1
  20fa3e:	4093      	lsls	r3, r2
  20fa40:	4303      	orrs	r3, r0
  20fa42:	604b      	str	r3, [r1, #4]
  20fa44:	e7b1      	b.n	20f9aa <HAL_ADC_Init+0xde>
    return HAL_ERROR;
  20fa46:	2001      	movs	r0, #1
  20fa48:	4770      	bx	lr
  20fa4a:	bf00      	nop
  20fa4c:	ffffeefd 	.word	0xffffeefd
  20fa50:	40012300 	.word	0x40012300
  20fa54:	0f000001 	.word	0x0f000001

0020fa58 <HAL_ADC_Start>:
{
  20fa58:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
  20fa5a:	2300      	movs	r3, #0
  20fa5c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
  20fa5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  20fa62:	2b01      	cmp	r3, #1
  20fa64:	d05e      	beq.n	20fb24 <HAL_ADC_Start+0xcc>
  20fa66:	2301      	movs	r3, #1
  20fa68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
  20fa6c:	6803      	ldr	r3, [r0, #0]
  20fa6e:	689a      	ldr	r2, [r3, #8]
  20fa70:	f012 0f01 	tst.w	r2, #1
  20fa74:	d114      	bne.n	20faa0 <HAL_ADC_Start+0x48>
    __HAL_ADC_ENABLE(hadc);
  20fa76:	689a      	ldr	r2, [r3, #8]
  20fa78:	f042 0201 	orr.w	r2, r2, #1
  20fa7c:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
  20fa7e:	4b30      	ldr	r3, [pc, #192]	; (20fb40 <HAL_ADC_Start+0xe8>)
  20fa80:	681b      	ldr	r3, [r3, #0]
  20fa82:	4a30      	ldr	r2, [pc, #192]	; (20fb44 <HAL_ADC_Start+0xec>)
  20fa84:	fba2 2303 	umull	r2, r3, r2, r3
  20fa88:	0c9b      	lsrs	r3, r3, #18
  20fa8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  20fa8e:	9301      	str	r3, [sp, #4]
    while(counter != 0)
  20fa90:	9b01      	ldr	r3, [sp, #4]
  20fa92:	b12b      	cbz	r3, 20faa0 <HAL_ADC_Start+0x48>
      counter--;
  20fa94:	9b01      	ldr	r3, [sp, #4]
  20fa96:	3b01      	subs	r3, #1
  20fa98:	9301      	str	r3, [sp, #4]
    while(counter != 0)
  20fa9a:	9b01      	ldr	r3, [sp, #4]
  20fa9c:	2b00      	cmp	r3, #0
  20fa9e:	d1f9      	bne.n	20fa94 <HAL_ADC_Start+0x3c>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
  20faa0:	6802      	ldr	r2, [r0, #0]
  20faa2:	6893      	ldr	r3, [r2, #8]
  20faa4:	f013 0f01 	tst.w	r3, #1
  20faa8:	d03f      	beq.n	20fb2a <HAL_ADC_Start+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
  20faaa:	6c01      	ldr	r1, [r0, #64]	; 0x40
  20faac:	4b26      	ldr	r3, [pc, #152]	; (20fb48 <HAL_ADC_Start+0xf0>)
  20faae:	400b      	ands	r3, r1
  20fab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  20fab4:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
  20fab6:	6853      	ldr	r3, [r2, #4]
  20fab8:	f413 6f80 	tst.w	r3, #1024	; 0x400
  20fabc:	d005      	beq.n	20faca <HAL_ADC_Start+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
  20fabe:	6c03      	ldr	r3, [r0, #64]	; 0x40
  20fac0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  20fac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  20fac8:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
  20faca:	6c03      	ldr	r3, [r0, #64]	; 0x40
  20facc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  20fad0:	d019      	beq.n	20fb06 <HAL_ADC_Start+0xae>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
  20fad2:	6c43      	ldr	r3, [r0, #68]	; 0x44
  20fad4:	f023 0306 	bic.w	r3, r3, #6
  20fad8:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
  20fada:	2300      	movs	r3, #0
  20fadc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
  20fae0:	f06f 0302 	mvn.w	r3, #2
  20fae4:	6013      	str	r3, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
  20fae6:	4b19      	ldr	r3, [pc, #100]	; (20fb4c <HAL_ADC_Start+0xf4>)
  20fae8:	685b      	ldr	r3, [r3, #4]
  20faea:	f013 0f1f 	tst.w	r3, #31
  20faee:	d10d      	bne.n	20fb0c <HAL_ADC_Start+0xb4>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
  20faf0:	6803      	ldr	r3, [r0, #0]
  20faf2:	689a      	ldr	r2, [r3, #8]
  20faf4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
  20faf8:	d119      	bne.n	20fb2e <HAL_ADC_Start+0xd6>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
  20fafa:	689a      	ldr	r2, [r3, #8]
  20fafc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  20fb00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
  20fb02:	2000      	movs	r0, #0
  20fb04:	e00f      	b.n	20fb26 <HAL_ADC_Start+0xce>
      ADC_CLEAR_ERRORCODE(hadc);
  20fb06:	2300      	movs	r3, #0
  20fb08:	6443      	str	r3, [r0, #68]	; 0x44
  20fb0a:	e7e6      	b.n	20fada <HAL_ADC_Start+0x82>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
  20fb0c:	6802      	ldr	r2, [r0, #0]
  20fb0e:	4b10      	ldr	r3, [pc, #64]	; (20fb50 <HAL_ADC_Start+0xf8>)
  20fb10:	429a      	cmp	r2, r3
  20fb12:	d001      	beq.n	20fb18 <HAL_ADC_Start+0xc0>
  return HAL_OK;
  20fb14:	2000      	movs	r0, #0
  20fb16:	e006      	b.n	20fb26 <HAL_ADC_Start+0xce>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
  20fb18:	689b      	ldr	r3, [r3, #8]
  20fb1a:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
  20fb1e:	d008      	beq.n	20fb32 <HAL_ADC_Start+0xda>
  return HAL_OK;
  20fb20:	2000      	movs	r0, #0
  20fb22:	e000      	b.n	20fb26 <HAL_ADC_Start+0xce>
  __HAL_LOCK(hadc);
  20fb24:	2002      	movs	r0, #2
}
  20fb26:	b002      	add	sp, #8
  20fb28:	4770      	bx	lr
  return HAL_OK;
  20fb2a:	2000      	movs	r0, #0
  20fb2c:	e7fb      	b.n	20fb26 <HAL_ADC_Start+0xce>
  20fb2e:	2000      	movs	r0, #0
  20fb30:	e7f9      	b.n	20fb26 <HAL_ADC_Start+0xce>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
  20fb32:	4a07      	ldr	r2, [pc, #28]	; (20fb50 <HAL_ADC_Start+0xf8>)
  20fb34:	6893      	ldr	r3, [r2, #8]
  20fb36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  20fb3a:	6093      	str	r3, [r2, #8]
  return HAL_OK;
  20fb3c:	2000      	movs	r0, #0
  20fb3e:	e7f2      	b.n	20fb26 <HAL_ADC_Start+0xce>
  20fb40:	20000008 	.word	0x20000008
  20fb44:	431bde83 	.word	0x431bde83
  20fb48:	fffff8fe 	.word	0xfffff8fe
  20fb4c:	40012300 	.word	0x40012300
  20fb50:	40012000 	.word	0x40012000

0020fb54 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
  20fb54:	6803      	ldr	r3, [r0, #0]
  20fb56:	689a      	ldr	r2, [r3, #8]
  20fb58:	f412 6f80 	tst.w	r2, #1024	; 0x400
  20fb5c:	d003      	beq.n	20fb66 <HAL_ADC_PollForConversion+0x12>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
  20fb5e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
  20fb60:	f413 7f80 	tst.w	r3, #256	; 0x100
  20fb64:	d139      	bne.n	20fbda <HAL_ADC_PollForConversion+0x86>
{
  20fb66:	b570      	push	{r4, r5, r6, lr}
  20fb68:	460c      	mov	r4, r1
  20fb6a:	4605      	mov	r5, r0
  tickstart = HAL_GetTick();
  20fb6c:	f7ff fe9a 	bl	20f8a4 <HAL_GetTick>
  20fb70:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
  20fb72:	682a      	ldr	r2, [r5, #0]
  20fb74:	6813      	ldr	r3, [r2, #0]
  20fb76:	f013 0f02 	tst.w	r3, #2
  20fb7a:	d112      	bne.n	20fba2 <HAL_ADC_PollForConversion+0x4e>
    if(Timeout != HAL_MAX_DELAY)
  20fb7c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
  20fb80:	d0f8      	beq.n	20fb74 <HAL_ADC_PollForConversion+0x20>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
  20fb82:	b944      	cbnz	r4, 20fb96 <HAL_ADC_PollForConversion+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
  20fb84:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  20fb86:	f043 0304 	orr.w	r3, r3, #4
  20fb8a:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hadc);
  20fb8c:	2300      	movs	r3, #0
  20fb8e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
  20fb92:	2003      	movs	r0, #3
  20fb94:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
  20fb96:	f7ff fe85 	bl	20f8a4 <HAL_GetTick>
  20fb9a:	1b80      	subs	r0, r0, r6
  20fb9c:	4284      	cmp	r4, r0
  20fb9e:	d2e8      	bcs.n	20fb72 <HAL_ADC_PollForConversion+0x1e>
  20fba0:	e7f0      	b.n	20fb84 <HAL_ADC_PollForConversion+0x30>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
  20fba2:	f06f 0312 	mvn.w	r3, #18
  20fba6:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
  20fba8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  20fbaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  20fbae:	642b      	str	r3, [r5, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
  20fbb0:	682b      	ldr	r3, [r5, #0]
  20fbb2:	689a      	ldr	r2, [r3, #8]
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
  20fbb4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
  20fbb8:	d10b      	bne.n	20fbd2 <HAL_ADC_PollForConversion+0x7e>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
  20fbba:	69aa      	ldr	r2, [r5, #24]
  20fbbc:	b95a      	cbnz	r2, 20fbd6 <HAL_ADC_PollForConversion+0x82>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
  20fbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
  20fbc0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
  20fbc4:	d012      	beq.n	20fbec <HAL_ADC_PollForConversion+0x98>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
  20fbc6:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
  20fbc8:	f413 6f80 	tst.w	r3, #1024	; 0x400
  20fbcc:	d00e      	beq.n	20fbec <HAL_ADC_PollForConversion+0x98>
  return HAL_OK;
  20fbce:	2000      	movs	r0, #0
  20fbd0:	bd70      	pop	{r4, r5, r6, pc}
  20fbd2:	2000      	movs	r0, #0
  20fbd4:	bd70      	pop	{r4, r5, r6, pc}
  20fbd6:	2000      	movs	r0, #0
  20fbd8:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
  20fbda:	6c03      	ldr	r3, [r0, #64]	; 0x40
  20fbdc:	f043 0320 	orr.w	r3, r3, #32
  20fbe0:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_UNLOCK(hadc);
  20fbe2:	2300      	movs	r3, #0
  20fbe4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
  20fbe8:	2001      	movs	r0, #1
  20fbea:	4770      	bx	lr
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
  20fbec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  20fbee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  20fbf2:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
  20fbf4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  20fbf6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  20fbfa:	d105      	bne.n	20fc08 <HAL_ADC_PollForConversion+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
  20fbfc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  20fbfe:	f043 0301 	orr.w	r3, r3, #1
  20fc02:	642b      	str	r3, [r5, #64]	; 0x40
  return HAL_OK;
  20fc04:	2000      	movs	r0, #0
  20fc06:	bd70      	pop	{r4, r5, r6, pc}
  20fc08:	2000      	movs	r0, #0
}
  20fc0a:	bd70      	pop	{r4, r5, r6, pc}

0020fc0c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
  20fc0c:	6803      	ldr	r3, [r0, #0]
  20fc0e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
  20fc10:	4770      	bx	lr
	...

0020fc14 <HAL_ADC_ConfigChannel>:
{
  20fc14:	b430      	push	{r4, r5}
  20fc16:	b082      	sub	sp, #8
  __IO uint32_t counter = 0;
  20fc18:	2300      	movs	r3, #0
  20fc1a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
  20fc1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  20fc20:	2b01      	cmp	r3, #1
  20fc22:	f000 80c1 	beq.w	20fda8 <HAL_ADC_ConfigChannel+0x194>
  20fc26:	2301      	movs	r3, #1
  20fc28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
	if (sConfig->Channel > ADC_CHANNEL_9)
  20fc2c:	680b      	ldr	r3, [r1, #0]
  20fc2e:	2b09      	cmp	r3, #9
  20fc30:	d922      	bls.n	20fc78 <HAL_ADC_ConfigChannel+0x64>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
  20fc32:	6805      	ldr	r5, [r0, #0]
  20fc34:	68ea      	ldr	r2, [r5, #12]
  20fc36:	b29b      	uxth	r3, r3
  20fc38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  20fc3c:	3b1e      	subs	r3, #30
  20fc3e:	2407      	movs	r4, #7
  20fc40:	fa04 f303 	lsl.w	r3, r4, r3
  20fc44:	ea22 0303 	bic.w	r3, r2, r3
  20fc48:	60eb      	str	r3, [r5, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
  20fc4a:	680b      	ldr	r3, [r1, #0]
  20fc4c:	4a57      	ldr	r2, [pc, #348]	; (20fdac <HAL_ADC_ConfigChannel+0x198>)
  20fc4e:	4293      	cmp	r3, r2
  20fc50:	d00b      	beq.n	20fc6a <HAL_ADC_ConfigChannel+0x56>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
  20fc52:	6804      	ldr	r4, [r0, #0]
  20fc54:	68e5      	ldr	r5, [r4, #12]
  20fc56:	b29b      	uxth	r3, r3
  20fc58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  20fc5c:	3b1e      	subs	r3, #30
  20fc5e:	688a      	ldr	r2, [r1, #8]
  20fc60:	fa02 f303 	lsl.w	r3, r2, r3
  20fc64:	432b      	orrs	r3, r5
  20fc66:	60e3      	str	r3, [r4, #12]
  20fc68:	e01a      	b.n	20fca0 <HAL_ADC_ConfigChannel+0x8c>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
  20fc6a:	6802      	ldr	r2, [r0, #0]
  20fc6c:	68d3      	ldr	r3, [r2, #12]
  20fc6e:	688c      	ldr	r4, [r1, #8]
  20fc70:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  20fc74:	60d3      	str	r3, [r2, #12]
  20fc76:	e013      	b.n	20fca0 <HAL_ADC_ConfigChannel+0x8c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
  20fc78:	6805      	ldr	r5, [r0, #0]
  20fc7a:	692a      	ldr	r2, [r5, #16]
  20fc7c:	b29b      	uxth	r3, r3
  20fc7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  20fc82:	2407      	movs	r4, #7
  20fc84:	fa04 f303 	lsl.w	r3, r4, r3
  20fc88:	ea22 0303 	bic.w	r3, r2, r3
  20fc8c:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
  20fc8e:	6804      	ldr	r4, [r0, #0]
  20fc90:	6925      	ldr	r5, [r4, #16]
  20fc92:	880b      	ldrh	r3, [r1, #0]
  20fc94:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  20fc98:	688b      	ldr	r3, [r1, #8]
  20fc9a:	4093      	lsls	r3, r2
  20fc9c:	432b      	orrs	r3, r5
  20fc9e:	6123      	str	r3, [r4, #16]
  if (sConfig->Rank < 7)
  20fca0:	684b      	ldr	r3, [r1, #4]
  20fca2:	2b06      	cmp	r3, #6
  20fca4:	d820      	bhi.n	20fce8 <HAL_ADC_ConfigChannel+0xd4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
  20fca6:	6805      	ldr	r5, [r0, #0]
  20fca8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  20fcaa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  20fcae:	3b05      	subs	r3, #5
  20fcb0:	241f      	movs	r4, #31
  20fcb2:	fa04 f303 	lsl.w	r3, r4, r3
  20fcb6:	ea22 0303 	bic.w	r3, r2, r3
  20fcba:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
  20fcbc:	6804      	ldr	r4, [r0, #0]
  20fcbe:	6b65      	ldr	r5, [r4, #52]	; 0x34
  20fcc0:	880a      	ldrh	r2, [r1, #0]
  20fcc2:	684b      	ldr	r3, [r1, #4]
  20fcc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  20fcc8:	3b05      	subs	r3, #5
  20fcca:	fa02 f303 	lsl.w	r3, r2, r3
  20fcce:	432b      	orrs	r3, r5
  20fcd0:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
  20fcd2:	6802      	ldr	r2, [r0, #0]
  20fcd4:	4b36      	ldr	r3, [pc, #216]	; (20fdb0 <HAL_ADC_ConfigChannel+0x19c>)
  20fcd6:	429a      	cmp	r2, r3
  20fcd8:	d036      	beq.n	20fd48 <HAL_ADC_ConfigChannel+0x134>
  __HAL_UNLOCK(hadc);
  20fcda:	2300      	movs	r3, #0
  20fcdc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
  20fce0:	4618      	mov	r0, r3
}
  20fce2:	b002      	add	sp, #8
  20fce4:	bc30      	pop	{r4, r5}
  20fce6:	4770      	bx	lr
  else if (sConfig->Rank < 13)
  20fce8:	2b0c      	cmp	r3, #12
  20fcea:	d816      	bhi.n	20fd1a <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
  20fcec:	6805      	ldr	r5, [r0, #0]
  20fcee:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  20fcf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  20fcf4:	3b23      	subs	r3, #35	; 0x23
  20fcf6:	241f      	movs	r4, #31
  20fcf8:	fa04 f303 	lsl.w	r3, r4, r3
  20fcfc:	ea22 0303 	bic.w	r3, r2, r3
  20fd00:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
  20fd02:	6804      	ldr	r4, [r0, #0]
  20fd04:	6b25      	ldr	r5, [r4, #48]	; 0x30
  20fd06:	880a      	ldrh	r2, [r1, #0]
  20fd08:	684b      	ldr	r3, [r1, #4]
  20fd0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  20fd0e:	3b23      	subs	r3, #35	; 0x23
  20fd10:	fa02 f303 	lsl.w	r3, r2, r3
  20fd14:	432b      	orrs	r3, r5
  20fd16:	6323      	str	r3, [r4, #48]	; 0x30
  20fd18:	e7db      	b.n	20fcd2 <HAL_ADC_ConfigChannel+0xbe>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
  20fd1a:	6805      	ldr	r5, [r0, #0]
  20fd1c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  20fd1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  20fd22:	3b41      	subs	r3, #65	; 0x41
  20fd24:	241f      	movs	r4, #31
  20fd26:	fa04 f303 	lsl.w	r3, r4, r3
  20fd2a:	ea22 0303 	bic.w	r3, r2, r3
  20fd2e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
  20fd30:	6804      	ldr	r4, [r0, #0]
  20fd32:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  20fd34:	880a      	ldrh	r2, [r1, #0]
  20fd36:	684b      	ldr	r3, [r1, #4]
  20fd38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  20fd3c:	3b41      	subs	r3, #65	; 0x41
  20fd3e:	fa02 f303 	lsl.w	r3, r2, r3
  20fd42:	432b      	orrs	r3, r5
  20fd44:	62e3      	str	r3, [r4, #44]	; 0x2c
  20fd46:	e7c4      	b.n	20fcd2 <HAL_ADC_ConfigChannel+0xbe>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
  20fd48:	680b      	ldr	r3, [r1, #0]
  20fd4a:	2b12      	cmp	r3, #18
  20fd4c:	d022      	beq.n	20fd94 <HAL_ADC_ConfigChannel+0x180>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  20fd4e:	680b      	ldr	r3, [r1, #0]
  20fd50:	4a16      	ldr	r2, [pc, #88]	; (20fdac <HAL_ADC_ConfigChannel+0x198>)
  20fd52:	4293      	cmp	r3, r2
  20fd54:	d001      	beq.n	20fd5a <HAL_ADC_ConfigChannel+0x146>
  20fd56:	2b11      	cmp	r3, #17
  20fd58:	d1bf      	bne.n	20fcda <HAL_ADC_ConfigChannel+0xc6>
    ADC->CCR |= ADC_CCR_TSVREFE;
  20fd5a:	4a16      	ldr	r2, [pc, #88]	; (20fdb4 <HAL_ADC_ConfigChannel+0x1a0>)
  20fd5c:	6853      	ldr	r3, [r2, #4]
  20fd5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  20fd62:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
  20fd64:	680a      	ldr	r2, [r1, #0]
  20fd66:	4b11      	ldr	r3, [pc, #68]	; (20fdac <HAL_ADC_ConfigChannel+0x198>)
  20fd68:	429a      	cmp	r2, r3
  20fd6a:	d1b6      	bne.n	20fcda <HAL_ADC_ConfigChannel+0xc6>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
  20fd6c:	4b12      	ldr	r3, [pc, #72]	; (20fdb8 <HAL_ADC_ConfigChannel+0x1a4>)
  20fd6e:	681b      	ldr	r3, [r3, #0]
  20fd70:	4a12      	ldr	r2, [pc, #72]	; (20fdbc <HAL_ADC_ConfigChannel+0x1a8>)
  20fd72:	fba2 2303 	umull	r2, r3, r2, r3
  20fd76:	0c9b      	lsrs	r3, r3, #18
  20fd78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  20fd7c:	005b      	lsls	r3, r3, #1
  20fd7e:	9301      	str	r3, [sp, #4]
      while(counter != 0)
  20fd80:	9b01      	ldr	r3, [sp, #4]
  20fd82:	2b00      	cmp	r3, #0
  20fd84:	d0a9      	beq.n	20fcda <HAL_ADC_ConfigChannel+0xc6>
        counter--;
  20fd86:	9b01      	ldr	r3, [sp, #4]
  20fd88:	3b01      	subs	r3, #1
  20fd8a:	9301      	str	r3, [sp, #4]
      while(counter != 0)
  20fd8c:	9b01      	ldr	r3, [sp, #4]
  20fd8e:	2b00      	cmp	r3, #0
  20fd90:	d1f9      	bne.n	20fd86 <HAL_ADC_ConfigChannel+0x172>
  20fd92:	e7a2      	b.n	20fcda <HAL_ADC_ConfigChannel+0xc6>
    ADC->CCR |= ADC_CCR_VBATE;
  20fd94:	4a07      	ldr	r2, [pc, #28]	; (20fdb4 <HAL_ADC_ConfigChannel+0x1a0>)
  20fd96:	6853      	ldr	r3, [r2, #4]
  20fd98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  20fd9c:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
  20fd9e:	6802      	ldr	r2, [r0, #0]
  20fda0:	4b03      	ldr	r3, [pc, #12]	; (20fdb0 <HAL_ADC_ConfigChannel+0x19c>)
  20fda2:	429a      	cmp	r2, r3
  20fda4:	d0d3      	beq.n	20fd4e <HAL_ADC_ConfigChannel+0x13a>
  20fda6:	e798      	b.n	20fcda <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
  20fda8:	2002      	movs	r0, #2
  20fdaa:	e79a      	b.n	20fce2 <HAL_ADC_ConfigChannel+0xce>
  20fdac:	10000012 	.word	0x10000012
  20fdb0:	40012000 	.word	0x40012000
  20fdb4:	40012300 	.word	0x40012300
  20fdb8:	20000008 	.word	0x20000008
  20fdbc:	431bde83 	.word	0x431bde83

0020fdc0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
  20fdc0:	b470      	push	{r4, r5, r6}
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
  20fdc2:	694b      	ldr	r3, [r1, #20]
  20fdc4:	2201      	movs	r2, #1
  20fdc6:	409a      	lsls	r2, r3

  /* Initialisation mode for the filter */
  CAN1->FMR |= (uint32_t)CAN_FMR_FINIT;
  20fdc8:	4b41      	ldr	r3, [pc, #260]	; (20fed0 <HAL_CAN_ConfigFilter+0x110>)
  20fdca:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
  20fdce:	f040 0001 	orr.w	r0, r0, #1
  20fdd2:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= ~((uint32_t)CAN_FMR_CAN2SB);
  20fdd6:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
  20fdda:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
  20fdde:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(sFilterConfig->BankNumber << 8);
  20fde2:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
  20fde6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
  20fde8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
  20fdec:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
     
  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filternbrbitpos;
  20fdf0:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
  20fdf4:	43d0      	mvns	r0, r2
  20fdf6:	4004      	ands	r4, r0
  20fdf8:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
  20fdfc:	69cb      	ldr	r3, [r1, #28]
  20fdfe:	b9b3      	cbnz	r3, 20fe2e <HAL_CAN_ConfigFilter+0x6e>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filternbrbitpos;
  20fe00:	4b33      	ldr	r3, [pc, #204]	; (20fed0 <HAL_CAN_ConfigFilter+0x110>)
  20fe02:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
  20fe06:	4004      	ands	r4, r0
  20fe08:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
  20fe0c:	694c      	ldr	r4, [r1, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
  20fe0e:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
  20fe10:	888d      	ldrh	r5, [r1, #4]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
  20fe12:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
  20fe16:	3448      	adds	r4, #72	; 0x48
  20fe18:	f843 5034 	str.w	r5, [r3, r4, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
  20fe1c:	694d      	ldr	r5, [r1, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
  20fe1e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
  20fe20:	880c      	ldrh	r4, [r1, #0]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
  20fe22:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
  20fe26:	3548      	adds	r5, #72	; 0x48
  20fe28:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  20fe2c:	605c      	str	r4, [r3, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
  20fe2e:	69cb      	ldr	r3, [r1, #28]
  20fe30:	2b01      	cmp	r3, #1
  20fe32:	d020      	beq.n	20fe76 <HAL_CAN_ConfigFilter+0xb6>
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
  20fe34:	698b      	ldr	r3, [r1, #24]
  20fe36:	2b00      	cmp	r3, #0
  20fe38:	d135      	bne.n	20fea6 <HAL_CAN_ConfigFilter+0xe6>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filternbrbitpos;
  20fe3a:	4c25      	ldr	r4, [pc, #148]	; (20fed0 <HAL_CAN_ConfigFilter+0x110>)
  20fe3c:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
  20fe40:	4003      	ands	r3, r0
  20fe42:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filternbrbitpos;
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
  20fe46:	690b      	ldr	r3, [r1, #16]
  20fe48:	b92b      	cbnz	r3, 20fe56 <HAL_CAN_ConfigFilter+0x96>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filternbrbitpos;
  20fe4a:	4b21      	ldr	r3, [pc, #132]	; (20fed0 <HAL_CAN_ConfigFilter+0x110>)
  20fe4c:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
  20fe50:	4020      	ands	r0, r4
  20fe52:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }

  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO1)
  20fe56:	690b      	ldr	r3, [r1, #16]
  20fe58:	2b01      	cmp	r3, #1
  20fe5a:	d02b      	beq.n	20feb4 <HAL_CAN_ConfigFilter+0xf4>
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filternbrbitpos;
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
  20fe5c:	6a0b      	ldr	r3, [r1, #32]
  20fe5e:	2b01      	cmp	r3, #1
  20fe60:	d02f      	beq.n	20fec2 <HAL_CAN_ConfigFilter+0x102>
  {
    CAN1->FA1R |= filternbrbitpos;
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~((uint32_t)CAN_FMR_FINIT);
  20fe62:	4a1b      	ldr	r2, [pc, #108]	; (20fed0 <HAL_CAN_ConfigFilter+0x110>)
  20fe64:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
  20fe68:	f023 0301 	bic.w	r3, r3, #1
  20fe6c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
  20fe70:	2000      	movs	r0, #0
  20fe72:	bc70      	pop	{r4, r5, r6}
  20fe74:	4770      	bx	lr
    CAN1->FS1R |= filternbrbitpos;
  20fe76:	4b16      	ldr	r3, [pc, #88]	; (20fed0 <HAL_CAN_ConfigFilter+0x110>)
  20fe78:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
  20fe7c:	4314      	orrs	r4, r2
  20fe7e:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
  20fe82:	694c      	ldr	r4, [r1, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
  20fe84:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
  20fe86:	888d      	ldrh	r5, [r1, #4]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
  20fe88:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
  20fe8c:	3448      	adds	r4, #72	; 0x48
  20fe8e:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
  20fe92:	694d      	ldr	r5, [r1, #20]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
  20fe94:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
  20fe96:	898c      	ldrh	r4, [r1, #12]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
  20fe98:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
    CAN1->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
  20fe9c:	3548      	adds	r5, #72	; 0x48
  20fe9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  20fea2:	605c      	str	r4, [r3, #4]
  20fea4:	e7c6      	b.n	20fe34 <HAL_CAN_ConfigFilter+0x74>
    CAN1->FM1R |= (uint32_t)filternbrbitpos;
  20fea6:	4c0a      	ldr	r4, [pc, #40]	; (20fed0 <HAL_CAN_ConfigFilter+0x110>)
  20fea8:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
  20feac:	4313      	orrs	r3, r2
  20feae:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
  20feb2:	e7c8      	b.n	20fe46 <HAL_CAN_ConfigFilter+0x86>
    CAN1->FFA1R |= (uint32_t)filternbrbitpos;
  20feb4:	4806      	ldr	r0, [pc, #24]	; (20fed0 <HAL_CAN_ConfigFilter+0x110>)
  20feb6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
  20feba:	4313      	orrs	r3, r2
  20febc:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  20fec0:	e7cc      	b.n	20fe5c <HAL_CAN_ConfigFilter+0x9c>
    CAN1->FA1R |= filternbrbitpos;
  20fec2:	4b03      	ldr	r3, [pc, #12]	; (20fed0 <HAL_CAN_ConfigFilter+0x110>)
  20fec4:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
  20fec8:	430a      	orrs	r2, r1
  20feca:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  20fece:	e7c8      	b.n	20fe62 <HAL_CAN_ConfigFilter+0xa2>
  20fed0:	40006400 	.word	0x40006400

0020fed4 <HAL_CAN_Init>:
  if(hcan == NULL)
  20fed4:	2800      	cmp	r0, #0
  20fed6:	f000 809e 	beq.w	210016 <HAL_CAN_Init+0x142>
{
  20feda:	b538      	push	{r3, r4, r5, lr}
  20fedc:	4604      	mov	r4, r0
  if(hcan->State == HAL_CAN_STATE_RESET)
  20fede:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  20fee2:	b303      	cbz	r3, 20ff26 <HAL_CAN_Init+0x52>
  hcan->State = HAL_CAN_STATE_BUSY;
  20fee4:	2302      	movs	r3, #2
  20fee6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
  20feea:	6822      	ldr	r2, [r4, #0]
  20feec:	6813      	ldr	r3, [r2, #0]
  20feee:	f023 0302 	bic.w	r3, r3, #2
  20fef2:	6013      	str	r3, [r2, #0]
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
  20fef4:	6822      	ldr	r2, [r4, #0]
  20fef6:	6813      	ldr	r3, [r2, #0]
  20fef8:	f043 0301 	orr.w	r3, r3, #1
  20fefc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
  20fefe:	f7ff fcd1 	bl	20f8a4 <HAL_GetTick>
  20ff02:	4605      	mov	r5, r0
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
  20ff04:	6823      	ldr	r3, [r4, #0]
  20ff06:	685a      	ldr	r2, [r3, #4]
  20ff08:	f012 0f01 	tst.w	r2, #1
  20ff0c:	d110      	bne.n	20ff30 <HAL_CAN_Init+0x5c>
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
  20ff0e:	f7ff fcc9 	bl	20f8a4 <HAL_GetTick>
  20ff12:	1b40      	subs	r0, r0, r5
  20ff14:	280a      	cmp	r0, #10
  20ff16:	d9f5      	bls.n	20ff04 <HAL_CAN_Init+0x30>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
  20ff18:	2003      	movs	r0, #3
  20ff1a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
      __HAL_UNLOCK(hcan);
  20ff1e:	2300      	movs	r3, #0
  20ff20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      return HAL_TIMEOUT;
  20ff24:	bd38      	pop	{r3, r4, r5, pc}
    hcan->Lock = HAL_UNLOCKED;
  20ff26:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    HAL_CAN_MspInit(hcan);
  20ff2a:	f7fb fdd5 	bl	20bad8 <HAL_CAN_MspInit>
  20ff2e:	e7d9      	b.n	20fee4 <HAL_CAN_Init+0x10>
  if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
  20ff30:	685a      	ldr	r2, [r3, #4]
  20ff32:	f012 0f01 	tst.w	r2, #1
  20ff36:	d069      	beq.n	21000c <HAL_CAN_Init+0x138>
    if (hcan->Init.TTCM == ENABLE)
  20ff38:	69a2      	ldr	r2, [r4, #24]
  20ff3a:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_TTCM;
  20ff3c:	681a      	ldr	r2, [r3, #0]
  20ff3e:	bf0c      	ite	eq
  20ff40:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
  20ff44:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
  20ff48:	601a      	str	r2, [r3, #0]
    if (hcan->Init.ABOM == ENABLE)
  20ff4a:	69e3      	ldr	r3, [r4, #28]
  20ff4c:	2b01      	cmp	r3, #1
      hcan->Instance->MCR |= CAN_MCR_ABOM;
  20ff4e:	6822      	ldr	r2, [r4, #0]
  20ff50:	6813      	ldr	r3, [r2, #0]
  20ff52:	bf0c      	ite	eq
  20ff54:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
  20ff58:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
  20ff5c:	6013      	str	r3, [r2, #0]
    if (hcan->Init.AWUM == ENABLE)
  20ff5e:	6a23      	ldr	r3, [r4, #32]
  20ff60:	2b01      	cmp	r3, #1
      hcan->Instance->MCR |= CAN_MCR_AWUM;
  20ff62:	6822      	ldr	r2, [r4, #0]
  20ff64:	6813      	ldr	r3, [r2, #0]
  20ff66:	bf0c      	ite	eq
  20ff68:	f043 0320 	orreq.w	r3, r3, #32
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
  20ff6c:	f023 0320 	bicne.w	r3, r3, #32
  20ff70:	6013      	str	r3, [r2, #0]
    if (hcan->Init.NART == ENABLE)
  20ff72:	6a63      	ldr	r3, [r4, #36]	; 0x24
  20ff74:	2b01      	cmp	r3, #1
      hcan->Instance->MCR |= CAN_MCR_NART;
  20ff76:	6822      	ldr	r2, [r4, #0]
  20ff78:	6813      	ldr	r3, [r2, #0]
  20ff7a:	bf0c      	ite	eq
  20ff7c:	f043 0310 	orreq.w	r3, r3, #16
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
  20ff80:	f023 0310 	bicne.w	r3, r3, #16
  20ff84:	6013      	str	r3, [r2, #0]
    if (hcan->Init.RFLM == ENABLE)
  20ff86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  20ff88:	2b01      	cmp	r3, #1
      hcan->Instance->MCR |= CAN_MCR_RFLM;
  20ff8a:	6822      	ldr	r2, [r4, #0]
  20ff8c:	6813      	ldr	r3, [r2, #0]
  20ff8e:	bf0c      	ite	eq
  20ff90:	f043 0308 	orreq.w	r3, r3, #8
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
  20ff94:	f023 0308 	bicne.w	r3, r3, #8
  20ff98:	6013      	str	r3, [r2, #0]
    if (hcan->Init.TXFP == ENABLE)
  20ff9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  20ff9c:	2b01      	cmp	r3, #1
      hcan->Instance->MCR |= CAN_MCR_TXFP;
  20ff9e:	6822      	ldr	r2, [r4, #0]
  20ffa0:	6813      	ldr	r3, [r2, #0]
  20ffa2:	bf0c      	ite	eq
  20ffa4:	f043 0304 	orreq.w	r3, r3, #4
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
  20ffa8:	f023 0304 	bicne.w	r3, r3, #4
  20ffac:	6013      	str	r3, [r2, #0]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
  20ffae:	6821      	ldr	r1, [r4, #0]
  20ffb0:	68a3      	ldr	r3, [r4, #8]
  20ffb2:	68e2      	ldr	r2, [r4, #12]
  20ffb4:	4313      	orrs	r3, r2
                ((uint32_t)hcan->Init.SJW) | \
  20ffb6:	6922      	ldr	r2, [r4, #16]
  20ffb8:	4313      	orrs	r3, r2
                ((uint32_t)hcan->Init.BS1) | \
  20ffba:	6962      	ldr	r2, [r4, #20]
  20ffbc:	4313      	orrs	r3, r2
               ((uint32_t)hcan->Init.Prescaler - 1);
  20ffbe:	6862      	ldr	r2, [r4, #4]
  20ffc0:	3a01      	subs	r2, #1
                ((uint32_t)hcan->Init.BS2) | \
  20ffc2:	4313      	orrs	r3, r2
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
  20ffc4:	61cb      	str	r3, [r1, #28]
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
  20ffc6:	6822      	ldr	r2, [r4, #0]
  20ffc8:	6813      	ldr	r3, [r2, #0]
  20ffca:	f023 0301 	bic.w	r3, r3, #1
  20ffce:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
  20ffd0:	f7ff fc68 	bl	20f8a4 <HAL_GetTick>
  20ffd4:	4605      	mov	r5, r0
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
  20ffd6:	6823      	ldr	r3, [r4, #0]
  20ffd8:	685a      	ldr	r2, [r3, #4]
  20ffda:	f012 0f01 	tst.w	r2, #1
  20ffde:	d00b      	beq.n	20fff8 <HAL_CAN_Init+0x124>
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
  20ffe0:	f7ff fc60 	bl	20f8a4 <HAL_GetTick>
  20ffe4:	1b40      	subs	r0, r0, r5
  20ffe6:	280a      	cmp	r0, #10
  20ffe8:	d9f5      	bls.n	20ffd6 <HAL_CAN_Init+0x102>
       hcan->State= HAL_CAN_STATE_TIMEOUT;
  20ffea:	2003      	movs	r0, #3
  20ffec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
       __HAL_UNLOCK(hcan);
  20fff0:	2300      	movs	r3, #0
  20fff2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
       return HAL_TIMEOUT;
  20fff6:	bd38      	pop	{r3, r4, r5, pc}
    if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
  20fff8:	685b      	ldr	r3, [r3, #4]
  if(InitStatus == CAN_INITSTATUS_SUCCESS)
  20fffa:	f013 0f01 	tst.w	r3, #1
  20fffe:	d105      	bne.n	21000c <HAL_CAN_Init+0x138>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
  210000:	2000      	movs	r0, #0
  210002:	63e0      	str	r0, [r4, #60]	; 0x3c
    hcan->State = HAL_CAN_STATE_READY;
  210004:	2301      	movs	r3, #1
  210006:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
  21000a:	bd38      	pop	{r3, r4, r5, pc}
    hcan->State = HAL_CAN_STATE_ERROR;
  21000c:	2304      	movs	r3, #4
  21000e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
  210012:	2001      	movs	r0, #1
  210014:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
  210016:	2001      	movs	r0, #1
  210018:	4770      	bx	lr
	...

0021001c <HAL_CAN_Transmit>:
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  /* Process locked */
  __HAL_LOCK(hcan);
  21001c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  210020:	2b01      	cmp	r3, #1
  210022:	f000 80bb 	beq.w	21019c <HAL_CAN_Transmit+0x180>
{
  210026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(hcan);
  21002a:	2301      	movs	r3, #1
  21002c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
  210030:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  210034:	b2db      	uxtb	r3, r3
  210036:	2b22      	cmp	r3, #34	; 0x22
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
  210038:	bf0c      	ite	eq
  21003a:	2332      	moveq	r3, #50	; 0x32
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
  21003c:	2312      	movne	r3, #18
  21003e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  }
  
  /* Select one empty transmit mailbox */
  if ((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
  210042:	6803      	ldr	r3, [r0, #0]
  210044:	689a      	ldr	r2, [r3, #8]
  210046:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
  21004a:	f040 80a9 	bne.w	2101a0 <HAL_CAN_Transmit+0x184>
  {
    transmitmailbox = 0;
  }
  else if ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
  21004e:	689a      	ldr	r2, [r3, #8]
  210050:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
  210054:	f040 80c0 	bne.w	2101d8 <HAL_CAN_Transmit+0x1bc>
  {
    transmitmailbox = 1;
  }
  else if ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
  210058:	689a      	ldr	r2, [r3, #8]
  21005a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
  21005e:	f040 80bd 	bne.w	2101dc <HAL_CAN_Transmit+0x1c0>
    return HAL_OK;
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
  210062:	2304      	movs	r3, #4
  210064:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
  210068:	2300      	movs	r3, #0
  21006a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

    /* Return function status */
    return HAL_ERROR;
  21006e:	2001      	movs	r0, #1
  210070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  210074:	6804      	ldr	r4, [r0, #0]
  210076:	443c      	add	r4, r7
                                                  hcan->pTxMsg->RTR);
  210078:	f8d4 6180 	ldr.w	r6, [r4, #384]	; 0x180
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21) | \
  21007c:	f8d2 e000 	ldr.w	lr, [r2]
  210080:	68d3      	ldr	r3, [r2, #12]
  210082:	ea43 534e 	orr.w	r3, r3, lr, lsl #21
                                                  hcan->pTxMsg->RTR);
  210086:	4333      	orrs	r3, r6
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21) | \
  210088:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  21008c:	460e      	mov	r6, r1
  21008e:	4604      	mov	r4, r0
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
  210090:	6b02      	ldr	r2, [r0, #48]	; 0x30
  210092:	6913      	ldr	r3, [r2, #16]
  210094:	f003 030f 	and.w	r3, r3, #15
  210098:	6113      	str	r3, [r2, #16]
  21009a:	6803      	ldr	r3, [r0, #0]
  21009c:	443b      	add	r3, r7
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
  21009e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
  2100a2:	f022 020f 	bic.w	r2, r2, #15
  2100a6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  2100aa:	6803      	ldr	r3, [r0, #0]
  2100ac:	443b      	add	r3, r7
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
  2100ae:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
  2100b2:	6b01      	ldr	r1, [r0, #48]	; 0x30
  2100b4:	6909      	ldr	r1, [r1, #16]
  2100b6:	430a      	orrs	r2, r1
  2100b8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
  2100bc:	6802      	ldr	r2, [r0, #0]
  2100be:	6b01      	ldr	r1, [r0, #48]	; 0x30
  2100c0:	7dc8      	ldrb	r0, [r1, #23]
                                             ((uint32_t)hcan->pTxMsg->Data[2] << 16) |
  2100c2:	7d8b      	ldrb	r3, [r1, #22]
  2100c4:	041b      	lsls	r3, r3, #16
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
  2100c6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
                                             ((uint32_t)hcan->pTxMsg->Data[0]));
  2100ca:	7d08      	ldrb	r0, [r1, #20]
                                             ((uint32_t)hcan->pTxMsg->Data[1] << 8) | 
  2100cc:	4303      	orrs	r3, r0
  2100ce:	7d49      	ldrb	r1, [r1, #21]
  2100d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3] << 24) | 
  2100d4:	0128      	lsls	r0, r5, #4
  2100d6:	4402      	add	r2, r0
  2100d8:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
  2100dc:	6822      	ldr	r2, [r4, #0]
  2100de:	6b21      	ldr	r1, [r4, #48]	; 0x30
  2100e0:	f891 e01b 	ldrb.w	lr, [r1, #27]
                                             ((uint32_t)hcan->pTxMsg->Data[6] << 16) |
  2100e4:	7e8b      	ldrb	r3, [r1, #26]
  2100e6:	041b      	lsls	r3, r3, #16
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
  2100e8:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
                                             ((uint32_t)hcan->pTxMsg->Data[4]));
  2100ec:	f891 e018 	ldrb.w	lr, [r1, #24]
                                             ((uint32_t)hcan->pTxMsg->Data[5] << 8) |
  2100f0:	ea43 030e 	orr.w	r3, r3, lr
  2100f4:	7e49      	ldrb	r1, [r1, #25]
  2100f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7] << 24) | 
  2100fa:	4402      	add	r2, r0
  2100fc:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
  210100:	6823      	ldr	r3, [r4, #0]
  210102:	441f      	add	r7, r3
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
  210104:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
  210108:	f043 0301 	orr.w	r3, r3, #1
  21010c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  tickstart = HAL_GetTick();
  210110:	f7ff fbc8 	bl	20f8a4 <HAL_GetTick>
  210114:	4682      	mov	sl, r0
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
  210116:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 2101e4 <HAL_CAN_Transmit+0x1c8>
  21011a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 2101e8 <HAL_CAN_Transmit+0x1cc>
  21011e:	4f30      	ldr	r7, [pc, #192]	; (2101e0 <HAL_CAN_Transmit+0x1c4>)
  210120:	e00c      	b.n	21013c <HAL_CAN_Transmit+0x120>
  210122:	2d01      	cmp	r5, #1
  210124:	d014      	beq.n	210150 <HAL_CAN_Transmit+0x134>
  210126:	6823      	ldr	r3, [r4, #0]
  210128:	689b      	ldr	r3, [r3, #8]
  21012a:	ea38 0303 	bics.w	r3, r8, r3
  21012e:	bf14      	ite	ne
  210130:	2301      	movne	r3, #1
  210132:	2300      	moveq	r3, #0
  210134:	b323      	cbz	r3, 210180 <HAL_CAN_Transmit+0x164>
      if(Timeout != HAL_MAX_DELAY)
  210136:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
  21013a:	d111      	bne.n	210160 <HAL_CAN_Transmit+0x144>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
  21013c:	2d00      	cmp	r5, #0
  21013e:	d1f0      	bne.n	210122 <HAL_CAN_Transmit+0x106>
  210140:	6823      	ldr	r3, [r4, #0]
  210142:	689b      	ldr	r3, [r3, #8]
  210144:	ea37 0303 	bics.w	r3, r7, r3
  210148:	bf14      	ite	ne
  21014a:	2301      	movne	r3, #1
  21014c:	2300      	moveq	r3, #0
  21014e:	e7f1      	b.n	210134 <HAL_CAN_Transmit+0x118>
  210150:	6823      	ldr	r3, [r4, #0]
  210152:	689b      	ldr	r3, [r3, #8]
  210154:	ea39 0303 	bics.w	r3, r9, r3
  210158:	bf14      	ite	ne
  21015a:	2301      	movne	r3, #1
  21015c:	2300      	moveq	r3, #0
  21015e:	e7e9      	b.n	210134 <HAL_CAN_Transmit+0x118>
       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  210160:	b93e      	cbnz	r6, 210172 <HAL_CAN_Transmit+0x156>
         hcan->State = HAL_CAN_STATE_TIMEOUT;
  210162:	2003      	movs	r0, #3
  210164:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
         __HAL_UNLOCK(hcan);
  210168:	2300      	movs	r3, #0
  21016a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
         return HAL_TIMEOUT;
  21016e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
       if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  210172:	f7ff fb97 	bl	20f8a4 <HAL_GetTick>
  210176:	eba0 000a 	sub.w	r0, r0, sl
  21017a:	4286      	cmp	r6, r0
  21017c:	d2de      	bcs.n	21013c <HAL_CAN_Transmit+0x120>
  21017e:	e7f0      	b.n	210162 <HAL_CAN_Transmit+0x146>
    if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
  210180:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  210184:	b2db      	uxtb	r3, r3
  210186:	2b32      	cmp	r3, #50	; 0x32
      hcan->State = HAL_CAN_STATE_BUSY_RX;
  210188:	bf0c      	ite	eq
  21018a:	2322      	moveq	r3, #34	; 0x22
      hcan->State = HAL_CAN_STATE_READY;
  21018c:	2301      	movne	r3, #1
  21018e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      __HAL_UNLOCK(hcan);
  210192:	2000      	movs	r0, #0
  210194:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  210198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hcan);
  21019c:	2002      	movs	r0, #2
  21019e:	4770      	bx	lr
    transmitmailbox = 0;
  2101a0:	2500      	movs	r5, #0
  2101a2:	012f      	lsls	r7, r5, #4
  2101a4:	443b      	add	r3, r7
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
  2101a6:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
  2101aa:	f002 0201 	and.w	r2, r2, #1
  2101ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
  2101b2:	6b02      	ldr	r2, [r0, #48]	; 0x30
  2101b4:	6893      	ldr	r3, [r2, #8]
  2101b6:	2b00      	cmp	r3, #0
  2101b8:	f43f af5c 	beq.w	210074 <HAL_CAN_Transmit+0x58>
  2101bc:	6804      	ldr	r4, [r0, #0]
  2101be:	443c      	add	r4, r7
                                                  hcan->pTxMsg->RTR);
  2101c0:	f8d4 e180 	ldr.w	lr, [r4, #384]	; 0x180
                                                  hcan->pTxMsg->IDE | \
  2101c4:	68d6      	ldr	r6, [r2, #12]
  2101c6:	4333      	orrs	r3, r6
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
  2101c8:	6852      	ldr	r2, [r2, #4]
                                                  hcan->pTxMsg->IDE | \
  2101ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
                                                  hcan->pTxMsg->RTR);
  2101ce:	ea43 030e 	orr.w	r3, r3, lr
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3) | \
  2101d2:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
  2101d6:	e759      	b.n	21008c <HAL_CAN_Transmit+0x70>
    transmitmailbox = 1;
  2101d8:	2501      	movs	r5, #1
  2101da:	e7e2      	b.n	2101a2 <HAL_CAN_Transmit+0x186>
    transmitmailbox = 2;
  2101dc:	2502      	movs	r5, #2
  2101de:	e7e0      	b.n	2101a2 <HAL_CAN_Transmit+0x186>
  2101e0:	04000003 	.word	0x04000003
  2101e4:	10030000 	.word	0x10030000
  2101e8:	08000300 	.word	0x08000300

002101ec <HAL_CAN_Receive_IT>:
  uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  tmp = hcan->State;
  2101ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  2101f0:	b2db      	uxtb	r3, r3
  if((tmp == HAL_CAN_STATE_READY) || (tmp == HAL_CAN_STATE_BUSY_TX))
  2101f2:	2b01      	cmp	r3, #1
  2101f4:	d003      	beq.n	2101fe <HAL_CAN_Receive_IT+0x12>
  2101f6:	2b12      	cmp	r3, #18
  2101f8:	d001      	beq.n	2101fe <HAL_CAN_Receive_IT+0x12>
    }
    
  }
  else
  {
    return HAL_BUSY;
  2101fa:	2002      	movs	r0, #2
  2101fc:	4770      	bx	lr
    __HAL_LOCK(hcan);
  2101fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  210202:	2b01      	cmp	r3, #1
  210204:	d03a      	beq.n	21027c <HAL_CAN_Receive_IT+0x90>
{
  210206:	b410      	push	{r4}
    __HAL_LOCK(hcan);
  210208:	2301      	movs	r3, #1
  21020a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
  21020e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  210212:	b2db      	uxtb	r3, r3
  210214:	2b12      	cmp	r3, #18
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
  210216:	bf0c      	ite	eq
  210218:	2332      	moveq	r3, #50	; 0x32
      hcan->State = HAL_CAN_STATE_BUSY_RX;
  21021a:	2322      	movne	r3, #34	; 0x22
  21021c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
  210220:	2200      	movs	r2, #0
  210222:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG);
  210224:	6804      	ldr	r4, [r0, #0]
  210226:	6963      	ldr	r3, [r4, #20]
  210228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  21022c:	6163      	str	r3, [r4, #20]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EPV);
  21022e:	6804      	ldr	r4, [r0, #0]
  210230:	6963      	ldr	r3, [r4, #20]
  210232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  210236:	6163      	str	r3, [r4, #20]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_BOF);
  210238:	6804      	ldr	r4, [r0, #0]
  21023a:	6963      	ldr	r3, [r4, #20]
  21023c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  210240:	6163      	str	r3, [r4, #20]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_LEC);
  210242:	6804      	ldr	r4, [r0, #0]
  210244:	6963      	ldr	r3, [r4, #20]
  210246:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  21024a:	6163      	str	r3, [r4, #20]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_ERR);
  21024c:	6804      	ldr	r4, [r0, #0]
  21024e:	6963      	ldr	r3, [r4, #20]
  210250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  210254:	6163      	str	r3, [r4, #20]
    __HAL_UNLOCK(hcan);
  210256:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    if(FIFONumber == CAN_FIFO0)
  21025a:	b141      	cbz	r1, 21026e <HAL_CAN_Receive_IT+0x82>
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
  21025c:	6802      	ldr	r2, [r0, #0]
  21025e:	6953      	ldr	r3, [r2, #20]
  210260:	f043 0310 	orr.w	r3, r3, #16
  210264:	6153      	str	r3, [r2, #20]
  }
  
  /* Return function status */
  return HAL_OK;
  210266:	2000      	movs	r0, #0
}
  210268:	f85d 4b04 	ldr.w	r4, [sp], #4
  21026c:	4770      	bx	lr
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
  21026e:	6802      	ldr	r2, [r0, #0]
  210270:	6953      	ldr	r3, [r2, #20]
  210272:	f043 0302 	orr.w	r3, r3, #2
  210276:	6153      	str	r3, [r2, #20]
  return HAL_OK;
  210278:	2000      	movs	r0, #0
  21027a:	e7f5      	b.n	210268 <HAL_CAN_Receive_IT+0x7c>
    __HAL_LOCK(hcan);
  21027c:	2002      	movs	r0, #2
  21027e:	4770      	bx	lr

00210280 <HAL_CAN_TxCpltCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
  210280:	4770      	bx	lr

00210282 <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
  210282:	b510      	push	{r4, lr}
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
  210284:	6b42      	ldr	r2, [r0, #52]	; 0x34
  210286:	6804      	ldr	r4, [r0, #0]
  210288:	f101 031b 	add.w	r3, r1, #27
  21028c:	011b      	lsls	r3, r3, #4
  21028e:	58e3      	ldr	r3, [r4, r3]
  210290:	f003 0304 	and.w	r3, r3, #4
  210294:	6093      	str	r3, [r2, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
  210296:	6b43      	ldr	r3, [r0, #52]	; 0x34
  210298:	689a      	ldr	r2, [r3, #8]
  21029a:	2a00      	cmp	r2, #0
  21029c:	d16f      	bne.n	21037e <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0xfc>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
  21029e:	6804      	ldr	r4, [r0, #0]
  2102a0:	f101 021b 	add.w	r2, r1, #27
  2102a4:	0112      	lsls	r2, r2, #4
  2102a6:	58a2      	ldr	r2, [r4, r2]
  2102a8:	0d52      	lsrs	r2, r2, #21
  2102aa:	601a      	str	r2, [r3, #0]
  else
  {
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
  }
  
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
  2102ac:	6b44      	ldr	r4, [r0, #52]	; 0x34
  2102ae:	6802      	ldr	r2, [r0, #0]
  2102b0:	f101 031b 	add.w	r3, r1, #27
  2102b4:	011b      	lsls	r3, r3, #4
  2102b6:	58d2      	ldr	r2, [r2, r3]
  2102b8:	f002 0202 	and.w	r2, r2, #2
  2102bc:	60e2      	str	r2, [r4, #12]
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
  2102be:	6b44      	ldr	r4, [r0, #52]	; 0x34
  2102c0:	6802      	ldr	r2, [r0, #0]
  2102c2:	441a      	add	r2, r3
  2102c4:	6852      	ldr	r2, [r2, #4]
  2102c6:	f002 020f 	and.w	r2, r2, #15
  2102ca:	6122      	str	r2, [r4, #16]
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
  2102cc:	6b44      	ldr	r4, [r0, #52]	; 0x34
  2102ce:	6802      	ldr	r2, [r0, #0]
  2102d0:	4413      	add	r3, r2
  2102d2:	685b      	ldr	r3, [r3, #4]
  2102d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
  2102d8:	61e3      	str	r3, [r4, #28]
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
  2102da:	6b44      	ldr	r4, [r0, #52]	; 0x34
  2102dc:	6802      	ldr	r2, [r0, #0]
  2102de:	010b      	lsls	r3, r1, #4
  2102e0:	441a      	add	r2, r3
  2102e2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
  2102e6:	7522      	strb	r2, [r4, #20]
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
  2102e8:	6b44      	ldr	r4, [r0, #52]	; 0x34
  2102ea:	6802      	ldr	r2, [r0, #0]
  2102ec:	441a      	add	r2, r3
  2102ee:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
  2102f2:	0a12      	lsrs	r2, r2, #8
  2102f4:	7562      	strb	r2, [r4, #21]
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
  2102f6:	6b44      	ldr	r4, [r0, #52]	; 0x34
  2102f8:	6802      	ldr	r2, [r0, #0]
  2102fa:	441a      	add	r2, r3
  2102fc:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
  210300:	0c12      	lsrs	r2, r2, #16
  210302:	75a2      	strb	r2, [r4, #22]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
  210304:	6b44      	ldr	r4, [r0, #52]	; 0x34
  210306:	6802      	ldr	r2, [r0, #0]
  210308:	441a      	add	r2, r3
  21030a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
  21030e:	0e12      	lsrs	r2, r2, #24
  210310:	75e2      	strb	r2, [r4, #23]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
  210312:	6b44      	ldr	r4, [r0, #52]	; 0x34
  210314:	6802      	ldr	r2, [r0, #0]
  210316:	441a      	add	r2, r3
  210318:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
  21031c:	7622      	strb	r2, [r4, #24]
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
  21031e:	6b44      	ldr	r4, [r0, #52]	; 0x34
  210320:	6802      	ldr	r2, [r0, #0]
  210322:	441a      	add	r2, r3
  210324:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
  210328:	0a12      	lsrs	r2, r2, #8
  21032a:	7662      	strb	r2, [r4, #25]
  hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
  21032c:	6b44      	ldr	r4, [r0, #52]	; 0x34
  21032e:	6802      	ldr	r2, [r0, #0]
  210330:	441a      	add	r2, r3
  210332:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
  210336:	0c12      	lsrs	r2, r2, #16
  210338:	76a2      	strb	r2, [r4, #26]
  hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
  21033a:	6b44      	ldr	r4, [r0, #52]	; 0x34
  21033c:	6802      	ldr	r2, [r0, #0]
  21033e:	4413      	add	r3, r2
  210340:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
  210344:	0e1b      	lsrs	r3, r3, #24
  210346:	76e3      	strb	r3, [r4, #27]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
  210348:	bb09      	cbnz	r1, 21038e <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0x10c>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
  21034a:	6803      	ldr	r3, [r0, #0]
  21034c:	2220      	movs	r2, #32
  21034e:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
  210350:	6802      	ldr	r2, [r0, #0]
  210352:	6953      	ldr	r3, [r2, #20]
  210354:	f023 0302 	bic.w	r3, r3, #2
  210358:	6153      	str	r3, [r2, #20]
    
    /* Disable FIFO 1 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
  21035a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  21035e:	b2db      	uxtb	r3, r3
  210360:	2b22      	cmp	r3, #34	; 0x22
  210362:	d01d      	beq.n	2103a0 <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0x11e>
    
    /* Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_ERR);
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
  210364:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  210368:	b2db      	uxtb	r3, r3
  21036a:	2b32      	cmp	r3, #50	; 0x32
  {
    /* Disable CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
  21036c:	bf0c      	ite	eq
  21036e:	2312      	moveq	r3, #18
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
  210370:	2301      	movne	r3, #1
  210372:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
  210376:	f7f6 fd73 	bl	206e60 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
  21037a:	2000      	movs	r0, #0
  21037c:	bd10      	pop	{r4, pc}
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
  21037e:	6804      	ldr	r4, [r0, #0]
  210380:	f101 021b 	add.w	r2, r1, #27
  210384:	0112      	lsls	r2, r2, #4
  210386:	58a2      	ldr	r2, [r4, r2]
  210388:	08d2      	lsrs	r2, r2, #3
  21038a:	605a      	str	r2, [r3, #4]
  21038c:	e78e      	b.n	2102ac <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0x2a>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
  21038e:	6803      	ldr	r3, [r0, #0]
  210390:	2220      	movs	r2, #32
  210392:	611a      	str	r2, [r3, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
  210394:	6802      	ldr	r2, [r0, #0]
  210396:	6953      	ldr	r3, [r2, #20]
  210398:	f023 0310 	bic.w	r3, r3, #16
  21039c:	6153      	str	r3, [r2, #20]
  21039e:	e7dc      	b.n	21035a <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0xd8>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG);
  2103a0:	6802      	ldr	r2, [r0, #0]
  2103a2:	6953      	ldr	r3, [r2, #20]
  2103a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  2103a8:	6153      	str	r3, [r2, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EPV);
  2103aa:	6802      	ldr	r2, [r0, #0]
  2103ac:	6953      	ldr	r3, [r2, #20]
  2103ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  2103b2:	6153      	str	r3, [r2, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_BOF);
  2103b4:	6802      	ldr	r2, [r0, #0]
  2103b6:	6953      	ldr	r3, [r2, #20]
  2103b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  2103bc:	6153      	str	r3, [r2, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_LEC);
  2103be:	6802      	ldr	r2, [r0, #0]
  2103c0:	6953      	ldr	r3, [r2, #20]
  2103c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  2103c6:	6153      	str	r3, [r2, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_ERR);
  2103c8:	6802      	ldr	r2, [r0, #0]
  2103ca:	6953      	ldr	r3, [r2, #20]
  2103cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  2103d0:	6153      	str	r3, [r2, #20]
  2103d2:	e7c7      	b.n	210364 <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0xe2>

002103d4 <HAL_CAN_ErrorCallback>:
{
  2103d4:	4770      	bx	lr
	...

002103d8 <HAL_CAN_IRQHandler>:
{
  2103d8:	b538      	push	{r3, r4, r5, lr}
  2103da:	4604      	mov	r4, r0
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
  2103dc:	6803      	ldr	r3, [r0, #0]
  2103de:	695a      	ldr	r2, [r3, #20]
  2103e0:	f012 0f01 	tst.w	r2, #1
  2103e4:	d011      	beq.n	21040a <HAL_CAN_IRQHandler+0x32>
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
  2103e6:	6899      	ldr	r1, [r3, #8]
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
  2103e8:	6898      	ldr	r0, [r3, #8]
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
  2103ea:	689d      	ldr	r5, [r3, #8]
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
  2103ec:	4a68      	ldr	r2, [pc, #416]	; (210590 <HAL_CAN_IRQHandler+0x1b8>)
  2103ee:	438a      	bics	r2, r1
  2103f0:	bf0c      	ite	eq
  2103f2:	2201      	moveq	r2, #1
  2103f4:	2200      	movne	r2, #0
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
  2103f6:	4967      	ldr	r1, [pc, #412]	; (210594 <HAL_CAN_IRQHandler+0x1bc>)
  2103f8:	4381      	bics	r1, r0
    if(tmp1 || tmp2 || tmp3)  
  2103fa:	bf08      	it	eq
  2103fc:	f042 0201 	orreq.w	r2, r2, #1
  210400:	2a00      	cmp	r2, #0
  210402:	d15e      	bne.n	2104c2 <HAL_CAN_IRQHandler+0xea>
  210404:	4a64      	ldr	r2, [pc, #400]	; (210598 <HAL_CAN_IRQHandler+0x1c0>)
  210406:	43aa      	bics	r2, r5
  210408:	d05b      	beq.n	2104c2 <HAL_CAN_IRQHandler+0xea>
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
  21040a:	6823      	ldr	r3, [r4, #0]
  21040c:	68da      	ldr	r2, [r3, #12]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
  21040e:	695b      	ldr	r3, [r3, #20]
  if((tmp1 != 0) && tmp2)
  210410:	f012 0f03 	tst.w	r2, #3
  210414:	d003      	beq.n	21041e <HAL_CAN_IRQHandler+0x46>
  210416:	f013 0f02 	tst.w	r3, #2
  21041a:	f040 8082 	bne.w	210522 <HAL_CAN_IRQHandler+0x14a>
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
  21041e:	6823      	ldr	r3, [r4, #0]
  210420:	691a      	ldr	r2, [r3, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
  210422:	695b      	ldr	r3, [r3, #20]
  if((tmp1 != 0) && tmp2)
  210424:	f012 0f03 	tst.w	r2, #3
  210428:	d002      	beq.n	210430 <HAL_CAN_IRQHandler+0x58>
  21042a:	f013 0f10 	tst.w	r3, #16
  21042e:	d17d      	bne.n	21052c <HAL_CAN_IRQHandler+0x154>
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
  210430:	6823      	ldr	r3, [r4, #0]
  210432:	6999      	ldr	r1, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
  210434:	695a      	ldr	r2, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
  210436:	6958      	ldr	r0, [r3, #20]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
  210438:	f3c2 2200 	ubfx	r2, r2, #8, #1
  if(tmp1 && tmp2 && tmp3)
  21043c:	4211      	tst	r1, r2
  21043e:	d006      	beq.n	21044e <HAL_CAN_IRQHandler+0x76>
  210440:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  210444:	d003      	beq.n	21044e <HAL_CAN_IRQHandler+0x76>
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
  210446:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  210448:	f042 0201 	orr.w	r2, r2, #1
  21044c:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
  21044e:	6999      	ldr	r1, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
  210450:	695a      	ldr	r2, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
  210452:	6958      	ldr	r0, [r3, #20]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
  210454:	f3c2 2240 	ubfx	r2, r2, #9, #1
  if(tmp1 && tmp2 && tmp3)
  210458:	ea12 0251 	ands.w	r2, r2, r1, lsr #1
  21045c:	d006      	beq.n	21046c <HAL_CAN_IRQHandler+0x94>
  21045e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  210462:	d003      	beq.n	21046c <HAL_CAN_IRQHandler+0x94>
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
  210464:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  210466:	f042 0202 	orr.w	r2, r2, #2
  21046a:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
  21046c:	6999      	ldr	r1, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
  21046e:	695a      	ldr	r2, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
  210470:	6958      	ldr	r0, [r3, #20]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
  210472:	f3c2 2280 	ubfx	r2, r2, #10, #1
  if(tmp1 && tmp2 && tmp3)
  210476:	ea12 0291 	ands.w	r2, r2, r1, lsr #2
  21047a:	d006      	beq.n	21048a <HAL_CAN_IRQHandler+0xb2>
  21047c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  210480:	d003      	beq.n	21048a <HAL_CAN_IRQHandler+0xb2>
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
  210482:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  210484:	f042 0204 	orr.w	r2, r2, #4
  210488:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
  21048a:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
  21048c:	695a      	ldr	r2, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
  21048e:	6959      	ldr	r1, [r3, #20]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
  210490:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  if((!tmp1) && tmp2 && tmp3)
  210494:	ea12 32d1 	ands.w	r2, r2, r1, lsr #15
  210498:	d05e      	beq.n	210558 <HAL_CAN_IRQHandler+0x180>
  21049a:	f010 0f70 	tst.w	r0, #112	; 0x70
  21049e:	d05b      	beq.n	210558 <HAL_CAN_IRQHandler+0x180>
    tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
  2104a0:	699a      	ldr	r2, [r3, #24]
  2104a2:	f002 0270 	and.w	r2, r2, #112	; 0x70
    switch(tmp1)
  2104a6:	2a30      	cmp	r2, #48	; 0x30
  2104a8:	d059      	beq.n	21055e <HAL_CAN_IRQHandler+0x186>
  2104aa:	d944      	bls.n	210536 <HAL_CAN_IRQHandler+0x15e>
  2104ac:	2a50      	cmp	r2, #80	; 0x50
  2104ae:	d05b      	beq.n	210568 <HAL_CAN_IRQHandler+0x190>
  2104b0:	2a60      	cmp	r2, #96	; 0x60
  2104b2:	d05e      	beq.n	210572 <HAL_CAN_IRQHandler+0x19a>
  2104b4:	2a40      	cmp	r2, #64	; 0x40
  2104b6:	d14b      	bne.n	210550 <HAL_CAN_IRQHandler+0x178>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
  2104b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  2104ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  2104be:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
  2104c0:	e046      	b.n	210550 <HAL_CAN_IRQHandler+0x178>
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
  2104c2:	695a      	ldr	r2, [r3, #20]
  2104c4:	f022 0201 	bic.w	r2, r2, #1
  2104c8:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
  2104ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  2104ce:	b2db      	uxtb	r3, r3
  2104d0:	2b12      	cmp	r3, #18
  2104d2:	d00c      	beq.n	2104ee <HAL_CAN_IRQHandler+0x116>
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
  2104d4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  2104d8:	b2db      	uxtb	r3, r3
  2104da:	2b32      	cmp	r3, #50	; 0x32
    hcan->State = HAL_CAN_STATE_BUSY_RX;
  2104dc:	bf0c      	ite	eq
  2104de:	2322      	moveq	r3, #34	; 0x22
    hcan->State = HAL_CAN_STATE_READY;
  2104e0:	2301      	movne	r3, #1
  2104e2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  HAL_CAN_TxCpltCallback(hcan);
  2104e6:	4620      	mov	r0, r4
  2104e8:	f7ff feca 	bl	210280 <HAL_CAN_TxCpltCallback>
  2104ec:	e78d      	b.n	21040a <HAL_CAN_IRQHandler+0x32>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG);
  2104ee:	6822      	ldr	r2, [r4, #0]
  2104f0:	6953      	ldr	r3, [r2, #20]
  2104f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  2104f6:	6153      	str	r3, [r2, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EPV);
  2104f8:	6822      	ldr	r2, [r4, #0]
  2104fa:	6953      	ldr	r3, [r2, #20]
  2104fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  210500:	6153      	str	r3, [r2, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_BOF);
  210502:	6822      	ldr	r2, [r4, #0]
  210504:	6953      	ldr	r3, [r2, #20]
  210506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  21050a:	6153      	str	r3, [r2, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_LEC);
  21050c:	6822      	ldr	r2, [r4, #0]
  21050e:	6953      	ldr	r3, [r2, #20]
  210510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  210514:	6153      	str	r3, [r2, #20]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_ERR);
  210516:	6822      	ldr	r2, [r4, #0]
  210518:	6953      	ldr	r3, [r2, #20]
  21051a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  21051e:	6153      	str	r3, [r2, #20]
  210520:	e7d8      	b.n	2104d4 <HAL_CAN_IRQHandler+0xfc>
    CAN_Receive_IT(hcan, CAN_FIFO0);
  210522:	2100      	movs	r1, #0
  210524:	4620      	mov	r0, r4
  210526:	f7ff feac 	bl	210282 <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh>
  21052a:	e778      	b.n	21041e <HAL_CAN_IRQHandler+0x46>
    CAN_Receive_IT(hcan, CAN_FIFO1);
  21052c:	2101      	movs	r1, #1
  21052e:	4620      	mov	r0, r4
  210530:	f7ff fea7 	bl	210282 <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh>
  210534:	e77c      	b.n	210430 <HAL_CAN_IRQHandler+0x58>
    switch(tmp1)
  210536:	2a10      	cmp	r2, #16
  210538:	d006      	beq.n	210548 <HAL_CAN_IRQHandler+0x170>
  21053a:	2a20      	cmp	r2, #32
  21053c:	d108      	bne.n	210550 <HAL_CAN_IRQHandler+0x178>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
  21053e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  210540:	f042 0210 	orr.w	r2, r2, #16
  210544:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
  210546:	e003      	b.n	210550 <HAL_CAN_IRQHandler+0x178>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
  210548:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  21054a:	f042 0208 	orr.w	r2, r2, #8
  21054e:	63e2      	str	r2, [r4, #60]	; 0x3c
    hcan->Instance->ESR &= ~(CAN_ESR_LEC);
  210550:	699a      	ldr	r2, [r3, #24]
  210552:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  210556:	619a      	str	r2, [r3, #24]
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
  210558:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  21055a:	b97b      	cbnz	r3, 21057c <HAL_CAN_IRQHandler+0x1a4>
  21055c:	bd38      	pop	{r3, r4, r5, pc}
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
  21055e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  210560:	f042 0220 	orr.w	r2, r2, #32
  210564:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
  210566:	e7f3      	b.n	210550 <HAL_CAN_IRQHandler+0x178>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
  210568:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  21056a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  21056e:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
  210570:	e7ee      	b.n	210550 <HAL_CAN_IRQHandler+0x178>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
  210572:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  210574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  210578:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
  21057a:	e7e9      	b.n	210550 <HAL_CAN_IRQHandler+0x178>
    hcan->Instance->MSR = CAN_MSR_ERRI; 
  21057c:	6823      	ldr	r3, [r4, #0]
  21057e:	2204      	movs	r2, #4
  210580:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
  210582:	2301      	movs	r3, #1
  210584:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_CAN_ErrorCallback(hcan);
  210588:	4620      	mov	r0, r4
  21058a:	f7ff ff23 	bl	2103d4 <HAL_CAN_ErrorCallback>
}
  21058e:	e7e5      	b.n	21055c <HAL_CAN_IRQHandler+0x184>
  210590:	04000003 	.word	0x04000003
  210594:	08000300 	.word	0x08000300
  210598:	10030000 	.word	0x10030000

0021059c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  21059c:	4906      	ldr	r1, [pc, #24]	; (2105b8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  21059e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  2105a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  2105a4:	0412      	lsls	r2, r2, #16
  2105a6:	0c12      	lsrs	r2, r2, #16
  2105a8:	4b04      	ldr	r3, [pc, #16]	; (2105bc <HAL_NVIC_SetPriorityGrouping+0x20>)
  2105aa:	4313      	orrs	r3, r2
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  2105ac:	0200      	lsls	r0, r0, #8
  2105ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
  2105b2:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
  2105b4:	60c8      	str	r0, [r1, #12]
  2105b6:	4770      	bx	lr
  2105b8:	e000ed00 	.word	0xe000ed00
  2105bc:	05fa0000 	.word	0x05fa0000

002105c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  2105c0:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
  2105c2:	4b13      	ldr	r3, [pc, #76]	; (210610 <HAL_NVIC_SetPriority+0x50>)
  2105c4:	68dc      	ldr	r4, [r3, #12]
  2105c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  2105ca:	f1c4 0307 	rsb	r3, r4, #7
  2105ce:	2b04      	cmp	r3, #4
  2105d0:	bf28      	it	cs
  2105d2:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
  2105d4:	1d25      	adds	r5, r4, #4
  2105d6:	2d06      	cmp	r5, #6
  2105d8:	bf8c      	ite	hi
  2105da:	1ee5      	subhi	r5, r4, #3
  2105dc:	2500      	movls	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
  2105de:	2401      	movs	r4, #1
  2105e0:	fa04 f303 	lsl.w	r3, r4, r3
  2105e4:	3b01      	subs	r3, #1
  2105e6:	4019      	ands	r1, r3
  2105e8:	40a9      	lsls	r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
  2105ea:	40ac      	lsls	r4, r5
  2105ec:	3c01      	subs	r4, #1
  2105ee:	4022      	ands	r2, r4
         );
  2105f0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) < 0)
  2105f2:	2800      	cmp	r0, #0
  2105f4:	db05      	blt.n	210602 <HAL_NVIC_SetPriority+0x42>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  2105f6:	0109      	lsls	r1, r1, #4
  2105f8:	b2c9      	uxtb	r1, r1
  2105fa:	4b06      	ldr	r3, [pc, #24]	; (210614 <HAL_NVIC_SetPriority+0x54>)
  2105fc:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
  2105fe:	bc30      	pop	{r4, r5}
  210600:	4770      	bx	lr
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  210602:	f000 000f 	and.w	r0, r0, #15
  210606:	0109      	lsls	r1, r1, #4
  210608:	b2c9      	uxtb	r1, r1
  21060a:	4b03      	ldr	r3, [pc, #12]	; (210618 <HAL_NVIC_SetPriority+0x58>)
  21060c:	5419      	strb	r1, [r3, r0]
  21060e:	e7f6      	b.n	2105fe <HAL_NVIC_SetPriority+0x3e>
  210610:	e000ed00 	.word	0xe000ed00
  210614:	e000e400 	.word	0xe000e400
  210618:	e000ed14 	.word	0xe000ed14

0021061c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  21061c:	0942      	lsrs	r2, r0, #5
  21061e:	f000 001f 	and.w	r0, r0, #31
  210622:	2301      	movs	r3, #1
  210624:	fa03 f000 	lsl.w	r0, r3, r0
  210628:	4b01      	ldr	r3, [pc, #4]	; (210630 <HAL_NVIC_EnableIRQ+0x14>)
  21062a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  21062e:	4770      	bx	lr
  210630:	e000e100 	.word	0xe000e100

00210634 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  210634:	3801      	subs	r0, #1
  210636:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  21063a:	d20a      	bcs.n	210652 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  21063c:	4b06      	ldr	r3, [pc, #24]	; (210658 <HAL_SYSTICK_Config+0x24>)
  21063e:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  210640:	21f0      	movs	r1, #240	; 0xf0
  210642:	4a06      	ldr	r2, [pc, #24]	; (21065c <HAL_SYSTICK_Config+0x28>)
  210644:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  210648:	2000      	movs	r0, #0
  21064a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  21064c:	2207      	movs	r2, #7
  21064e:	601a      	str	r2, [r3, #0]
  210650:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
  210652:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
  210654:	4770      	bx	lr
  210656:	bf00      	nop
  210658:	e000e010 	.word	0xe000e010
  21065c:	e000ed00 	.word	0xe000ed00

00210660 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  210660:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  210662:	4a04      	ldr	r2, [pc, #16]	; (210674 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  210664:	6813      	ldr	r3, [r2, #0]
  210666:	bf0c      	ite	eq
  210668:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  21066c:	f023 0304 	bicne.w	r3, r3, #4
  210670:	6013      	str	r3, [r2, #0]
  210672:	4770      	bx	lr
  210674:	e000e010 	.word	0xe000e010

00210678 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
  210678:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
  21067a:	f7fd f97b 	bl	20d974 <HAL_SYSTICK_Callback>
  21067e:	bd08      	pop	{r3, pc}

00210680 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFF) - 16) / 24;
  210680:	6802      	ldr	r2, [r0, #0]
  210682:	b2d3      	uxtb	r3, r2
  210684:	3b10      	subs	r3, #16
  210686:	4908      	ldr	r1, [pc, #32]	; (2106a8 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x28>)
  210688:	fba1 1303 	umull	r1, r3, r1, r3
  21068c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8] = {0, 6, 16, 22, 0, 6, 16, 22};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  21068e:	4907      	ldr	r1, [pc, #28]	; (2106ac <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x2c>)
  210690:	5cc9      	ldrb	r1, [r1, r3]
  210692:	6541      	str	r1, [r0, #84]	; 0x54
  
  if (stream_number > 3)
  210694:	2b03      	cmp	r3, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FF)) + 4);
  210696:	4b06      	ldr	r3, [pc, #24]	; (2106b0 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef+0x30>)
  210698:	ea03 0302 	and.w	r3, r3, r2
  21069c:	bf88      	it	hi
  21069e:	3304      	addhi	r3, #4
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FF));
  2106a0:	6503      	str	r3, [r0, #80]	; 0x50
  }
  
  return hdma->StreamBaseAddress;
}
  2106a2:	6d00      	ldr	r0, [r0, #80]	; 0x50
  2106a4:	4770      	bx	lr
  2106a6:	bf00      	nop
  2106a8:	aaaaaaab 	.word	0xaaaaaaab
  2106ac:	00218624 	.word	0x00218624
  2106b0:	fffffc00 	.word	0xfffffc00

002106b4 <HAL_DMA_Init>:
  if(hdma == NULL)
  2106b4:	2800      	cmp	r0, #0
  2106b6:	d037      	beq.n	210728 <HAL_DMA_Init+0x74>
{ 
  2106b8:	b538      	push	{r3, r4, r5, lr}
  2106ba:	4603      	mov	r3, r0
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
  2106bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_BUSY;
  2106be:	2202      	movs	r2, #2
  2106c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  tmp = hdma->Instance->CR;
  2106c4:	681d      	ldr	r5, [r3, #0]
  2106c6:	682a      	ldr	r2, [r5, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
  2106c8:	4c18      	ldr	r4, [pc, #96]	; (21072c <HAL_DMA_Init+0x78>)
  2106ca:	4014      	ands	r4, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
  2106cc:	6859      	ldr	r1, [r3, #4]
  2106ce:	689a      	ldr	r2, [r3, #8]
  2106d0:	430a      	orrs	r2, r1
  2106d2:	68d9      	ldr	r1, [r3, #12]
  2106d4:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
  2106d6:	6919      	ldr	r1, [r3, #16]
  2106d8:	430a      	orrs	r2, r1
  2106da:	6959      	ldr	r1, [r3, #20]
  2106dc:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
  2106de:	6999      	ldr	r1, [r3, #24]
  2106e0:	430a      	orrs	r2, r1
  2106e2:	69d9      	ldr	r1, [r3, #28]
  2106e4:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
  2106e6:	6a19      	ldr	r1, [r3, #32]
  2106e8:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
  2106ea:	4322      	orrs	r2, r4
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  2106ec:	2804      	cmp	r0, #4
  2106ee:	d013      	beq.n	210718 <HAL_DMA_Init+0x64>
  hdma->Instance->CR = tmp;  
  2106f0:	602a      	str	r2, [r5, #0]
  tmp = hdma->Instance->FCR;
  2106f2:	6819      	ldr	r1, [r3, #0]
  2106f4:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
  2106f6:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
  2106fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
  2106fc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
  2106fe:	2804      	cmp	r0, #4
  210700:	d00f      	beq.n	210722 <HAL_DMA_Init+0x6e>
  210702:	461c      	mov	r4, r3
  hdma->Instance->FCR = tmp;
  210704:	614a      	str	r2, [r1, #20]
  DMA_CalcBaseAndBitshift(hdma);
  210706:	4618      	mov	r0, r3
  210708:	f7ff ffba 	bl	210680 <_ZL23DMA_CalcBaseAndBitshiftP19__DMA_HandleTypeDef>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
  21070c:	2000      	movs	r0, #0
  21070e:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdma->State = HAL_DMA_STATE_READY;
  210710:	2301      	movs	r3, #1
  210712:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
  210716:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  210718:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  21071a:	6b18      	ldr	r0, [r3, #48]	; 0x30
  21071c:	4301      	orrs	r1, r0
  21071e:	430a      	orrs	r2, r1
  210720:	e7e6      	b.n	2106f0 <HAL_DMA_Init+0x3c>
    tmp |= hdma->Init.FIFOThreshold;
  210722:	6a98      	ldr	r0, [r3, #40]	; 0x28
  210724:	4302      	orrs	r2, r0
  210726:	e7ec      	b.n	210702 <HAL_DMA_Init+0x4e>
    return HAL_ERROR;
  210728:	2001      	movs	r0, #1
  21072a:	4770      	bx	lr
  21072c:	f010803f 	.word	0xf010803f

00210730 <HAL_DMA_Start_IT>:
{
  210730:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma);
  210732:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  210736:	2c01      	cmp	r4, #1
  210738:	d102      	bne.n	210740 <HAL_DMA_Start_IT+0x10>
  21073a:	2002      	movs	r0, #2
} 
  21073c:	bc30      	pop	{r4, r5}
  21073e:	4770      	bx	lr
  __HAL_LOCK(hdma);
  210740:	2401      	movs	r4, #1
  210742:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
  210746:	2402      	movs	r4, #2
  210748:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
  21074c:	6805      	ldr	r5, [r0, #0]
  21074e:	682c      	ldr	r4, [r5, #0]
  210750:	f024 0401 	bic.w	r4, r4, #1
  210754:	602c      	str	r4, [r5, #0]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
  210756:	6805      	ldr	r5, [r0, #0]
  210758:	682c      	ldr	r4, [r5, #0]
  21075a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
  21075e:	602c      	str	r4, [r5, #0]
  hdma->Instance->NDTR = DataLength;
  210760:	6804      	ldr	r4, [r0, #0]
  210762:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
  210764:	6883      	ldr	r3, [r0, #8]
  210766:	2b40      	cmp	r3, #64	; 0x40
  210768:	d014      	beq.n	210794 <HAL_DMA_Start_IT+0x64>
    hdma->Instance->PAR = SrcAddress;
  21076a:	6803      	ldr	r3, [r0, #0]
  21076c:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
  21076e:	6803      	ldr	r3, [r0, #0]
  210770:	60da      	str	r2, [r3, #12]
  hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_HT | DMA_IT_TE | DMA_IT_DME;
  210772:	6802      	ldr	r2, [r0, #0]
  210774:	6813      	ldr	r3, [r2, #0]
  210776:	f043 031e 	orr.w	r3, r3, #30
  21077a:	6013      	str	r3, [r2, #0]
  hdma->Instance->FCR |= DMA_IT_FE;
  21077c:	6802      	ldr	r2, [r0, #0]
  21077e:	6953      	ldr	r3, [r2, #20]
  210780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  210784:	6153      	str	r3, [r2, #20]
  __HAL_DMA_ENABLE(hdma);
  210786:	6802      	ldr	r2, [r0, #0]
  210788:	6813      	ldr	r3, [r2, #0]
  21078a:	f043 0301 	orr.w	r3, r3, #1
  21078e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
  210790:	2000      	movs	r0, #0
  210792:	e7d3      	b.n	21073c <HAL_DMA_Start_IT+0xc>
    hdma->Instance->PAR = DstAddress;
  210794:	6803      	ldr	r3, [r0, #0]
  210796:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
  210798:	6803      	ldr	r3, [r0, #0]
  21079a:	60d9      	str	r1, [r3, #12]
  21079c:	e7e9      	b.n	210772 <HAL_DMA_Start_IT+0x42>
	...

002107a0 <HAL_DMA_IRQHandler>:
{
  2107a0:	b538      	push	{r3, r4, r5, lr}
  2107a2:	4604      	mov	r4, r0
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  2107a4:	6d05      	ldr	r5, [r0, #80]	; 0x50
  if ((regs->ISR & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
  2107a6:	682a      	ldr	r2, [r5, #0]
  2107a8:	6d41      	ldr	r1, [r0, #84]	; 0x54
  2107aa:	2308      	movs	r3, #8
  2107ac:	408b      	lsls	r3, r1
  2107ae:	4213      	tst	r3, r2
  2107b0:	d019      	beq.n	2107e6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
  2107b2:	6803      	ldr	r3, [r0, #0]
  2107b4:	681a      	ldr	r2, [r3, #0]
  2107b6:	f012 0f04 	tst.w	r2, #4
  2107ba:	d014      	beq.n	2107e6 <HAL_DMA_IRQHandler+0x46>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
  2107bc:	681a      	ldr	r2, [r3, #0]
  2107be:	f022 0204 	bic.w	r2, r2, #4
  2107c2:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
  2107c4:	6d42      	ldr	r2, [r0, #84]	; 0x54
  2107c6:	2308      	movs	r3, #8
  2107c8:	4093      	lsls	r3, r2
  2107ca:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
  2107cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  2107ce:	f043 0301 	orr.w	r3, r3, #1
  2107d2:	64c3      	str	r3, [r0, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
  2107d4:	2304      	movs	r3, #4
  2107d6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      __HAL_UNLOCK(hdma); 
  2107da:	2300      	movs	r3, #0
  2107dc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
  2107e0:	6c83      	ldr	r3, [r0, #72]	; 0x48
  2107e2:	b103      	cbz	r3, 2107e6 <HAL_DMA_IRQHandler+0x46>
        hdma->XferErrorCallback(hdma);
  2107e4:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
  2107e6:	682a      	ldr	r2, [r5, #0]
  2107e8:	6d61      	ldr	r1, [r4, #84]	; 0x54
  2107ea:	4b58      	ldr	r3, [pc, #352]	; (21094c <HAL_DMA_IRQHandler+0x1ac>)
  2107ec:	408b      	lsls	r3, r1
  2107ee:	4213      	tst	r3, r2
  2107f0:	d01a      	beq.n	210828 <HAL_DMA_IRQHandler+0x88>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
  2107f2:	6823      	ldr	r3, [r4, #0]
  2107f4:	695a      	ldr	r2, [r3, #20]
  2107f6:	f012 0f80 	tst.w	r2, #128	; 0x80
  2107fa:	d015      	beq.n	210828 <HAL_DMA_IRQHandler+0x88>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_FE);
  2107fc:	695a      	ldr	r2, [r3, #20]
  2107fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  210802:	615a      	str	r2, [r3, #20]
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
  210804:	6d62      	ldr	r2, [r4, #84]	; 0x54
  210806:	4b51      	ldr	r3, [pc, #324]	; (21094c <HAL_DMA_IRQHandler+0x1ac>)
  210808:	4093      	lsls	r3, r2
  21080a:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
  21080c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  21080e:	f043 0302 	orr.w	r3, r3, #2
  210812:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
  210814:	2304      	movs	r3, #4
  210816:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
  21081a:	2300      	movs	r3, #0
  21081c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
  210820:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  210822:	b10b      	cbz	r3, 210828 <HAL_DMA_IRQHandler+0x88>
        hdma->XferErrorCallback(hdma);
  210824:	4620      	mov	r0, r4
  210826:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
  210828:	682a      	ldr	r2, [r5, #0]
  21082a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  21082c:	4b48      	ldr	r3, [pc, #288]	; (210950 <HAL_DMA_IRQHandler+0x1b0>)
  21082e:	408b      	lsls	r3, r1
  210830:	4213      	tst	r3, r2
  210832:	d01a      	beq.n	21086a <HAL_DMA_IRQHandler+0xca>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
  210834:	6823      	ldr	r3, [r4, #0]
  210836:	681a      	ldr	r2, [r3, #0]
  210838:	f012 0f02 	tst.w	r2, #2
  21083c:	d015      	beq.n	21086a <HAL_DMA_IRQHandler+0xca>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_DME);
  21083e:	681a      	ldr	r2, [r3, #0]
  210840:	f022 0202 	bic.w	r2, r2, #2
  210844:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
  210846:	6d62      	ldr	r2, [r4, #84]	; 0x54
  210848:	4b41      	ldr	r3, [pc, #260]	; (210950 <HAL_DMA_IRQHandler+0x1b0>)
  21084a:	4093      	lsls	r3, r2
  21084c:	60ab      	str	r3, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
  21084e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  210850:	f043 0304 	orr.w	r3, r3, #4
  210854:	64e3      	str	r3, [r4, #76]	; 0x4c
      hdma->State = HAL_DMA_STATE_ERROR;
  210856:	2304      	movs	r3, #4
  210858:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
  21085c:	2300      	movs	r3, #0
  21085e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
  210862:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  210864:	b10b      	cbz	r3, 21086a <HAL_DMA_IRQHandler+0xca>
        hdma->XferErrorCallback(hdma);
  210866:	4620      	mov	r0, r4
  210868:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
  21086a:	682a      	ldr	r2, [r5, #0]
  21086c:	6d61      	ldr	r1, [r4, #84]	; 0x54
  21086e:	2310      	movs	r3, #16
  210870:	408b      	lsls	r3, r1
  210872:	421a      	tst	r2, r3
  210874:	d02d      	beq.n	2108d2 <HAL_DMA_IRQHandler+0x132>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
  210876:	6822      	ldr	r2, [r4, #0]
  210878:	6811      	ldr	r1, [r2, #0]
  21087a:	f011 0f08 	tst.w	r1, #8
  21087e:	d028      	beq.n	2108d2 <HAL_DMA_IRQHandler+0x132>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
  210880:	6811      	ldr	r1, [r2, #0]
  210882:	f411 2f80 	tst.w	r1, #262144	; 0x40000
  210886:	d011      	beq.n	2108ac <HAL_DMA_IRQHandler+0x10c>
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
  210888:	60ab      	str	r3, [r5, #8]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
  21088a:	6823      	ldr	r3, [r4, #0]
  21088c:	681a      	ldr	r2, [r3, #0]
  21088e:	f412 2f00 	tst.w	r2, #524288	; 0x80000
  210892:	d103      	bne.n	21089c <HAL_DMA_IRQHandler+0xfc>
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
  210894:	2331      	movs	r3, #49	; 0x31
  210896:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  21089a:	e016      	b.n	2108ca <HAL_DMA_IRQHandler+0x12a>
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0)
  21089c:	681b      	ldr	r3, [r3, #0]
  21089e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  2108a2:	d012      	beq.n	2108ca <HAL_DMA_IRQHandler+0x12a>
          hdma->State = HAL_DMA_STATE_READY_HALF_MEM1;
  2108a4:	2341      	movs	r3, #65	; 0x41
  2108a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  2108aa:	e00e      	b.n	2108ca <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
  2108ac:	6813      	ldr	r3, [r2, #0]
  2108ae:	f413 7f80 	tst.w	r3, #256	; 0x100
  2108b2:	d103      	bne.n	2108bc <HAL_DMA_IRQHandler+0x11c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
  2108b4:	6813      	ldr	r3, [r2, #0]
  2108b6:	f023 0308 	bic.w	r3, r3, #8
  2108ba:	6013      	str	r3, [r2, #0]
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
  2108bc:	6d62      	ldr	r2, [r4, #84]	; 0x54
  2108be:	2310      	movs	r3, #16
  2108c0:	4093      	lsls	r3, r2
  2108c2:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY_HALF_MEM0;
  2108c4:	2331      	movs	r3, #49	; 0x31
  2108c6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferHalfCpltCallback != NULL)
  2108ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
  2108cc:	b10b      	cbz	r3, 2108d2 <HAL_DMA_IRQHandler+0x132>
        hdma->XferHalfCpltCallback(hdma);
  2108ce:	4620      	mov	r0, r4
  2108d0:	4798      	blx	r3
  if ((regs->ISR & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
  2108d2:	682a      	ldr	r2, [r5, #0]
  2108d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
  2108d6:	2320      	movs	r3, #32
  2108d8:	408b      	lsls	r3, r1
  2108da:	421a      	tst	r2, r3
  2108dc:	d034      	beq.n	210948 <HAL_DMA_IRQHandler+0x1a8>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
  2108de:	6822      	ldr	r2, [r4, #0]
  2108e0:	6811      	ldr	r1, [r2, #0]
  2108e2:	f011 0f10 	tst.w	r1, #16
  2108e6:	d02f      	beq.n	210948 <HAL_DMA_IRQHandler+0x1a8>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0)
  2108e8:	6811      	ldr	r1, [r2, #0]
  2108ea:	f411 2f80 	tst.w	r1, #262144	; 0x40000
  2108ee:	d013      	beq.n	210918 <HAL_DMA_IRQHandler+0x178>
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
  2108f0:	60ab      	str	r3, [r5, #8]
        if((hdma->Instance->CR & DMA_SxCR_CT) == 0)
  2108f2:	6823      	ldr	r3, [r4, #0]
  2108f4:	681a      	ldr	r2, [r3, #0]
  2108f6:	f412 2f00 	tst.w	r2, #524288	; 0x80000
  2108fa:	d104      	bne.n	210906 <HAL_DMA_IRQHandler+0x166>
          if(hdma->XferM1CpltCallback != NULL)
  2108fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  2108fe:	b31b      	cbz	r3, 210948 <HAL_DMA_IRQHandler+0x1a8>
            hdma->XferM1CpltCallback(hdma);
  210900:	4620      	mov	r0, r4
  210902:	4798      	blx	r3
  210904:	bd38      	pop	{r3, r4, r5, pc}
        else if((hdma->Instance->CR & DMA_SxCR_CT) != 0) 
  210906:	681b      	ldr	r3, [r3, #0]
  210908:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  21090c:	d01c      	beq.n	210948 <HAL_DMA_IRQHandler+0x1a8>
          if(hdma->XferCpltCallback != NULL)
  21090e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  210910:	b1d3      	cbz	r3, 210948 <HAL_DMA_IRQHandler+0x1a8>
            hdma->XferCpltCallback(hdma);
  210912:	4620      	mov	r0, r4
  210914:	4798      	blx	r3
  210916:	bd38      	pop	{r3, r4, r5, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
  210918:	6813      	ldr	r3, [r2, #0]
  21091a:	f413 7f80 	tst.w	r3, #256	; 0x100
  21091e:	d103      	bne.n	210928 <HAL_DMA_IRQHandler+0x188>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
  210920:	6813      	ldr	r3, [r2, #0]
  210922:	f023 0310 	bic.w	r3, r3, #16
  210926:	6013      	str	r3, [r2, #0]
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
  210928:	6d62      	ldr	r2, [r4, #84]	; 0x54
  21092a:	2320      	movs	r3, #32
  21092c:	4093      	lsls	r3, r2
  21092e:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
  210930:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  210932:	64e3      	str	r3, [r4, #76]	; 0x4c
        hdma->State = HAL_DMA_STATE_READY_MEM0;
  210934:	2311      	movs	r3, #17
  210936:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);      
  21093a:	2300      	movs	r3, #0
  21093c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
  210940:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  210942:	b10b      	cbz	r3, 210948 <HAL_DMA_IRQHandler+0x1a8>
          hdma->XferCpltCallback(hdma);
  210944:	4620      	mov	r0, r4
  210946:	4798      	blx	r3
  210948:	bd38      	pop	{r3, r4, r5, pc}
  21094a:	bf00      	nop
  21094c:	00800001 	.word	0x00800001
  210950:	00800004 	.word	0x00800004

00210954 <_ZL24FLASH_Program_DoubleWordmy>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
  210954:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
  210956:	490a      	ldr	r1, [pc, #40]	; (210980 <_ZL24FLASH_Program_DoubleWordmy+0x2c>)
  210958:	690c      	ldr	r4, [r1, #16]
  21095a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
  21095e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
  210960:	690c      	ldr	r4, [r1, #16]
  210962:	f444 7440 	orr.w	r4, r4, #768	; 0x300
  210966:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
  210968:	690c      	ldr	r4, [r1, #16]
  21096a:	f044 0401 	orr.w	r4, r4, #1
  21096e:	610c      	str	r4, [r1, #16]
  
  *(__IO uint64_t*)Address = Data;
  210970:	e9c0 2300 	strd	r2, r3, [r0]
  __ASM volatile ("dsb 0xF":::"memory");
  210974:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
  210978:	f85d 4b04 	ldr.w	r4, [sp], #4
  21097c:	4770      	bx	lr
  21097e:	bf00      	nop
  210980:	40023c00 	.word	0x40023c00

00210984 <_ZL18FLASH_Program_Wordmm>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
  210984:	4b08      	ldr	r3, [pc, #32]	; (2109a8 <_ZL18FLASH_Program_Wordmm+0x24>)
  210986:	691a      	ldr	r2, [r3, #16]
  210988:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  21098c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
  21098e:	691a      	ldr	r2, [r3, #16]
  210990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  210994:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
  210996:	691a      	ldr	r2, [r3, #16]
  210998:	f042 0201 	orr.w	r2, r2, #1
  21099c:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
  21099e:	6001      	str	r1, [r0, #0]
  2109a0:	f3bf 8f4f 	dsb	sy
  2109a4:	4770      	bx	lr
  2109a6:	bf00      	nop
  2109a8:	40023c00 	.word	0x40023c00

002109ac <_ZL22FLASH_Program_HalfWordmt>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
  2109ac:	4b08      	ldr	r3, [pc, #32]	; (2109d0 <_ZL22FLASH_Program_HalfWordmt+0x24>)
  2109ae:	691a      	ldr	r2, [r3, #16]
  2109b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  2109b4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
  2109b6:	691a      	ldr	r2, [r3, #16]
  2109b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  2109bc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
  2109be:	691a      	ldr	r2, [r3, #16]
  2109c0:	f042 0201 	orr.w	r2, r2, #1
  2109c4:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
  2109c6:	8001      	strh	r1, [r0, #0]
  2109c8:	f3bf 8f4f 	dsb	sy
  2109cc:	4770      	bx	lr
  2109ce:	bf00      	nop
  2109d0:	40023c00 	.word	0x40023c00

002109d4 <_ZL18FLASH_Program_Bytemh>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
  2109d4:	4b07      	ldr	r3, [pc, #28]	; (2109f4 <_ZL18FLASH_Program_Bytemh+0x20>)
  2109d6:	691a      	ldr	r2, [r3, #16]
  2109d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  2109dc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
  2109de:	691a      	ldr	r2, [r3, #16]
  2109e0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
  2109e2:	691a      	ldr	r2, [r3, #16]
  2109e4:	f042 0201 	orr.w	r2, r2, #1
  2109e8:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
  2109ea:	7001      	strb	r1, [r0, #0]
  2109ec:	f3bf 8f4f 	dsb	sy
  2109f0:	4770      	bx	lr
  2109f2:	bf00      	nop
  2109f4:	40023c00 	.word	0x40023c00

002109f8 <_ZL18FLASH_SetErrorCodev>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
  2109f8:	4b19      	ldr	r3, [pc, #100]	; (210a60 <_ZL18FLASH_SetErrorCodev+0x68>)
  2109fa:	68db      	ldr	r3, [r3, #12]
  2109fc:	f013 0f10 	tst.w	r3, #16
  210a00:	d004      	beq.n	210a0c <_ZL18FLASH_SetErrorCodev+0x14>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
  210a02:	4a18      	ldr	r2, [pc, #96]	; (210a64 <_ZL18FLASH_SetErrorCodev+0x6c>)
  210a04:	6993      	ldr	r3, [r2, #24]
  210a06:	f043 0310 	orr.w	r3, r3, #16
  210a0a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
  210a0c:	4b14      	ldr	r3, [pc, #80]	; (210a60 <_ZL18FLASH_SetErrorCodev+0x68>)
  210a0e:	68db      	ldr	r3, [r3, #12]
  210a10:	f013 0f20 	tst.w	r3, #32
  210a14:	d004      	beq.n	210a20 <_ZL18FLASH_SetErrorCodev+0x28>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
  210a16:	4a13      	ldr	r2, [pc, #76]	; (210a64 <_ZL18FLASH_SetErrorCodev+0x6c>)
  210a18:	6993      	ldr	r3, [r2, #24]
  210a1a:	f043 0308 	orr.w	r3, r3, #8
  210a1e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
  210a20:	4b0f      	ldr	r3, [pc, #60]	; (210a60 <_ZL18FLASH_SetErrorCodev+0x68>)
  210a22:	68db      	ldr	r3, [r3, #12]
  210a24:	f013 0f40 	tst.w	r3, #64	; 0x40
  210a28:	d004      	beq.n	210a34 <_ZL18FLASH_SetErrorCodev+0x3c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
  210a2a:	4a0e      	ldr	r2, [pc, #56]	; (210a64 <_ZL18FLASH_SetErrorCodev+0x6c>)
  210a2c:	6993      	ldr	r3, [r2, #24]
  210a2e:	f043 0304 	orr.w	r3, r3, #4
  210a32:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
  210a34:	4b0a      	ldr	r3, [pc, #40]	; (210a60 <_ZL18FLASH_SetErrorCodev+0x68>)
  210a36:	68db      	ldr	r3, [r3, #12]
  210a38:	f013 0f80 	tst.w	r3, #128	; 0x80
  210a3c:	d004      	beq.n	210a48 <_ZL18FLASH_SetErrorCodev+0x50>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
  210a3e:	4a09      	ldr	r2, [pc, #36]	; (210a64 <_ZL18FLASH_SetErrorCodev+0x6c>)
  210a40:	6993      	ldr	r3, [r2, #24]
  210a42:	f043 0302 	orr.w	r3, r3, #2
  210a46:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
  210a48:	4b05      	ldr	r3, [pc, #20]	; (210a60 <_ZL18FLASH_SetErrorCodev+0x68>)
  210a4a:	68db      	ldr	r3, [r3, #12]
  210a4c:	f013 0f02 	tst.w	r3, #2
  210a50:	d004      	beq.n	210a5c <_ZL18FLASH_SetErrorCodev+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
  210a52:	4a04      	ldr	r2, [pc, #16]	; (210a64 <_ZL18FLASH_SetErrorCodev+0x6c>)
  210a54:	6993      	ldr	r3, [r2, #24]
  210a56:	f043 0320 	orr.w	r3, r3, #32
  210a5a:	6193      	str	r3, [r2, #24]
  210a5c:	4770      	bx	lr
  210a5e:	bf00      	nop
  210a60:	40023c00 	.word	0x40023c00
  210a64:	200049b0 	.word	0x200049b0

00210a68 <HAL_FLASH_Unlock>:
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
  210a68:	4b06      	ldr	r3, [pc, #24]	; (210a84 <HAL_FLASH_Unlock+0x1c>)
  210a6a:	691b      	ldr	r3, [r3, #16]
  210a6c:	2b00      	cmp	r3, #0
  210a6e:	db01      	blt.n	210a74 <HAL_FLASH_Unlock+0xc>
    return HAL_ERROR;
  210a70:	2001      	movs	r0, #1
}
  210a72:	4770      	bx	lr
    FLASH->KEYR = FLASH_KEY1;
  210a74:	4b03      	ldr	r3, [pc, #12]	; (210a84 <HAL_FLASH_Unlock+0x1c>)
  210a76:	4a04      	ldr	r2, [pc, #16]	; (210a88 <HAL_FLASH_Unlock+0x20>)
  210a78:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
  210a7a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
  210a7e:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
  210a80:	2000      	movs	r0, #0
  210a82:	4770      	bx	lr
  210a84:	40023c00 	.word	0x40023c00
  210a88:	45670123 	.word	0x45670123

00210a8c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
  210a8c:	4a03      	ldr	r2, [pc, #12]	; (210a9c <HAL_FLASH_Lock+0x10>)
  210a8e:	6913      	ldr	r3, [r2, #16]
  210a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  210a94:	6113      	str	r3, [r2, #16]
}
  210a96:	2000      	movs	r0, #0
  210a98:	4770      	bx	lr
  210a9a:	bf00      	nop
  210a9c:	40023c00 	.word	0x40023c00

00210aa0 <FLASH_WaitForLastOperation>:
{ 
  210aa0:	b570      	push	{r4, r5, r6, lr}
  210aa2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
  210aa4:	2200      	movs	r2, #0
  210aa6:	4b11      	ldr	r3, [pc, #68]	; (210aec <FLASH_WaitForLastOperation+0x4c>)
  210aa8:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
  210aaa:	f7fe fefb 	bl	20f8a4 <HAL_GetTick>
  210aae:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
  210ab0:	4d0f      	ldr	r5, [pc, #60]	; (210af0 <FLASH_WaitForLastOperation+0x50>)
  210ab2:	68eb      	ldr	r3, [r5, #12]
  210ab4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  210ab8:	d00c      	beq.n	210ad4 <FLASH_WaitForLastOperation+0x34>
    if(Timeout != HAL_MAX_DELAY)
  210aba:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
  210abe:	d0f8      	beq.n	210ab2 <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  210ac0:	b90c      	cbnz	r4, 210ac6 <FLASH_WaitForLastOperation+0x26>
        return HAL_TIMEOUT;
  210ac2:	2003      	movs	r0, #3
  210ac4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  210ac6:	f7fe feed 	bl	20f8a4 <HAL_GetTick>
  210aca:	1b80      	subs	r0, r0, r6
  210acc:	4284      	cmp	r4, r0
  210ace:	d2f0      	bcs.n	210ab2 <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
  210ad0:	2003      	movs	r0, #3
  210ad2:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
  210ad4:	4b06      	ldr	r3, [pc, #24]	; (210af0 <FLASH_WaitForLastOperation+0x50>)
  210ad6:	68db      	ldr	r3, [r3, #12]
  210ad8:	f013 0ff2 	tst.w	r3, #242	; 0xf2
  210adc:	d101      	bne.n	210ae2 <FLASH_WaitForLastOperation+0x42>
  return HAL_OK;
  210ade:	2000      	movs	r0, #0
}  
  210ae0:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
  210ae2:	f7ff ff89 	bl	2109f8 <_ZL18FLASH_SetErrorCodev>
    return HAL_ERROR;
  210ae6:	2001      	movs	r0, #1
  210ae8:	bd70      	pop	{r4, r5, r6, pc}
  210aea:	bf00      	nop
  210aec:	200049b0 	.word	0x200049b0
  210af0:	40023c00 	.word	0x40023c00

00210af4 <HAL_FLASH_Program>:
{
  210af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
  210af8:	4c1e      	ldr	r4, [pc, #120]	; (210b74 <HAL_FLASH_Program+0x80>)
  210afa:	7d24      	ldrb	r4, [r4, #20]
  210afc:	2c01      	cmp	r4, #1
  210afe:	d103      	bne.n	210b08 <HAL_FLASH_Program+0x14>
  210b00:	2402      	movs	r4, #2
}
  210b02:	4620      	mov	r0, r4
  210b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  210b08:	4698      	mov	r8, r3
  210b0a:	4617      	mov	r7, r2
  210b0c:	460e      	mov	r6, r1
  210b0e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
  210b10:	2201      	movs	r2, #1
  210b12:	4b18      	ldr	r3, [pc, #96]	; (210b74 <HAL_FLASH_Program+0x80>)
  210b14:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
  210b16:	f24c 3050 	movw	r0, #50000	; 0xc350
  210b1a:	f7ff ffc1 	bl	210aa0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
  210b1e:	4604      	mov	r4, r0
  210b20:	b998      	cbnz	r0, 210b4a <HAL_FLASH_Program+0x56>
    switch(TypeProgram)
  210b22:	2d03      	cmp	r5, #3
  210b24:	d807      	bhi.n	210b36 <HAL_FLASH_Program+0x42>
  210b26:	e8df f005 	tbb	[pc, r5]
  210b2a:	1402      	.short	0x1402
  210b2c:	1e19      	.short	0x1e19
        FLASH_Program_Byte(Address, (uint8_t) Data);
  210b2e:	b2f9      	uxtb	r1, r7
  210b30:	4630      	mov	r0, r6
  210b32:	f7ff ff4f 	bl	2109d4 <_ZL18FLASH_Program_Bytemh>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
  210b36:	f24c 3050 	movw	r0, #50000	; 0xc350
  210b3a:	f7ff ffb1 	bl	210aa0 <FLASH_WaitForLastOperation>
  210b3e:	4604      	mov	r4, r0
    FLASH->CR &= (~FLASH_CR_PG);
  210b40:	4a0d      	ldr	r2, [pc, #52]	; (210b78 <HAL_FLASH_Program+0x84>)
  210b42:	6913      	ldr	r3, [r2, #16]
  210b44:	f023 0301 	bic.w	r3, r3, #1
  210b48:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
  210b4a:	2200      	movs	r2, #0
  210b4c:	4b09      	ldr	r3, [pc, #36]	; (210b74 <HAL_FLASH_Program+0x80>)
  210b4e:	751a      	strb	r2, [r3, #20]
  return status;
  210b50:	e7d7      	b.n	210b02 <HAL_FLASH_Program+0xe>
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
  210b52:	b2b9      	uxth	r1, r7
  210b54:	4630      	mov	r0, r6
  210b56:	f7ff ff29 	bl	2109ac <_ZL22FLASH_Program_HalfWordmt>
        break;
  210b5a:	e7ec      	b.n	210b36 <HAL_FLASH_Program+0x42>
        FLASH_Program_Word(Address, (uint32_t) Data);
  210b5c:	4639      	mov	r1, r7
  210b5e:	4630      	mov	r0, r6
  210b60:	f7ff ff10 	bl	210984 <_ZL18FLASH_Program_Wordmm>
        break;
  210b64:	e7e7      	b.n	210b36 <HAL_FLASH_Program+0x42>
        FLASH_Program_DoubleWord(Address, Data);
  210b66:	463a      	mov	r2, r7
  210b68:	4643      	mov	r3, r8
  210b6a:	4630      	mov	r0, r6
  210b6c:	f7ff fef2 	bl	210954 <_ZL24FLASH_Program_DoubleWordmy>
        break;
  210b70:	e7e1      	b.n	210b36 <HAL_FLASH_Program+0x42>
  210b72:	bf00      	nop
  210b74:	200049b0 	.word	0x200049b0
  210b78:	40023c00 	.word	0x40023c00

00210b7c <_ZL15FLASH_MassEraseh>:
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
  210b7c:	4b08      	ldr	r3, [pc, #32]	; (210ba0 <_ZL15FLASH_MassEraseh+0x24>)
  210b7e:	691a      	ldr	r2, [r3, #16]
  210b80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  210b84:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
  210b86:	691a      	ldr	r2, [r3, #16]
  210b88:	f042 0204 	orr.w	r2, r2, #4
  210b8c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | (VoltageRange <<8);
  210b8e:	691a      	ldr	r2, [r3, #16]
  210b90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  210b94:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
  210b98:	6118      	str	r0, [r3, #16]
  210b9a:	f3bf 8f4f 	dsb	sy
  210b9e:	4770      	bx	lr
  210ba0:	40023c00 	.word	0x40023c00

00210ba4 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
  210ba4:	b329      	cbz	r1, 210bf2 <FLASH_Erase_Sector+0x4e>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
  210ba6:	2901      	cmp	r1, #1
  210ba8:	d025      	beq.n	210bf6 <FLASH_Erase_Sector+0x52>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
  210baa:	2902      	cmp	r1, #2
  210bac:	bf0c      	ite	eq
  210bae:	f44f 7100 	moveq.w	r1, #512	; 0x200
  210bb2:	f44f 7140 	movne.w	r1, #768	; 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
  210bb6:	4b11      	ldr	r3, [pc, #68]	; (210bfc <FLASH_Erase_Sector+0x58>)
  210bb8:	691a      	ldr	r2, [r3, #16]
  210bba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  210bbe:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
  210bc0:	691a      	ldr	r2, [r3, #16]
  210bc2:	430a      	orrs	r2, r1
  210bc4:	611a      	str	r2, [r3, #16]
  FLASH->CR &= SECTOR_MASK;
  210bc6:	691a      	ldr	r2, [r3, #16]
  210bc8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
  210bcc:	611a      	str	r2, [r3, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  210bce:	2278      	movs	r2, #120	; 0x78
  210bd0:	fa92 f2a2 	rbit	r2, r2
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
  210bd4:	fab2 f282 	clz	r2, r2
  210bd8:	6919      	ldr	r1, [r3, #16]
  210bda:	4090      	lsls	r0, r2
  210bdc:	f041 0202 	orr.w	r2, r1, #2
  210be0:	4310      	orrs	r0, r2
  210be2:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
  210be4:	691a      	ldr	r2, [r3, #16]
  210be6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  210bea:	611a      	str	r2, [r3, #16]
  __ASM volatile ("dsb 0xF":::"memory");
  210bec:	f3bf 8f4f 	dsb	sy
  210bf0:	4770      	bx	lr
     tmp_psize = FLASH_PSIZE_BYTE;
  210bf2:	2100      	movs	r1, #0
  210bf4:	e7df      	b.n	210bb6 <FLASH_Erase_Sector+0x12>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  210bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
  210bfa:	e7dc      	b.n	210bb6 <FLASH_Erase_Sector+0x12>
  210bfc:	40023c00 	.word	0x40023c00

00210c00 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
  210c00:	4b27      	ldr	r3, [pc, #156]	; (210ca0 <HAL_FLASHEx_Erase+0xa0>)
  210c02:	7d1b      	ldrb	r3, [r3, #20]
  210c04:	2b01      	cmp	r3, #1
  210c06:	d102      	bne.n	210c0e <HAL_FLASHEx_Erase+0xe>
  210c08:	2202      	movs	r2, #2
}
  210c0a:	4610      	mov	r0, r2
  210c0c:	4770      	bx	lr
{
  210c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  210c12:	460f      	mov	r7, r1
  210c14:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
  210c16:	2201      	movs	r2, #1
  210c18:	4b21      	ldr	r3, [pc, #132]	; (210ca0 <HAL_FLASHEx_Erase+0xa0>)
  210c1a:	751a      	strb	r2, [r3, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
  210c1c:	f24c 3050 	movw	r0, #50000	; 0xc350
  210c20:	f7ff ff3e 	bl	210aa0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
  210c24:	4602      	mov	r2, r0
  210c26:	2800      	cmp	r0, #0
  210c28:	d134      	bne.n	210c94 <HAL_FLASHEx_Erase+0x94>
    *SectorError = 0xFFFFFFFF;
  210c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  210c2e:	603b      	str	r3, [r7, #0]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
  210c30:	6823      	ldr	r3, [r4, #0]
  210c32:	2b01      	cmp	r3, #1
  210c34:	d01f      	beq.n	210c76 <HAL_FLASHEx_Erase+0x76>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
  210c36:	6865      	ldr	r5, [r4, #4]
  210c38:	68a3      	ldr	r3, [r4, #8]
  210c3a:	442b      	add	r3, r5
  210c3c:	429d      	cmp	r5, r3
  210c3e:	d229      	bcs.n	210c94 <HAL_FLASHEx_Erase+0x94>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
  210c40:	f24c 3850 	movw	r8, #50000	; 0xc350
        FLASH->CR &= (~FLASH_CR_SER);
  210c44:	4e17      	ldr	r6, [pc, #92]	; (210ca4 <HAL_FLASHEx_Erase+0xa4>)
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
  210c46:	7b21      	ldrb	r1, [r4, #12]
  210c48:	4628      	mov	r0, r5
  210c4a:	f7ff ffab 	bl	210ba4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
  210c4e:	4640      	mov	r0, r8
  210c50:	f7ff ff26 	bl	210aa0 <FLASH_WaitForLastOperation>
        FLASH->CR &= (~FLASH_CR_SER);
  210c54:	6933      	ldr	r3, [r6, #16]
  210c56:	f023 0302 	bic.w	r3, r3, #2
  210c5a:	6133      	str	r3, [r6, #16]
        FLASH->CR &= SECTOR_MASK; 
  210c5c:	6933      	ldr	r3, [r6, #16]
  210c5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
  210c62:	6133      	str	r3, [r6, #16]
        if(status != HAL_OK) 
  210c64:	4602      	mov	r2, r0
  210c66:	b9a0      	cbnz	r0, 210c92 <HAL_FLASHEx_Erase+0x92>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
  210c68:	3501      	adds	r5, #1
  210c6a:	68a3      	ldr	r3, [r4, #8]
  210c6c:	6861      	ldr	r1, [r4, #4]
  210c6e:	440b      	add	r3, r1
  210c70:	42ab      	cmp	r3, r5
  210c72:	d8e8      	bhi.n	210c46 <HAL_FLASHEx_Erase+0x46>
  210c74:	e00e      	b.n	210c94 <HAL_FLASHEx_Erase+0x94>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);
  210c76:	7b20      	ldrb	r0, [r4, #12]
  210c78:	f7ff ff80 	bl	210b7c <_ZL15FLASH_MassEraseh>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
  210c7c:	f24c 3050 	movw	r0, #50000	; 0xc350
  210c80:	f7ff ff0e 	bl	210aa0 <FLASH_WaitForLastOperation>
  210c84:	4602      	mov	r2, r0
      FLASH->CR &= (~FLASH_MER_BIT);
  210c86:	4907      	ldr	r1, [pc, #28]	; (210ca4 <HAL_FLASHEx_Erase+0xa4>)
  210c88:	690b      	ldr	r3, [r1, #16]
  210c8a:	f023 0304 	bic.w	r3, r3, #4
  210c8e:	610b      	str	r3, [r1, #16]
  210c90:	e000      	b.n	210c94 <HAL_FLASHEx_Erase+0x94>
          *SectorError = index;
  210c92:	603d      	str	r5, [r7, #0]
  __HAL_UNLOCK(&pFlash);
  210c94:	2100      	movs	r1, #0
  210c96:	4b02      	ldr	r3, [pc, #8]	; (210ca0 <HAL_FLASHEx_Erase+0xa0>)
  210c98:	7519      	strb	r1, [r3, #20]
}
  210c9a:	4610      	mov	r0, r2
  210c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  210ca0:	200049b0 	.word	0x200049b0
  210ca4:	40023c00 	.word	0x40023c00

00210ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  210ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  210cac:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  210cae:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  210cb0:	4f6f      	ldr	r7, [pc, #444]	; (210e70 <HAL_GPIO_Init+0x1c8>)
  210cb2:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 210e7c <HAL_GPIO_Init+0x1d4>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
  210cb6:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 210e80 <HAL_GPIO_Init+0x1d8>
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
  210cba:	4e6e      	ldr	r6, [pc, #440]	; (210e74 <HAL_GPIO_Init+0x1cc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
  210cbc:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 210e84 <HAL_GPIO_Init+0x1dc>
  210cc0:	e057      	b.n	210d72 <HAL_GPIO_Init+0xca>
        temp = GPIOx->AFR[position >> 3];
  210cc2:	08ec      	lsrs	r4, r5, #3
  210cc4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  210cc8:	f8d4 c020 	ldr.w	ip, [r4, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
  210ccc:	f005 0207 	and.w	r2, r5, #7
  210cd0:	ea4f 0b82 	mov.w	fp, r2, lsl #2
  210cd4:	220f      	movs	r2, #15
  210cd6:	fa02 f20b 	lsl.w	r2, r2, fp
  210cda:	ea2c 0c02 	bic.w	ip, ip, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
  210cde:	690a      	ldr	r2, [r1, #16]
  210ce0:	fa02 f20b 	lsl.w	r2, r2, fp
  210ce4:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->AFR[position >> 3] = temp;
  210ce8:	6222      	str	r2, [r4, #32]
  210cea:	e04e      	b.n	210d8a <HAL_GPIO_Init+0xe2>
        temp = GPIOx->OSPEEDR; 
  210cec:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
  210cee:	ea02 0b04 	and.w	fp, r2, r4
        temp |= (GPIO_Init->Speed << (position * 2));
  210cf2:	68cc      	ldr	r4, [r1, #12]
  210cf4:	fa04 f40c 	lsl.w	r4, r4, ip
  210cf8:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
  210cfc:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
  210cfe:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
  210d00:	ea24 0b03 	bic.w	fp, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
  210d04:	684c      	ldr	r4, [r1, #4]
  210d06:	f3c4 1300 	ubfx	r3, r4, #4, #1
  210d0a:	40ab      	lsls	r3, r5
  210d0c:	ea43 030b 	orr.w	r3, r3, fp
        GPIOx->OTYPER = temp;
  210d10:	6043      	str	r3, [r0, #4]
  210d12:	e051      	b.n	210db8 <HAL_GPIO_Init+0x110>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
  210d14:	2300      	movs	r3, #0
  210d16:	fa03 f30b 	lsl.w	r3, r3, fp
  210d1a:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2] = temp;
  210d1e:	60a3      	str	r3, [r4, #8]
        temp = EXTI->IMR;
  210d20:	6833      	ldr	r3, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
  210d22:	ea6f 0408 	mvn.w	r4, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
  210d26:	684a      	ldr	r2, [r1, #4]
  210d28:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
  210d2c:	bf0c      	ite	eq
  210d2e:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
  210d30:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->IMR = temp;
  210d34:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR;
  210d36:	6873      	ldr	r3, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
  210d38:	684a      	ldr	r2, [r1, #4]
  210d3a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
  210d3e:	bf0c      	ite	eq
  210d40:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
  210d42:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->EMR = temp;
  210d46:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
  210d48:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
  210d4a:	684b      	ldr	r3, [r1, #4]
  210d4c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
  210d50:	bf0c      	ite	eq
  210d52:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
  210d54:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->RTSR = temp;
  210d58:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
  210d5a:	68f3      	ldr	r3, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
  210d5c:	684a      	ldr	r2, [r1, #4]
  210d5e:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
  210d62:	bf0c      	ite	eq
  210d64:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
  210d66:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->FTSR = temp;
  210d6a:	60f3      	str	r3, [r6, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
  210d6c:	3501      	adds	r5, #1
  210d6e:	2d10      	cmp	r5, #16
  210d70:	d07a      	beq.n	210e68 <HAL_GPIO_Init+0x1c0>
    ioposition = ((uint32_t)0x01) << position;
  210d72:	2301      	movs	r3, #1
  210d74:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
  210d76:	680a      	ldr	r2, [r1, #0]
  210d78:	ea03 0802 	and.w	r8, r3, r2
    if(iocurrent == ioposition)
  210d7c:	4543      	cmp	r3, r8
  210d7e:	d1f5      	bne.n	210d6c <HAL_GPIO_Init+0xc4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
  210d80:	684a      	ldr	r2, [r1, #4]
  210d82:	f022 0210 	bic.w	r2, r2, #16
  210d86:	2a02      	cmp	r2, #2
  210d88:	d09b      	beq.n	210cc2 <HAL_GPIO_Init+0x1a>
      temp = GPIOx->MODER;
  210d8a:	6804      	ldr	r4, [r0, #0]
  210d8c:	ea4f 0c45 	mov.w	ip, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
  210d90:	2203      	movs	r2, #3
  210d92:	fa02 f20c 	lsl.w	r2, r2, ip
  210d96:	43d2      	mvns	r2, r2
  210d98:	ea04 0b02 	and.w	fp, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
  210d9c:	684c      	ldr	r4, [r1, #4]
  210d9e:	f004 0403 	and.w	r4, r4, #3
  210da2:	fa04 f40c 	lsl.w	r4, r4, ip
  210da6:	ea44 040b 	orr.w	r4, r4, fp
      GPIOx->MODER = temp;
  210daa:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
  210dac:	684c      	ldr	r4, [r1, #4]
  210dae:	f024 0410 	bic.w	r4, r4, #16
  210db2:	3c01      	subs	r4, #1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
  210db4:	2c01      	cmp	r4, #1
  210db6:	d999      	bls.n	210cec <HAL_GPIO_Init+0x44>
      temp = GPIOx->PUPDR;
  210db8:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
  210dba:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2));
  210dbc:	688b      	ldr	r3, [r1, #8]
  210dbe:	fa03 f30c 	lsl.w	r3, r3, ip
  210dc2:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
  210dc4:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
  210dc6:	684b      	ldr	r3, [r1, #4]
  210dc8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
  210dcc:	d0ce      	beq.n	210d6c <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  210dce:	2300      	movs	r3, #0
  210dd0:	9301      	str	r3, [sp, #4]
  210dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  210dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  210dd8:	647b      	str	r3, [r7, #68]	; 0x44
  210dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  210ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  210de0:	9301      	str	r3, [sp, #4]
  210de2:	f025 0403 	bic.w	r4, r5, #3
  210de6:	4474      	add	r4, lr
        temp = SYSCFG->EXTICR[position >> 2];
  210de8:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
  210dea:	f005 0303 	and.w	r3, r5, #3
  210dee:	ea4f 0b83 	mov.w	fp, r3, lsl #2
  210df2:	230f      	movs	r3, #15
  210df4:	fa03 f30b 	lsl.w	r3, r3, fp
  210df8:	ea22 0c03 	bic.w	ip, r2, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
  210dfc:	4548      	cmp	r0, r9
  210dfe:	d089      	beq.n	210d14 <HAL_GPIO_Init+0x6c>
  210e00:	4550      	cmp	r0, sl
  210e02:	d021      	beq.n	210e48 <HAL_GPIO_Init+0x1a0>
  210e04:	4b1c      	ldr	r3, [pc, #112]	; (210e78 <HAL_GPIO_Init+0x1d0>)
  210e06:	4298      	cmp	r0, r3
  210e08:	d020      	beq.n	210e4c <HAL_GPIO_Init+0x1a4>
  210e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  210e0e:	4298      	cmp	r0, r3
  210e10:	d01e      	beq.n	210e50 <HAL_GPIO_Init+0x1a8>
  210e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  210e16:	4298      	cmp	r0, r3
  210e18:	d01c      	beq.n	210e54 <HAL_GPIO_Init+0x1ac>
  210e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  210e1e:	4298      	cmp	r0, r3
  210e20:	d01a      	beq.n	210e58 <HAL_GPIO_Init+0x1b0>
  210e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  210e26:	4298      	cmp	r0, r3
  210e28:	d018      	beq.n	210e5c <HAL_GPIO_Init+0x1b4>
  210e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  210e2e:	4298      	cmp	r0, r3
  210e30:	d016      	beq.n	210e60 <HAL_GPIO_Init+0x1b8>
  210e32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  210e36:	4298      	cmp	r0, r3
  210e38:	d014      	beq.n	210e64 <HAL_GPIO_Init+0x1bc>
  210e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  210e3e:	4298      	cmp	r0, r3
  210e40:	bf0c      	ite	eq
  210e42:	2309      	moveq	r3, #9
  210e44:	230a      	movne	r3, #10
  210e46:	e766      	b.n	210d16 <HAL_GPIO_Init+0x6e>
  210e48:	2301      	movs	r3, #1
  210e4a:	e764      	b.n	210d16 <HAL_GPIO_Init+0x6e>
  210e4c:	2302      	movs	r3, #2
  210e4e:	e762      	b.n	210d16 <HAL_GPIO_Init+0x6e>
  210e50:	2303      	movs	r3, #3
  210e52:	e760      	b.n	210d16 <HAL_GPIO_Init+0x6e>
  210e54:	2304      	movs	r3, #4
  210e56:	e75e      	b.n	210d16 <HAL_GPIO_Init+0x6e>
  210e58:	2305      	movs	r3, #5
  210e5a:	e75c      	b.n	210d16 <HAL_GPIO_Init+0x6e>
  210e5c:	2306      	movs	r3, #6
  210e5e:	e75a      	b.n	210d16 <HAL_GPIO_Init+0x6e>
  210e60:	2307      	movs	r3, #7
  210e62:	e758      	b.n	210d16 <HAL_GPIO_Init+0x6e>
  210e64:	2308      	movs	r3, #8
  210e66:	e756      	b.n	210d16 <HAL_GPIO_Init+0x6e>
      }
    }
  }
}
  210e68:	b003      	add	sp, #12
  210e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  210e6e:	bf00      	nop
  210e70:	40023800 	.word	0x40023800
  210e74:	40013c00 	.word	0x40013c00
  210e78:	40020800 	.word	0x40020800
  210e7c:	40013800 	.word	0x40013800
  210e80:	40020000 	.word	0x40020000
  210e84:	40020400 	.word	0x40020400

00210e88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
  210e88:	b912      	cbnz	r2, 210e90 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  210e8a:	0409      	lsls	r1, r1, #16
  210e8c:	6181      	str	r1, [r0, #24]
  210e8e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
  210e90:	6181      	str	r1, [r0, #24]
  210e92:	4770      	bx	lr

00210e94 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
  210e94:	6943      	ldr	r3, [r0, #20]
  210e96:	4059      	eors	r1, r3
  210e98:	6141      	str	r1, [r0, #20]
  210e9a:	4770      	bx	lr

00210e9c <_ZL18I2C_TransferConfigP17I2C_HandleTypeDefthmm>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
  210e9c:	b430      	push	{r4, r5}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
  
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
  210e9e:	6805      	ldr	r5, [r0, #0]
  210ea0:	6868      	ldr	r0, [r5, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  210ea2:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
  210ea6:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  210eaa:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  210eae:	f020 0003 	bic.w	r0, r0, #3
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
  210eb2:	f3c1 0109 	ubfx	r1, r1, #0, #10
    (uint32_t)Mode | (uint32_t)Request);
  210eb6:	9c02      	ldr	r4, [sp, #8]
  210eb8:	4323      	orrs	r3, r4
  210eba:	4319      	orrs	r1, r3
  210ebc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
  210ec0:	4301      	orrs	r1, r0
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
  210ec2:	6069      	str	r1, [r5, #4]
}  
  210ec4:	bc30      	pop	{r4, r5}
  210ec6:	4770      	bx	lr

00210ec8 <_ZL23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDefm>:
{
  210ec8:	b570      	push	{r4, r5, r6, lr}
  210eca:	4605      	mov	r5, r0
  210ecc:	460c      	mov	r4, r1
  tickstart = HAL_GetTick();
  210ece:	f7fe fce9 	bl	20f8a4 <HAL_GetTick>
  210ed2:	4606      	mov	r6, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  210ed4:	682b      	ldr	r3, [r5, #0]
  210ed6:	699b      	ldr	r3, [r3, #24]
  210ed8:	f013 0f10 	tst.w	r3, #16
  210edc:	d036      	beq.n	210f4c <_ZL23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDefm+0x84>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  210ede:	682a      	ldr	r2, [r5, #0]
  210ee0:	6993      	ldr	r3, [r2, #24]
  210ee2:	f013 0f20 	tst.w	r3, #32
  210ee6:	d111      	bne.n	210f0c <_ZL23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDefm+0x44>
      if(Timeout != HAL_MAX_DELAY)
  210ee8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
  210eec:	d0f8      	beq.n	210ee0 <_ZL23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDefm+0x18>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  210eee:	b93c      	cbnz	r4, 210f00 <_ZL23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDefm+0x38>
          hi2c->State= HAL_I2C_STATE_READY;
  210ef0:	2301      	movs	r3, #1
  210ef2:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
  210ef6:	2300      	movs	r3, #0
  210ef8:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
          return HAL_TIMEOUT;
  210efc:	2003      	movs	r0, #3
  210efe:	bd70      	pop	{r4, r5, r6, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  210f00:	f7fe fcd0 	bl	20f8a4 <HAL_GetTick>
  210f04:	1b80      	subs	r0, r0, r6
  210f06:	4284      	cmp	r4, r0
  210f08:	d2e9      	bcs.n	210ede <_ZL23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDefm+0x16>
  210f0a:	e7f1      	b.n	210ef0 <_ZL23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDefm+0x28>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  210f0c:	2310      	movs	r3, #16
  210f0e:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
  210f10:	682b      	ldr	r3, [r5, #0]
  210f12:	2220      	movs	r2, #32
  210f14:	61da      	str	r2, [r3, #28]
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
  210f16:	682b      	ldr	r3, [r5, #0]
  210f18:	699a      	ldr	r2, [r3, #24]
  210f1a:	f012 0f01 	tst.w	r2, #1
  210f1e:	d101      	bne.n	210f24 <_ZL23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDefm+0x5c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
  210f20:	2201      	movs	r2, #1
  210f22:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
  210f24:	682a      	ldr	r2, [r5, #0]
  210f26:	6853      	ldr	r3, [r2, #4]
  210f28:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
  210f2c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
  210f30:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
  210f34:	f023 0301 	bic.w	r3, r3, #1
  210f38:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
  210f3a:	2304      	movs	r3, #4
  210f3c:	63ab      	str	r3, [r5, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
  210f3e:	2001      	movs	r0, #1
  210f40:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
  210f44:	2300      	movs	r3, #0
  210f46:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
  210f4a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
  210f4c:	2000      	movs	r0, #0
}
  210f4e:	bd70      	pop	{r4, r5, r6, pc}

00210f50 <_ZL30I2C_WaitOnTXISFlagUntilTimeoutP17I2C_HandleTypeDefm>:
{  
  210f50:	b570      	push	{r4, r5, r6, lr}
  210f52:	4604      	mov	r4, r0
  210f54:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
  210f56:	f7fe fca5 	bl	20f8a4 <HAL_GetTick>
  210f5a:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  210f5c:	6823      	ldr	r3, [r4, #0]
  210f5e:	699b      	ldr	r3, [r3, #24]
  210f60:	f013 0f02 	tst.w	r3, #2
  210f64:	d11a      	bne.n	210f9c <_ZL30I2C_WaitOnTXISFlagUntilTimeoutP17I2C_HandleTypeDefm+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
  210f66:	4629      	mov	r1, r5
  210f68:	4620      	mov	r0, r4
  210f6a:	f7ff ffad 	bl	210ec8 <_ZL23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDefm>
  210f6e:	b9b8      	cbnz	r0, 210fa0 <_ZL30I2C_WaitOnTXISFlagUntilTimeoutP17I2C_HandleTypeDefm+0x50>
    if(Timeout != HAL_MAX_DELAY)
  210f70:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
  210f74:	d0f2      	beq.n	210f5c <_ZL30I2C_WaitOnTXISFlagUntilTimeoutP17I2C_HandleTypeDefm+0xc>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  210f76:	b95d      	cbnz	r5, 210f90 <_ZL30I2C_WaitOnTXISFlagUntilTimeoutP17I2C_HandleTypeDefm+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
  210f78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  210f7a:	f043 0320 	orr.w	r3, r3, #32
  210f7e:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
  210f80:	2301      	movs	r3, #1
  210f82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hi2c);
  210f86:	2300      	movs	r3, #0
  210f88:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
  210f8c:	2003      	movs	r0, #3
  210f8e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  210f90:	f7fe fc88 	bl	20f8a4 <HAL_GetTick>
  210f94:	1b80      	subs	r0, r0, r6
  210f96:	4285      	cmp	r5, r0
  210f98:	d2e0      	bcs.n	210f5c <_ZL30I2C_WaitOnTXISFlagUntilTimeoutP17I2C_HandleTypeDefm+0xc>
  210f9a:	e7ed      	b.n	210f78 <_ZL30I2C_WaitOnTXISFlagUntilTimeoutP17I2C_HandleTypeDefm+0x28>
  return HAL_OK;      
  210f9c:	2000      	movs	r0, #0
  210f9e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
  210fa0:	2001      	movs	r0, #1
}
  210fa2:	bd70      	pop	{r4, r5, r6, pc}

00210fa4 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm>:
{  
  210fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  210fa8:	4606      	mov	r6, r0
  210faa:	460c      	mov	r4, r1
  210fac:	4690      	mov	r8, r2
  210fae:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
  210fb0:	f7fe fc78 	bl	20f8a4 <HAL_GetTick>
  210fb4:	4607      	mov	r7, r0
  if(Status == RESET)
  210fb6:	f1b8 0f00 	cmp.w	r8, #0
  210fba:	d119      	bne.n	210ff0 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm+0x4c>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  210fbc:	f3c4 0410 	ubfx	r4, r4, #0, #17
  210fc0:	6832      	ldr	r2, [r6, #0]
  210fc2:	6993      	ldr	r3, [r2, #24]
  210fc4:	ea34 0303 	bics.w	r3, r4, r3
  210fc8:	d02c      	beq.n	211024 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm+0x80>
      if(Timeout != HAL_MAX_DELAY)
  210fca:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
  210fce:	d0f8      	beq.n	210fc2 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm+0x1e>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  210fd0:	b945      	cbnz	r5, 210fe4 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm+0x40>
          hi2c->State= HAL_I2C_STATE_READY;
  210fd2:	2301      	movs	r3, #1
  210fd4:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
  210fd8:	2300      	movs	r3, #0
  210fda:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
          return HAL_TIMEOUT;
  210fde:	2003      	movs	r0, #3
  210fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  210fe4:	f7fe fc5e 	bl	20f8a4 <HAL_GetTick>
  210fe8:	1bc0      	subs	r0, r0, r7
  210fea:	4285      	cmp	r5, r0
  210fec:	d2e8      	bcs.n	210fc0 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm+0x1c>
  210fee:	e7f0      	b.n	210fd2 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm+0x2e>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
  210ff0:	f3c4 0410 	ubfx	r4, r4, #0, #17
  210ff4:	6833      	ldr	r3, [r6, #0]
  210ff6:	699a      	ldr	r2, [r3, #24]
  210ff8:	ea34 0202 	bics.w	r2, r4, r2
  210ffc:	d115      	bne.n	21102a <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm+0x86>
      if(Timeout != HAL_MAX_DELAY)
  210ffe:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
  211002:	d0f8      	beq.n	210ff6 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm+0x52>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  211004:	b945      	cbnz	r5, 211018 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm+0x74>
          hi2c->State= HAL_I2C_STATE_READY;
  211006:	2301      	movs	r3, #1
  211008:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
  21100c:	2300      	movs	r3, #0
  21100e:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
          return HAL_TIMEOUT;
  211012:	2003      	movs	r0, #3
  211014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  211018:	f7fe fc44 	bl	20f8a4 <HAL_GetTick>
  21101c:	1bc0      	subs	r0, r0, r7
  21101e:	4285      	cmp	r5, r0
  211020:	d3f1      	bcc.n	211006 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm+0x62>
  211022:	e7e7      	b.n	210ff4 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm+0x50>
  return HAL_OK;
  211024:	2000      	movs	r0, #0
  211026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  21102a:	2000      	movs	r0, #0
}
  21102c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00211030 <_ZL30I2C_WaitOnSTOPFlagUntilTimeoutP17I2C_HandleTypeDefm>:
{  
  211030:	b570      	push	{r4, r5, r6, lr}
  211032:	4605      	mov	r5, r0
  211034:	460c      	mov	r4, r1
  tickstart = HAL_GetTick();
  211036:	f7fe fc35 	bl	20f8a4 <HAL_GetTick>
  21103a:	4606      	mov	r6, r0
  21103c:	e004      	b.n	211048 <_ZL30I2C_WaitOnSTOPFlagUntilTimeoutP17I2C_HandleTypeDefm+0x18>
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  21103e:	f7fe fc31 	bl	20f8a4 <HAL_GetTick>
  211042:	1b80      	subs	r0, r0, r6
  211044:	4284      	cmp	r4, r0
  211046:	d30b      	bcc.n	211060 <_ZL30I2C_WaitOnSTOPFlagUntilTimeoutP17I2C_HandleTypeDefm+0x30>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  211048:	682b      	ldr	r3, [r5, #0]
  21104a:	699b      	ldr	r3, [r3, #24]
  21104c:	f013 0f20 	tst.w	r3, #32
  211050:	d112      	bne.n	211078 <_ZL30I2C_WaitOnSTOPFlagUntilTimeoutP17I2C_HandleTypeDefm+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
  211052:	4621      	mov	r1, r4
  211054:	4628      	mov	r0, r5
  211056:	f7ff ff37 	bl	210ec8 <_ZL23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDefm>
  21105a:	b978      	cbnz	r0, 21107c <_ZL30I2C_WaitOnSTOPFlagUntilTimeoutP17I2C_HandleTypeDefm+0x4c>
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  21105c:	2c00      	cmp	r4, #0
  21105e:	d1ee      	bne.n	21103e <_ZL30I2C_WaitOnSTOPFlagUntilTimeoutP17I2C_HandleTypeDefm+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
  211060:	6bab      	ldr	r3, [r5, #56]	; 0x38
  211062:	f043 0320 	orr.w	r3, r3, #32
  211066:	63ab      	str	r3, [r5, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
  211068:	2301      	movs	r3, #1
  21106a:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
  21106e:	2300      	movs	r3, #0
  211070:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
      return HAL_TIMEOUT;
  211074:	2003      	movs	r0, #3
  211076:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
  211078:	2000      	movs	r0, #0
  21107a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
  21107c:	2001      	movs	r0, #1
}
  21107e:	bd70      	pop	{r4, r5, r6, pc}

00211080 <_ZL30I2C_WaitOnRXNEFlagUntilTimeoutP17I2C_HandleTypeDefm>:
{  
  211080:	b570      	push	{r4, r5, r6, lr}
  211082:	4604      	mov	r4, r0
  211084:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
  211086:	f7fe fc0d 	bl	20f8a4 <HAL_GetTick>
  21108a:	4606      	mov	r6, r0
  21108c:	e019      	b.n	2110c2 <_ZL30I2C_WaitOnRXNEFlagUntilTimeoutP17I2C_HandleTypeDefm+0x42>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
  21108e:	2220      	movs	r2, #32
  211090:	61da      	str	r2, [r3, #28]
      I2C_RESET_CR2(hi2c);
  211092:	6822      	ldr	r2, [r4, #0]
  211094:	6853      	ldr	r3, [r2, #4]
  211096:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
  21109a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
  21109e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
  2110a2:	f023 0301 	bic.w	r3, r3, #1
  2110a6:	6053      	str	r3, [r2, #4]
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  2110a8:	2300      	movs	r3, #0
  2110aa:	63a3      	str	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
  2110ac:	2001      	movs	r0, #1
  2110ae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
  2110b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
  2110b6:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  2110b8:	f7fe fbf4 	bl	20f8a4 <HAL_GetTick>
  2110bc:	1b80      	subs	r0, r0, r6
  2110be:	4285      	cmp	r5, r0
  2110c0:	d310      	bcc.n	2110e4 <_ZL30I2C_WaitOnRXNEFlagUntilTimeoutP17I2C_HandleTypeDefm+0x64>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
  2110c2:	6823      	ldr	r3, [r4, #0]
  2110c4:	699b      	ldr	r3, [r3, #24]
  2110c6:	f013 0f04 	tst.w	r3, #4
  2110ca:	d117      	bne.n	2110fc <_ZL30I2C_WaitOnRXNEFlagUntilTimeoutP17I2C_HandleTypeDefm+0x7c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
  2110cc:	4629      	mov	r1, r5
  2110ce:	4620      	mov	r0, r4
  2110d0:	f7ff fefa 	bl	210ec8 <_ZL23I2C_IsAcknowledgeFailedP17I2C_HandleTypeDefm>
  2110d4:	b9a0      	cbnz	r0, 211100 <_ZL30I2C_WaitOnRXNEFlagUntilTimeoutP17I2C_HandleTypeDefm+0x80>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
  2110d6:	6823      	ldr	r3, [r4, #0]
  2110d8:	699a      	ldr	r2, [r3, #24]
  2110da:	f012 0f20 	tst.w	r2, #32
  2110de:	d1d6      	bne.n	21108e <_ZL30I2C_WaitOnRXNEFlagUntilTimeoutP17I2C_HandleTypeDefm+0xe>
    if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
  2110e0:	2d00      	cmp	r5, #0
  2110e2:	d1e9      	bne.n	2110b8 <_ZL30I2C_WaitOnRXNEFlagUntilTimeoutP17I2C_HandleTypeDefm+0x38>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
  2110e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  2110e6:	f043 0320 	orr.w	r3, r3, #32
  2110ea:	63a3      	str	r3, [r4, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
  2110ec:	2301      	movs	r3, #1
  2110ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hi2c);
  2110f2:	2300      	movs	r3, #0
  2110f4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
  2110f8:	2003      	movs	r0, #3
  2110fa:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
  2110fc:	2000      	movs	r0, #0
  2110fe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
  211100:	2001      	movs	r0, #1
}
  211102:	bd70      	pop	{r4, r5, r6, pc}

00211104 <HAL_I2C_Init>:
  if(hi2c == NULL)
  211104:	2800      	cmp	r0, #0
  211106:	d04c      	beq.n	2111a2 <HAL_I2C_Init+0x9e>
{ 
  211108:	b510      	push	{r4, lr}
  21110a:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
  21110c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  211110:	2b00      	cmp	r3, #0
  211112:	d03c      	beq.n	21118e <HAL_I2C_Init+0x8a>
  hi2c->State = HAL_I2C_STATE_BUSY;
  211114:	2302      	movs	r3, #2
  211116:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
  21111a:	6822      	ldr	r2, [r4, #0]
  21111c:	6813      	ldr	r3, [r2, #0]
  21111e:	f023 0301 	bic.w	r3, r3, #1
  211122:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
  211124:	6822      	ldr	r2, [r4, #0]
  211126:	6863      	ldr	r3, [r4, #4]
  211128:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
  21112c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
  21112e:	6822      	ldr	r2, [r4, #0]
  211130:	6893      	ldr	r3, [r2, #8]
  211132:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  211136:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.OwnAddress1 != 0)
  211138:	68a3      	ldr	r3, [r4, #8]
  21113a:	b143      	cbz	r3, 21114e <HAL_I2C_Init+0x4a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  21113c:	68e2      	ldr	r2, [r4, #12]
  21113e:	2a01      	cmp	r2, #1
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  211140:	6822      	ldr	r2, [r4, #0]
  211142:	bf0c      	ite	eq
  211144:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
  211148:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
  21114c:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  21114e:	68e3      	ldr	r3, [r4, #12]
  211150:	2b02      	cmp	r3, #2
  211152:	d021      	beq.n	211198 <HAL_I2C_Init+0x94>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
  211154:	6822      	ldr	r2, [r4, #0]
  211156:	6851      	ldr	r1, [r2, #4]
  211158:	4b13      	ldr	r3, [pc, #76]	; (2111a8 <HAL_I2C_Init+0xa4>)
  21115a:	430b      	orrs	r3, r1
  21115c:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
  21115e:	6822      	ldr	r2, [r4, #0]
  211160:	6923      	ldr	r3, [r4, #16]
  211162:	6961      	ldr	r1, [r4, #20]
  211164:	430b      	orrs	r3, r1
  211166:	69a1      	ldr	r1, [r4, #24]
  211168:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  21116c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  21116e:	6822      	ldr	r2, [r4, #0]
  211170:	69e3      	ldr	r3, [r4, #28]
  211172:	6a21      	ldr	r1, [r4, #32]
  211174:	430b      	orrs	r3, r1
  211176:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
  211178:	6822      	ldr	r2, [r4, #0]
  21117a:	6813      	ldr	r3, [r2, #0]
  21117c:	f043 0301 	orr.w	r3, r3, #1
  211180:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  211182:	2000      	movs	r0, #0
  211184:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
  211186:	2301      	movs	r3, #1
  211188:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
  21118c:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
  21118e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    HAL_I2C_MspInit(hi2c);
  211192:	f7fa fdad 	bl	20bcf0 <HAL_I2C_MspInit>
  211196:	e7bd      	b.n	211114 <HAL_I2C_Init+0x10>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  211198:	6823      	ldr	r3, [r4, #0]
  21119a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  21119e:	605a      	str	r2, [r3, #4]
  2111a0:	e7d8      	b.n	211154 <HAL_I2C_Init+0x50>
    return HAL_ERROR;
  2111a2:	2001      	movs	r0, #1
  2111a4:	4770      	bx	lr
  2111a6:	bf00      	nop
  2111a8:	02008000 	.word	0x02008000

002111ac <HAL_I2C_Master_Transmit>:
{
  2111ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2111b0:	b083      	sub	sp, #12
  2111b2:	461d      	mov	r5, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
  2111b4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  2111b8:	b2db      	uxtb	r3, r3
  2111ba:	2b01      	cmp	r3, #1
  2111bc:	d003      	beq.n	2111c6 <HAL_I2C_Master_Transmit+0x1a>
    return HAL_BUSY; 
  2111be:	2002      	movs	r0, #2
}
  2111c0:	b003      	add	sp, #12
  2111c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2111c6:	4604      	mov	r4, r0
  2111c8:	460f      	mov	r7, r1
  2111ca:	4616      	mov	r6, r2
    if((pData == NULL ) || (Size == 0)) 
  2111cc:	2a00      	cmp	r2, #0
  2111ce:	f000 8089 	beq.w	2112e4 <HAL_I2C_Master_Transmit+0x138>
  2111d2:	2d00      	cmp	r5, #0
  2111d4:	f000 8086 	beq.w	2112e4 <HAL_I2C_Master_Transmit+0x138>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
  2111d8:	6803      	ldr	r3, [r0, #0]
  2111da:	699b      	ldr	r3, [r3, #24]
  2111dc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  2111e0:	d001      	beq.n	2111e6 <HAL_I2C_Master_Transmit+0x3a>
      return HAL_BUSY;
  2111e2:	2002      	movs	r0, #2
  2111e4:	e7ec      	b.n	2111c0 <HAL_I2C_Master_Transmit+0x14>
    __HAL_LOCK(hi2c);
  2111e6:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  2111ea:	2b01      	cmp	r3, #1
  2111ec:	d07c      	beq.n	2112e8 <HAL_I2C_Master_Transmit+0x13c>
  2111ee:	2301      	movs	r3, #1
  2111f0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_TX;
  2111f4:	2312      	movs	r3, #18
  2111f6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
  2111fa:	2300      	movs	r3, #0
  2111fc:	6383      	str	r3, [r0, #56]	; 0x38
    if(Size > 255)
  2111fe:	2dff      	cmp	r5, #255	; 0xff
  211200:	dd10      	ble.n	211224 <HAL_I2C_Master_Transmit+0x78>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
  211202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  211206:	9300      	str	r3, [sp, #0]
  211208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  21120c:	22ff      	movs	r2, #255	; 0xff
  21120e:	f7ff fe45 	bl	210e9c <_ZL18I2C_TransferConfigP17I2C_HandleTypeDefthmm>
      sizetmp = 255;
  211212:	f04f 08ff 	mov.w	r8, #255	; 0xff
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
  211216:	f04f 0900 	mov.w	r9, #0
  21121a:	f04f 0a80 	mov.w	sl, #128	; 0x80
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
  21121e:	f04f 7b00 	mov.w	fp, #33554432	; 0x2000000
  211222:	e019      	b.n	211258 <HAL_I2C_Master_Transmit+0xac>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
  211224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  211228:	9300      	str	r3, [sp, #0]
  21122a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  21122e:	b2ea      	uxtb	r2, r5
  211230:	f7ff fe34 	bl	210e9c <_ZL18I2C_TransferConfigP17I2C_HandleTypeDefthmm>
      sizetmp = Size;
  211234:	46a8      	mov	r8, r5
  211236:	e7ee      	b.n	211216 <HAL_I2C_Master_Transmit+0x6a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
  211238:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
  21123a:	2b04      	cmp	r3, #4
  21123c:	bf0c      	ite	eq
  21123e:	2001      	moveq	r0, #1
  211240:	2003      	movne	r0, #3
  211242:	e7bd      	b.n	2111c0 <HAL_I2C_Master_Transmit+0x14>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
  211244:	f8cd 9000 	str.w	r9, [sp]
  211248:	465b      	mov	r3, fp
  21124a:	b2ea      	uxtb	r2, r5
  21124c:	4639      	mov	r1, r7
  21124e:	4620      	mov	r0, r4
  211250:	f7ff fe24 	bl	210e9c <_ZL18I2C_TransferConfigP17I2C_HandleTypeDefthmm>
          sizetmp = Size;
  211254:	46a8      	mov	r8, r5
    }while(Size > 0);
  211256:	b32d      	cbz	r5, 2112a4 <HAL_I2C_Master_Transmit+0xf8>
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
  211258:	990c      	ldr	r1, [sp, #48]	; 0x30
  21125a:	4620      	mov	r0, r4
  21125c:	f7ff fe78 	bl	210f50 <_ZL30I2C_WaitOnTXISFlagUntilTimeoutP17I2C_HandleTypeDefm>
  211260:	2800      	cmp	r0, #0
  211262:	d1e9      	bne.n	211238 <HAL_I2C_Master_Transmit+0x8c>
      hi2c->Instance->TXDR = (*pData++);
  211264:	6823      	ldr	r3, [r4, #0]
  211266:	f816 2b01 	ldrb.w	r2, [r6], #1
  21126a:	629a      	str	r2, [r3, #40]	; 0x28
      Size--;
  21126c:	3d01      	subs	r5, #1
  21126e:	b2ad      	uxth	r5, r5
      if((sizetmp == 0)&&(Size!=0))
  211270:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
  211274:	d1ef      	bne.n	211256 <HAL_I2C_Master_Transmit+0xaa>
  211276:	2d00      	cmp	r5, #0
  211278:	d0ed      	beq.n	211256 <HAL_I2C_Master_Transmit+0xaa>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
  21127a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  21127c:	464a      	mov	r2, r9
  21127e:	4651      	mov	r1, sl
  211280:	4620      	mov	r0, r4
  211282:	f7ff fe8f 	bl	210fa4 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm>
  211286:	bb88      	cbnz	r0, 2112ec <HAL_I2C_Master_Transmit+0x140>
        if(Size > 255)
  211288:	2dff      	cmp	r5, #255	; 0xff
  21128a:	dddb      	ble.n	211244 <HAL_I2C_Master_Transmit+0x98>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
  21128c:	f8cd 9000 	str.w	r9, [sp]
  211290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  211294:	22ff      	movs	r2, #255	; 0xff
  211296:	4639      	mov	r1, r7
  211298:	4620      	mov	r0, r4
  21129a:	f7ff fdff 	bl	210e9c <_ZL18I2C_TransferConfigP17I2C_HandleTypeDefthmm>
          sizetmp = 255;
  21129e:	f04f 08ff 	mov.w	r8, #255	; 0xff
  2112a2:	e7d8      	b.n	211256 <HAL_I2C_Master_Transmit+0xaa>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
  2112a4:	990c      	ldr	r1, [sp, #48]	; 0x30
  2112a6:	4620      	mov	r0, r4
  2112a8:	f7ff fec2 	bl	211030 <_ZL30I2C_WaitOnSTOPFlagUntilTimeoutP17I2C_HandleTypeDefm>
  2112ac:	b128      	cbz	r0, 2112ba <HAL_I2C_Master_Transmit+0x10e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
  2112ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
  2112b0:	2b04      	cmp	r3, #4
  2112b2:	bf0c      	ite	eq
  2112b4:	2001      	moveq	r0, #1
  2112b6:	2003      	movne	r0, #3
  2112b8:	e782      	b.n	2111c0 <HAL_I2C_Master_Transmit+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
  2112ba:	6823      	ldr	r3, [r4, #0]
  2112bc:	2220      	movs	r2, #32
  2112be:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
  2112c0:	6822      	ldr	r2, [r4, #0]
  2112c2:	6853      	ldr	r3, [r2, #4]
  2112c4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
  2112c8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
  2112cc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
  2112d0:	f023 0301 	bic.w	r3, r3, #1
  2112d4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
  2112d6:	2301      	movs	r3, #1
  2112d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
  2112dc:	2000      	movs	r0, #0
  2112de:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
  2112e2:	e76d      	b.n	2111c0 <HAL_I2C_Master_Transmit+0x14>
      return  HAL_ERROR;                                    
  2112e4:	2001      	movs	r0, #1
  2112e6:	e76b      	b.n	2111c0 <HAL_I2C_Master_Transmit+0x14>
    __HAL_LOCK(hi2c);
  2112e8:	2002      	movs	r0, #2
  2112ea:	e769      	b.n	2111c0 <HAL_I2C_Master_Transmit+0x14>
          return HAL_TIMEOUT;
  2112ec:	2003      	movs	r0, #3
  2112ee:	e767      	b.n	2111c0 <HAL_I2C_Master_Transmit+0x14>

002112f0 <HAL_I2C_Master_Receive>:
{
  2112f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2112f4:	b083      	sub	sp, #12
  2112f6:	461d      	mov	r5, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
  2112f8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  2112fc:	b2db      	uxtb	r3, r3
  2112fe:	2b01      	cmp	r3, #1
  211300:	d003      	beq.n	21130a <HAL_I2C_Master_Receive+0x1a>
    return HAL_BUSY; 
  211302:	2002      	movs	r0, #2
}
  211304:	b003      	add	sp, #12
  211306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  21130a:	4604      	mov	r4, r0
  21130c:	460f      	mov	r7, r1
  21130e:	4616      	mov	r6, r2
    if((pData == NULL ) || (Size == 0)) 
  211310:	2a00      	cmp	r2, #0
  211312:	f000 808a 	beq.w	21142a <HAL_I2C_Master_Receive+0x13a>
  211316:	2d00      	cmp	r5, #0
  211318:	f000 8087 	beq.w	21142a <HAL_I2C_Master_Receive+0x13a>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
  21131c:	6803      	ldr	r3, [r0, #0]
  21131e:	699b      	ldr	r3, [r3, #24]
  211320:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  211324:	d001      	beq.n	21132a <HAL_I2C_Master_Receive+0x3a>
      return HAL_BUSY;
  211326:	2002      	movs	r0, #2
  211328:	e7ec      	b.n	211304 <HAL_I2C_Master_Receive+0x14>
    __HAL_LOCK(hi2c);
  21132a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  21132e:	2b01      	cmp	r3, #1
  211330:	d07d      	beq.n	21142e <HAL_I2C_Master_Receive+0x13e>
  211332:	2301      	movs	r3, #1
  211334:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_RX;
  211338:	2322      	movs	r3, #34	; 0x22
  21133a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
  21133e:	2300      	movs	r3, #0
  211340:	6383      	str	r3, [r0, #56]	; 0x38
    if(Size > 255)
  211342:	2dff      	cmp	r5, #255	; 0xff
  211344:	dd10      	ble.n	211368 <HAL_I2C_Master_Receive+0x78>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
  211346:	f44f 5310 	mov.w	r3, #9216	; 0x2400
  21134a:	9300      	str	r3, [sp, #0]
  21134c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  211350:	22ff      	movs	r2, #255	; 0xff
  211352:	f7ff fda3 	bl	210e9c <_ZL18I2C_TransferConfigP17I2C_HandleTypeDefthmm>
      sizetmp = 255;
  211356:	f04f 08ff 	mov.w	r8, #255	; 0xff
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, I2C_FLAG_RXNE) != HAL_OK)      
  21135a:	f04f 0904 	mov.w	r9, #4
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
  21135e:	f04f 0a00 	mov.w	sl, #0
  211362:	f04f 0b80 	mov.w	fp, #128	; 0x80
  211366:	e01a      	b.n	21139e <HAL_I2C_Master_Receive+0xae>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
  211368:	f44f 5310 	mov.w	r3, #9216	; 0x2400
  21136c:	9300      	str	r3, [sp, #0]
  21136e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  211372:	b2ea      	uxtb	r2, r5
  211374:	f7ff fd92 	bl	210e9c <_ZL18I2C_TransferConfigP17I2C_HandleTypeDefthmm>
      sizetmp = Size;
  211378:	46a8      	mov	r8, r5
  21137a:	e7ee      	b.n	21135a <HAL_I2C_Master_Receive+0x6a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
  21137c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
  21137e:	2b04      	cmp	r3, #4
  211380:	bf0c      	ite	eq
  211382:	2001      	moveq	r0, #1
  211384:	2003      	movne	r0, #3
  211386:	e7bd      	b.n	211304 <HAL_I2C_Master_Receive+0x14>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
  211388:	f8cd a000 	str.w	sl, [sp]
  21138c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  211390:	b2ea      	uxtb	r2, r5
  211392:	4639      	mov	r1, r7
  211394:	4620      	mov	r0, r4
  211396:	f7ff fd81 	bl	210e9c <_ZL18I2C_TransferConfigP17I2C_HandleTypeDefthmm>
          sizetmp = Size;
  21139a:	46a8      	mov	r8, r5
    }while(Size > 0);
  21139c:	b32d      	cbz	r5, 2113ea <HAL_I2C_Master_Receive+0xfa>
      if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, I2C_FLAG_RXNE) != HAL_OK)      
  21139e:	4649      	mov	r1, r9
  2113a0:	4620      	mov	r0, r4
  2113a2:	f7ff fe6d 	bl	211080 <_ZL30I2C_WaitOnRXNEFlagUntilTimeoutP17I2C_HandleTypeDefm>
  2113a6:	2800      	cmp	r0, #0
  2113a8:	d1e8      	bne.n	21137c <HAL_I2C_Master_Receive+0x8c>
      (*pData++) =hi2c->Instance->RXDR;
  2113aa:	6823      	ldr	r3, [r4, #0]
  2113ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  2113ae:	f806 3b01 	strb.w	r3, [r6], #1
      Size--;
  2113b2:	3d01      	subs	r5, #1
  2113b4:	b2ad      	uxth	r5, r5
      if((sizetmp == 0)&&(Size!=0))
  2113b6:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
  2113ba:	d1ef      	bne.n	21139c <HAL_I2C_Master_Receive+0xac>
  2113bc:	2d00      	cmp	r5, #0
  2113be:	d0ed      	beq.n	21139c <HAL_I2C_Master_Receive+0xac>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
  2113c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  2113c2:	4652      	mov	r2, sl
  2113c4:	4659      	mov	r1, fp
  2113c6:	4620      	mov	r0, r4
  2113c8:	f7ff fdec 	bl	210fa4 <_ZL26I2C_WaitOnFlagUntilTimeoutP17I2C_HandleTypeDefm10FlagStatusm>
  2113cc:	bb88      	cbnz	r0, 211432 <HAL_I2C_Master_Receive+0x142>
        if(Size > 255)
  2113ce:	2dff      	cmp	r5, #255	; 0xff
  2113d0:	ddda      	ble.n	211388 <HAL_I2C_Master_Receive+0x98>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
  2113d2:	f8cd a000 	str.w	sl, [sp]
  2113d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  2113da:	22ff      	movs	r2, #255	; 0xff
  2113dc:	4639      	mov	r1, r7
  2113de:	4620      	mov	r0, r4
  2113e0:	f7ff fd5c 	bl	210e9c <_ZL18I2C_TransferConfigP17I2C_HandleTypeDefthmm>
          sizetmp = 255;
  2113e4:	f04f 08ff 	mov.w	r8, #255	; 0xff
  2113e8:	e7d8      	b.n	21139c <HAL_I2C_Master_Receive+0xac>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
  2113ea:	2119      	movs	r1, #25
  2113ec:	4620      	mov	r0, r4
  2113ee:	f7ff fe1f 	bl	211030 <_ZL30I2C_WaitOnSTOPFlagUntilTimeoutP17I2C_HandleTypeDefm>
  2113f2:	b128      	cbz	r0, 211400 <HAL_I2C_Master_Receive+0x110>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
  2113f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
  2113f6:	2b04      	cmp	r3, #4
  2113f8:	bf0c      	ite	eq
  2113fa:	2001      	moveq	r0, #1
  2113fc:	2003      	movne	r0, #3
  2113fe:	e781      	b.n	211304 <HAL_I2C_Master_Receive+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
  211400:	6823      	ldr	r3, [r4, #0]
  211402:	2220      	movs	r2, #32
  211404:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
  211406:	6822      	ldr	r2, [r4, #0]
  211408:	6853      	ldr	r3, [r2, #4]
  21140a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
  21140e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
  211412:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
  211416:	f023 0301 	bic.w	r3, r3, #1
  21141a:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
  21141c:	2301      	movs	r3, #1
  21141e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
  211422:	2000      	movs	r0, #0
  211424:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
  211428:	e76c      	b.n	211304 <HAL_I2C_Master_Receive+0x14>
      return  HAL_ERROR;                                    
  21142a:	2001      	movs	r0, #1
  21142c:	e76a      	b.n	211304 <HAL_I2C_Master_Receive+0x14>
    __HAL_LOCK(hi2c);
  21142e:	2002      	movs	r0, #2
  211430:	e768      	b.n	211304 <HAL_I2C_Master_Receive+0x14>
          return HAL_TIMEOUT;
  211432:	2003      	movs	r0, #3
  211434:	e766      	b.n	211304 <HAL_I2C_Master_Receive+0x14>

00211436 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
  211436:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  21143a:	b2db      	uxtb	r3, r3
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
  21143c:	2b02      	cmp	r3, #2
  21143e:	d039      	beq.n	2114b4 <HAL_I2CEx_ConfigAnalogFilter+0x7e>
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
  211440:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  211444:	b2db      	uxtb	r3, r3
  211446:	2b12      	cmp	r3, #18
  211448:	d036      	beq.n	2114b8 <HAL_I2CEx_ConfigAnalogFilter+0x82>
  21144a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  21144e:	b2db      	uxtb	r3, r3
  211450:	2b22      	cmp	r3, #34	; 0x22
  211452:	d033      	beq.n	2114bc <HAL_I2CEx_ConfigAnalogFilter+0x86>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
  211454:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  211458:	b2db      	uxtb	r3, r3
  21145a:	2b32      	cmp	r3, #50	; 0x32
  21145c:	d030      	beq.n	2114c0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  21145e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
  211462:	b2db      	uxtb	r3, r3
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
  211464:	2b42      	cmp	r3, #66	; 0x42
  211466:	d02d      	beq.n	2114c4 <HAL_I2CEx_ConfigAnalogFilter+0x8e>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
  211468:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  21146c:	2b01      	cmp	r3, #1
  21146e:	d02b      	beq.n	2114c8 <HAL_I2CEx_ConfigAnalogFilter+0x92>
{
  211470:	b410      	push	{r4}
  __HAL_LOCK(hi2c);
  211472:	2201      	movs	r2, #1
  211474:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  hi2c->State = HAL_I2C_STATE_BUSY;
  211478:	2302      	movs	r3, #2
  21147a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);    
  21147e:	6804      	ldr	r4, [r0, #0]
  211480:	6823      	ldr	r3, [r4, #0]
  211482:	f023 0301 	bic.w	r3, r3, #1
  211486:	6023      	str	r3, [r4, #0]
  
  /* Reset I2Cx ANOFF bit */
  hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
  211488:	6804      	ldr	r4, [r0, #0]
  21148a:	6823      	ldr	r3, [r4, #0]
  21148c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  211490:	6023      	str	r3, [r4, #0]
  
  /* Set analog filter bit*/
  hi2c->Instance->CR1 |= AnalogFilter;
  211492:	6804      	ldr	r4, [r0, #0]
  211494:	6823      	ldr	r3, [r4, #0]
  211496:	4319      	orrs	r1, r3
  211498:	6021      	str	r1, [r4, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
  21149a:	6801      	ldr	r1, [r0, #0]
  21149c:	680b      	ldr	r3, [r1, #0]
  21149e:	4313      	orrs	r3, r2
  2114a0:	600b      	str	r3, [r1, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
  2114a2:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
  2114a6:	2300      	movs	r3, #0
  2114a8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  return HAL_OK; 
  2114ac:	4618      	mov	r0, r3
}
  2114ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  2114b2:	4770      	bx	lr
    return HAL_BUSY;
  2114b4:	2002      	movs	r0, #2
  2114b6:	4770      	bx	lr
  2114b8:	2002      	movs	r0, #2
  2114ba:	4770      	bx	lr
  2114bc:	2002      	movs	r0, #2
  2114be:	4770      	bx	lr
  2114c0:	2002      	movs	r0, #2
  2114c2:	4770      	bx	lr
  2114c4:	2002      	movs	r0, #2
  2114c6:	4770      	bx	lr
  __HAL_LOCK(hi2c);
  2114c8:	2002      	movs	r0, #2
  2114ca:	4770      	bx	lr

002114cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  2114cc:	b530      	push	{r4, r5, lr}
  2114ce:	b083      	sub	sp, #12
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
  2114d0:	2300      	movs	r3, #0
  2114d2:	9301      	str	r3, [sp, #4]
  2114d4:	4b1a      	ldr	r3, [pc, #104]	; (211540 <HAL_PWREx_EnableOverDrive+0x74>)
  2114d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  2114d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  2114dc:	641a      	str	r2, [r3, #64]	; 0x40
  2114de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  2114e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  2114e4:	9301      	str	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
  2114e6:	4a17      	ldr	r2, [pc, #92]	; (211544 <HAL_PWREx_EnableOverDrive+0x78>)
  2114e8:	6813      	ldr	r3, [r2, #0]
  2114ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2114ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
  2114f0:	f7fe f9d8 	bl	20f8a4 <HAL_GetTick>
  2114f4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
  2114f6:	4c13      	ldr	r4, [pc, #76]	; (211544 <HAL_PWREx_EnableOverDrive+0x78>)
  2114f8:	6863      	ldr	r3, [r4, #4]
  2114fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  2114fe:	d108      	bne.n	211512 <HAL_PWREx_EnableOverDrive+0x46>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
  211500:	f7fe f9d0 	bl	20f8a4 <HAL_GetTick>
  211504:	1b40      	subs	r0, r0, r5
  211506:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  21150a:	d9f5      	bls.n	2114f8 <HAL_PWREx_EnableOverDrive+0x2c>
    {
      return HAL_TIMEOUT;
  21150c:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
  21150e:	b003      	add	sp, #12
  211510:	bd30      	pop	{r4, r5, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
  211512:	4a0c      	ldr	r2, [pc, #48]	; (211544 <HAL_PWREx_EnableOverDrive+0x78>)
  211514:	6813      	ldr	r3, [r2, #0]
  211516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  21151a:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
  21151c:	f7fe f9c2 	bl	20f8a4 <HAL_GetTick>
  211520:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
  211522:	4c08      	ldr	r4, [pc, #32]	; (211544 <HAL_PWREx_EnableOverDrive+0x78>)
  211524:	6863      	ldr	r3, [r4, #4]
  211526:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  21152a:	d107      	bne.n	21153c <HAL_PWREx_EnableOverDrive+0x70>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
  21152c:	f7fe f9ba 	bl	20f8a4 <HAL_GetTick>
  211530:	1b40      	subs	r0, r0, r5
  211532:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  211536:	d9f5      	bls.n	211524 <HAL_PWREx_EnableOverDrive+0x58>
      return HAL_TIMEOUT;
  211538:	2003      	movs	r0, #3
  21153a:	e7e8      	b.n	21150e <HAL_PWREx_EnableOverDrive+0x42>
  return HAL_OK;
  21153c:	2000      	movs	r0, #0
  21153e:	e7e6      	b.n	21150e <HAL_PWREx_EnableOverDrive+0x42>
  211540:	40023800 	.word	0x40023800
  211544:	40007000 	.word	0x40007000

00211548 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  211548:	b5f0      	push	{r4, r5, r6, r7, lr}
  21154a:	b083      	sub	sp, #12
  21154c:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  21154e:	6803      	ldr	r3, [r0, #0]
  211550:	f013 0f01 	tst.w	r3, #1
  211554:	d031      	beq.n	2115ba <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
  211556:	4bad      	ldr	r3, [pc, #692]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  211558:	689b      	ldr	r3, [r3, #8]
  21155a:	f003 030c 	and.w	r3, r3, #12
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
  21155e:	2b04      	cmp	r3, #4
  211560:	d026      	beq.n	2115b0 <HAL_RCC_OscConfig+0x68>
  211562:	4baa      	ldr	r3, [pc, #680]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  211564:	689b      	ldr	r3, [r3, #8]
  211566:	f003 030c 	and.w	r3, r3, #12
  21156a:	2b08      	cmp	r3, #8
  21156c:	d01b      	beq.n	2115a6 <HAL_RCC_OscConfig+0x5e>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
  21156e:	4ba7      	ldr	r3, [pc, #668]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  211570:	681a      	ldr	r2, [r3, #0]
  211572:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  211576:	601a      	str	r2, [r3, #0]
  211578:	681a      	ldr	r2, [r3, #0]
  21157a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
  21157e:	601a      	str	r2, [r3, #0]
  211580:	681a      	ldr	r2, [r3, #0]
  211582:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  211586:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
  211588:	f7fe f98c 	bl	20f8a4 <HAL_GetTick>
  21158c:	4606      	mov	r6, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
  21158e:	4d9f      	ldr	r5, [pc, #636]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  211590:	682b      	ldr	r3, [r5, #0]
  211592:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  211596:	d03d      	beq.n	211614 <HAL_RCC_OscConfig+0xcc>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
  211598:	f7fe f984 	bl	20f8a4 <HAL_GetTick>
  21159c:	1b80      	subs	r0, r0, r6
  21159e:	2864      	cmp	r0, #100	; 0x64
  2115a0:	d9f6      	bls.n	211590 <HAL_RCC_OscConfig+0x48>
        {
          return HAL_TIMEOUT;
  2115a2:	2003      	movs	r0, #3
  2115a4:	e1ee      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
  2115a6:	4b99      	ldr	r3, [pc, #612]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2115a8:	685b      	ldr	r3, [r3, #4]
  2115aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  2115ae:	d0de      	beq.n	21156e <HAL_RCC_OscConfig+0x26>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
  2115b0:	4b96      	ldr	r3, [pc, #600]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2115b2:	681b      	ldr	r3, [r3, #0]
  2115b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  2115b8:	d127      	bne.n	21160a <HAL_RCC_OscConfig+0xc2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
  2115ba:	6823      	ldr	r3, [r4, #0]
  2115bc:	f013 0f02 	tst.w	r3, #2
  2115c0:	f000 8088 	beq.w	2116d4 <HAL_RCC_OscConfig+0x18c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
  2115c4:	4b91      	ldr	r3, [pc, #580]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2115c6:	689b      	ldr	r3, [r3, #8]
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
  2115c8:	f013 0f0c 	tst.w	r3, #12
  2115cc:	d070      	beq.n	2116b0 <HAL_RCC_OscConfig+0x168>
  2115ce:	4b8f      	ldr	r3, [pc, #572]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2115d0:	689b      	ldr	r3, [r3, #8]
  2115d2:	f003 030c 	and.w	r3, r3, #12
  2115d6:	2b08      	cmp	r3, #8
  2115d8:	d065      	beq.n	2116a6 <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
  2115da:	68e3      	ldr	r3, [r4, #12]
  2115dc:	2b00      	cmp	r3, #0
  2115de:	f040 8099 	bne.w	211714 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
  2115e2:	4a8a      	ldr	r2, [pc, #552]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2115e4:	6813      	ldr	r3, [r2, #0]
  2115e6:	f023 0301 	bic.w	r3, r3, #1
  2115ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
  2115ec:	f7fe f95a 	bl	20f8a4 <HAL_GetTick>
  2115f0:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
  2115f2:	4d86      	ldr	r5, [pc, #536]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2115f4:	682b      	ldr	r3, [r5, #0]
  2115f6:	f013 0f02 	tst.w	r3, #2
  2115fa:	d06b      	beq.n	2116d4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
  2115fc:	f7fe f952 	bl	20f8a4 <HAL_GetTick>
  211600:	1b80      	subs	r0, r0, r6
  211602:	2864      	cmp	r0, #100	; 0x64
  211604:	d9f6      	bls.n	2115f4 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
  211606:	2003      	movs	r0, #3
  211608:	e1bc      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
  21160a:	6863      	ldr	r3, [r4, #4]
  21160c:	2b00      	cmp	r3, #0
  21160e:	d1d4      	bne.n	2115ba <HAL_RCC_OscConfig+0x72>
        return HAL_ERROR;
  211610:	2001      	movs	r0, #1
  211612:	e1b7      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
  211614:	4a7d      	ldr	r2, [pc, #500]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  211616:	6813      	ldr	r3, [r2, #0]
  211618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  21161c:	6013      	str	r3, [r2, #0]
  21161e:	6863      	ldr	r3, [r4, #4]
  211620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  211624:	d01c      	beq.n	211660 <HAL_RCC_OscConfig+0x118>
  211626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
  21162a:	d023      	beq.n	211674 <HAL_RCC_OscConfig+0x12c>
  21162c:	4b77      	ldr	r3, [pc, #476]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  21162e:	681a      	ldr	r2, [r3, #0]
  211630:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
  211634:	601a      	str	r2, [r3, #0]
  211636:	681a      	ldr	r2, [r3, #0]
  211638:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  21163c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
  21163e:	6863      	ldr	r3, [r4, #4]
  211640:	b313      	cbz	r3, 211688 <HAL_RCC_OscConfig+0x140>
        tickstart = HAL_GetTick();
  211642:	f7fe f92f 	bl	20f8a4 <HAL_GetTick>
  211646:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
  211648:	4d70      	ldr	r5, [pc, #448]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  21164a:	682b      	ldr	r3, [r5, #0]
  21164c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  211650:	d1b3      	bne.n	2115ba <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
  211652:	f7fe f927 	bl	20f8a4 <HAL_GetTick>
  211656:	1b80      	subs	r0, r0, r6
  211658:	2864      	cmp	r0, #100	; 0x64
  21165a:	d9f6      	bls.n	21164a <HAL_RCC_OscConfig+0x102>
            return HAL_TIMEOUT;
  21165c:	2003      	movs	r0, #3
  21165e:	e191      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
  211660:	4613      	mov	r3, r2
  211662:	6812      	ldr	r2, [r2, #0]
  211664:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
  211668:	601a      	str	r2, [r3, #0]
  21166a:	681a      	ldr	r2, [r3, #0]
  21166c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  211670:	601a      	str	r2, [r3, #0]
  211672:	e7e4      	b.n	21163e <HAL_RCC_OscConfig+0xf6>
  211674:	4b65      	ldr	r3, [pc, #404]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  211676:	681a      	ldr	r2, [r3, #0]
  211678:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  21167c:	601a      	str	r2, [r3, #0]
  21167e:	681a      	ldr	r2, [r3, #0]
  211680:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  211684:	601a      	str	r2, [r3, #0]
  211686:	e7da      	b.n	21163e <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
  211688:	f7fe f90c 	bl	20f8a4 <HAL_GetTick>
  21168c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
  21168e:	4d5f      	ldr	r5, [pc, #380]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  211690:	682b      	ldr	r3, [r5, #0]
  211692:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  211696:	d090      	beq.n	2115ba <HAL_RCC_OscConfig+0x72>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
  211698:	f7fe f904 	bl	20f8a4 <HAL_GetTick>
  21169c:	1b80      	subs	r0, r0, r6
  21169e:	2864      	cmp	r0, #100	; 0x64
  2116a0:	d9f6      	bls.n	211690 <HAL_RCC_OscConfig+0x148>
            return HAL_TIMEOUT;
  2116a2:	2003      	movs	r0, #3
  2116a4:	e16e      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
  2116a6:	4b59      	ldr	r3, [pc, #356]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2116a8:	685b      	ldr	r3, [r3, #4]
  2116aa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  2116ae:	d194      	bne.n	2115da <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
  2116b0:	4b56      	ldr	r3, [pc, #344]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2116b2:	681b      	ldr	r3, [r3, #0]
  2116b4:	f013 0f02 	tst.w	r3, #2
  2116b8:	d127      	bne.n	21170a <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
  2116ba:	4854      	ldr	r0, [pc, #336]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2116bc:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  2116be:	23f8      	movs	r3, #248	; 0xf8
  2116c0:	fa93 f3a3 	rbit	r3, r3
  2116c4:	fab3 f283 	clz	r2, r3
  2116c8:	6923      	ldr	r3, [r4, #16]
  2116ca:	4093      	lsls	r3, r2
  2116cc:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
  2116d0:	4313      	orrs	r3, r2
  2116d2:	6003      	str	r3, [r0, #0]
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
  2116d4:	6823      	ldr	r3, [r4, #0]
  2116d6:	f013 0f08 	tst.w	r3, #8
  2116da:	d051      	beq.n	211780 <HAL_RCC_OscConfig+0x238>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
  2116dc:	6963      	ldr	r3, [r4, #20]
  2116de:	2b00      	cmp	r3, #0
  2116e0:	d03a      	beq.n	211758 <HAL_RCC_OscConfig+0x210>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
  2116e2:	4a4a      	ldr	r2, [pc, #296]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2116e4:	6f53      	ldr	r3, [r2, #116]	; 0x74
  2116e6:	f043 0301 	orr.w	r3, r3, #1
  2116ea:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
  2116ec:	f7fe f8da 	bl	20f8a4 <HAL_GetTick>
  2116f0:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
  2116f2:	4d46      	ldr	r5, [pc, #280]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2116f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  2116f6:	f013 0f02 	tst.w	r3, #2
  2116fa:	d141      	bne.n	211780 <HAL_RCC_OscConfig+0x238>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
  2116fc:	f7fe f8d2 	bl	20f8a4 <HAL_GetTick>
  211700:	1b80      	subs	r0, r0, r6
  211702:	2864      	cmp	r0, #100	; 0x64
  211704:	d9f6      	bls.n	2116f4 <HAL_RCC_OscConfig+0x1ac>
        {
          return HAL_TIMEOUT;
  211706:	2003      	movs	r0, #3
  211708:	e13c      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
  21170a:	68e3      	ldr	r3, [r4, #12]
  21170c:	2b01      	cmp	r3, #1
  21170e:	d0d4      	beq.n	2116ba <HAL_RCC_OscConfig+0x172>
        return HAL_ERROR;
  211710:	2001      	movs	r0, #1
  211712:	e137      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_HSI_ENABLE();
  211714:	4a3d      	ldr	r2, [pc, #244]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  211716:	6813      	ldr	r3, [r2, #0]
  211718:	f043 0301 	orr.w	r3, r3, #1
  21171c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
  21171e:	f7fe f8c1 	bl	20f8a4 <HAL_GetTick>
  211722:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
  211724:	4d39      	ldr	r5, [pc, #228]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  211726:	682b      	ldr	r3, [r5, #0]
  211728:	f013 0f02 	tst.w	r3, #2
  21172c:	d106      	bne.n	21173c <HAL_RCC_OscConfig+0x1f4>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
  21172e:	f7fe f8b9 	bl	20f8a4 <HAL_GetTick>
  211732:	1b80      	subs	r0, r0, r6
  211734:	2864      	cmp	r0, #100	; 0x64
  211736:	d9f6      	bls.n	211726 <HAL_RCC_OscConfig+0x1de>
            return HAL_TIMEOUT;
  211738:	2003      	movs	r0, #3
  21173a:	e123      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
  21173c:	4833      	ldr	r0, [pc, #204]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  21173e:	6801      	ldr	r1, [r0, #0]
  211740:	23f8      	movs	r3, #248	; 0xf8
  211742:	fa93 f3a3 	rbit	r3, r3
  211746:	fab3 f283 	clz	r2, r3
  21174a:	6923      	ldr	r3, [r4, #16]
  21174c:	4093      	lsls	r3, r2
  21174e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
  211752:	4313      	orrs	r3, r2
  211754:	6003      	str	r3, [r0, #0]
  211756:	e7bd      	b.n	2116d4 <HAL_RCC_OscConfig+0x18c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
  211758:	4a2c      	ldr	r2, [pc, #176]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  21175a:	6f53      	ldr	r3, [r2, #116]	; 0x74
  21175c:	f023 0301 	bic.w	r3, r3, #1
  211760:	6753      	str	r3, [r2, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
  211762:	f7fe f89f 	bl	20f8a4 <HAL_GetTick>
  211766:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
  211768:	4d28      	ldr	r5, [pc, #160]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  21176a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  21176c:	f013 0f02 	tst.w	r3, #2
  211770:	d006      	beq.n	211780 <HAL_RCC_OscConfig+0x238>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
  211772:	f7fe f897 	bl	20f8a4 <HAL_GetTick>
  211776:	1b80      	subs	r0, r0, r6
  211778:	2864      	cmp	r0, #100	; 0x64
  21177a:	d9f6      	bls.n	21176a <HAL_RCC_OscConfig+0x222>
        {
          return HAL_TIMEOUT;
  21177c:	2003      	movs	r0, #3
  21177e:	e101      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  211780:	6823      	ldr	r3, [r4, #0]
  211782:	f013 0f04 	tst.w	r3, #4
  211786:	d122      	bne.n	2117ce <HAL_RCC_OscConfig+0x286>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  211788:	69a3      	ldr	r3, [r4, #24]
  21178a:	2b00      	cmp	r3, #0
  21178c:	f000 80f9 	beq.w	211982 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
  211790:	4a1e      	ldr	r2, [pc, #120]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  211792:	6892      	ldr	r2, [r2, #8]
  211794:	f002 020c 	and.w	r2, r2, #12
  211798:	2a08      	cmp	r2, #8
  21179a:	f000 80f5 	beq.w	211988 <HAL_RCC_OscConfig+0x440>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
  21179e:	2b02      	cmp	r3, #2
  2117a0:	f000 80a3 	beq.w	2118ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
  2117a4:	4a19      	ldr	r2, [pc, #100]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2117a6:	6813      	ldr	r3, [r2, #0]
  2117a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  2117ac:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
  2117ae:	f7fe f879 	bl	20f8a4 <HAL_GetTick>
  2117b2:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
  2117b4:	4c15      	ldr	r4, [pc, #84]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2117b6:	6823      	ldr	r3, [r4, #0]
  2117b8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  2117bc:	f000 80e8 	beq.w	211990 <HAL_RCC_OscConfig+0x448>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
  2117c0:	f7fe f870 	bl	20f8a4 <HAL_GetTick>
  2117c4:	1b40      	subs	r0, r0, r5
  2117c6:	2864      	cmp	r0, #100	; 0x64
  2117c8:	d9f5      	bls.n	2117b6 <HAL_RCC_OscConfig+0x26e>
          {
            return HAL_TIMEOUT;
  2117ca:	2003      	movs	r0, #3
  2117cc:	e0da      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
    __HAL_RCC_PWR_CLK_ENABLE();
  2117ce:	2300      	movs	r3, #0
  2117d0:	9301      	str	r3, [sp, #4]
  2117d2:	4b0e      	ldr	r3, [pc, #56]	; (21180c <HAL_RCC_OscConfig+0x2c4>)
  2117d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  2117d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  2117da:	641a      	str	r2, [r3, #64]	; 0x40
  2117dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  2117de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  2117e2:	9301      	str	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
  2117e4:	4a0a      	ldr	r2, [pc, #40]	; (211810 <HAL_RCC_OscConfig+0x2c8>)
  2117e6:	6813      	ldr	r3, [r2, #0]
  2117e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  2117ec:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
  2117ee:	f7fe f859 	bl	20f8a4 <HAL_GetTick>
  2117f2:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
  2117f4:	4d06      	ldr	r5, [pc, #24]	; (211810 <HAL_RCC_OscConfig+0x2c8>)
  2117f6:	682b      	ldr	r3, [r5, #0]
  2117f8:	f413 7f80 	tst.w	r3, #256	; 0x100
  2117fc:	d10a      	bne.n	211814 <HAL_RCC_OscConfig+0x2cc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
  2117fe:	f7fe f851 	bl	20f8a4 <HAL_GetTick>
  211802:	1b80      	subs	r0, r0, r6
  211804:	2864      	cmp	r0, #100	; 0x64
  211806:	d9f6      	bls.n	2117f6 <HAL_RCC_OscConfig+0x2ae>
        return HAL_TIMEOUT;
  211808:	2003      	movs	r0, #3
  21180a:	e0bb      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
  21180c:	40023800 	.word	0x40023800
  211810:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
  211814:	4b5f      	ldr	r3, [pc, #380]	; (211994 <HAL_RCC_OscConfig+0x44c>)
  211816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  211818:	f022 0201 	bic.w	r2, r2, #1
  21181c:	671a      	str	r2, [r3, #112]	; 0x70
  21181e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  211820:	f022 0204 	bic.w	r2, r2, #4
  211824:	671a      	str	r2, [r3, #112]	; 0x70
  211826:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  211828:	f022 0201 	bic.w	r2, r2, #1
  21182c:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
  21182e:	f7fe f839 	bl	20f8a4 <HAL_GetTick>
  211832:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
  211834:	4d57      	ldr	r5, [pc, #348]	; (211994 <HAL_RCC_OscConfig+0x44c>)
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
  211836:	f241 3688 	movw	r6, #5000	; 0x1388
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
  21183a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  21183c:	f013 0f02 	tst.w	r3, #2
  211840:	d006      	beq.n	211850 <HAL_RCC_OscConfig+0x308>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
  211842:	f7fe f82f 	bl	20f8a4 <HAL_GetTick>
  211846:	1bc0      	subs	r0, r0, r7
  211848:	42b0      	cmp	r0, r6
  21184a:	d9f6      	bls.n	21183a <HAL_RCC_OscConfig+0x2f2>
        return HAL_TIMEOUT;
  21184c:	2003      	movs	r0, #3
  21184e:	e099      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
  211850:	4a50      	ldr	r2, [pc, #320]	; (211994 <HAL_RCC_OscConfig+0x44c>)
  211852:	6f13      	ldr	r3, [r2, #112]	; 0x70
  211854:	f023 0301 	bic.w	r3, r3, #1
  211858:	6713      	str	r3, [r2, #112]	; 0x70
  21185a:	68a3      	ldr	r3, [r4, #8]
  21185c:	2b01      	cmp	r3, #1
  21185e:	d01e      	beq.n	21189e <HAL_RCC_OscConfig+0x356>
  211860:	2b05      	cmp	r3, #5
  211862:	d026      	beq.n	2118b2 <HAL_RCC_OscConfig+0x36a>
  211864:	4b4b      	ldr	r3, [pc, #300]	; (211994 <HAL_RCC_OscConfig+0x44c>)
  211866:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  211868:	f022 0204 	bic.w	r2, r2, #4
  21186c:	671a      	str	r2, [r3, #112]	; 0x70
  21186e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  211870:	f022 0201 	bic.w	r2, r2, #1
  211874:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
  211876:	68a3      	ldr	r3, [r4, #8]
  211878:	b32b      	cbz	r3, 2118c6 <HAL_RCC_OscConfig+0x37e>
      tickstart = HAL_GetTick();
  21187a:	f7fe f813 	bl	20f8a4 <HAL_GetTick>
  21187e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
  211880:	4d44      	ldr	r5, [pc, #272]	; (211994 <HAL_RCC_OscConfig+0x44c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
  211882:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
  211886:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  211888:	f013 0f02 	tst.w	r3, #2
  21188c:	f47f af7c 	bne.w	211788 <HAL_RCC_OscConfig+0x240>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
  211890:	f7fe f808 	bl	20f8a4 <HAL_GetTick>
  211894:	1bc0      	subs	r0, r0, r7
  211896:	42b0      	cmp	r0, r6
  211898:	d9f5      	bls.n	211886 <HAL_RCC_OscConfig+0x33e>
          return HAL_TIMEOUT;
  21189a:	2003      	movs	r0, #3
  21189c:	e072      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
  21189e:	4613      	mov	r3, r2
  2118a0:	6f12      	ldr	r2, [r2, #112]	; 0x70
  2118a2:	f022 0204 	bic.w	r2, r2, #4
  2118a6:	671a      	str	r2, [r3, #112]	; 0x70
  2118a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  2118aa:	f042 0201 	orr.w	r2, r2, #1
  2118ae:	671a      	str	r2, [r3, #112]	; 0x70
  2118b0:	e7e1      	b.n	211876 <HAL_RCC_OscConfig+0x32e>
  2118b2:	4b38      	ldr	r3, [pc, #224]	; (211994 <HAL_RCC_OscConfig+0x44c>)
  2118b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  2118b6:	f042 0204 	orr.w	r2, r2, #4
  2118ba:	671a      	str	r2, [r3, #112]	; 0x70
  2118bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  2118be:	f042 0201 	orr.w	r2, r2, #1
  2118c2:	671a      	str	r2, [r3, #112]	; 0x70
  2118c4:	e7d7      	b.n	211876 <HAL_RCC_OscConfig+0x32e>
      tickstart = HAL_GetTick();
  2118c6:	f7fd ffed 	bl	20f8a4 <HAL_GetTick>
  2118ca:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
  2118cc:	4d31      	ldr	r5, [pc, #196]	; (211994 <HAL_RCC_OscConfig+0x44c>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
  2118ce:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
  2118d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  2118d4:	f013 0f02 	tst.w	r3, #2
  2118d8:	f43f af56 	beq.w	211788 <HAL_RCC_OscConfig+0x240>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
  2118dc:	f7fd ffe2 	bl	20f8a4 <HAL_GetTick>
  2118e0:	1bc0      	subs	r0, r0, r7
  2118e2:	42b0      	cmp	r0, r6
  2118e4:	d9f5      	bls.n	2118d2 <HAL_RCC_OscConfig+0x38a>
          return HAL_TIMEOUT;
  2118e6:	2003      	movs	r0, #3
  2118e8:	e04c      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_PLL_DISABLE();
  2118ea:	4a2a      	ldr	r2, [pc, #168]	; (211994 <HAL_RCC_OscConfig+0x44c>)
  2118ec:	6813      	ldr	r3, [r2, #0]
  2118ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  2118f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
  2118f4:	f7fd ffd6 	bl	20f8a4 <HAL_GetTick>
  2118f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
  2118fa:	4d26      	ldr	r5, [pc, #152]	; (211994 <HAL_RCC_OscConfig+0x44c>)
  2118fc:	682b      	ldr	r3, [r5, #0]
  2118fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  211902:	d006      	beq.n	211912 <HAL_RCC_OscConfig+0x3ca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
  211904:	f7fd ffce 	bl	20f8a4 <HAL_GetTick>
  211908:	1b80      	subs	r0, r0, r6
  21190a:	2864      	cmp	r0, #100	; 0x64
  21190c:	d9f6      	bls.n	2118fc <HAL_RCC_OscConfig+0x3b4>
            return HAL_TIMEOUT;
  21190e:	2003      	movs	r0, #3
  211910:	e038      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
  211912:	f647 75c0 	movw	r5, #32704	; 0x7fc0
  211916:	fa95 f5a5 	rbit	r5, r5
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
  21191a:	fab5 f585 	clz	r5, r5
  21191e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  211922:	fa92 f2a2 	rbit	r2, r2
  211926:	fab2 f082 	clz	r0, r2
  21192a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
  21192e:	fa91 f1a1 	rbit	r1, r1
  211932:	fab1 f181 	clz	r1, r1
  211936:	6a23      	ldr	r3, [r4, #32]
  211938:	69e2      	ldr	r2, [r4, #28]
  21193a:	4313      	orrs	r3, r2
  21193c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  211940:	6a62      	ldr	r2, [r4, #36]	; 0x24
  211942:	40aa      	lsls	r2, r5
  211944:	4313      	orrs	r3, r2
  211946:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  211948:	0852      	lsrs	r2, r2, #1
  21194a:	3a01      	subs	r2, #1
  21194c:	4082      	lsls	r2, r0
  21194e:	4313      	orrs	r3, r2
  211950:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  211952:	fa02 f101 	lsl.w	r1, r2, r1
  211956:	430b      	orrs	r3, r1
  211958:	4a0e      	ldr	r2, [pc, #56]	; (211994 <HAL_RCC_OscConfig+0x44c>)
  21195a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
  21195c:	6813      	ldr	r3, [r2, #0]
  21195e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  211962:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
  211964:	f7fd ff9e 	bl	20f8a4 <HAL_GetTick>
  211968:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
  21196a:	4c0a      	ldr	r4, [pc, #40]	; (211994 <HAL_RCC_OscConfig+0x44c>)
  21196c:	6823      	ldr	r3, [r4, #0]
  21196e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  211972:	d10b      	bne.n	21198c <HAL_RCC_OscConfig+0x444>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
  211974:	f7fd ff96 	bl	20f8a4 <HAL_GetTick>
  211978:	1b40      	subs	r0, r0, r5
  21197a:	2864      	cmp	r0, #100	; 0x64
  21197c:	d9f6      	bls.n	21196c <HAL_RCC_OscConfig+0x424>
            return HAL_TIMEOUT;
  21197e:	2003      	movs	r0, #3
  211980:	e000      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
  211982:	2000      	movs	r0, #0
}
  211984:	b003      	add	sp, #12
  211986:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
  211988:	2001      	movs	r0, #1
  21198a:	e7fb      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
  21198c:	2000      	movs	r0, #0
  21198e:	e7f9      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
  211990:	2000      	movs	r0, #0
  211992:	e7f7      	b.n	211984 <HAL_RCC_OscConfig+0x43c>
  211994:	40023800 	.word	0x40023800

00211998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  211998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  21199c:	4604      	mov	r4, r0
  21199e:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  2119a0:	4b8a      	ldr	r3, [pc, #552]	; (211bcc <HAL_RCC_ClockConfig+0x234>)
  2119a2:	681b      	ldr	r3, [r3, #0]
  2119a4:	f003 030f 	and.w	r3, r3, #15
  2119a8:	428b      	cmp	r3, r1
  2119aa:	d278      	bcs.n	211a9e <HAL_RCC_ClockConfig+0x106>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
  2119ac:	4a87      	ldr	r2, [pc, #540]	; (211bcc <HAL_RCC_ClockConfig+0x234>)
  2119ae:	6813      	ldr	r3, [r2, #0]
  2119b0:	f023 030f 	bic.w	r3, r3, #15
  2119b4:	430b      	orrs	r3, r1
  2119b6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
  2119b8:	6813      	ldr	r3, [r2, #0]
  2119ba:	f003 030f 	and.w	r3, r3, #15
  2119be:	428b      	cmp	r3, r1
  2119c0:	d002      	beq.n	2119c8 <HAL_RCC_ClockConfig+0x30>
    {
      return HAL_ERROR;
  2119c2:	2001      	movs	r0, #1
  2119c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
  2119c8:	6803      	ldr	r3, [r0, #0]
  2119ca:	f013 0f02 	tst.w	r3, #2
  2119ce:	d007      	beq.n	2119e0 <HAL_RCC_ClockConfig+0x48>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  2119d0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
  2119d4:	6893      	ldr	r3, [r2, #8]
  2119d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  2119da:	6881      	ldr	r1, [r0, #8]
  2119dc:	430b      	orrs	r3, r1
  2119de:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  2119e0:	6823      	ldr	r3, [r4, #0]
  2119e2:	f013 0f01 	tst.w	r3, #1
  2119e6:	f000 80ce 	beq.w	211b86 <HAL_RCC_ClockConfig+0x1ee>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
  2119ea:	6862      	ldr	r2, [r4, #4]
  2119ec:	2a01      	cmp	r2, #1
  2119ee:	d025      	beq.n	211a3c <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
  2119f0:	2a02      	cmp	r2, #2
  2119f2:	d02b      	beq.n	211a4c <HAL_RCC_ClockConfig+0xb4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
  2119f4:	4b76      	ldr	r3, [pc, #472]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
  2119f6:	681b      	ldr	r3, [r3, #0]
  2119f8:	f013 0f02 	tst.w	r3, #2
  2119fc:	f000 80e0 	beq.w	211bc0 <HAL_RCC_ClockConfig+0x228>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
  211a00:	4973      	ldr	r1, [pc, #460]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
  211a02:	688b      	ldr	r3, [r1, #8]
  211a04:	f023 0303 	bic.w	r3, r3, #3
  211a08:	4313      	orrs	r3, r2
  211a0a:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
  211a0c:	f7fd ff4a 	bl	20f8a4 <HAL_GetTick>
  211a10:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
  211a12:	6863      	ldr	r3, [r4, #4]
  211a14:	2b01      	cmp	r3, #1
  211a16:	d021      	beq.n	211a5c <HAL_RCC_ClockConfig+0xc4>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
  211a18:	2b02      	cmp	r3, #2
  211a1a:	d030      	beq.n	211a7e <HAL_RCC_ClockConfig+0xe6>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
  211a1c:	4e6c      	ldr	r6, [pc, #432]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211a1e:	f241 3788 	movw	r7, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
  211a22:	68b3      	ldr	r3, [r6, #8]
  211a24:	f013 0f0c 	tst.w	r3, #12
  211a28:	f000 80ad 	beq.w	211b86 <HAL_RCC_ClockConfig+0x1ee>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211a2c:	f7fd ff3a 	bl	20f8a4 <HAL_GetTick>
  211a30:	1b40      	subs	r0, r0, r5
  211a32:	42b8      	cmp	r0, r7
  211a34:	d9f5      	bls.n	211a22 <HAL_RCC_ClockConfig+0x8a>
          {
            return HAL_TIMEOUT;
  211a36:	2003      	movs	r0, #3
  211a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
  211a3c:	4b64      	ldr	r3, [pc, #400]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
  211a3e:	681b      	ldr	r3, [r3, #0]
  211a40:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  211a44:	d1dc      	bne.n	211a00 <HAL_RCC_ClockConfig+0x68>
          return HAL_ERROR;
  211a46:	2001      	movs	r0, #1
  211a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
  211a4c:	4b60      	ldr	r3, [pc, #384]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
  211a4e:	681b      	ldr	r3, [r3, #0]
  211a50:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  211a54:	d1d4      	bne.n	211a00 <HAL_RCC_ClockConfig+0x68>
          return HAL_ERROR;
  211a56:	2001      	movs	r0, #1
  211a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
  211a5c:	4e5c      	ldr	r6, [pc, #368]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211a5e:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
  211a62:	68b3      	ldr	r3, [r6, #8]
  211a64:	f003 030c 	and.w	r3, r3, #12
  211a68:	2b04      	cmp	r3, #4
  211a6a:	f000 808c 	beq.w	211b86 <HAL_RCC_ClockConfig+0x1ee>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211a6e:	f7fd ff19 	bl	20f8a4 <HAL_GetTick>
  211a72:	1b40      	subs	r0, r0, r5
  211a74:	42b8      	cmp	r0, r7
  211a76:	d9f4      	bls.n	211a62 <HAL_RCC_ClockConfig+0xca>
            return HAL_TIMEOUT;
  211a78:	2003      	movs	r0, #3
  211a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
  211a7e:	4e54      	ldr	r6, [pc, #336]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211a80:	f241 3788 	movw	r7, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
  211a84:	68b3      	ldr	r3, [r6, #8]
  211a86:	f003 030c 	and.w	r3, r3, #12
  211a8a:	2b08      	cmp	r3, #8
  211a8c:	d07b      	beq.n	211b86 <HAL_RCC_ClockConfig+0x1ee>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211a8e:	f7fd ff09 	bl	20f8a4 <HAL_GetTick>
  211a92:	1b40      	subs	r0, r0, r5
  211a94:	42b8      	cmp	r0, r7
  211a96:	d9f5      	bls.n	211a84 <HAL_RCC_ClockConfig+0xec>
            return HAL_TIMEOUT;
  211a98:	2003      	movs	r0, #3
  211a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
  211a9e:	6803      	ldr	r3, [r0, #0]
  211aa0:	f013 0f02 	tst.w	r3, #2
  211aa4:	d006      	beq.n	211ab4 <HAL_RCC_ClockConfig+0x11c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  211aa6:	4a4a      	ldr	r2, [pc, #296]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
  211aa8:	6893      	ldr	r3, [r2, #8]
  211aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  211aae:	6881      	ldr	r1, [r0, #8]
  211ab0:	430b      	orrs	r3, r1
  211ab2:	6093      	str	r3, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  211ab4:	6823      	ldr	r3, [r4, #0]
  211ab6:	f013 0f01 	tst.w	r3, #1
  211aba:	d056      	beq.n	211b6a <HAL_RCC_ClockConfig+0x1d2>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
  211abc:	6862      	ldr	r2, [r4, #4]
  211abe:	2a01      	cmp	r2, #1
  211ac0:	d023      	beq.n	211b0a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
  211ac2:	2a02      	cmp	r2, #2
  211ac4:	d029      	beq.n	211b1a <HAL_RCC_ClockConfig+0x182>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
  211ac6:	4b42      	ldr	r3, [pc, #264]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
  211ac8:	681b      	ldr	r3, [r3, #0]
  211aca:	f013 0f02 	tst.w	r3, #2
  211ace:	d07a      	beq.n	211bc6 <HAL_RCC_ClockConfig+0x22e>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
  211ad0:	493f      	ldr	r1, [pc, #252]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
  211ad2:	688b      	ldr	r3, [r1, #8]
  211ad4:	f023 0303 	bic.w	r3, r3, #3
  211ad8:	4313      	orrs	r3, r2
  211ada:	608b      	str	r3, [r1, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
  211adc:	f7fd fee2 	bl	20f8a4 <HAL_GetTick>
  211ae0:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
  211ae2:	6863      	ldr	r3, [r4, #4]
  211ae4:	2b01      	cmp	r3, #1
  211ae6:	d020      	beq.n	211b2a <HAL_RCC_ClockConfig+0x192>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
  211ae8:	2b02      	cmp	r3, #2
  211aea:	d02e      	beq.n	211b4a <HAL_RCC_ClockConfig+0x1b2>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
  211aec:	4f38      	ldr	r7, [pc, #224]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211aee:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
  211af2:	68bb      	ldr	r3, [r7, #8]
  211af4:	f013 0f0c 	tst.w	r3, #12
  211af8:	d037      	beq.n	211b6a <HAL_RCC_ClockConfig+0x1d2>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211afa:	f7fd fed3 	bl	20f8a4 <HAL_GetTick>
  211afe:	1b80      	subs	r0, r0, r6
  211b00:	4540      	cmp	r0, r8
  211b02:	d9f6      	bls.n	211af2 <HAL_RCC_ClockConfig+0x15a>
          {
            return HAL_TIMEOUT;
  211b04:	2003      	movs	r0, #3
  211b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
  211b0a:	4b31      	ldr	r3, [pc, #196]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
  211b0c:	681b      	ldr	r3, [r3, #0]
  211b0e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  211b12:	d1dd      	bne.n	211ad0 <HAL_RCC_ClockConfig+0x138>
          return HAL_ERROR;
  211b14:	2001      	movs	r0, #1
  211b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
  211b1a:	4b2d      	ldr	r3, [pc, #180]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
  211b1c:	681b      	ldr	r3, [r3, #0]
  211b1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  211b22:	d1d5      	bne.n	211ad0 <HAL_RCC_ClockConfig+0x138>
          return HAL_ERROR;
  211b24:	2001      	movs	r0, #1
  211b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
  211b2a:	4f29      	ldr	r7, [pc, #164]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211b2c:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
  211b30:	68bb      	ldr	r3, [r7, #8]
  211b32:	f003 030c 	and.w	r3, r3, #12
  211b36:	2b04      	cmp	r3, #4
  211b38:	d017      	beq.n	211b6a <HAL_RCC_ClockConfig+0x1d2>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211b3a:	f7fd feb3 	bl	20f8a4 <HAL_GetTick>
  211b3e:	1b80      	subs	r0, r0, r6
  211b40:	4540      	cmp	r0, r8
  211b42:	d9f5      	bls.n	211b30 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
  211b44:	2003      	movs	r0, #3
  211b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
  211b4a:	4f21      	ldr	r7, [pc, #132]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211b4c:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
  211b50:	68bb      	ldr	r3, [r7, #8]
  211b52:	f003 030c 	and.w	r3, r3, #12
  211b56:	2b08      	cmp	r3, #8
  211b58:	d007      	beq.n	211b6a <HAL_RCC_ClockConfig+0x1d2>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
  211b5a:	f7fd fea3 	bl	20f8a4 <HAL_GetTick>
  211b5e:	1b80      	subs	r0, r0, r6
  211b60:	4540      	cmp	r0, r8
  211b62:	d9f5      	bls.n	211b50 <HAL_RCC_ClockConfig+0x1b8>
            return HAL_TIMEOUT;
  211b64:	2003      	movs	r0, #3
  211b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
  211b6a:	4a18      	ldr	r2, [pc, #96]	; (211bcc <HAL_RCC_ClockConfig+0x234>)
  211b6c:	6813      	ldr	r3, [r2, #0]
  211b6e:	f023 030f 	bic.w	r3, r3, #15
  211b72:	432b      	orrs	r3, r5
  211b74:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
  211b76:	6813      	ldr	r3, [r2, #0]
  211b78:	f003 030f 	and.w	r3, r3, #15
  211b7c:	42ab      	cmp	r3, r5
  211b7e:	d002      	beq.n	211b86 <HAL_RCC_ClockConfig+0x1ee>
    {
      return HAL_ERROR;
  211b80:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
  211b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
  211b86:	6823      	ldr	r3, [r4, #0]
  211b88:	f013 0f04 	tst.w	r3, #4
  211b8c:	d006      	beq.n	211b9c <HAL_RCC_ClockConfig+0x204>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  211b8e:	4a10      	ldr	r2, [pc, #64]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
  211b90:	6893      	ldr	r3, [r2, #8]
  211b92:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
  211b96:	68e1      	ldr	r1, [r4, #12]
  211b98:	430b      	orrs	r3, r1
  211b9a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
  211b9c:	6823      	ldr	r3, [r4, #0]
  211b9e:	f013 0f08 	tst.w	r3, #8
  211ba2:	d007      	beq.n	211bb4 <HAL_RCC_ClockConfig+0x21c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
  211ba4:	4a0a      	ldr	r2, [pc, #40]	; (211bd0 <HAL_RCC_ClockConfig+0x238>)
  211ba6:	6893      	ldr	r3, [r2, #8]
  211ba8:	6921      	ldr	r1, [r4, #16]
  211baa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
  211bae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  211bb2:	6093      	str	r3, [r2, #8]
  HAL_InitTick (TICK_INT_PRIORITY);
  211bb4:	2000      	movs	r0, #0
  211bb6:	f7fd fe47 	bl	20f848 <HAL_InitTick>
  return HAL_OK;
  211bba:	2000      	movs	r0, #0
  211bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return HAL_ERROR;
  211bc0:	2001      	movs	r0, #1
  211bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return HAL_ERROR;
  211bc6:	2001      	movs	r0, #1
  211bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  211bcc:	40023c00 	.word	0x40023c00
  211bd0:	40023800 	.word	0x40023800

00211bd4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  211bd4:	4b1a      	ldr	r3, [pc, #104]	; (211c40 <HAL_RCC_GetSysClockFreq+0x6c>)
  211bd6:	689b      	ldr	r3, [r3, #8]
  211bd8:	f003 030c 	and.w	r3, r3, #12
  211bdc:	2b04      	cmp	r3, #4
  211bde:	d003      	beq.n	211be8 <HAL_RCC_GetSysClockFreq+0x14>
  211be0:	2b08      	cmp	r3, #8
  211be2:	d003      	beq.n	211bec <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
  211be4:	4817      	ldr	r0, [pc, #92]	; (211c44 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
  211be6:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
  211be8:	4817      	ldr	r0, [pc, #92]	; (211c48 <HAL_RCC_GetSysClockFreq+0x74>)
  211bea:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
  211bec:	4b14      	ldr	r3, [pc, #80]	; (211c40 <HAL_RCC_GetSysClockFreq+0x6c>)
  211bee:	685a      	ldr	r2, [r3, #4]
  211bf0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
  211bf4:	685b      	ldr	r3, [r3, #4]
  211bf6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
  211bfa:	4b11      	ldr	r3, [pc, #68]	; (211c40 <HAL_RCC_GetSysClockFreq+0x6c>)
  211bfc:	685b      	ldr	r3, [r3, #4]
  211bfe:	f647 71c0 	movw	r1, #32704	; 0x7fc0
  211c02:	fa91 f0a1 	rbit	r0, r1
  211c06:	fab0 f080 	clz	r0, r0
  211c0a:	ea03 0301 	and.w	r3, r3, r1
  211c0e:	fa23 f300 	lsr.w	r3, r3, r0
  211c12:	bf14      	ite	ne
  211c14:	480c      	ldrne	r0, [pc, #48]	; (211c48 <HAL_RCC_GetSysClockFreq+0x74>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
  211c16:	480b      	ldreq	r0, [pc, #44]	; (211c44 <HAL_RCC_GetSysClockFreq+0x70>)
  211c18:	fbb0 f0f2 	udiv	r0, r0, r2
  211c1c:	fb00 f003 	mul.w	r0, r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
  211c20:	4b07      	ldr	r3, [pc, #28]	; (211c40 <HAL_RCC_GetSysClockFreq+0x6c>)
  211c22:	685b      	ldr	r3, [r3, #4]
  211c24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  211c28:	fa92 f2a2 	rbit	r2, r2
  211c2c:	fab2 f282 	clz	r2, r2
  211c30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  211c34:	40d3      	lsrs	r3, r2
  211c36:	3301      	adds	r3, #1
  211c38:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
  211c3a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
  211c3e:	4770      	bx	lr
  211c40:	40023800 	.word	0x40023800
  211c44:	00f42400 	.word	0x00f42400
  211c48:	007a1200 	.word	0x007a1200

00211c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  211c4c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
  211c4e:	f7ff ffc1 	bl	211bd4 <HAL_RCC_GetSysClockFreq>
  211c52:	4b08      	ldr	r3, [pc, #32]	; (211c74 <HAL_RCC_GetHCLKFreq+0x28>)
  211c54:	689b      	ldr	r3, [r3, #8]
  211c56:	22f0      	movs	r2, #240	; 0xf0
  211c58:	fa92 f2a2 	rbit	r2, r2
  211c5c:	fab2 f282 	clz	r2, r2
  211c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  211c64:	40d3      	lsrs	r3, r2
  211c66:	4a04      	ldr	r2, [pc, #16]	; (211c78 <HAL_RCC_GetHCLKFreq+0x2c>)
  211c68:	5cd3      	ldrb	r3, [r2, r3]
  211c6a:	40d8      	lsrs	r0, r3
  211c6c:	4b03      	ldr	r3, [pc, #12]	; (211c7c <HAL_RCC_GetHCLKFreq+0x30>)
  211c6e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
  211c70:	bd08      	pop	{r3, pc}
  211c72:	bf00      	nop
  211c74:	40023800 	.word	0x40023800
  211c78:	0021862c 	.word	0x0021862c
  211c7c:	20000008 	.word	0x20000008

00211c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  211c80:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
  211c82:	f7ff ffe3 	bl	211c4c <HAL_RCC_GetHCLKFreq>
  211c86:	4b07      	ldr	r3, [pc, #28]	; (211ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
  211c88:	689b      	ldr	r3, [r3, #8]
  211c8a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
  211c8e:	fa92 f2a2 	rbit	r2, r2
  211c92:	fab2 f282 	clz	r2, r2
  211c96:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
  211c9a:	40d3      	lsrs	r3, r2
  211c9c:	4a02      	ldr	r2, [pc, #8]	; (211ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
  211c9e:	5cd3      	ldrb	r3, [r2, r3]
}
  211ca0:	40d8      	lsrs	r0, r3
  211ca2:	bd08      	pop	{r3, pc}
  211ca4:	40023800 	.word	0x40023800
  211ca8:	0021862c 	.word	0x0021862c

00211cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  211cac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  211cae:	f7ff ffcd 	bl	211c4c <HAL_RCC_GetHCLKFreq>
  211cb2:	4b07      	ldr	r3, [pc, #28]	; (211cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
  211cb4:	689b      	ldr	r3, [r3, #8]
  211cb6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
  211cba:	fa92 f2a2 	rbit	r2, r2
  211cbe:	fab2 f282 	clz	r2, r2
  211cc2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
  211cc6:	40d3      	lsrs	r3, r2
  211cc8:	4a02      	ldr	r2, [pc, #8]	; (211cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
  211cca:	5cd3      	ldrb	r3, [r2, r3]
} 
  211ccc:	40d8      	lsrs	r0, r3
  211cce:	bd08      	pop	{r3, pc}
  211cd0:	40023800 	.word	0x40023800
  211cd4:	0021862c 	.word	0x0021862c

00211cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  211cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  211cdc:	b083      	sub	sp, #12
  211cde:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
  211ce0:	6803      	ldr	r3, [r0, #0]
  211ce2:	f013 0f01 	tst.w	r3, #1
  211ce6:	f000 813a 	beq.w	211f5e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
  211cea:	4baf      	ldr	r3, [pc, #700]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211cec:	689a      	ldr	r2, [r3, #8]
  211cee:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
  211cf2:	609a      	str	r2, [r3, #8]
  211cf4:	689a      	ldr	r2, [r3, #8]
  211cf6:	6b41      	ldr	r1, [r0, #52]	; 0x34
  211cf8:	430a      	orrs	r2, r1
  211cfa:	609a      	str	r2, [r3, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
  211cfc:	6b46      	ldr	r6, [r0, #52]	; 0x34
  211cfe:	fab6 f686 	clz	r6, r6
  211d02:	0976      	lsrs	r6, r6, #5
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
  211d04:	6825      	ldr	r5, [r4, #0]
  211d06:	f415 2500 	ands.w	r5, r5, #524288	; 0x80000
  211d0a:	d010      	beq.n	211d2e <HAL_RCCEx_PeriphCLKConfig+0x56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
  211d0c:	4aa6      	ldr	r2, [pc, #664]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211d0e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
  211d12:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  211d16:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  211d18:	430b      	orrs	r3, r1
  211d1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
  211d1e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    {
      plli2sused = 1; 
  211d20:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  211d24:	bf08      	it	eq
  211d26:	2601      	moveq	r6, #1
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
  211d28:	fab5 f585 	clz	r5, r5
  211d2c:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
  211d2e:	6823      	ldr	r3, [r4, #0]
  211d30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  211d34:	d010      	beq.n	211d58 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
  211d36:	4a9c      	ldr	r2, [pc, #624]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211d38:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
  211d3c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
  211d40:	6c21      	ldr	r1, [r4, #64]	; 0x40
  211d42:	430b      	orrs	r3, r1
  211d44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
  211d48:	6c23      	ldr	r3, [r4, #64]	; 0x40
  211d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
  211d4e:	f000 8108 	beq.w	211f62 <HAL_RCCEx_PeriphCLKConfig+0x28a>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
  211d52:	2b00      	cmp	r3, #0
  211d54:	bf08      	it	eq
  211d56:	2501      	moveq	r5, #1
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  211d58:	6823      	ldr	r3, [r4, #0]
  211d5a:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
  {    
      plli2sused = 1; 
  211d5e:	2a00      	cmp	r2, #0
  211d60:	bf18      	it	ne
  211d62:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  211d64:	f013 0f20 	tst.w	r3, #32
  211d68:	f040 80fd 	bne.w	211f66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  211d6c:	6823      	ldr	r3, [r4, #0]
  211d6e:	f013 0f10 	tst.w	r3, #16
  211d72:	d00c      	beq.n	211d8e <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  211d74:	4b8c      	ldr	r3, [pc, #560]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211d76:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  211d7a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  211d7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  211d82:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  211d86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  211d88:	430a      	orrs	r2, r1
  211d8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
  211d8e:	6823      	ldr	r3, [r4, #0]
  211d90:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  211d94:	d008      	beq.n	211da8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  211d96:	4a84      	ldr	r2, [pc, #528]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211d98:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211d9c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  211da0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  211da2:	430b      	orrs	r3, r1
  211da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
  211da8:	6823      	ldr	r3, [r4, #0]
  211daa:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  211dae:	d008      	beq.n	211dc2 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  211db0:	4a7d      	ldr	r2, [pc, #500]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211db2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211db6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
  211dba:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  211dbc:	430b      	orrs	r3, r1
  211dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
  211dc2:	6823      	ldr	r3, [r4, #0]
  211dc4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  211dc8:	d008      	beq.n	211ddc <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  211dca:	4a77      	ldr	r2, [pc, #476]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211dcc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211dd0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
  211dd4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  211dd6:	430b      	orrs	r3, r1
  211dd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
  211ddc:	6823      	ldr	r3, [r4, #0]
  211dde:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  211de2:	d008      	beq.n	211df6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
  211de4:	4a70      	ldr	r2, [pc, #448]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211de6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211dea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
  211dee:	6f21      	ldr	r1, [r4, #112]	; 0x70
  211df0:	430b      	orrs	r3, r1
  211df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
  211df6:	6823      	ldr	r3, [r4, #0]
  211df8:	f013 0f40 	tst.w	r3, #64	; 0x40
  211dfc:	d008      	beq.n	211e10 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  211dfe:	4a6a      	ldr	r2, [pc, #424]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211e00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211e04:	f023 0303 	bic.w	r3, r3, #3
  211e08:	6c61      	ldr	r1, [r4, #68]	; 0x44
  211e0a:	430b      	orrs	r3, r1
  211e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
  211e10:	6823      	ldr	r3, [r4, #0]
  211e12:	f013 0f80 	tst.w	r3, #128	; 0x80
  211e16:	d008      	beq.n	211e2a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
  211e18:	4a63      	ldr	r2, [pc, #396]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211e1a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211e1e:	f023 030c 	bic.w	r3, r3, #12
  211e22:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  211e24:	430b      	orrs	r3, r1
  211e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
  211e2a:	6823      	ldr	r3, [r4, #0]
  211e2c:	f413 7f80 	tst.w	r3, #256	; 0x100
  211e30:	d008      	beq.n	211e44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  211e32:	4a5d      	ldr	r2, [pc, #372]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211e34:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211e38:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  211e3c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  211e3e:	430b      	orrs	r3, r1
  211e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
  211e44:	6823      	ldr	r3, [r4, #0]
  211e46:	f413 7f00 	tst.w	r3, #512	; 0x200
  211e4a:	d008      	beq.n	211e5e <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
  211e4c:	4a56      	ldr	r2, [pc, #344]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211e4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211e52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  211e56:	6d21      	ldr	r1, [r4, #80]	; 0x50
  211e58:	430b      	orrs	r3, r1
  211e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
  211e5e:	6823      	ldr	r3, [r4, #0]
  211e60:	f413 6f80 	tst.w	r3, #1024	; 0x400
  211e64:	d008      	beq.n	211e78 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
  211e66:	4a50      	ldr	r2, [pc, #320]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211e68:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  211e70:	6d61      	ldr	r1, [r4, #84]	; 0x54
  211e72:	430b      	orrs	r3, r1
  211e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
  211e78:	6823      	ldr	r3, [r4, #0]
  211e7a:	f413 6f00 	tst.w	r3, #2048	; 0x800
  211e7e:	d008      	beq.n	211e92 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
  211e80:	4a49      	ldr	r2, [pc, #292]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211e82:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211e86:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
  211e8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
  211e8c:	430b      	orrs	r3, r1
  211e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
  211e92:	6823      	ldr	r3, [r4, #0]
  211e94:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  211e98:	d008      	beq.n	211eac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
  211e9a:	4a43      	ldr	r2, [pc, #268]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211e9c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211ea0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  211ea4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  211ea6:	430b      	orrs	r3, r1
  211ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
  211eac:	6823      	ldr	r3, [r4, #0]
  211eae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
  211eb2:	d008      	beq.n	211ec6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
  211eb4:	4a3c      	ldr	r2, [pc, #240]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211eb6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211eba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  211ebe:	6e21      	ldr	r1, [r4, #96]	; 0x60
  211ec0:	430b      	orrs	r3, r1
  211ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
  211ec6:	6823      	ldr	r3, [r4, #0]
  211ec8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  211ecc:	d008      	beq.n	211ee0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
  211ece:	4a36      	ldr	r2, [pc, #216]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211ed0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211ed4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  211ed8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  211eda:	430b      	orrs	r3, r1
  211edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
  211ee0:	6823      	ldr	r3, [r4, #0]
  211ee2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  211ee6:	d00d      	beq.n	211f04 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
  211ee8:	4a2f      	ldr	r2, [pc, #188]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211eea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211eee:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
  211ef2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  211ef4:	430b      	orrs	r3, r1
  211ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
  211efa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    {
      pllsaiused = 1; 
  211efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  211f00:	bf08      	it	eq
  211f02:	2501      	moveq	r5, #1
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F756xx) || defined(STM32F746xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  211f04:	6823      	ldr	r3, [r4, #0]
  211f06:	f003 0208 	and.w	r2, r3, #8
  {
    pllsaiused = 1; 
  211f0a:	2a00      	cmp	r2, #0
  211f0c:	bf18      	it	ne
  211f0e:	2501      	movne	r5, #1
  }
#endif /* STM32F756xx || STM32F746xx */
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
  211f10:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  211f14:	d008      	beq.n	211f28 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  211f16:	4a24      	ldr	r2, [pc, #144]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211f18:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211f1c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
  211f20:	6f61      	ldr	r1, [r4, #116]	; 0x74
  211f22:	430b      	orrs	r3, r1
  211f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
  211f28:	6823      	ldr	r3, [r4, #0]
  211f2a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  211f2e:	d009      	beq.n	211f44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
  211f30:	4a1d      	ldr	r2, [pc, #116]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211f32:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  211f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  211f3a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  211f3e:	430b      	orrs	r3, r1
  211f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  211f44:	2e01      	cmp	r6, #1
  211f46:	d079      	beq.n	21203c <HAL_RCCEx_PeriphCLKConfig+0x364>
  211f48:	6823      	ldr	r3, [r4, #0]
  211f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
  211f4e:	d075      	beq.n	21203c <HAL_RCCEx_PeriphCLKConfig+0x364>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  211f50:	2d01      	cmp	r5, #1
  211f52:	f000 819f 	beq.w	212294 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
  211f56:	2000      	movs	r0, #0
}
  211f58:	b003      	add	sp, #12
  211f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uint32_t plli2sused = 0;
  211f5e:	2600      	movs	r6, #0
  211f60:	e6d0      	b.n	211d04 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      plli2sused = 1; 
  211f62:	2601      	movs	r6, #1
  211f64:	e6f8      	b.n	211d58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    __HAL_RCC_PWR_CLK_ENABLE();
  211f66:	2300      	movs	r3, #0
  211f68:	9301      	str	r3, [sp, #4]
  211f6a:	4b0f      	ldr	r3, [pc, #60]	; (211fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
  211f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  211f6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  211f72:	641a      	str	r2, [r3, #64]	; 0x40
  211f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  211f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  211f7a:	9301      	str	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
  211f7c:	4a0b      	ldr	r2, [pc, #44]	; (211fac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  211f7e:	6813      	ldr	r3, [r2, #0]
  211f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  211f84:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
  211f86:	f7fd fc8d 	bl	20f8a4 <HAL_GetTick>
  211f8a:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
  211f8c:	4f07      	ldr	r7, [pc, #28]	; (211fac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
  211f8e:	683b      	ldr	r3, [r7, #0]
  211f90:	f413 7f80 	tst.w	r3, #256	; 0x100
  211f94:	d10c      	bne.n	211fb0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
  211f96:	f7fd fc85 	bl	20f8a4 <HAL_GetTick>
  211f9a:	eba0 0008 	sub.w	r0, r0, r8
  211f9e:	2864      	cmp	r0, #100	; 0x64
  211fa0:	d9f5      	bls.n	211f8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        return HAL_TIMEOUT;
  211fa2:	2003      	movs	r0, #3
  211fa4:	e7d8      	b.n	211f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  211fa6:	bf00      	nop
  211fa8:	40023800 	.word	0x40023800
  211fac:	40007000 	.word	0x40007000
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
  211fb0:	4bc2      	ldr	r3, [pc, #776]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  211fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  211fb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
  211fb6:	4053      	eors	r3, r2
  211fb8:	f413 7f40 	tst.w	r3, #768	; 0x300
  211fbc:	f43f aed6 	beq.w	211d6c <HAL_RCCEx_PeriphCLKConfig+0x94>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
  211fc0:	4bbe      	ldr	r3, [pc, #760]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  211fc2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  211fc4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
  211fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  211fca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  211fce:	671a      	str	r2, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
  211fd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  211fd2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  211fd6:	671a      	str	r2, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
  211fd8:	6718      	str	r0, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
  211fda:	f011 0f02 	tst.w	r1, #2
  211fde:	d112      	bne.n	212006 <HAL_RCCEx_PeriphCLKConfig+0x32e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
  211fe0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  211fe2:	f403 7240 	and.w	r2, r3, #768	; 0x300
  211fe6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
  211fea:	d01e      	beq.n	21202a <HAL_RCCEx_PeriphCLKConfig+0x352>
  211fec:	4ab3      	ldr	r2, [pc, #716]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  211fee:	6893      	ldr	r3, [r2, #8]
  211ff0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
  211ff4:	6093      	str	r3, [r2, #8]
  211ff6:	4ab1      	ldr	r2, [pc, #708]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  211ff8:	6f11      	ldr	r1, [r2, #112]	; 0x70
  211ffa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  211ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
  212000:	430b      	orrs	r3, r1
  212002:	6713      	str	r3, [r2, #112]	; 0x70
  212004:	e6b2      	b.n	211d6c <HAL_RCCEx_PeriphCLKConfig+0x94>
        tickstart = HAL_GetTick();
  212006:	f7fd fc4d 	bl	20f8a4 <HAL_GetTick>
  21200a:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
  21200c:	4fab      	ldr	r7, [pc, #684]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
  21200e:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
  212012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
  212014:	f013 0f02 	tst.w	r3, #2
  212018:	d1e2      	bne.n	211fe0 <HAL_RCCEx_PeriphCLKConfig+0x308>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
  21201a:	f7fd fc43 	bl	20f8a4 <HAL_GetTick>
  21201e:	eba0 0009 	sub.w	r0, r0, r9
  212022:	4540      	cmp	r0, r8
  212024:	d9f5      	bls.n	212012 <HAL_RCCEx_PeriphCLKConfig+0x33a>
            return HAL_TIMEOUT;
  212026:	2003      	movs	r0, #3
  212028:	e796      	b.n	211f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
  21202a:	48a4      	ldr	r0, [pc, #656]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  21202c:	6882      	ldr	r2, [r0, #8]
  21202e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
  212032:	49a3      	ldr	r1, [pc, #652]	; (2122c0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>)
  212034:	4019      	ands	r1, r3
  212036:	430a      	orrs	r2, r1
  212038:	6082      	str	r2, [r0, #8]
  21203a:	e7dc      	b.n	211ff6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_PLLI2S_DISABLE();  
  21203c:	4a9f      	ldr	r2, [pc, #636]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  21203e:	6813      	ldr	r3, [r2, #0]
  212040:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
  212044:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
  212046:	f7fd fc2d 	bl	20f8a4 <HAL_GetTick>
  21204a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
  21204c:	4e9b      	ldr	r6, [pc, #620]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  21204e:	6833      	ldr	r3, [r6, #0]
  212050:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  212054:	d006      	beq.n	212064 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
  212056:	f7fd fc25 	bl	20f8a4 <HAL_GetTick>
  21205a:	1bc0      	subs	r0, r0, r7
  21205c:	2864      	cmp	r0, #100	; 0x64
  21205e:	d9f6      	bls.n	21204e <HAL_RCCEx_PeriphCLKConfig+0x376>
        return HAL_TIMEOUT;
  212060:	2003      	movs	r0, #3
  212062:	e779      	b.n	211f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
  212064:	6823      	ldr	r3, [r4, #0]
  212066:	f013 0f01 	tst.w	r3, #1
  21206a:	d03c      	beq.n	2120e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  21206c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  21206e:	bbd3      	cbnz	r3, 2120e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
  212070:	4892      	ldr	r0, [pc, #584]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  212072:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
  212076:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
  21207a:	fa9e fcae 	rbit	ip, lr
  21207e:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
  212082:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  212086:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
  21208a:	fa96 f7a6 	rbit	r7, r6
  21208e:	fab7 f787 	clz	r7, r7
  212092:	f647 73c0 	movw	r3, #32704	; 0x7fc0
  212096:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
  21209a:	fab3 f983 	clz	r9, r3
  21209e:	fa9e feae 	rbit	lr, lr
  2120a2:	fabe fe8e 	clz	lr, lr
  2120a6:	fa96 f6a6 	rbit	r6, r6
  2120aa:	fab6 f686 	clz	r6, r6
  2120ae:	f04f 48e0 	mov.w	r8, #1879048192	; 0x70000000
  2120b2:	fa98 f8a8 	rbit	r8, r8
  2120b6:	fab8 f888 	clz	r8, r8
  2120ba:	6863      	ldr	r3, [r4, #4]
  2120bc:	fa03 f909 	lsl.w	r9, r3, r9
  2120c0:	68a3      	ldr	r3, [r4, #8]
  2120c2:	fa03 f808 	lsl.w	r8, r3, r8
  2120c6:	ea49 0308 	orr.w	r3, r9, r8
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
  2120ca:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  2120ce:	fa21 f10c 	lsr.w	r1, r1, ip
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
  2120d2:	fa01 f10e 	lsl.w	r1, r1, lr
  2120d6:	430b      	orrs	r3, r1
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
  2120d8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  2120dc:	40fa      	lsrs	r2, r7
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
  2120de:	40b2      	lsls	r2, r6
  2120e0:	4313      	orrs	r3, r2
  2120e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
  2120e6:	6823      	ldr	r3, [r4, #0]
  2120e8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  2120ec:	d004      	beq.n	2120f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  2120ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  2120f0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
  2120f4:	f000 8089 	beq.w	21220a <HAL_RCCEx_PeriphCLKConfig+0x532>
  2120f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  2120fc:	d004      	beq.n	212108 <HAL_RCCEx_PeriphCLKConfig+0x430>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
  2120fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
  212100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
  212104:	f000 8081 	beq.w	21220a <HAL_RCCEx_PeriphCLKConfig+0x532>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  212108:	6823      	ldr	r3, [r4, #0]
  21210a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  21210e:	d03a      	beq.n	212186 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
  212110:	486a      	ldr	r0, [pc, #424]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  212112:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
  212116:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
  21211a:	fa9e fcae 	rbit	ip, lr
  21211e:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
  212122:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  212126:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
  21212a:	fa96 f7a6 	rbit	r7, r6
  21212e:	fab7 f787 	clz	r7, r7
  212132:	f647 73c0 	movw	r3, #32704	; 0x7fc0
  212136:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
  21213a:	fab3 f983 	clz	r9, r3
  21213e:	f44f 3840 	mov.w	r8, #196608	; 0x30000
  212142:	fa98 f8a8 	rbit	r8, r8
  212146:	fab8 f888 	clz	r8, r8
  21214a:	fa9e feae 	rbit	lr, lr
  21214e:	fabe fe8e 	clz	lr, lr
  212152:	fa96 f6a6 	rbit	r6, r6
  212156:	fab6 f686 	clz	r6, r6
  21215a:	6863      	ldr	r3, [r4, #4]
  21215c:	fa03 f909 	lsl.w	r9, r3, r9
  212160:	6923      	ldr	r3, [r4, #16]
  212162:	fa03 f808 	lsl.w	r8, r3, r8
  212166:	ea49 0308 	orr.w	r3, r9, r8
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
  21216a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
  21216e:	fa21 f10c 	lsr.w	r1, r1, ip
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
  212172:	fa01 f10e 	lsl.w	r1, r1, lr
  212176:	430b      	orrs	r3, r1
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
  212178:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
  21217c:	40fa      	lsrs	r2, r7
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
  21217e:	40b2      	lsls	r2, r6
  212180:	4313      	orrs	r3, r2
  212182:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
  212186:	6823      	ldr	r3, [r4, #0]
  212188:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  21218c:	d028      	beq.n	2121e0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  21218e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
  212192:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
  212196:	fab3 f683 	clz	r6, r3
  21219a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
  21219e:	fa90 f0a0 	rbit	r0, r0
  2121a2:	fab0 f080 	clz	r0, r0
  2121a6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
  2121aa:	fa91 f1a1 	rbit	r1, r1
  2121ae:	fab1 f181 	clz	r1, r1
  2121b2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
  2121b6:	fa92 f2a2 	rbit	r2, r2
  2121ba:	fab2 f282 	clz	r2, r2
  2121be:	6863      	ldr	r3, [r4, #4]
  2121c0:	40b3      	lsls	r3, r6
  2121c2:	6926      	ldr	r6, [r4, #16]
  2121c4:	fa06 f000 	lsl.w	r0, r6, r0
  2121c8:	4303      	orrs	r3, r0
  2121ca:	68e0      	ldr	r0, [r4, #12]
  2121cc:	fa00 f101 	lsl.w	r1, r0, r1
  2121d0:	430b      	orrs	r3, r1
  2121d2:	68a1      	ldr	r1, [r4, #8]
  2121d4:	fa01 f202 	lsl.w	r2, r1, r2
  2121d8:	4313      	orrs	r3, r2
  2121da:	4a38      	ldr	r2, [pc, #224]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  2121dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
  2121e0:	4a36      	ldr	r2, [pc, #216]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  2121e2:	6813      	ldr	r3, [r2, #0]
  2121e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
  2121e8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
  2121ea:	f7fd fb5b 	bl	20f8a4 <HAL_GetTick>
  2121ee:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
  2121f0:	4e32      	ldr	r6, [pc, #200]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  2121f2:	6833      	ldr	r3, [r6, #0]
  2121f4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
  2121f8:	f47f aeaa 	bne.w	211f50 <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
  2121fc:	f7fd fb52 	bl	20f8a4 <HAL_GetTick>
  212200:	1bc0      	subs	r0, r0, r7
  212202:	2864      	cmp	r0, #100	; 0x64
  212204:	d9f5      	bls.n	2121f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        return HAL_TIMEOUT;
  212206:	2003      	movs	r0, #3
  212208:	e6a6      	b.n	211f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
  21220a:	482c      	ldr	r0, [pc, #176]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  21220c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
  212210:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
  212214:	fa9e fcae 	rbit	ip, lr
  212218:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
  21221c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
  212220:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
  212224:	fa96 f7a6 	rbit	r7, r6
  212228:	fab7 f787 	clz	r7, r7
  21222c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
  212230:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
  212234:	fab3 f983 	clz	r9, r3
  212238:	fa9e feae 	rbit	lr, lr
  21223c:	fabe fe8e 	clz	lr, lr
  212240:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
  212244:	fa98 f8a8 	rbit	r8, r8
  212248:	fab8 f888 	clz	r8, r8
  21224c:	fa96 f6a6 	rbit	r6, r6
  212250:	fab6 f686 	clz	r6, r6
  212254:	6863      	ldr	r3, [r4, #4]
  212256:	fa03 f909 	lsl.w	r9, r3, r9
  21225a:	68e3      	ldr	r3, [r4, #12]
  21225c:	fa03 f808 	lsl.w	r8, r3, r8
  212260:	ea49 0308 	orr.w	r3, r9, r8
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
  212264:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  212268:	fa21 f10c 	lsr.w	r1, r1, ip
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
  21226c:	fa01 f10e 	lsl.w	r1, r1, lr
  212270:	430b      	orrs	r3, r1
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
  212272:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
  212276:	40fa      	lsrs	r2, r7
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
  212278:	40b2      	lsls	r2, r6
  21227a:	4313      	orrs	r3, r2
  21227c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
  212280:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
  212284:	6a63      	ldr	r3, [r4, #36]	; 0x24
  212286:	3b01      	subs	r3, #1
  212288:	f022 021f 	bic.w	r2, r2, #31
  21228c:	4313      	orrs	r3, r2
  21228e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  212292:	e739      	b.n	212108 <HAL_RCCEx_PeriphCLKConfig+0x430>
    __HAL_RCC_PLLSAI_DISABLE(); 
  212294:	4a09      	ldr	r2, [pc, #36]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  212296:	6813      	ldr	r3, [r2, #0]
  212298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  21229c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
  21229e:	f7fd fb01 	bl	20f8a4 <HAL_GetTick>
  2122a2:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
  2122a4:	4d05      	ldr	r5, [pc, #20]	; (2122bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
  2122a6:	682b      	ldr	r3, [r5, #0]
  2122a8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  2122ac:	d00a      	beq.n	2122c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
  2122ae:	f7fd faf9 	bl	20f8a4 <HAL_GetTick>
  2122b2:	1b80      	subs	r0, r0, r6
  2122b4:	2864      	cmp	r0, #100	; 0x64
  2122b6:	d9f6      	bls.n	2122a6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
        return HAL_TIMEOUT;
  2122b8:	2003      	movs	r0, #3
  2122ba:	e64d      	b.n	211f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  2122bc:	40023800 	.word	0x40023800
  2122c0:	0ffffcff 	.word	0x0ffffcff
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
  2122c4:	6823      	ldr	r3, [r4, #0]
  2122c6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
  2122ca:	d001      	beq.n	2122d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  2122cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  2122ce:	b12a      	cbz	r2, 2122dc <HAL_RCCEx_PeriphCLKConfig+0x604>
  2122d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  2122d4:	d045      	beq.n	212362 <HAL_RCCEx_PeriphCLKConfig+0x68a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
  2122d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
  2122d8:	2b00      	cmp	r3, #0
  2122da:	d142      	bne.n	212362 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
  2122dc:	486f      	ldr	r0, [pc, #444]	; (21249c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
  2122de:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  2122e2:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
  2122e6:	fa9e f8ae 	rbit	r8, lr
  2122ea:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
  2122ee:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  2122f2:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
  2122f6:	fa95 f6a5 	rbit	r6, r5
  2122fa:	fab6 f686 	clz	r6, r6
  2122fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
  212302:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
  212306:	fab3 f783 	clz	r7, r3
  21230a:	fa9e feae 	rbit	lr, lr
  21230e:	fabe fe8e 	clz	lr, lr
  212312:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
  212316:	fa9c fcac 	rbit	ip, ip
  21231a:	fabc fc8c 	clz	ip, ip
  21231e:	fa95 f5a5 	rbit	r5, r5
  212322:	fab5 f585 	clz	r5, r5
  212326:	6963      	ldr	r3, [r4, #20]
  212328:	40bb      	lsls	r3, r7
  21232a:	69a7      	ldr	r7, [r4, #24]
  21232c:	fa07 f70c 	lsl.w	r7, r7, ip
  212330:	433b      	orrs	r3, r7
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
  212332:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  212336:	fa21 f108 	lsr.w	r1, r1, r8
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
  21233a:	fa01 f10e 	lsl.w	r1, r1, lr
  21233e:	430b      	orrs	r3, r1
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
  212340:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
  212344:	40f2      	lsrs	r2, r6
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
  212346:	40aa      	lsls	r2, r5
  212348:	4313      	orrs	r3, r2
  21234a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
  21234e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  212352:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  212354:	3a01      	subs	r2, #1
  212356:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
  21235a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  21235e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
  212362:	6823      	ldr	r3, [r4, #0]
  212364:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  212368:	d003      	beq.n	212372 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  21236a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  21236c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  212370:	d058      	beq.n	212424 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
  212372:	6823      	ldr	r3, [r4, #0]
  212374:	f013 0f08 	tst.w	r3, #8
  212378:	d040      	beq.n	2123fc <HAL_RCCEx_PeriphCLKConfig+0x724>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
  21237a:	4848      	ldr	r0, [pc, #288]	; (21249c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
  21237c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  212380:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
  212384:	fa95 f6a5 	rbit	r6, r5
  212388:	fab6 f686 	clz	r6, r6
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
  21238c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  212390:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
  212394:	fa9e f8ae 	rbit	r8, lr
  212398:	fab8 f888 	clz	r8, r8
  21239c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
  2123a0:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
  2123a4:	fab3 f783 	clz	r7, r3
  2123a8:	fa9e feae 	rbit	lr, lr
  2123ac:	fabe fe8e 	clz	lr, lr
  2123b0:	fa95 f5a5 	rbit	r5, r5
  2123b4:	fab5 f585 	clz	r5, r5
  2123b8:	f04f 4ce0 	mov.w	ip, #1879048192	; 0x70000000
  2123bc:	fa9c fcac 	rbit	ip, ip
  2123c0:	fabc fc8c 	clz	ip, ip
  2123c4:	6963      	ldr	r3, [r4, #20]
  2123c6:	40bb      	lsls	r3, r7
  2123c8:	69e7      	ldr	r7, [r4, #28]
  2123ca:	fa07 f70c 	lsl.w	r7, r7, ip
  2123ce:	433b      	orrs	r3, r7
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
  2123d0:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  2123d4:	fa21 f108 	lsr.w	r1, r1, r8
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
  2123d8:	fa01 f10e 	lsl.w	r1, r1, lr
  2123dc:	430b      	orrs	r3, r1
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
  2123de:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  2123e2:	40f2      	lsrs	r2, r6
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
  2123e4:	40aa      	lsls	r2, r5
  2123e6:	4313      	orrs	r3, r2
  2123e8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
  2123ec:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  2123f0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
  2123f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  2123f6:	4313      	orrs	r3, r2
  2123f8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
  2123fc:	4a27      	ldr	r2, [pc, #156]	; (21249c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
  2123fe:	6813      	ldr	r3, [r2, #0]
  212400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  212404:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
  212406:	f7fd fa4d 	bl	20f8a4 <HAL_GetTick>
  21240a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
  21240c:	4c23      	ldr	r4, [pc, #140]	; (21249c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
  21240e:	6823      	ldr	r3, [r4, #0]
  212410:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
  212414:	d140      	bne.n	212498 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
  212416:	f7fd fa45 	bl	20f8a4 <HAL_GetTick>
  21241a:	1b40      	subs	r0, r0, r5
  21241c:	2864      	cmp	r0, #100	; 0x64
  21241e:	d9f6      	bls.n	21240e <HAL_RCCEx_PeriphCLKConfig+0x736>
        return HAL_TIMEOUT;
  212420:	2003      	movs	r0, #3
  212422:	e599      	b.n	211f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
  212424:	481d      	ldr	r0, [pc, #116]	; (21249c <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
  212426:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  21242a:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
  21242e:	fa9e f8ae 	rbit	r8, lr
  212432:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
  212436:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  21243a:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
  21243e:	fa95 f6a5 	rbit	r6, r5
  212442:	fab6 f686 	clz	r6, r6
  212446:	f647 73c0 	movw	r3, #32704	; 0x7fc0
  21244a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
  21244e:	fab3 f783 	clz	r7, r3
  212452:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
  212456:	fa9c fcac 	rbit	ip, ip
  21245a:	fabc fc8c 	clz	ip, ip
  21245e:	fa9e feae 	rbit	lr, lr
  212462:	fabe fe8e 	clz	lr, lr
  212466:	fa95 f5a5 	rbit	r5, r5
  21246a:	fab5 f585 	clz	r5, r5
  21246e:	6963      	ldr	r3, [r4, #20]
  212470:	40bb      	lsls	r3, r7
  212472:	6a27      	ldr	r7, [r4, #32]
  212474:	fa07 f70c 	lsl.w	r7, r7, ip
  212478:	433b      	orrs	r3, r7
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
  21247a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
  21247e:	fa21 f108 	lsr.w	r1, r1, r8
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
  212482:	fa01 f10e 	lsl.w	r1, r1, lr
  212486:	430b      	orrs	r3, r1
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
  212488:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
  21248c:	40f2      	lsrs	r2, r6
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
  21248e:	40aa      	lsls	r2, r5
  212490:	4313      	orrs	r3, r2
  212492:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  212496:	e76c      	b.n	212372 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  return HAL_OK;
  212498:	2000      	movs	r0, #0
  21249a:	e55d      	b.n	211f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  21249c:	40023800 	.word	0x40023800

002124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>:
  * @param State : flag state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
  2124a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  2124a4:	4607      	mov	r7, r0
  2124a6:	460e      	mov	r6, r1
  2124a8:	4615      	mov	r5, r2
  2124aa:	461c      	mov	r4, r3
  uint32_t tickstart = HAL_GetTick();
  2124ac:	f7fd f9fa 	bl	20f8a4 <HAL_GetTick>
  2124b0:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
  2124b2:	683a      	ldr	r2, [r7, #0]
  2124b4:	6893      	ldr	r3, [r2, #8]
  2124b6:	4033      	ands	r3, r6
  2124b8:	42ab      	cmp	r3, r5
  2124ba:	d03a      	beq.n	212532 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x92>
  {
    if(Timeout != HAL_MAX_DELAY)
  2124bc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
  2124c0:	d0f8      	beq.n	2124b4 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
  2124c2:	b9ac      	cbnz	r4, 2124f0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x50>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
  2124c4:	683a      	ldr	r2, [r7, #0]
  2124c6:	6853      	ldr	r3, [r2, #4]
  2124c8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
  2124cc:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  2124ce:	687b      	ldr	r3, [r7, #4]
  2124d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
  2124d4:	d013      	beq.n	2124fe <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x5e>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  2124d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  2124d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  2124dc:	d01c      	beq.n	212518 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x78>
        {
          SPI_RESET_CRC(hspi);
        }
        
        hspi->State= HAL_SPI_STATE_READY;
  2124de:	2301      	movs	r3, #1
  2124e0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
  2124e4:	2300      	movs	r3, #0
  2124e6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        
        return HAL_TIMEOUT;
  2124ea:	2003      	movs	r0, #3
  2124ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
  2124f0:	f7fd f9d8 	bl	20f8a4 <HAL_GetTick>
  2124f4:	eba0 0008 	sub.w	r0, r0, r8
  2124f8:	4284      	cmp	r4, r0
  2124fa:	d8da      	bhi.n	2124b2 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x12>
  2124fc:	e7e2      	b.n	2124c4 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x24>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  2124fe:	68bb      	ldr	r3, [r7, #8]
  212500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  212504:	d002      	beq.n	21250c <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x6c>
  212506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  21250a:	d1e4      	bne.n	2124d6 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x36>
          __HAL_SPI_DISABLE(hspi);
  21250c:	683a      	ldr	r2, [r7, #0]
  21250e:	6813      	ldr	r3, [r2, #0]
  212510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  212514:	6013      	str	r3, [r2, #0]
  212516:	e7de      	b.n	2124d6 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x36>
          SPI_RESET_CRC(hspi);
  212518:	683a      	ldr	r2, [r7, #0]
  21251a:	6813      	ldr	r3, [r2, #0]
  21251c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  212520:	041b      	lsls	r3, r3, #16
  212522:	0c1b      	lsrs	r3, r3, #16
  212524:	6013      	str	r3, [r2, #0]
  212526:	683a      	ldr	r2, [r7, #0]
  212528:	6813      	ldr	r3, [r2, #0]
  21252a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  21252e:	6013      	str	r3, [r2, #0]
  212530:	e7d5      	b.n	2124de <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x3e>
      }
    }
  }
  
  return HAL_OK;      
  212532:	2000      	movs	r0, #0
}
  212534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00212538 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm>:
  * @param State : Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State, uint32_t Timeout)
{
  212538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  21253c:	b082      	sub	sp, #8
  21253e:	4607      	mov	r7, r0
  212540:	460c      	mov	r4, r1
  212542:	4615      	mov	r5, r2
  212544:	461e      	mov	r6, r3
  __IO uint8_t tmpreg;
  uint32_t tickstart = HAL_GetTick();
  212546:	f7fd f9ad 	bl	20f8a4 <HAL_GetTick>
  21254a:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Fifo) != State)
  21254c:	683a      	ldr	r2, [r7, #0]
  21254e:	e002      	b.n	212556 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x1e>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
      UNUSED(tmpreg); /* To avoid GCC warning */
    }

    if(Timeout != HAL_MAX_DELAY)
  212550:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
  212554:	d10d      	bne.n	212572 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x3a>
  while((hspi->Instance->SR & Fifo) != State)
  212556:	6893      	ldr	r3, [r2, #8]
  212558:	4023      	ands	r3, r4
  21255a:	42ab      	cmp	r3, r5
  21255c:	d040      	beq.n	2125e0 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0xa8>
    if((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
  21255e:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
  212562:	d1f5      	bne.n	212550 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x18>
  212564:	2d00      	cmp	r5, #0
  212566:	d1f3      	bne.n	212550 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x18>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
  212568:	7b13      	ldrb	r3, [r2, #12]
  21256a:	b2db      	uxtb	r3, r3
  21256c:	f88d 3007 	strb.w	r3, [sp, #7]
  212570:	e7ee      	b.n	212550 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x18>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
  212572:	b9a6      	cbnz	r6, 21259e <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x66>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
                  on both master and slave sides in order to resynchronize the master
                 and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
  212574:	683a      	ldr	r2, [r7, #0]
  212576:	6853      	ldr	r3, [r2, #4]
  212578:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
  21257c:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  21257e:	687b      	ldr	r3, [r7, #4]
  212580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
  212584:	d012      	beq.n	2125ac <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x74>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  212586:	6abb      	ldr	r3, [r7, #40]	; 0x28
  212588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  21258c:	d01b      	beq.n	2125c6 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x8e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
  21258e:	2301      	movs	r3, #1
  212590:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
  212594:	2300      	movs	r3, #0
  212596:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

        return HAL_TIMEOUT;
  21259a:	2003      	movs	r0, #3
  21259c:	e021      	b.n	2125e2 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0xaa>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) >= Timeout))
  21259e:	f7fd f981 	bl	20f8a4 <HAL_GetTick>
  2125a2:	eba0 0008 	sub.w	r0, r0, r8
  2125a6:	4286      	cmp	r6, r0
  2125a8:	d8d0      	bhi.n	21254c <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x14>
  2125aa:	e7e3      	b.n	212574 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x3c>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  2125ac:	68bb      	ldr	r3, [r7, #8]
  2125ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  2125b2:	d002      	beq.n	2125ba <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x82>
  2125b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  2125b8:	d1e5      	bne.n	212586 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x4e>
          __HAL_SPI_DISABLE(hspi);
  2125ba:	683a      	ldr	r2, [r7, #0]
  2125bc:	6813      	ldr	r3, [r2, #0]
  2125be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  2125c2:	6013      	str	r3, [r2, #0]
  2125c4:	e7df      	b.n	212586 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x4e>
          SPI_RESET_CRC(hspi);
  2125c6:	683a      	ldr	r2, [r7, #0]
  2125c8:	6813      	ldr	r3, [r2, #0]
  2125ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  2125ce:	041b      	lsls	r3, r3, #16
  2125d0:	0c1b      	lsrs	r3, r3, #16
  2125d2:	6013      	str	r3, [r2, #0]
  2125d4:	683a      	ldr	r2, [r7, #0]
  2125d6:	6813      	ldr	r3, [r2, #0]
  2125d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  2125dc:	6013      	str	r3, [r2, #0]
  2125de:	e7d6      	b.n	21258e <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm+0x56>
      }
    }
  }

  return HAL_OK;
  2125e0:	2000      	movs	r0, #0
}
  2125e2:	b002      	add	sp, #8
  2125e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

002125e8 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
  2125e8:	b538      	push	{r3, r4, r5, lr}
  2125ea:	4604      	mov	r4, r0
  2125ec:	460d      	mov	r5, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
  2125ee:	460b      	mov	r3, r1
  2125f0:	2200      	movs	r2, #0
  2125f2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
  2125f6:	f7ff ff9f 	bl	212538 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  2125fa:	b128      	cbz	r0, 212608 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm+0x20>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
  2125fc:	6e23      	ldr	r3, [r4, #96]	; 0x60
  2125fe:	f043 0320 	orr.w	r3, r3, #32
  212602:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
  212604:	2003      	movs	r0, #3
  212606:	bd38      	pop	{r3, r4, r5, pc}
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
  212608:	462b      	mov	r3, r5
  21260a:	2200      	movs	r2, #0
  21260c:	2180      	movs	r1, #128	; 0x80
  21260e:	4620      	mov	r0, r4
  212610:	f7ff ff46 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  212614:	b128      	cbz	r0, 212622 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm+0x3a>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
  212616:	6e23      	ldr	r3, [r4, #96]	; 0x60
  212618:	f043 0320 	orr.w	r3, r3, #32
  21261c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
  21261e:	2003      	movs	r0, #3
  212620:	bd38      	pop	{r3, r4, r5, pc}
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
  212622:	462b      	mov	r3, r5
  212624:	2200      	movs	r2, #0
  212626:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  21262a:	4620      	mov	r0, r4
  21262c:	f7ff ff84 	bl	212538 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  212630:	b128      	cbz	r0, 21263e <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm+0x56>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
  212632:	6e23      	ldr	r3, [r4, #96]	; 0x60
  212634:	f043 0320 	orr.w	r3, r3, #32
  212638:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
  21263a:	2003      	movs	r0, #3
  21263c:	bd38      	pop	{r3, r4, r5, pc}
  }
  return HAL_OK;
  21263e:	2000      	movs	r0, #0
}
  212640:	bd38      	pop	{r3, r4, r5, pc}

00212642 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm>:
{
  212642:	b538      	push	{r3, r4, r5, lr}
  212644:	4604      	mov	r4, r0
  212646:	460d      	mov	r5, r1
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  212648:	6843      	ldr	r3, [r0, #4]
  21264a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
  21264e:	d00c      	beq.n	21266a <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0x28>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
  212650:	462b      	mov	r3, r5
  212652:	2200      	movs	r2, #0
  212654:	2180      	movs	r1, #128	; 0x80
  212656:	4620      	mov	r0, r4
  212658:	f7ff ff22 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  21265c:	b190      	cbz	r0, 212684 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0x42>
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
  21265e:	6e23      	ldr	r3, [r4, #96]	; 0x60
  212660:	f043 0320 	orr.w	r3, r3, #32
  212664:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
  212666:	2003      	movs	r0, #3
  212668:	bd38      	pop	{r3, r4, r5, pc}
  if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  21266a:	6883      	ldr	r3, [r0, #8]
  21266c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  212670:	d002      	beq.n	212678 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0x36>
  212672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  212676:	d1eb      	bne.n	212650 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0xe>
    __HAL_SPI_DISABLE(hspi);
  212678:	6822      	ldr	r2, [r4, #0]
  21267a:	6813      	ldr	r3, [r2, #0]
  21267c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  212680:	6013      	str	r3, [r2, #0]
  212682:	e7e5      	b.n	212650 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0xe>
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK) 
  212684:	462b      	mov	r3, r5
  212686:	2200      	movs	r2, #0
  212688:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  21268c:	4620      	mov	r0, r4
  21268e:	f7ff ff53 	bl	212538 <_ZL29SPI_WaitFifoStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  212692:	b128      	cbz	r0, 2126a0 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm+0x5e>
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
  212694:	6e23      	ldr	r3, [r4, #96]	; 0x60
  212696:	f043 0320 	orr.w	r3, r3, #32
  21269a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
  21269c:	2003      	movs	r0, #3
  21269e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
  2126a0:	2000      	movs	r0, #0
}
  2126a2:	bd38      	pop	{r3, r4, r5, pc}

002126a4 <HAL_SPI_Init>:
  if(hspi == NULL)
  2126a4:	2800      	cmp	r0, #0
  2126a6:	d059      	beq.n	21275c <HAL_SPI_Init+0xb8>
{
  2126a8:	b510      	push	{r4, lr}
  2126aa:	4604      	mov	r4, r0
  if(hspi->State == HAL_SPI_STATE_RESET)
  2126ac:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  2126b0:	2b00      	cmp	r3, #0
  2126b2:	d048      	beq.n	212746 <HAL_SPI_Init+0xa2>
  hspi->State = HAL_SPI_STATE_BUSY;
  2126b4:	2302      	movs	r3, #2
  2126b6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
  2126ba:	6822      	ldr	r2, [r4, #0]
  2126bc:	6813      	ldr	r3, [r2, #0]
  2126be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  2126c2:	6013      	str	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  2126c4:	68e3      	ldr	r3, [r4, #12]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  2126c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  2126ca:	bf8c      	ite	hi
  2126cc:	2100      	movhi	r1, #0
  2126ce:	f44f 5180 	movls.w	r1, #4096	; 0x1000
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
  2126d2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  2126d6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  2126da:	d001      	beq.n	2126e0 <HAL_SPI_Init+0x3c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  2126dc:	2200      	movs	r2, #0
  2126de:	62a2      	str	r2, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
  2126e0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  2126e2:	b92a      	cbnz	r2, 2126f0 <HAL_SPI_Init+0x4c>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  2126e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
  2126e8:	bf8c      	ite	hi
  2126ea:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
  2126ec:	2301      	movls	r3, #1
  2126ee:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
  2126f0:	6822      	ldr	r2, [r4, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
  2126f2:	6863      	ldr	r3, [r4, #4]
  2126f4:	68a0      	ldr	r0, [r4, #8]
  2126f6:	4303      	orrs	r3, r0
  2126f8:	6920      	ldr	r0, [r4, #16]
  2126fa:	4303      	orrs	r3, r0
  2126fc:	6960      	ldr	r0, [r4, #20]
  2126fe:	4303      	orrs	r3, r0
  212700:	69e0      	ldr	r0, [r4, #28]
  212702:	4303      	orrs	r3, r0
  212704:	6a20      	ldr	r0, [r4, #32]
  212706:	4303      	orrs	r3, r0
  212708:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  21270a:	4303      	orrs	r3, r0
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
  21270c:	69a0      	ldr	r0, [r4, #24]
  21270e:	f400 7000 	and.w	r0, r0, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
  212712:	4303      	orrs	r3, r0
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction |
  212714:	6013      	str	r3, [r2, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
  212716:	6b23      	ldr	r3, [r4, #48]	; 0x30
  212718:	2b02      	cmp	r3, #2
  21271a:	d019      	beq.n	212750 <HAL_SPI_Init+0xac>
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
  21271c:	6822      	ldr	r2, [r4, #0]
  21271e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  212720:	6b60      	ldr	r0, [r4, #52]	; 0x34
  212722:	4303      	orrs	r3, r0
  212724:	68e0      	ldr	r0, [r4, #12]
  212726:	4303      	orrs	r3, r0
  212728:	8b60      	ldrh	r0, [r4, #26]
  21272a:	f000 0004 	and.w	r0, r0, #4
  21272e:	4303      	orrs	r3, r0
                         hspi->Init.DataSize ) | frxth;
  212730:	430b      	orrs	r3, r1
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
  212732:	6053      	str	r3, [r2, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
  212734:	6823      	ldr	r3, [r4, #0]
  212736:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  212738:	611a      	str	r2, [r3, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  21273a:	2000      	movs	r0, #0
  21273c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State= HAL_SPI_STATE_READY;
  21273e:	2301      	movs	r3, #1
  212740:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
  212744:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
  212746:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
  21274a:	f7fc fbfb 	bl	20ef44 <HAL_SPI_MspInit>
  21274e:	e7b1      	b.n	2126b4 <HAL_SPI_Init+0x10>
    hspi->Instance->CR1|= SPI_CR1_CRCL;
  212750:	6822      	ldr	r2, [r4, #0]
  212752:	6813      	ldr	r3, [r2, #0]
  212754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  212758:	6013      	str	r3, [r2, #0]
  21275a:	e7df      	b.n	21271c <HAL_SPI_Init+0x78>
    return HAL_ERROR;
  21275c:	2001      	movs	r0, #1
  21275e:	4770      	bx	lr

00212760 <HAL_SPI_Transmit>:
{
  212760:	b570      	push	{r4, r5, r6, lr}
  212762:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
  212764:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
  212768:	2c01      	cmp	r4, #1
  21276a:	f000 80cb 	beq.w	212904 <HAL_SPI_Transmit+0x1a4>
  21276e:	2401      	movs	r4, #1
  212770:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  if(hspi->State != HAL_SPI_STATE_READY)
  212774:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  212778:	2c01      	cmp	r4, #1
  21277a:	d008      	beq.n	21278e <HAL_SPI_Transmit+0x2e>
    hspi->State = HAL_SPI_STATE_READY;
  21277c:	2301      	movs	r3, #1
  21277e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
   __HAL_UNLOCK(hspi);
  212782:	2300      	movs	r3, #0
  212784:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
   return HAL_BUSY;
  212788:	2002      	movs	r0, #2
}
  21278a:	b002      	add	sp, #8
  21278c:	bd70      	pop	{r4, r5, r6, pc}
  if((pData == NULL ) || (Size == 0))
  21278e:	2900      	cmp	r1, #0
  212790:	d049      	beq.n	212826 <HAL_SPI_Transmit+0xc6>
  212792:	2a00      	cmp	r2, #0
  212794:	d047      	beq.n	212826 <HAL_SPI_Transmit+0xc6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
  212796:	2403      	movs	r4, #3
  212798:	f880 405d 	strb.w	r4, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  21279c:	2400      	movs	r4, #0
  21279e:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->pTxBuffPtr  = pData;
  2127a0:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferSize  = Size;
  2127a2:	8782      	strh	r2, [r0, #60]	; 0x3c
  hspi->TxXferCount = Size;
  2127a4:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
  2127a6:	6404      	str	r4, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0;
  2127a8:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
  hspi->RxXferCount = 0;
  2127ac:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  2127b0:	6882      	ldr	r2, [r0, #8]
  2127b2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  2127b6:	d03e      	beq.n	212836 <HAL_SPI_Transmit+0xd6>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  2127b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  2127ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  2127be:	d040      	beq.n	212842 <HAL_SPI_Transmit+0xe2>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
  2127c0:	6802      	ldr	r2, [r0, #0]
  2127c2:	6811      	ldr	r1, [r2, #0]
  2127c4:	f011 0f40 	tst.w	r1, #64	; 0x40
  2127c8:	d103      	bne.n	2127d2 <HAL_SPI_Transmit+0x72>
    __HAL_SPI_ENABLE(hspi);
  2127ca:	6811      	ldr	r1, [r2, #0]
  2127cc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  2127d0:	6011      	str	r1, [r2, #0]
  2127d2:	461d      	mov	r5, r3
  2127d4:	4604      	mov	r4, r0
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  2127d6:	68c3      	ldr	r3, [r0, #12]
  2127d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  2127dc:	d946      	bls.n	21286c <HAL_SPI_Transmit+0x10c>
    while (hspi->TxXferCount > 0)
  2127de:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
  2127e0:	b1ab      	cbz	r3, 21280e <HAL_SPI_Transmit+0xae>
      if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)
  2127e2:	2602      	movs	r6, #2
  2127e4:	462b      	mov	r3, r5
  2127e6:	4632      	mov	r2, r6
  2127e8:	4631      	mov	r1, r6
  2127ea:	4620      	mov	r0, r4
  2127ec:	f7ff fe58 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  2127f0:	2800      	cmp	r0, #0
  2127f2:	d133      	bne.n	21285c <HAL_SPI_Transmit+0xfc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
  2127f4:	6823      	ldr	r3, [r4, #0]
  2127f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  2127f8:	8812      	ldrh	r2, [r2, #0]
  2127fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
  2127fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  2127fe:	3302      	adds	r3, #2
  212800:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
  212802:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
  212804:	3a01      	subs	r2, #1
  212806:	b292      	uxth	r2, r2
  212808:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0)
  21280a:	2a00      	cmp	r2, #0
  21280c:	d1ea      	bne.n	2127e4 <HAL_SPI_Transmit+0x84>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  21280e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  212810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  212814:	d05d      	beq.n	2128d2 <HAL_SPI_Transmit+0x172>
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  212816:	4629      	mov	r1, r5
  212818:	4620      	mov	r0, r4
  21281a:	f7ff fee5 	bl	2125e8 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm>
  21281e:	2800      	cmp	r0, #0
  212820:	d05d      	beq.n	2128de <HAL_SPI_Transmit+0x17e>
    return HAL_TIMEOUT;
  212822:	2003      	movs	r0, #3
  212824:	e7b1      	b.n	21278a <HAL_SPI_Transmit+0x2a>
    hspi->State = HAL_SPI_STATE_READY;
  212826:	2301      	movs	r3, #1
  212828:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
   __HAL_UNLOCK(hspi);
  21282c:	2200      	movs	r2, #0
  21282e:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    return HAL_ERROR;
  212832:	4618      	mov	r0, r3
  212834:	e7a9      	b.n	21278a <HAL_SPI_Transmit+0x2a>
    SPI_1LINE_TX(hspi);
  212836:	6801      	ldr	r1, [r0, #0]
  212838:	680a      	ldr	r2, [r1, #0]
  21283a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  21283e:	600a      	str	r2, [r1, #0]
  212840:	e7ba      	b.n	2127b8 <HAL_SPI_Transmit+0x58>
    SPI_RESET_CRC(hspi);
  212842:	6801      	ldr	r1, [r0, #0]
  212844:	680a      	ldr	r2, [r1, #0]
  212846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  21284a:	0412      	lsls	r2, r2, #16
  21284c:	0c12      	lsrs	r2, r2, #16
  21284e:	600a      	str	r2, [r1, #0]
  212850:	6801      	ldr	r1, [r0, #0]
  212852:	680a      	ldr	r2, [r1, #0]
  212854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  212858:	600a      	str	r2, [r1, #0]
  21285a:	e7b1      	b.n	2127c0 <HAL_SPI_Transmit+0x60>
        hspi->State = HAL_SPI_STATE_READY;
  21285c:	2301      	movs	r3, #1
  21285e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
       __HAL_UNLOCK(hspi);
  212862:	2300      	movs	r3, #0
  212864:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
  212868:	2003      	movs	r0, #3
  21286a:	e78e      	b.n	21278a <HAL_SPI_Transmit+0x2a>
        if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)  
  21286c:	2602      	movs	r6, #2
  21286e:	e018      	b.n	2128a2 <HAL_SPI_Transmit+0x142>
          hspi->State = HAL_SPI_STATE_READY;
  212870:	2301      	movs	r3, #1
  212872:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
  212876:	2300      	movs	r3, #0
  212878:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
          return HAL_TIMEOUT;
  21287c:	2003      	movs	r0, #3
  21287e:	e784      	b.n	21278a <HAL_SPI_Transmit+0x2a>
        if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)  
  212880:	462b      	mov	r3, r5
  212882:	4632      	mov	r2, r6
  212884:	4631      	mov	r1, r6
  212886:	4620      	mov	r0, r4
  212888:	f7ff fe0a 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  21288c:	2800      	cmp	r0, #0
  21288e:	d13b      	bne.n	212908 <HAL_SPI_Transmit+0x1a8>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*hspi->pTxBuffPtr++);
  212890:	6822      	ldr	r2, [r4, #0]
  212892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  212894:	1c59      	adds	r1, r3, #1
  212896:	63a1      	str	r1, [r4, #56]	; 0x38
  212898:	781b      	ldrb	r3, [r3, #0]
  21289a:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;    
  21289c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  21289e:	3b01      	subs	r3, #1
  2128a0:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0)
  2128a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  2128a4:	2b00      	cmp	r3, #0
  2128a6:	d0b2      	beq.n	21280e <HAL_SPI_Transmit+0xae>
      if(hspi->TxXferCount != 0x1)
  2128a8:	2b01      	cmp	r3, #1
  2128aa:	d0e9      	beq.n	212880 <HAL_SPI_Transmit+0x120>
        if(SPI_WaitFlagStateUntilTimeout(hspi,SPI_FLAG_TXE,SPI_FLAG_TXE,Timeout) != HAL_OK)
  2128ac:	462b      	mov	r3, r5
  2128ae:	4632      	mov	r2, r6
  2128b0:	4631      	mov	r1, r6
  2128b2:	4620      	mov	r0, r4
  2128b4:	f7ff fdf4 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  2128b8:	2800      	cmp	r0, #0
  2128ba:	d1d9      	bne.n	212870 <HAL_SPI_Transmit+0x110>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
  2128bc:	6823      	ldr	r3, [r4, #0]
  2128be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  2128c0:	8812      	ldrh	r2, [r2, #0]
  2128c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
  2128c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  2128c6:	3302      	adds	r3, #2
  2128c8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2;
  2128ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  2128cc:	3b02      	subs	r3, #2
  2128ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
  2128d0:	e7e7      	b.n	2128a2 <HAL_SPI_Transmit+0x142>
     hspi->Instance->CR1|= SPI_CR1_CRCNEXT;
  2128d2:	6822      	ldr	r2, [r4, #0]
  2128d4:	6813      	ldr	r3, [r2, #0]
  2128d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  2128da:	6013      	str	r3, [r2, #0]
  2128dc:	e79b      	b.n	212816 <HAL_SPI_Transmit+0xb6>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
  2128de:	68a3      	ldr	r3, [r4, #8]
  2128e0:	b92b      	cbnz	r3, 2128ee <HAL_SPI_Transmit+0x18e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  2128e2:	9301      	str	r3, [sp, #4]
  2128e4:	6823      	ldr	r3, [r4, #0]
  2128e6:	68da      	ldr	r2, [r3, #12]
  2128e8:	9201      	str	r2, [sp, #4]
  2128ea:	689b      	ldr	r3, [r3, #8]
  2128ec:	9301      	str	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY; 
  2128ee:	2301      	movs	r3, #1
  2128f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
  2128f4:	2300      	movs	r3, #0
  2128f6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
  2128fa:	6e20      	ldr	r0, [r4, #96]	; 0x60
  __HAL_LOCK(hspi);
  2128fc:	1ac0      	subs	r0, r0, r3
  2128fe:	bf18      	it	ne
  212900:	2001      	movne	r0, #1
  212902:	e742      	b.n	21278a <HAL_SPI_Transmit+0x2a>
  212904:	2002      	movs	r0, #2
  212906:	e740      	b.n	21278a <HAL_SPI_Transmit+0x2a>
          return HAL_TIMEOUT;
  212908:	2003      	movs	r0, #3
  21290a:	e73e      	b.n	21278a <HAL_SPI_Transmit+0x2a>

0021290c <HAL_SPI_TransmitReceive>:
{
  21290c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  212910:	b083      	sub	sp, #12
  212912:	4604      	mov	r4, r0
  212914:	4689      	mov	r9, r1
  212916:	4690      	mov	r8, r2
  212918:	461f      	mov	r7, r3
  21291a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __IO uint16_t tmpreg = 0;
  21291c:	2300      	movs	r3, #0
  21291e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint32_t tickstart = HAL_GetTick();
  212922:	f7fc ffbf 	bl	20f8a4 <HAL_GetTick>
  if(hspi->State != HAL_SPI_STATE_READY) 
  212926:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  21292a:	2b01      	cmp	r3, #1
  21292c:	d003      	beq.n	212936 <HAL_SPI_TransmitReceive+0x2a>
    return HAL_BUSY;
  21292e:	2002      	movs	r0, #2
}
  212930:	b003      	add	sp, #12
  212932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  212936:	4606      	mov	r6, r0
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  212938:	2f00      	cmp	r7, #0
  21293a:	bf18      	it	ne
  21293c:	f1b8 0f00 	cmpne.w	r8, #0
  212940:	f000 8141 	beq.w	212bc6 <HAL_SPI_TransmitReceive+0x2ba>
  212944:	f1b9 0f00 	cmp.w	r9, #0
  212948:	f000 813d 	beq.w	212bc6 <HAL_SPI_TransmitReceive+0x2ba>
  __HAL_LOCK(hspi); 
  21294c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
  212950:	2b01      	cmp	r3, #1
  212952:	f000 813a 	beq.w	212bca <HAL_SPI_TransmitReceive+0x2be>
  212956:	2301      	movs	r3, #1
  212958:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  21295c:	2305      	movs	r3, #5
  21295e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  212962:	2300      	movs	r3, #0
  212964:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = pRxData;
  212966:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
  21296a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
  21296e:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
  212972:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
  212976:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
  212978:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  21297a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  21297c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  212980:	d01b      	beq.n	2129ba <HAL_SPI_TransmitReceive+0xae>
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
  212982:	68e3      	ldr	r3, [r4, #12]
  212984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  212988:	d803      	bhi.n	212992 <HAL_SPI_TransmitReceive+0x86>
  21298a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  21298e:	2b01      	cmp	r3, #1
  212990:	dd20      	ble.n	2129d4 <HAL_SPI_TransmitReceive+0xc8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  212992:	6822      	ldr	r2, [r4, #0]
  212994:	6853      	ldr	r3, [r2, #4]
  212996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  21299a:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
  21299c:	6823      	ldr	r3, [r4, #0]
  21299e:	681a      	ldr	r2, [r3, #0]
  2129a0:	f012 0f40 	tst.w	r2, #64	; 0x40
  2129a4:	d103      	bne.n	2129ae <HAL_SPI_TransmitReceive+0xa2>
    __HAL_SPI_ENABLE(hspi);
  2129a6:	681a      	ldr	r2, [r3, #0]
  2129a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  2129ac:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  2129ae:	68e3      	ldr	r3, [r4, #12]
  2129b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  2129b4:	f240 8084 	bls.w	212ac0 <HAL_SPI_TransmitReceive+0x1b4>
  2129b8:	e039      	b.n	212a2e <HAL_SPI_TransmitReceive+0x122>
    SPI_RESET_CRC(hspi);
  2129ba:	6822      	ldr	r2, [r4, #0]
  2129bc:	6813      	ldr	r3, [r2, #0]
  2129be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  2129c2:	041b      	lsls	r3, r3, #16
  2129c4:	0c1b      	lsrs	r3, r3, #16
  2129c6:	6013      	str	r3, [r2, #0]
  2129c8:	6822      	ldr	r2, [r4, #0]
  2129ca:	6813      	ldr	r3, [r2, #0]
  2129cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  2129d0:	6013      	str	r3, [r2, #0]
  2129d2:	e7d6      	b.n	212982 <HAL_SPI_TransmitReceive+0x76>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  2129d4:	6822      	ldr	r2, [r4, #0]
  2129d6:	6853      	ldr	r3, [r2, #4]
  2129d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  2129dc:	6053      	str	r3, [r2, #4]
  2129de:	e7dd      	b.n	21299c <HAL_SPI_TransmitReceive+0x90>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
  2129e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  2129e4:	b983      	cbnz	r3, 212a08 <HAL_SPI_TransmitReceive+0xfc>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  2129e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  2129e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  2129ec:	f000 80a2 	beq.w	212b34 <HAL_SPI_TransmitReceive+0x228>
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  2129f0:	4629      	mov	r1, r5
  2129f2:	4620      	mov	r0, r4
  2129f4:	f7ff fdf8 	bl	2125e8 <_ZL22SPI_EndRxTxTransactionP19__SPI_HandleTypeDefm>
  2129f8:	2800      	cmp	r0, #0
  2129fa:	f000 80c8 	beq.w	212b8e <HAL_SPI_TransmitReceive+0x282>
    return HAL_TIMEOUT;
  2129fe:	2003      	movs	r0, #3
  212a00:	e796      	b.n	212930 <HAL_SPI_TransmitReceive+0x24>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
  212a02:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  212a06:	b17b      	cbz	r3, 212a28 <HAL_SPI_TransmitReceive+0x11c>
  212a08:	6823      	ldr	r3, [r4, #0]
  212a0a:	689a      	ldr	r2, [r3, #8]
  212a0c:	f012 0f01 	tst.w	r2, #1
  212a10:	d00a      	beq.n	212a28 <HAL_SPI_TransmitReceive+0x11c>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
  212a12:	6c22      	ldr	r2, [r4, #64]	; 0x40
  212a14:	68db      	ldr	r3, [r3, #12]
  212a16:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
  212a18:	6c23      	ldr	r3, [r4, #64]	; 0x40
  212a1a:	3302      	adds	r3, #2
  212a1c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
  212a1e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  212a22:	3b01      	subs	r3, #1
  212a24:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if(Timeout != HAL_MAX_DELAY)
  212a28:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
  212a2c:	d11d      	bne.n	212a6a <HAL_SPI_TransmitReceive+0x15e>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
  212a2e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  212a30:	2b00      	cmp	r3, #0
  212a32:	d0d5      	beq.n	2129e0 <HAL_SPI_TransmitReceive+0xd4>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
  212a34:	6823      	ldr	r3, [r4, #0]
  212a36:	689a      	ldr	r2, [r3, #8]
  212a38:	f012 0f02 	tst.w	r2, #2
  212a3c:	d0e1      	beq.n	212a02 <HAL_SPI_TransmitReceive+0xf6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
  212a3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  212a40:	8812      	ldrh	r2, [r2, #0]
  212a42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
  212a44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  212a46:	3302      	adds	r3, #2
  212a48:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
  212a4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  212a4c:	3b01      	subs	r3, #1
  212a4e:	b29b      	uxth	r3, r3
  212a50:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
  212a52:	2b00      	cmp	r3, #0
  212a54:	d1d5      	bne.n	212a02 <HAL_SPI_TransmitReceive+0xf6>
  212a56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  212a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  212a5c:	d1d1      	bne.n	212a02 <HAL_SPI_TransmitReceive+0xf6>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  212a5e:	6822      	ldr	r2, [r4, #0]
  212a60:	6813      	ldr	r3, [r2, #0]
  212a62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  212a66:	6013      	str	r3, [r2, #0]
  212a68:	e7cb      	b.n	212a02 <HAL_SPI_TransmitReceive+0xf6>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
  212a6a:	b93d      	cbnz	r5, 212a7c <HAL_SPI_TransmitReceive+0x170>
          hspi->State = HAL_SPI_STATE_READY;
  212a6c:	2301      	movs	r3, #1
  212a6e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
  212a72:	2300      	movs	r3, #0
  212a74:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
          return HAL_TIMEOUT;
  212a78:	2003      	movs	r0, #3
  212a7a:	e759      	b.n	212930 <HAL_SPI_TransmitReceive+0x24>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
  212a7c:	f7fc ff12 	bl	20f8a4 <HAL_GetTick>
  212a80:	1b80      	subs	r0, r0, r6
  212a82:	4285      	cmp	r5, r0
  212a84:	d2d3      	bcs.n	212a2e <HAL_SPI_TransmitReceive+0x122>
  212a86:	e7f1      	b.n	212a6c <HAL_SPI_TransmitReceive+0x160>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
  212a88:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  212a8c:	2b00      	cmp	r3, #0
  212a8e:	d0aa      	beq.n	2129e6 <HAL_SPI_TransmitReceive+0xda>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
  212a90:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  212a94:	e00b      	b.n	212aae <HAL_SPI_TransmitReceive+0x1a2>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
  212a96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  212a98:	1c59      	adds	r1, r3, #1
  212a9a:	63a1      	str	r1, [r4, #56]	; 0x38
  212a9c:	781b      	ldrb	r3, [r3, #0]
  212a9e:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
  212aa0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  212aa2:	3b01      	subs	r3, #1
  212aa4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  212aa6:	e01e      	b.n	212ae6 <HAL_SPI_TransmitReceive+0x1da>
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
  212aa8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  212aac:	b12b      	cbz	r3, 212aba <HAL_SPI_TransmitReceive+0x1ae>
  212aae:	6822      	ldr	r2, [r4, #0]
  212ab0:	6891      	ldr	r1, [r2, #8]
  212ab2:	f011 0f01 	tst.w	r1, #1
  212ab6:	f040 808a 	bne.w	212bce <HAL_SPI_TransmitReceive+0x2c2>
      if(Timeout != HAL_MAX_DELAY)
  212aba:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
  212abe:	d12a      	bne.n	212b16 <HAL_SPI_TransmitReceive+0x20a>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
  212ac0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  212ac2:	2b00      	cmp	r3, #0
  212ac4:	d0e0      	beq.n	212a88 <HAL_SPI_TransmitReceive+0x17c>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
  212ac6:	6822      	ldr	r2, [r4, #0]
  212ac8:	6891      	ldr	r1, [r2, #8]
  212aca:	f011 0f02 	tst.w	r1, #2
  212ace:	d0eb      	beq.n	212aa8 <HAL_SPI_TransmitReceive+0x19c>
        if(hspi->TxXferCount > 1)
  212ad0:	2b01      	cmp	r3, #1
  212ad2:	dde0      	ble.n	212a96 <HAL_SPI_TransmitReceive+0x18a>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
  212ad4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  212ad6:	881b      	ldrh	r3, [r3, #0]
  212ad8:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
  212ada:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  212adc:	3302      	adds	r3, #2
  212ade:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
  212ae0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  212ae2:	3b02      	subs	r3, #2
  212ae4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
  212ae6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  212ae8:	2b00      	cmp	r3, #0
  212aea:	d1dd      	bne.n	212aa8 <HAL_SPI_TransmitReceive+0x19c>
  212aec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  212aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  212af2:	d1d9      	bne.n	212aa8 <HAL_SPI_TransmitReceive+0x19c>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  212af4:	6822      	ldr	r2, [r4, #0]
  212af6:	6813      	ldr	r3, [r2, #0]
  212af8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  212afc:	6013      	str	r3, [r2, #0]
  212afe:	e7d3      	b.n	212aa8 <HAL_SPI_TransmitReceive+0x19c>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
  212b00:	6c23      	ldr	r3, [r4, #64]	; 0x40
  212b02:	1c59      	adds	r1, r3, #1
  212b04:	6421      	str	r1, [r4, #64]	; 0x40
  212b06:	7b12      	ldrb	r2, [r2, #12]
  212b08:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
  212b0a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  212b0e:	3b01      	subs	r3, #1
  212b10:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  212b14:	e7d1      	b.n	212aba <HAL_SPI_TransmitReceive+0x1ae>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
  212b16:	b93d      	cbnz	r5, 212b28 <HAL_SPI_TransmitReceive+0x21c>
          hspi->State = HAL_SPI_STATE_READY;
  212b18:	2301      	movs	r3, #1
  212b1a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
  212b1e:	2300      	movs	r3, #0
  212b20:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
          return HAL_TIMEOUT;
  212b24:	2003      	movs	r0, #3
  212b26:	e703      	b.n	212930 <HAL_SPI_TransmitReceive+0x24>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
  212b28:	f7fc febc 	bl	20f8a4 <HAL_GetTick>
  212b2c:	1b80      	subs	r0, r0, r6
  212b2e:	4285      	cmp	r5, r0
  212b30:	d2c6      	bcs.n	212ac0 <HAL_SPI_TransmitReceive+0x1b4>
  212b32:	e7f1      	b.n	212b18 <HAL_SPI_TransmitReceive+0x20c>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
  212b34:	462b      	mov	r3, r5
  212b36:	2201      	movs	r2, #1
  212b38:	4611      	mov	r1, r2
  212b3a:	4620      	mov	r0, r4
  212b3c:	f7ff fcb0 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  212b40:	b118      	cbz	r0, 212b4a <HAL_SPI_TransmitReceive+0x23e>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
  212b42:	6e23      	ldr	r3, [r4, #96]	; 0x60
  212b44:	f043 0302 	orr.w	r3, r3, #2
  212b48:	6623      	str	r3, [r4, #96]	; 0x60
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
  212b4a:	68e3      	ldr	r3, [r4, #12]
  212b4c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
  212b50:	d017      	beq.n	212b82 <HAL_SPI_TransmitReceive+0x276>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
  212b52:	6823      	ldr	r3, [r4, #0]
  212b54:	7b1b      	ldrb	r3, [r3, #12]
  212b56:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
  212b5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  212b5c:	2b02      	cmp	r3, #2
  212b5e:	f47f af47 	bne.w	2129f0 <HAL_SPI_TransmitReceive+0xe4>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
  212b62:	462b      	mov	r3, r5
  212b64:	2201      	movs	r2, #1
  212b66:	4611      	mov	r1, r2
  212b68:	4620      	mov	r0, r4
  212b6a:	f7ff fc99 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  212b6e:	b118      	cbz	r0, 212b78 <HAL_SPI_TransmitReceive+0x26c>
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
  212b70:	6e23      	ldr	r3, [r4, #96]	; 0x60
  212b72:	f043 0302 	orr.w	r3, r3, #2
  212b76:	6623      	str	r3, [r4, #96]	; 0x60
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
  212b78:	6823      	ldr	r3, [r4, #0]
  212b7a:	7b1b      	ldrb	r3, [r3, #12]
  212b7c:	f8ad 3006 	strh.w	r3, [sp, #6]
  212b80:	e736      	b.n	2129f0 <HAL_SPI_TransmitReceive+0xe4>
      tmpreg = hspi->Instance->DR;
  212b82:	6823      	ldr	r3, [r4, #0]
  212b84:	68db      	ldr	r3, [r3, #12]
  212b86:	b29b      	uxth	r3, r3
  212b88:	f8ad 3006 	strh.w	r3, [sp, #6]
  212b8c:	e730      	b.n	2129f0 <HAL_SPI_TransmitReceive+0xe4>
  hspi->State = HAL_SPI_STATE_READY;
  212b8e:	2301      	movs	r3, #1
  212b90:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
  212b94:	6823      	ldr	r3, [r4, #0]
  212b96:	689a      	ldr	r2, [r3, #8]
  212b98:	f012 0f10 	tst.w	r2, #16
  212b9c:	d107      	bne.n	212bae <HAL_SPI_TransmitReceive+0x2a2>
  __HAL_UNLOCK(hspi);
  212b9e:	2300      	movs	r3, #0
  212ba0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
  212ba4:	6e20      	ldr	r0, [r4, #96]	; 0x60
    return HAL_BUSY;
  212ba6:	1ac0      	subs	r0, r0, r3
  212ba8:	bf18      	it	ne
  212baa:	2001      	movne	r0, #1
  212bac:	e6c0      	b.n	212930 <HAL_SPI_TransmitReceive+0x24>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
  212bae:	6e22      	ldr	r2, [r4, #96]	; 0x60
  212bb0:	f042 0202 	orr.w	r2, r2, #2
  212bb4:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  212bb6:	f64f 72ef 	movw	r2, #65519	; 0xffef
  212bba:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
  212bbc:	2300      	movs	r3, #0
  212bbe:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
  212bc2:	2001      	movs	r0, #1
  212bc4:	e6b4      	b.n	212930 <HAL_SPI_TransmitReceive+0x24>
    return HAL_ERROR;
  212bc6:	2001      	movs	r0, #1
  212bc8:	e6b2      	b.n	212930 <HAL_SPI_TransmitReceive+0x24>
  __HAL_LOCK(hspi); 
  212bca:	2002      	movs	r0, #2
  212bcc:	e6b0      	b.n	212930 <HAL_SPI_TransmitReceive+0x24>
        if(hspi->RxXferCount > 1)
  212bce:	2b01      	cmp	r3, #1
  212bd0:	dd96      	ble.n	212b00 <HAL_SPI_TransmitReceive+0x1f4>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
  212bd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  212bd4:	68d2      	ldr	r2, [r2, #12]
  212bd6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
  212bd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  212bda:	3302      	adds	r3, #2
  212bdc:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
  212bde:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  212be2:	3b02      	subs	r3, #2
  212be4:	b29b      	uxth	r3, r3
  212be6:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
  212bea:	2b01      	cmp	r3, #1
  212bec:	f73f af65 	bgt.w	212aba <HAL_SPI_TransmitReceive+0x1ae>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  212bf0:	6822      	ldr	r2, [r4, #0]
  212bf2:	6853      	ldr	r3, [r2, #4]
  212bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  212bf8:	6053      	str	r3, [r2, #4]
  212bfa:	e75e      	b.n	212aba <HAL_SPI_TransmitReceive+0x1ae>

00212bfc <HAL_SPI_Receive>:
{
  212bfc:	b570      	push	{r4, r5, r6, lr}
  212bfe:	b084      	sub	sp, #16
  if(hspi->State != HAL_SPI_STATE_READY)
  212c00:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  212c04:	2c01      	cmp	r4, #1
  212c06:	d002      	beq.n	212c0e <HAL_SPI_Receive+0x12>
    return HAL_BUSY;
  212c08:	2002      	movs	r0, #2
}
  212c0a:	b004      	add	sp, #16
  212c0c:	bd70      	pop	{r4, r5, r6, pc}
  if((pData == NULL ) || (Size == 0))
  212c0e:	2900      	cmp	r1, #0
  212c10:	f000 811a 	beq.w	212e48 <HAL_SPI_Receive+0x24c>
  212c14:	2a00      	cmp	r2, #0
  212c16:	f000 8117 	beq.w	212e48 <HAL_SPI_Receive+0x24c>
  212c1a:	461d      	mov	r5, r3
  212c1c:	4604      	mov	r4, r0
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
  212c1e:	6843      	ldr	r3, [r0, #4]
  212c20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
  212c24:	d052      	beq.n	212ccc <HAL_SPI_Receive+0xd0>
  __HAL_LOCK(hspi);
  212c26:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
  212c2a:	2b01      	cmp	r3, #1
  212c2c:	f000 810e 	beq.w	212e4c <HAL_SPI_Receive+0x250>
  212c30:	2301      	movs	r3, #1
  212c32:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
  212c36:	2304      	movs	r3, #4
  212c38:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  212c3c:	2300      	movs	r3, #0
  212c3e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = pData;
  212c40:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
  212c42:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
  212c46:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
  212c4a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0;
  212c4c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0;
  212c4e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  212c50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  212c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  212c56:	d042      	beq.n	212cde <HAL_SPI_Receive+0xe2>
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  212c58:	68e3      	ldr	r3, [r4, #12]
  212c5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  212c5e:	6822      	ldr	r2, [r4, #0]
  212c60:	6853      	ldr	r3, [r2, #4]
  212c62:	bf8c      	ite	hi
  212c64:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
  212c68:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
  212c6c:	6053      	str	r3, [r2, #4]
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
  212c6e:	68a3      	ldr	r3, [r4, #8]
  212c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  212c74:	d045      	beq.n	212d02 <HAL_SPI_Receive+0x106>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
  212c76:	6823      	ldr	r3, [r4, #0]
  212c78:	681a      	ldr	r2, [r3, #0]
  212c7a:	f012 0f40 	tst.w	r2, #64	; 0x40
  212c7e:	d103      	bne.n	212c88 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_ENABLE(hspi);
  212c80:	681a      	ldr	r2, [r3, #0]
  212c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  212c86:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
  212c88:	68e3      	ldr	r3, [r4, #12]
  212c8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  212c8e:	d93e      	bls.n	212d0e <HAL_SPI_Receive+0x112>
    while(hspi->RxXferCount > 1 )
  212c90:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  212c94:	2b01      	cmp	r3, #1
  212c96:	dd56      	ble.n	212d46 <HAL_SPI_Receive+0x14a>
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
  212c98:	2601      	movs	r6, #1
  212c9a:	462b      	mov	r3, r5
  212c9c:	4632      	mov	r2, r6
  212c9e:	4631      	mov	r1, r6
  212ca0:	4620      	mov	r0, r4
  212ca2:	f7ff fbfd 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  212ca6:	2800      	cmp	r0, #0
  212ca8:	f040 80d4 	bne.w	212e54 <HAL_SPI_Receive+0x258>
      *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
  212cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
  212cae:	6822      	ldr	r2, [r4, #0]
  212cb0:	68d2      	ldr	r2, [r2, #12]
  212cb2:	801a      	strh	r2, [r3, #0]
      hspi->pRxBuffPtr += sizeof(uint16_t);
  212cb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  212cb6:	3302      	adds	r3, #2
  212cb8:	6423      	str	r3, [r4, #64]	; 0x40
      hspi->RxXferCount--;
  212cba:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
  212cbe:	3a01      	subs	r2, #1
  212cc0:	b292      	uxth	r2, r2
  212cc2:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    while(hspi->RxXferCount > 1 )
  212cc6:	2a01      	cmp	r2, #1
  212cc8:	dce7      	bgt.n	212c9a <HAL_SPI_Receive+0x9e>
  212cca:	e03c      	b.n	212d46 <HAL_SPI_Receive+0x14a>
  if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
  212ccc:	6883      	ldr	r3, [r0, #8]
  212cce:	2b00      	cmp	r3, #0
  212cd0:	d1a9      	bne.n	212c26 <HAL_SPI_Receive+0x2a>
    return HAL_SPI_TransmitReceive(hspi,pData,pData,Size,Timeout);
  212cd2:	9500      	str	r5, [sp, #0]
  212cd4:	4613      	mov	r3, r2
  212cd6:	460a      	mov	r2, r1
  212cd8:	f7ff fe18 	bl	21290c <HAL_SPI_TransmitReceive>
  212cdc:	e795      	b.n	212c0a <HAL_SPI_Receive+0xe>
    SPI_RESET_CRC(hspi);
  212cde:	6822      	ldr	r2, [r4, #0]
  212ce0:	6813      	ldr	r3, [r2, #0]
  212ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  212ce6:	041b      	lsls	r3, r3, #16
  212ce8:	0c1b      	lsrs	r3, r3, #16
  212cea:	6013      	str	r3, [r2, #0]
  212cec:	6822      	ldr	r2, [r4, #0]
  212cee:	6813      	ldr	r3, [r2, #0]
  212cf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  212cf4:	6013      	str	r3, [r2, #0]
    hspi->RxXferCount--;
  212cf6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  212cfa:	3b01      	subs	r3, #1
  212cfc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  212d00:	e7aa      	b.n	212c58 <HAL_SPI_Receive+0x5c>
    SPI_1LINE_RX(hspi);
  212d02:	6822      	ldr	r2, [r4, #0]
  212d04:	6813      	ldr	r3, [r2, #0]
  212d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  212d0a:	6013      	str	r3, [r2, #0]
  212d0c:	e7b3      	b.n	212c76 <HAL_SPI_Receive+0x7a>
    while(hspi->RxXferCount > 1)
  212d0e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  212d12:	2b01      	cmp	r3, #1
  212d14:	dd17      	ble.n	212d46 <HAL_SPI_Receive+0x14a>
      if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
  212d16:	2601      	movs	r6, #1
  212d18:	462b      	mov	r3, r5
  212d1a:	4632      	mov	r2, r6
  212d1c:	4631      	mov	r1, r6
  212d1e:	4620      	mov	r0, r4
  212d20:	f7ff fbbe 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  212d24:	2800      	cmp	r0, #0
  212d26:	f040 8093 	bne.w	212e50 <HAL_SPI_Receive+0x254>
      (*hspi->pRxBuffPtr++)= *(__IO uint8_t *)&hspi->Instance->DR;
  212d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  212d2c:	1c5a      	adds	r2, r3, #1
  212d2e:	6422      	str	r2, [r4, #64]	; 0x40
  212d30:	6822      	ldr	r2, [r4, #0]
  212d32:	7b12      	ldrb	r2, [r2, #12]
  212d34:	701a      	strb	r2, [r3, #0]
      hspi->RxXferCount--;  
  212d36:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
  212d3a:	3a01      	subs	r2, #1
  212d3c:	b292      	uxth	r2, r2
  212d3e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    while(hspi->RxXferCount > 1)
  212d42:	2a01      	cmp	r2, #1
  212d44:	dce8      	bgt.n	212d18 <HAL_SPI_Receive+0x11c>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
  212d46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  212d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  212d4c:	d008      	beq.n	212d60 <HAL_SPI_Receive+0x164>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
  212d4e:	462b      	mov	r3, r5
  212d50:	2201      	movs	r2, #1
  212d52:	4611      	mov	r1, r2
  212d54:	4620      	mov	r0, r4
  212d56:	f7ff fba3 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  212d5a:	b138      	cbz	r0, 212d6c <HAL_SPI_Receive+0x170>
    return HAL_TIMEOUT;
  212d5c:	2003      	movs	r0, #3
  212d5e:	e754      	b.n	212c0a <HAL_SPI_Receive+0xe>
    hspi->Instance->CR1 |= SPI_CR1_CRCNEXT;
  212d60:	6822      	ldr	r2, [r4, #0]
  212d62:	6813      	ldr	r3, [r2, #0]
  212d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  212d68:	6013      	str	r3, [r2, #0]
  212d6a:	e7f0      	b.n	212d4e <HAL_SPI_Receive+0x152>
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  212d6c:	68e3      	ldr	r3, [r4, #12]
  212d6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  212d72:	d917      	bls.n	212da4 <HAL_SPI_Receive+0x1a8>
    *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
  212d74:	6c23      	ldr	r3, [r4, #64]	; 0x40
  212d76:	6822      	ldr	r2, [r4, #0]
  212d78:	68d2      	ldr	r2, [r2, #12]
  212d7a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
  212d7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  212d7e:	3302      	adds	r3, #2
  212d80:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferCount--;
  212d82:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  212d86:	3b01      	subs	r3, #1
  212d88:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  212d8c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  212d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  212d92:	d00e      	beq.n	212db2 <HAL_SPI_Receive+0x1b6>
  if(SPI_EndRxTransaction(hspi,Timeout) != HAL_OK)
  212d94:	4629      	mov	r1, r5
  212d96:	4620      	mov	r0, r4
  212d98:	f7ff fc53 	bl	212642 <_ZL20SPI_EndRxTransactionP19__SPI_HandleTypeDefm>
  212d9c:	2800      	cmp	r0, #0
  212d9e:	d037      	beq.n	212e10 <HAL_SPI_Receive+0x214>
    return HAL_TIMEOUT;
  212da0:	2003      	movs	r0, #3
  212da2:	e732      	b.n	212c0a <HAL_SPI_Receive+0xe>
    (*hspi->pRxBuffPtr++) = *(__IO uint8_t *)&hspi->Instance->DR;
  212da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  212da6:	1c5a      	adds	r2, r3, #1
  212da8:	6422      	str	r2, [r4, #64]	; 0x40
  212daa:	6822      	ldr	r2, [r4, #0]
  212dac:	7b12      	ldrb	r2, [r2, #12]
  212dae:	701a      	strb	r2, [r3, #0]
  212db0:	e7e7      	b.n	212d82 <HAL_SPI_Receive+0x186>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK) 
  212db2:	462b      	mov	r3, r5
  212db4:	2201      	movs	r2, #1
  212db6:	4611      	mov	r1, r2
  212db8:	4620      	mov	r0, r4
  212dba:	f7ff fb71 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  212dbe:	b118      	cbz	r0, 212dc8 <HAL_SPI_Receive+0x1cc>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
  212dc0:	6e23      	ldr	r3, [r4, #96]	; 0x60
  212dc2:	f043 0302 	orr.w	r3, r3, #2
  212dc6:	6623      	str	r3, [r4, #96]	; 0x60
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  212dc8:	68e2      	ldr	r2, [r4, #12]
  212dca:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  212dce:	d905      	bls.n	212ddc <HAL_SPI_Receive+0x1e0>
      tmpreg = hspi->Instance->DR;
  212dd0:	6823      	ldr	r3, [r4, #0]
  212dd2:	68db      	ldr	r3, [r3, #12]
  212dd4:	b29b      	uxth	r3, r3
  212dd6:	f8ad 300e 	strh.w	r3, [sp, #14]
  212dda:	e7db      	b.n	212d94 <HAL_SPI_Receive+0x198>
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
  212ddc:	6823      	ldr	r3, [r4, #0]
  212dde:	7b1b      	ldrb	r3, [r3, #12]
  212de0:	f8ad 300e 	strh.w	r3, [sp, #14]
      if((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
  212de4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  212de8:	d1d4      	bne.n	212d94 <HAL_SPI_Receive+0x198>
  212dea:	6b23      	ldr	r3, [r4, #48]	; 0x30
  212dec:	2b02      	cmp	r3, #2
  212dee:	d1d1      	bne.n	212d94 <HAL_SPI_Receive+0x198>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SPI_FLAG_RXNE, Timeout) != HAL_OK)
  212df0:	462b      	mov	r3, r5
  212df2:	2201      	movs	r2, #1
  212df4:	4611      	mov	r1, r2
  212df6:	4620      	mov	r0, r4
  212df8:	f7ff fb52 	bl	2124a0 <_ZL29SPI_WaitFlagStateUntilTimeoutP19__SPI_HandleTypeDefmmm>
  212dfc:	b118      	cbz	r0, 212e06 <HAL_SPI_Receive+0x20a>
          hspi->ErrorCode|= HAL_SPI_ERROR_FLAG;
  212dfe:	6e23      	ldr	r3, [r4, #96]	; 0x60
  212e00:	f043 0320 	orr.w	r3, r3, #32
  212e04:	6623      	str	r3, [r4, #96]	; 0x60
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
  212e06:	6823      	ldr	r3, [r4, #0]
  212e08:	7b1b      	ldrb	r3, [r3, #12]
  212e0a:	f8ad 300e 	strh.w	r3, [sp, #14]
  212e0e:	e7c1      	b.n	212d94 <HAL_SPI_Receive+0x198>
  hspi->State = HAL_SPI_STATE_READY; 
  212e10:	2301      	movs	r3, #1
  212e12:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
  212e16:	6823      	ldr	r3, [r4, #0]
  212e18:	689a      	ldr	r2, [r3, #8]
  212e1a:	f012 0f10 	tst.w	r2, #16
  212e1e:	d107      	bne.n	212e30 <HAL_SPI_Receive+0x234>
  __HAL_UNLOCK(hspi);
  212e20:	2300      	movs	r3, #0
  212e22:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
  212e26:	6e20      	ldr	r0, [r4, #96]	; 0x60
    return HAL_BUSY;
  212e28:	1ac0      	subs	r0, r0, r3
  212e2a:	bf18      	it	ne
  212e2c:	2001      	movne	r0, #1
  212e2e:	e6ec      	b.n	212c0a <HAL_SPI_Receive+0xe>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
  212e30:	6e22      	ldr	r2, [r4, #96]	; 0x60
  212e32:	f042 0202 	orr.w	r2, r2, #2
  212e36:	6622      	str	r2, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  212e38:	f64f 72ef 	movw	r2, #65519	; 0xffef
  212e3c:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
  212e3e:	2300      	movs	r3, #0
  212e40:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
  212e44:	2001      	movs	r0, #1
  212e46:	e6e0      	b.n	212c0a <HAL_SPI_Receive+0xe>
    return HAL_ERROR;
  212e48:	2001      	movs	r0, #1
  212e4a:	e6de      	b.n	212c0a <HAL_SPI_Receive+0xe>
  __HAL_LOCK(hspi);
  212e4c:	2002      	movs	r0, #2
  212e4e:	e6dc      	b.n	212c0a <HAL_SPI_Receive+0xe>
        return HAL_TIMEOUT;
  212e50:	2003      	movs	r0, #3
  212e52:	e6da      	b.n	212c0a <HAL_SPI_Receive+0xe>
        return HAL_TIMEOUT;
  212e54:	2003      	movs	r0, #3
  212e56:	e6d8      	b.n	212c0a <HAL_SPI_Receive+0xe>

00212e58 <_ZL24TIM_TI1_ConfigInputStageP11TIM_TypeDefmm>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
  212e58:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  212e5a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
  212e5c:	6a04      	ldr	r4, [r0, #32]
  212e5e:	f024 0401 	bic.w	r4, r4, #1
  212e62:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
  212e64:	6984      	ldr	r4, [r0, #24]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  212e66:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
  212e6a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  212e6e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
  212e72:	430b      	orrs	r3, r1
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
  212e74:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
  212e76:	6203      	str	r3, [r0, #32]
}
  212e78:	f85d 4b04 	ldr.w	r4, [sp], #4
  212e7c:	4770      	bx	lr

00212e7e <_ZL24TIM_TI2_ConfigInputStageP11TIM_TypeDefmm>:
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
  212e7e:	b410      	push	{r4}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
  212e80:	6a03      	ldr	r3, [r0, #32]
  212e82:	f023 0310 	bic.w	r3, r3, #16
  212e86:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  212e88:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
  212e8a:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  212e8c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);
  212e90:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  212e94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
  212e98:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
  212e9c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
  212e9e:	6203      	str	r3, [r0, #32]
}
  212ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
  212ea4:	4770      	bx	lr

00212ea6 <HAL_TIM_PWM_MspInit>:
{
  212ea6:	4770      	bx	lr

00212ea8 <TIM_Base_SetConfig>:
{
  212ea8:	b4f0      	push	{r4, r5, r6, r7}
  tmpcr1 = TIMx->CR1;
  212eaa:	6802      	ldr	r2, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  212eac:	4d2d      	ldr	r5, [pc, #180]	; (212f64 <TIM_Base_SetConfig+0xbc>)
  212eae:	42a8      	cmp	r0, r5
  212eb0:	bf14      	ite	ne
  212eb2:	2500      	movne	r5, #0
  212eb4:	2501      	moveq	r5, #1
  212eb6:	4c2c      	ldr	r4, [pc, #176]	; (212f68 <TIM_Base_SetConfig+0xc0>)
  212eb8:	42a0      	cmp	r0, r4
  212eba:	bf14      	ite	ne
  212ebc:	2400      	movne	r4, #0
  212ebe:	2401      	moveq	r4, #1
  212ec0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  212ec4:	bf14      	ite	ne
  212ec6:	462b      	movne	r3, r5
  212ec8:	f045 0301 	orreq.w	r3, r5, #1
  212ecc:	4e27      	ldr	r6, [pc, #156]	; (212f6c <TIM_Base_SetConfig+0xc4>)
  212ece:	42b0      	cmp	r0, r6
  212ed0:	bf08      	it	eq
  212ed2:	f043 0301 	orreq.w	r3, r3, #1
  212ed6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
  212eda:	42b0      	cmp	r0, r6
  212edc:	bf08      	it	eq
  212ede:	f043 0301 	orreq.w	r3, r3, #1
  212ee2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
  212ee6:	42b0      	cmp	r0, r6
  212ee8:	bf08      	it	eq
  212eea:	f043 0301 	orreq.w	r3, r3, #1
  212eee:	4323      	orrs	r3, r4
  212ef0:	d122      	bne.n	212f38 <TIM_Base_SetConfig+0x90>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  212ef2:	4f1f      	ldr	r7, [pc, #124]	; (212f70 <TIM_Base_SetConfig+0xc8>)
  212ef4:	4e1f      	ldr	r6, [pc, #124]	; (212f74 <TIM_Base_SetConfig+0xcc>)
  212ef6:	42b8      	cmp	r0, r7
  212ef8:	bf18      	it	ne
  212efa:	42b0      	cmpne	r0, r6
  212efc:	bf0c      	ite	eq
  212efe:	2601      	moveq	r6, #1
  212f00:	2600      	movne	r6, #0
  212f02:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  212f06:	42b8      	cmp	r0, r7
  212f08:	bf08      	it	eq
  212f0a:	f046 0601 	orreq.w	r6, r6, #1
  212f0e:	f5a7 3798 	sub.w	r7, r7, #77824	; 0x13000
  212f12:	42b8      	cmp	r0, r7
  212f14:	bf08      	it	eq
  212f16:	f046 0601 	orreq.w	r6, r6, #1
  212f1a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  212f1e:	42b8      	cmp	r0, r7
  212f20:	bf08      	it	eq
  212f22:	f046 0601 	orreq.w	r6, r6, #1
  212f26:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  212f2a:	42b8      	cmp	r0, r7
  212f2c:	bf08      	it	eq
  212f2e:	f046 0601 	orreq.w	r6, r6, #1
  212f32:	b92e      	cbnz	r6, 212f40 <TIM_Base_SetConfig+0x98>
  212f34:	b143      	cbz	r3, 212f48 <TIM_Base_SetConfig+0xa0>
  212f36:	e003      	b.n	212f40 <TIM_Base_SetConfig+0x98>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
  212f38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
  212f3c:	684b      	ldr	r3, [r1, #4]
  212f3e:	431a      	orrs	r2, r3
    tmpcr1 &= ~TIM_CR1_CKD;
  212f40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  212f44:	68cb      	ldr	r3, [r1, #12]
  212f46:	431a      	orrs	r2, r3
  TIMx->CR1 = tmpcr1;
  212f48:	6002      	str	r2, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
  212f4a:	688b      	ldr	r3, [r1, #8]
  212f4c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
  212f4e:	680b      	ldr	r3, [r1, #0]
  212f50:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  212f52:	b905      	cbnz	r5, 212f56 <TIM_Base_SetConfig+0xae>
  212f54:	b10c      	cbz	r4, 212f5a <TIM_Base_SetConfig+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
  212f56:	690b      	ldr	r3, [r1, #16]
  212f58:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
  212f5a:	2301      	movs	r3, #1
  212f5c:	6143      	str	r3, [r0, #20]
}
  212f5e:	bcf0      	pop	{r4, r5, r6, r7}
  212f60:	4770      	bx	lr
  212f62:	bf00      	nop
  212f64:	40010000 	.word	0x40010000
  212f68:	40010400 	.word	0x40010400
  212f6c:	40000400 	.word	0x40000400
  212f70:	40014400 	.word	0x40014400
  212f74:	40014000 	.word	0x40014000

00212f78 <HAL_TIM_Base_Init>:
  if(htim == NULL)
  212f78:	b198      	cbz	r0, 212fa2 <HAL_TIM_Base_Init+0x2a>
{ 
  212f7a:	b510      	push	{r4, lr}
  212f7c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
  212f7e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  212f82:	b15b      	cbz	r3, 212f9c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
  212f84:	2302      	movs	r3, #2
  212f86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
  212f8a:	1d21      	adds	r1, r4, #4
  212f8c:	6820      	ldr	r0, [r4, #0]
  212f8e:	f7ff ff8b 	bl	212ea8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
  212f92:	2301      	movs	r3, #1
  212f94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
  212f98:	2000      	movs	r0, #0
  212f9a:	bd10      	pop	{r4, pc}
    HAL_TIM_Base_MspInit(htim);
  212f9c:	f7fc f8b8 	bl	20f110 <HAL_TIM_Base_MspInit>
  212fa0:	e7f0      	b.n	212f84 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
  212fa2:	2001      	movs	r0, #1
  212fa4:	4770      	bx	lr

00212fa6 <HAL_TIM_PWM_Init>:
  if(htim == NULL)
  212fa6:	b1a8      	cbz	r0, 212fd4 <HAL_TIM_PWM_Init+0x2e>
{
  212fa8:	b510      	push	{r4, lr}
  212faa:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
  212fac:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  212fb0:	b15b      	cbz	r3, 212fca <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
  212fb2:	2302      	movs	r3, #2
  212fb4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
  212fb8:	1d21      	adds	r1, r4, #4
  212fba:	6820      	ldr	r0, [r4, #0]
  212fbc:	f7ff ff74 	bl	212ea8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
  212fc0:	2301      	movs	r3, #1
  212fc2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
  212fc6:	2000      	movs	r0, #0
  212fc8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;  
  212fca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
  212fce:	f7ff ff6a 	bl	212ea6 <HAL_TIM_PWM_MspInit>
  212fd2:	e7ee      	b.n	212fb2 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
  212fd4:	2001      	movs	r0, #1
  212fd6:	4770      	bx	lr

00212fd8 <HAL_TIM_IC_Init>:
  if(htim == NULL)
  212fd8:	b1a8      	cbz	r0, 213006 <HAL_TIM_IC_Init+0x2e>
{
  212fda:	b510      	push	{r4, lr}
  212fdc:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
  212fde:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  212fe2:	b15b      	cbz	r3, 212ffc <HAL_TIM_IC_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;   
  212fe4:	2302      	movs	r3, #2
  212fe6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
  212fea:	1d21      	adds	r1, r4, #4
  212fec:	6820      	ldr	r0, [r4, #0]
  212fee:	f7ff ff5b 	bl	212ea8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
  212ff2:	2301      	movs	r3, #1
  212ff4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
  212ff8:	2000      	movs	r0, #0
  212ffa:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;   
  212ffc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
  213000:	f7fc f8e4 	bl	20f1cc <HAL_TIM_IC_MspInit>
  213004:	e7ee      	b.n	212fe4 <HAL_TIM_IC_Init+0xc>
    return HAL_ERROR;
  213006:	2001      	movs	r0, #1
  213008:	4770      	bx	lr
	...

0021300c <HAL_TIM_Encoder_Init>:
  if(htim == NULL)
  21300c:	2800      	cmp	r0, #0
  21300e:	d043      	beq.n	213098 <HAL_TIM_Encoder_Init+0x8c>
{
  213010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  213012:	4605      	mov	r5, r0
  213014:	460c      	mov	r4, r1
  if(htim->State == HAL_TIM_STATE_RESET)
  213016:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  21301a:	2b00      	cmp	r3, #0
  21301c:	d037      	beq.n	21308e <HAL_TIM_Encoder_Init+0x82>
  htim->State= HAL_TIM_STATE_BUSY;   
  21301e:	2302      	movs	r3, #2
  213020:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
  213024:	4629      	mov	r1, r5
  213026:	f851 2b04 	ldr.w	r2, [r1], #4
  21302a:	6890      	ldr	r0, [r2, #8]
  21302c:	4b1b      	ldr	r3, [pc, #108]	; (21309c <HAL_TIM_Encoder_Init+0x90>)
  21302e:	4003      	ands	r3, r0
  213030:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
  213032:	6828      	ldr	r0, [r5, #0]
  213034:	f7ff ff38 	bl	212ea8 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
  213038:	6829      	ldr	r1, [r5, #0]
  21303a:	688e      	ldr	r6, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
  21303c:	698b      	ldr	r3, [r1, #24]
  tmpccer = htim->Instance->CCER;
  21303e:	6a0a      	ldr	r2, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
  213040:	6820      	ldr	r0, [r4, #0]
  213042:	4330      	orrs	r0, r6
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  213044:	4e16      	ldr	r6, [pc, #88]	; (2130a0 <HAL_TIM_Encoder_Init+0x94>)
  213046:	401e      	ands	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8));
  213048:	69a7      	ldr	r7, [r4, #24]
  21304a:	68a3      	ldr	r3, [r4, #8]
  21304c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  213050:	4333      	orrs	r3, r6
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  213052:	4f14      	ldr	r7, [pc, #80]	; (2130a4 <HAL_TIM_Encoder_Init+0x98>)
  213054:	401f      	ands	r7, r3
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8);
  213056:	69e6      	ldr	r6, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4) | (sConfig->IC2Filter << 12);
  213058:	6923      	ldr	r3, [r4, #16]
  21305a:	011b      	lsls	r3, r3, #4
  21305c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  213060:	68e6      	ldr	r6, [r4, #12]
  213062:	4333      	orrs	r3, r6
  213064:	6a26      	ldr	r6, [r4, #32]
  213066:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  21306a:	433b      	orrs	r3, r7
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  21306c:	f022 06aa 	bic.w	r6, r2, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4);
  213070:	6967      	ldr	r7, [r4, #20]
  213072:	6862      	ldr	r2, [r4, #4]
  213074:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  213078:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
  21307a:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
  21307c:	6829      	ldr	r1, [r5, #0]
  21307e:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
  213080:	682b      	ldr	r3, [r5, #0]
  213082:	621a      	str	r2, [r3, #32]
  htim->State= HAL_TIM_STATE_READY;
  213084:	2301      	movs	r3, #1
  213086:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
  21308a:	2000      	movs	r0, #0
  21308c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;  
  21308e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
  213092:	f7fc f875 	bl	20f180 <HAL_TIM_Encoder_MspInit>
  213096:	e7c2      	b.n	21301e <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
  213098:	2001      	movs	r0, #1
  21309a:	4770      	bx	lr
  21309c:	fffefff8 	.word	0xfffefff8
  2130a0:	fffffcfc 	.word	0xfffffcfc
  2130a4:	ffff0303 	.word	0xffff0303

002130a8 <TIM_OC1_SetConfig>:
{
  2130a8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC1E;
  2130aa:	6a03      	ldr	r3, [r0, #32]
  2130ac:	f023 0301 	bic.w	r3, r3, #1
  2130b0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
  2130b2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
  2130b4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
  2130b6:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  2130b8:	4a10      	ldr	r2, [pc, #64]	; (2130fc <TIM_OC1_SetConfig+0x54>)
  2130ba:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
  2130bc:	680d      	ldr	r5, [r1, #0]
  2130be:	432a      	orrs	r2, r5
  tmpccer &= ~TIM_CCER_CC1P;
  2130c0:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
  2130c4:	688d      	ldr	r5, [r1, #8]
  2130c6:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  2130c8:	4d0d      	ldr	r5, [pc, #52]	; (213100 <TIM_OC1_SetConfig+0x58>)
  2130ca:	42a8      	cmp	r0, r5
  2130cc:	d003      	beq.n	2130d6 <TIM_OC1_SetConfig+0x2e>
  2130ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  2130d2:	42a8      	cmp	r0, r5
  2130d4:	d10b      	bne.n	2130ee <TIM_OC1_SetConfig+0x46>
    tmpccer &= ~TIM_CCER_CC1NP;
  2130d6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
  2130da:	68cd      	ldr	r5, [r1, #12]
  2130dc:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
  2130de:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
  2130e2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
  2130e6:	694d      	ldr	r5, [r1, #20]
  2130e8:	432c      	orrs	r4, r5
    tmpcr2 |= OC_Config->OCNIdleState;
  2130ea:	698d      	ldr	r5, [r1, #24]
  2130ec:	432c      	orrs	r4, r5
  TIMx->CR2 = tmpcr2;
  2130ee:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
  2130f0:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
  2130f2:	684a      	ldr	r2, [r1, #4]
  2130f4:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
  2130f6:	6203      	str	r3, [r0, #32]
} 
  2130f8:	bc30      	pop	{r4, r5}
  2130fa:	4770      	bx	lr
  2130fc:	fffeff8c 	.word	0xfffeff8c
  213100:	40010000 	.word	0x40010000

00213104 <TIM_OC2_SetConfig>:
{
  213104:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
  213106:	6a03      	ldr	r3, [r0, #32]
  213108:	f023 0310 	bic.w	r3, r3, #16
  21310c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
  21310e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
  213110:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
  213112:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  213114:	4a12      	ldr	r2, [pc, #72]	; (213160 <TIM_OC2_SetConfig+0x5c>)
  213116:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8);
  213118:	680d      	ldr	r5, [r1, #0]
  21311a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
  21311e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4);
  213122:	688d      	ldr	r5, [r1, #8]
  213124:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  213128:	4d0e      	ldr	r5, [pc, #56]	; (213164 <TIM_OC2_SetConfig+0x60>)
  21312a:	42a8      	cmp	r0, r5
  21312c:	d003      	beq.n	213136 <TIM_OC2_SetConfig+0x32>
  21312e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  213132:	42a8      	cmp	r0, r5
  213134:	d10d      	bne.n	213152 <TIM_OC2_SetConfig+0x4e>
    tmpccer &= ~TIM_CCER_CC2NP;
  213136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4);
  21313a:	68cd      	ldr	r5, [r1, #12]
  21313c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
  213140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
  213144:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2);
  213148:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
  21314a:	698e      	ldr	r6, [r1, #24]
  21314c:	4335      	orrs	r5, r6
  21314e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
  213152:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
  213154:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
  213156:	684a      	ldr	r2, [r1, #4]
  213158:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
  21315a:	6203      	str	r3, [r0, #32]
}
  21315c:	bc70      	pop	{r4, r5, r6}
  21315e:	4770      	bx	lr
  213160:	feff8cff 	.word	0xfeff8cff
  213164:	40010000 	.word	0x40010000

00213168 <TIM_OC3_SetConfig>:
{
  213168:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
  21316a:	6a03      	ldr	r3, [r0, #32]
  21316c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  213170:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
  213172:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
  213174:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
  213176:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  213178:	4a12      	ldr	r2, [pc, #72]	; (2131c4 <TIM_OC3_SetConfig+0x5c>)
  21317a:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
  21317c:	680d      	ldr	r5, [r1, #0]
  21317e:	432a      	orrs	r2, r5
  tmpccer &= ~TIM_CCER_CC3P;
  213180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8);
  213184:	688d      	ldr	r5, [r1, #8]
  213186:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  21318a:	4d0f      	ldr	r5, [pc, #60]	; (2131c8 <TIM_OC3_SetConfig+0x60>)
  21318c:	42a8      	cmp	r0, r5
  21318e:	d003      	beq.n	213198 <TIM_OC3_SetConfig+0x30>
  213190:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  213194:	42a8      	cmp	r0, r5
  213196:	d10d      	bne.n	2131b4 <TIM_OC3_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC3NP;
  213198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8);
  21319c:	68cd      	ldr	r5, [r1, #12]
  21319e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
  2131a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
  2131a6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4);
  2131aa:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
  2131ac:	698e      	ldr	r6, [r1, #24]
  2131ae:	4335      	orrs	r5, r6
  2131b0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  TIMx->CR2 = tmpcr2;
  2131b4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
  2131b6:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
  2131b8:	684a      	ldr	r2, [r1, #4]
  2131ba:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
  2131bc:	6203      	str	r3, [r0, #32]
}
  2131be:	bc70      	pop	{r4, r5, r6}
  2131c0:	4770      	bx	lr
  2131c2:	bf00      	nop
  2131c4:	fffeff8c 	.word	0xfffeff8c
  2131c8:	40010000 	.word	0x40010000

002131cc <TIM_OC4_SetConfig>:
{
  2131cc:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC4E;
  2131ce:	6a03      	ldr	r3, [r0, #32]
  2131d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  2131d4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
  2131d6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
  2131d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
  2131da:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  2131dc:	4a0e      	ldr	r2, [pc, #56]	; (213218 <TIM_OC4_SetConfig+0x4c>)
  2131de:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8);
  2131e0:	680d      	ldr	r5, [r1, #0]
  2131e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC4P;
  2131e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12);
  2131ea:	688d      	ldr	r5, [r1, #8]
  2131ec:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
  2131f0:	4d0a      	ldr	r5, [pc, #40]	; (21321c <TIM_OC4_SetConfig+0x50>)
  2131f2:	42a8      	cmp	r0, r5
  2131f4:	d003      	beq.n	2131fe <TIM_OC4_SetConfig+0x32>
  2131f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
  2131fa:	42a8      	cmp	r0, r5
  2131fc:	d104      	bne.n	213208 <TIM_OC4_SetConfig+0x3c>
    tmpcr2 &= ~TIM_CR2_OIS4;
  2131fe:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  213202:	694d      	ldr	r5, [r1, #20]
  213204:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CR2 = tmpcr2;
  213208:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
  21320a:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
  21320c:	684a      	ldr	r2, [r1, #4]
  21320e:	6402      	str	r2, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
  213210:	6203      	str	r3, [r0, #32]
}
  213212:	bc30      	pop	{r4, r5}
  213214:	4770      	bx	lr
  213216:	bf00      	nop
  213218:	feff8cff 	.word	0xfeff8cff
  21321c:	40010000 	.word	0x40010000

00213220 <TIM_TI1_SetConfig>:
{
  213220:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC1E;
  213222:	6a04      	ldr	r4, [r0, #32]
  213224:	f024 0401 	bic.w	r4, r4, #1
  213228:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  21322a:	6986      	ldr	r6, [r0, #24]
  tmpccer = TIMx->CCER;
  21322c:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
  21322e:	4c1e      	ldr	r4, [pc, #120]	; (2132a8 <TIM_TI1_SetConfig+0x88>)
  213230:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  213234:	bf18      	it	ne
  213236:	42a0      	cmpne	r0, r4
  213238:	bf0c      	ite	eq
  21323a:	2401      	moveq	r4, #1
  21323c:	2400      	movne	r4, #0
  21323e:	4f1b      	ldr	r7, [pc, #108]	; (2132ac <TIM_TI1_SetConfig+0x8c>)
  213240:	42b8      	cmp	r0, r7
  213242:	bf08      	it	eq
  213244:	f044 0401 	orreq.w	r4, r4, #1
  213248:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  21324c:	42b8      	cmp	r0, r7
  21324e:	bf08      	it	eq
  213250:	f044 0401 	orreq.w	r4, r4, #1
  213254:	f507 6780 	add.w	r7, r7, #1024	; 0x400
  213258:	42b8      	cmp	r0, r7
  21325a:	bf08      	it	eq
  21325c:	f044 0401 	orreq.w	r4, r4, #1
  213260:	f507 4778 	add.w	r7, r7, #63488	; 0xf800
  213264:	42b8      	cmp	r0, r7
  213266:	bf08      	it	eq
  213268:	f044 0401 	orreq.w	r4, r4, #1
  21326c:	f507 5770 	add.w	r7, r7, #15360	; 0x3c00
  213270:	42b8      	cmp	r0, r7
  213272:	bf08      	it	eq
  213274:	f044 0401 	orreq.w	r4, r4, #1
  213278:	b92c      	cbnz	r4, 213286 <TIM_TI1_SetConfig+0x66>
  21327a:	4c0d      	ldr	r4, [pc, #52]	; (2132b0 <TIM_TI1_SetConfig+0x90>)
  21327c:	42a0      	cmp	r0, r4
  21327e:	d002      	beq.n	213286 <TIM_TI1_SetConfig+0x66>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  213280:	f046 0201 	orr.w	r2, r6, #1
  213284:	e002      	b.n	21328c <TIM_TI1_SetConfig+0x6c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
  213286:	f026 0603 	bic.w	r6, r6, #3
    tmpccmr1 |= TIM_ICSelection;
  21328a:	4332      	orrs	r2, r6
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  21328c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4) & TIM_CCMR1_IC1F);
  213290:	011b      	lsls	r3, r3, #4
  213292:	b2db      	uxtb	r3, r3
  213294:	4313      	orrs	r3, r2
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  213296:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
  21329a:	f001 010a 	and.w	r1, r1, #10
  21329e:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
  2132a0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
  2132a2:	6201      	str	r1, [r0, #32]
}
  2132a4:	bcf0      	pop	{r4, r5, r6, r7}
  2132a6:	4770      	bx	lr
  2132a8:	40010000 	.word	0x40010000
  2132ac:	40000400 	.word	0x40000400
  2132b0:	40001800 	.word	0x40001800

002132b4 <HAL_TIM_IC_ConfigChannel>:
{
  2132b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
  2132b6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  2132ba:	2b01      	cmp	r3, #1
  2132bc:	f000 8098 	beq.w	2133f0 <HAL_TIM_IC_ConfigChannel+0x13c>
  2132c0:	460d      	mov	r5, r1
  2132c2:	4604      	mov	r4, r0
  2132c4:	2301      	movs	r3, #1
  2132c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
  2132ca:	2302      	movs	r3, #2
  2132cc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
  2132d0:	2a00      	cmp	r2, #0
  2132d2:	d030      	beq.n	213336 <HAL_TIM_IC_ConfigChannel+0x82>
  else if (Channel == TIM_CHANNEL_2)
  2132d4:	2a04      	cmp	r2, #4
  2132d6:	d03f      	beq.n	213358 <HAL_TIM_IC_ConfigChannel+0xa4>
  else if (Channel == TIM_CHANNEL_3)
  2132d8:	2a08      	cmp	r2, #8
  2132da:	d064      	beq.n	2133a6 <HAL_TIM_IC_ConfigChannel+0xf2>
    TIM_TI4_SetConfig(htim->Instance, 
  2132dc:	6800      	ldr	r0, [r0, #0]
  2132de:	680b      	ldr	r3, [r1, #0]
  2132e0:	684f      	ldr	r7, [r1, #4]
  2132e2:	68ca      	ldr	r2, [r1, #12]
{
  uint32_t tmpccmr2 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
  2132e4:	6a06      	ldr	r6, [r0, #32]
  2132e6:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  2132ea:	6206      	str	r6, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
  2132ec:	69c1      	ldr	r1, [r0, #28]
  tmpccer = TIMx->CCER;
  2132ee:	6a06      	ldr	r6, [r0, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
  2132f0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8);
  2132f4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  2132f8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12) & TIM_CCMR2_IC4F);
  2132fc:	0312      	lsls	r2, r2, #12
  2132fe:	b292      	uxth	r2, r2
  213300:	430a      	orrs	r2, r1

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  213302:	f426 4120 	bic.w	r1, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
  213306:	031b      	lsls	r3, r3, #12
  213308:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
  21330c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
  21330e:	61c2      	str	r2, [r0, #28]
  TIMx->CCER = tmpccer ;
  213310:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
  213312:	6822      	ldr	r2, [r4, #0]
  213314:	69d3      	ldr	r3, [r2, #28]
  213316:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
  21331a:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8);
  21331c:	6822      	ldr	r2, [r4, #0]
  21331e:	69d3      	ldr	r3, [r2, #28]
  213320:	68a9      	ldr	r1, [r5, #8]
  213322:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  213326:	61d3      	str	r3, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
  213328:	2301      	movs	r3, #1
  21332a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
  21332e:	2000      	movs	r0, #0
  213330:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK; 
  213334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
               sConfig->ICFilter);
  213336:	68cb      	ldr	r3, [r1, #12]
  213338:	684a      	ldr	r2, [r1, #4]
  21333a:	6809      	ldr	r1, [r1, #0]
  21333c:	6800      	ldr	r0, [r0, #0]
  21333e:	f7ff ff6f 	bl	213220 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
  213342:	6822      	ldr	r2, [r4, #0]
  213344:	6993      	ldr	r3, [r2, #24]
  213346:	f023 030c 	bic.w	r3, r3, #12
  21334a:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
  21334c:	6822      	ldr	r2, [r4, #0]
  21334e:	6993      	ldr	r3, [r2, #24]
  213350:	68a9      	ldr	r1, [r5, #8]
  213352:	430b      	orrs	r3, r1
  213354:	6193      	str	r3, [r2, #24]
  213356:	e7e7      	b.n	213328 <HAL_TIM_IC_ConfigChannel+0x74>
    TIM_TI2_SetConfig(htim->Instance, 
  213358:	6800      	ldr	r0, [r0, #0]
  21335a:	680b      	ldr	r3, [r1, #0]
  21335c:	684f      	ldr	r7, [r1, #4]
  21335e:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
  213360:	6a06      	ldr	r6, [r0, #32]
  213362:	f026 0610 	bic.w	r6, r6, #16
  213366:	6206      	str	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  213368:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
  21336a:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
  21336c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8);
  213370:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  213374:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12) & TIM_CCMR1_IC2F);
  213378:	0312      	lsls	r2, r2, #12
  21337a:	b292      	uxth	r2, r2
  21337c:	430a      	orrs	r2, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  21337e:	f026 01a0 	bic.w	r1, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
  213382:	011b      	lsls	r3, r3, #4
  213384:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
  213388:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
  21338a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
  21338c:	6203      	str	r3, [r0, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
  21338e:	6822      	ldr	r2, [r4, #0]
  213390:	6993      	ldr	r3, [r2, #24]
  213392:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
  213396:	6193      	str	r3, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8);
  213398:	6822      	ldr	r2, [r4, #0]
  21339a:	6993      	ldr	r3, [r2, #24]
  21339c:	68a9      	ldr	r1, [r5, #8]
  21339e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  2133a2:	6193      	str	r3, [r2, #24]
  2133a4:	e7c0      	b.n	213328 <HAL_TIM_IC_ConfigChannel+0x74>
    TIM_TI3_SetConfig(htim->Instance,  
  2133a6:	6801      	ldr	r1, [r0, #0]
  2133a8:	682b      	ldr	r3, [r5, #0]
  2133aa:	6868      	ldr	r0, [r5, #4]
  2133ac:	68ea      	ldr	r2, [r5, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
  2133ae:	6a0e      	ldr	r6, [r1, #32]
  2133b0:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  2133b4:	620e      	str	r6, [r1, #32]
  tmpccmr2 = TIMx->CCMR2;
  2133b6:	69cf      	ldr	r7, [r1, #28]
  tmpccer = TIMx->CCER;
  2133b8:	6a0e      	ldr	r6, [r1, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
  2133ba:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
  2133be:	4338      	orrs	r0, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  2133c0:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4) & TIM_CCMR2_IC3F);
  2133c4:	0112      	lsls	r2, r2, #4
  2133c6:	b2d2      	uxtb	r2, r2
  2133c8:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  2133ca:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
  2133ce:	021b      	lsls	r3, r3, #8
  2133d0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
  2133d4:	4303      	orrs	r3, r0
  TIMx->CCMR2 = tmpccmr2;
  2133d6:	61ca      	str	r2, [r1, #28]
  TIMx->CCER = tmpccer;
  2133d8:	620b      	str	r3, [r1, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
  2133da:	6822      	ldr	r2, [r4, #0]
  2133dc:	69d3      	ldr	r3, [r2, #28]
  2133de:	f023 030c 	bic.w	r3, r3, #12
  2133e2:	61d3      	str	r3, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
  2133e4:	6822      	ldr	r2, [r4, #0]
  2133e6:	69d3      	ldr	r3, [r2, #28]
  2133e8:	68a9      	ldr	r1, [r5, #8]
  2133ea:	430b      	orrs	r3, r1
  2133ec:	61d3      	str	r3, [r2, #28]
  2133ee:	e79b      	b.n	213328 <HAL_TIM_IC_ConfigChannel+0x74>
  __HAL_LOCK(htim);
  2133f0:	2002      	movs	r0, #2
}
  2133f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

002133f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  2133f4:	b410      	push	{r4}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
  2133f6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  2133f8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
  2133fc:	430a      	orrs	r2, r1
  2133fe:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  213402:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
  213404:	6083      	str	r3, [r0, #8]
} 
  213406:	f85d 4b04 	ldr.w	r4, [sp], #4
  21340a:	4770      	bx	lr

0021340c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
  21340c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  213410:	2b01      	cmp	r3, #1
  213412:	f000 8093 	beq.w	21353c <HAL_TIM_ConfigClockSource+0x130>
{
  213416:	b510      	push	{r4, lr}
  213418:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
  21341a:	2301      	movs	r3, #1
  21341c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
  213420:	2302      	movs	r3, #2
  213422:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
  213426:	6802      	ldr	r2, [r0, #0]
  213428:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  21342a:	4b45      	ldr	r3, [pc, #276]	; (213540 <HAL_TIM_ConfigClockSource+0x134>)
  21342c:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
  21342e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
  213430:	680b      	ldr	r3, [r1, #0]
  213432:	2b40      	cmp	r3, #64	; 0x40
  213434:	d065      	beq.n	213502 <HAL_TIM_ConfigClockSource+0xf6>
  213436:	d913      	bls.n	213460 <HAL_TIM_ConfigClockSource+0x54>
  213438:	2b70      	cmp	r3, #112	; 0x70
  21343a:	d047      	beq.n	2134cc <HAL_TIM_ConfigClockSource+0xc0>
  21343c:	d828      	bhi.n	213490 <HAL_TIM_ConfigClockSource+0x84>
  21343e:	2b50      	cmp	r3, #80	; 0x50
  213440:	d052      	beq.n	2134e8 <HAL_TIM_ConfigClockSource+0xdc>
  213442:	2b60      	cmp	r3, #96	; 0x60
  213444:	d13b      	bne.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
                        sClockSourceConfig->ClockFilter);
  213446:	68ca      	ldr	r2, [r1, #12]
  213448:	6849      	ldr	r1, [r1, #4]
  21344a:	6820      	ldr	r0, [r4, #0]
  21344c:	f7ff fd17 	bl	212e7e <_ZL24TIM_TI2_ConfigInputStageP11TIM_TypeDefmm>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
  213450:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
  213452:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
  213454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
  213458:	f043 0367 	orr.w	r3, r3, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
  21345c:	6093      	str	r3, [r2, #8]
  21345e:	e02e      	b.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
  switch (sClockSourceConfig->ClockSource)
  213460:	2b10      	cmp	r3, #16
  213462:	d05b      	beq.n	21351c <HAL_TIM_ConfigClockSource+0x110>
  213464:	d90b      	bls.n	21347e <HAL_TIM_ConfigClockSource+0x72>
  213466:	2b20      	cmp	r3, #32
  213468:	d060      	beq.n	21352c <HAL_TIM_ConfigClockSource+0x120>
  21346a:	2b30      	cmp	r3, #48	; 0x30
  21346c:	d127      	bne.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
  21346e:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
  213470:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
  213472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
  213476:	f043 0337 	orr.w	r3, r3, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
  21347a:	6093      	str	r3, [r2, #8]
  21347c:	e01f      	b.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
  switch (sClockSourceConfig->ClockSource)
  21347e:	b9f3      	cbnz	r3, 2134be <HAL_TIM_ConfigClockSource+0xb2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
  213480:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
  213482:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
  213484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
  213488:	f043 0307 	orr.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
  21348c:	6093      	str	r3, [r2, #8]
  21348e:	e016      	b.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
  switch (sClockSourceConfig->ClockSource)
  213490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  213494:	d00e      	beq.n	2134b4 <HAL_TIM_ConfigClockSource+0xa8>
  213496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  21349a:	d110      	bne.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
                        sClockSourceConfig->ClockFilter);
  21349c:	68cb      	ldr	r3, [r1, #12]
  21349e:	684a      	ldr	r2, [r1, #4]
  2134a0:	6889      	ldr	r1, [r1, #8]
  2134a2:	6820      	ldr	r0, [r4, #0]
  2134a4:	f7ff ffa6 	bl	2133f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
  2134a8:	6822      	ldr	r2, [r4, #0]
  2134aa:	6893      	ldr	r3, [r2, #8]
  2134ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  2134b0:	6093      	str	r3, [r2, #8]
    break;
  2134b2:	e004      	b.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
  2134b4:	6822      	ldr	r2, [r4, #0]
  2134b6:	6891      	ldr	r1, [r2, #8]
  2134b8:	4b22      	ldr	r3, [pc, #136]	; (213544 <HAL_TIM_ConfigClockSource+0x138>)
  2134ba:	400b      	ands	r3, r1
  2134bc:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
  2134be:	2301      	movs	r3, #1
  2134c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
  2134c4:	2000      	movs	r0, #0
  2134c6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
  2134ca:	bd10      	pop	{r4, pc}
                        sClockSourceConfig->ClockFilter);
  2134cc:	68cb      	ldr	r3, [r1, #12]
  2134ce:	684a      	ldr	r2, [r1, #4]
  2134d0:	6889      	ldr	r1, [r1, #8]
  2134d2:	6820      	ldr	r0, [r4, #0]
  2134d4:	f7ff ff8e 	bl	2133f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
  2134d8:	6822      	ldr	r2, [r4, #0]
  2134da:	6891      	ldr	r1, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  2134dc:	4b1a      	ldr	r3, [pc, #104]	; (213548 <HAL_TIM_ConfigClockSource+0x13c>)
  2134de:	400b      	ands	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
  2134e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
  2134e4:	6093      	str	r3, [r2, #8]
    break;
  2134e6:	e7ea      	b.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
                        sClockSourceConfig->ClockFilter);
  2134e8:	68ca      	ldr	r2, [r1, #12]
  2134ea:	6849      	ldr	r1, [r1, #4]
  2134ec:	6820      	ldr	r0, [r4, #0]
  2134ee:	f7ff fcb3 	bl	212e58 <_ZL24TIM_TI1_ConfigInputStageP11TIM_TypeDefmm>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
  2134f2:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
  2134f4:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
  2134f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
  2134fa:	f043 0357 	orr.w	r3, r3, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
  2134fe:	6093      	str	r3, [r2, #8]
  213500:	e7dd      	b.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
                        sClockSourceConfig->ClockFilter);
  213502:	68ca      	ldr	r2, [r1, #12]
  213504:	6849      	ldr	r1, [r1, #4]
  213506:	6820      	ldr	r0, [r4, #0]
  213508:	f7ff fca6 	bl	212e58 <_ZL24TIM_TI1_ConfigInputStageP11TIM_TypeDefmm>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
  21350c:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
  21350e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
  213510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
  213514:	f043 0347 	orr.w	r3, r3, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
  213518:	6093      	str	r3, [r2, #8]
  21351a:	e7d0      	b.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
  21351c:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
  21351e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
  213520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
  213524:	f043 0317 	orr.w	r3, r3, #23
   TIMx->SMCR = tmpsmcr;
  213528:	6093      	str	r3, [r2, #8]
  21352a:	e7c8      	b.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
  21352c:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
  21352e:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
  213530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
  213534:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
  213538:	6093      	str	r3, [r2, #8]
  21353a:	e7c0      	b.n	2134be <HAL_TIM_ConfigClockSource+0xb2>
  __HAL_LOCK(htim);
  21353c:	2002      	movs	r0, #2
  21353e:	4770      	bx	lr
  213540:	fffe0088 	.word	0xfffe0088
  213544:	fffefff8 	.word	0xfffefff8
  213548:	fffeff88 	.word	0xfffeff88

0021354c <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
  21354c:	b410      	push	{r4}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
  21354e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
  213550:	2401      	movs	r4, #1
  213552:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
  213554:	ea23 0304 	bic.w	r3, r3, r4
  213558:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
  21355a:	6a03      	ldr	r3, [r0, #32]
  21355c:	408a      	lsls	r2, r1
  21355e:	431a      	orrs	r2, r3
  213560:	6202      	str	r2, [r0, #32]
}
  213562:	f85d 4b04 	ldr.w	r4, [sp], #4
  213566:	4770      	bx	lr

00213568 <HAL_TIM_PWM_Start>:
{
  213568:	b510      	push	{r4, lr}
  21356a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
  21356c:	2201      	movs	r2, #1
  21356e:	6800      	ldr	r0, [r0, #0]
  213570:	f7ff ffec 	bl	21354c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
  213574:	6823      	ldr	r3, [r4, #0]
  213576:	4a09      	ldr	r2, [pc, #36]	; (21359c <HAL_TIM_PWM_Start+0x34>)
  213578:	4293      	cmp	r3, r2
  21357a:	d003      	beq.n	213584 <HAL_TIM_PWM_Start+0x1c>
  21357c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  213580:	4293      	cmp	r3, r2
  213582:	d103      	bne.n	21358c <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
  213584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  213586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  21358a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
  21358c:	6822      	ldr	r2, [r4, #0]
  21358e:	6813      	ldr	r3, [r2, #0]
  213590:	f043 0301 	orr.w	r3, r3, #1
  213594:	6013      	str	r3, [r2, #0]
} 
  213596:	2000      	movs	r0, #0
  213598:	bd10      	pop	{r4, pc}
  21359a:	bf00      	nop
  21359c:	40010000 	.word	0x40010000

002135a0 <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
  2135a0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
  2135a2:	6a03      	ldr	r3, [r0, #32]
  2135a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  2135a8:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  2135aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
  2135ac:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
  2135ae:	6d45      	ldr	r5, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  2135b0:	4a0e      	ldr	r2, [pc, #56]	; (2135ec <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>)
  2135b2:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  2135b4:	680d      	ldr	r5, [r1, #0]
  2135b6:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  2135b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
  2135bc:	688d      	ldr	r5, [r1, #8]
  2135be:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  2135c2:	4d0b      	ldr	r5, [pc, #44]	; (2135f0 <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x50>)
  2135c4:	42a8      	cmp	r0, r5
  2135c6:	d00a      	beq.n	2135de <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x3e>
  2135c8:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
  2135cc:	42a8      	cmp	r0, r5
  2135ce:	d006      	beq.n	2135de <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  2135d0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  2135d2:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
  2135d4:	684a      	ldr	r2, [r1, #4]
  2135d6:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
  2135d8:	6203      	str	r3, [r0, #32]
}
  2135da:	bc30      	pop	{r4, r5}
  2135dc:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
  2135de:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8);
  2135e2:	694d      	ldr	r5, [r1, #20]
  2135e4:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  2135e8:	e7f2      	b.n	2135d0 <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x30>
  2135ea:	bf00      	nop
  2135ec:	fffeff8f 	.word	0xfffeff8f
  2135f0:	40010400 	.word	0x40010400

002135f4 <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
  2135f4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
  2135f6:	6a03      	ldr	r3, [r0, #32]
  2135f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  2135fc:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  2135fe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
  213600:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
  213602:	6d45      	ldr	r5, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  213604:	4a0e      	ldr	r2, [pc, #56]	; (213640 <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>)
  213606:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  213608:	680d      	ldr	r5, [r1, #0]
  21360a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  21360e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
  213612:	688d      	ldr	r5, [r1, #8]
  213614:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  213618:	4d0a      	ldr	r5, [pc, #40]	; (213644 <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x50>)
  21361a:	42a8      	cmp	r0, r5
  21361c:	d00a      	beq.n	213634 <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x40>
  21361e:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
  213622:	42a8      	cmp	r0, r5
  213624:	d006      	beq.n	213634 <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x40>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  213626:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  213628:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
  21362a:	684a      	ldr	r2, [r1, #4]
  21362c:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
  21362e:	6203      	str	r3, [r0, #32]
} 
  213630:	bc30      	pop	{r4, r5}
  213632:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
  213634:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10);
  213638:	694d      	ldr	r5, [r1, #20]
  21363a:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  21363e:	e7f2      	b.n	213626 <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x32>
  213640:	feff8fff 	.word	0xfeff8fff
  213644:	40010400 	.word	0x40010400

00213648 <HAL_TIM_PWM_ConfigChannel>:
{
  213648:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
  21364a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  21364e:	2b01      	cmp	r3, #1
  213650:	f000 8092 	beq.w	213778 <HAL_TIM_PWM_ConfigChannel+0x130>
  213654:	460d      	mov	r5, r1
  213656:	4604      	mov	r4, r0
  213658:	2301      	movs	r3, #1
  21365a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
  21365e:	2302      	movs	r3, #2
  213660:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
  213664:	2a14      	cmp	r2, #20
  213666:	d81e      	bhi.n	2136a6 <HAL_TIM_PWM_ConfigChannel+0x5e>
  213668:	e8df f002 	tbb	[pc, r2]
  21366c:	1d1d1d0b 	.word	0x1d1d1d0b
  213670:	1d1d1d24 	.word	0x1d1d1d24
  213674:	1d1d1d38 	.word	0x1d1d1d38
  213678:	1d1d1d4b 	.word	0x1d1d1d4b
  21367c:	1d1d1d5f 	.word	0x1d1d1d5f
  213680:	72          	.byte	0x72
  213681:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
  213682:	6800      	ldr	r0, [r0, #0]
  213684:	f7ff fd10 	bl	2130a8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
  213688:	6822      	ldr	r2, [r4, #0]
  21368a:	6993      	ldr	r3, [r2, #24]
  21368c:	f043 0308 	orr.w	r3, r3, #8
  213690:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
  213692:	6822      	ldr	r2, [r4, #0]
  213694:	6993      	ldr	r3, [r2, #24]
  213696:	f023 0304 	bic.w	r3, r3, #4
  21369a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
  21369c:	6822      	ldr	r2, [r4, #0]
  21369e:	6993      	ldr	r3, [r2, #24]
  2136a0:	6929      	ldr	r1, [r5, #16]
  2136a2:	430b      	orrs	r3, r1
  2136a4:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
  2136a6:	2301      	movs	r3, #1
  2136a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
  2136ac:	2000      	movs	r0, #0
  2136ae:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
  2136b2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
  2136b4:	6800      	ldr	r0, [r0, #0]
  2136b6:	f7ff fd25 	bl	213104 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
  2136ba:	6822      	ldr	r2, [r4, #0]
  2136bc:	6993      	ldr	r3, [r2, #24]
  2136be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  2136c2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
  2136c4:	6822      	ldr	r2, [r4, #0]
  2136c6:	6993      	ldr	r3, [r2, #24]
  2136c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  2136cc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
  2136ce:	6822      	ldr	r2, [r4, #0]
  2136d0:	6993      	ldr	r3, [r2, #24]
  2136d2:	6929      	ldr	r1, [r5, #16]
  2136d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  2136d8:	6193      	str	r3, [r2, #24]
    break;
  2136da:	e7e4      	b.n	2136a6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
  2136dc:	6800      	ldr	r0, [r0, #0]
  2136de:	f7ff fd43 	bl	213168 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
  2136e2:	6822      	ldr	r2, [r4, #0]
  2136e4:	69d3      	ldr	r3, [r2, #28]
  2136e6:	f043 0308 	orr.w	r3, r3, #8
  2136ea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
  2136ec:	6822      	ldr	r2, [r4, #0]
  2136ee:	69d3      	ldr	r3, [r2, #28]
  2136f0:	f023 0304 	bic.w	r3, r3, #4
  2136f4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
  2136f6:	6822      	ldr	r2, [r4, #0]
  2136f8:	69d3      	ldr	r3, [r2, #28]
  2136fa:	6929      	ldr	r1, [r5, #16]
  2136fc:	430b      	orrs	r3, r1
  2136fe:	61d3      	str	r3, [r2, #28]
    break;
  213700:	e7d1      	b.n	2136a6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
  213702:	6800      	ldr	r0, [r0, #0]
  213704:	f7ff fd62 	bl	2131cc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
  213708:	6822      	ldr	r2, [r4, #0]
  21370a:	69d3      	ldr	r3, [r2, #28]
  21370c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  213710:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
  213712:	6822      	ldr	r2, [r4, #0]
  213714:	69d3      	ldr	r3, [r2, #28]
  213716:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  21371a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
  21371c:	6822      	ldr	r2, [r4, #0]
  21371e:	69d3      	ldr	r3, [r2, #28]
  213720:	6929      	ldr	r1, [r5, #16]
  213722:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  213726:	61d3      	str	r3, [r2, #28]
    break;
  213728:	e7bd      	b.n	2136a6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
  21372a:	6800      	ldr	r0, [r0, #0]
  21372c:	f7ff ff38 	bl	2135a0 <_ZL17TIM_OC5_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
  213730:	6822      	ldr	r2, [r4, #0]
  213732:	6d53      	ldr	r3, [r2, #84]	; 0x54
  213734:	f043 0308 	orr.w	r3, r3, #8
  213738:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
  21373a:	6822      	ldr	r2, [r4, #0]
  21373c:	6d53      	ldr	r3, [r2, #84]	; 0x54
  21373e:	f023 0304 	bic.w	r3, r3, #4
  213742:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
  213744:	6822      	ldr	r2, [r4, #0]
  213746:	6d53      	ldr	r3, [r2, #84]	; 0x54
  213748:	6929      	ldr	r1, [r5, #16]
  21374a:	430b      	orrs	r3, r1
  21374c:	6553      	str	r3, [r2, #84]	; 0x54
    break;
  21374e:	e7aa      	b.n	2136a6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
  213750:	6800      	ldr	r0, [r0, #0]
  213752:	f7ff ff4f 	bl	2135f4 <_ZL17TIM_OC6_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
  213756:	6822      	ldr	r2, [r4, #0]
  213758:	6d53      	ldr	r3, [r2, #84]	; 0x54
  21375a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  21375e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
  213760:	6822      	ldr	r2, [r4, #0]
  213762:	6d53      	ldr	r3, [r2, #84]	; 0x54
  213764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  213768:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
  21376a:	6822      	ldr	r2, [r4, #0]
  21376c:	6d53      	ldr	r3, [r2, #84]	; 0x54
  21376e:	6929      	ldr	r1, [r5, #16]
  213770:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  213774:	6553      	str	r3, [r2, #84]	; 0x54
    break;
  213776:	e796      	b.n	2136a6 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
  213778:	2002      	movs	r0, #2
}
  21377a:	bd38      	pop	{r3, r4, r5, pc}

0021377c <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
  21377c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  213780:	2b01      	cmp	r3, #1
  213782:	d023      	beq.n	2137cc <HAL_TIMEx_MasterConfigSynchronization+0x50>
{
  213784:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
  213786:	2301      	movs	r3, #1
  213788:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  tmpcr2 = htim->Instance->CR2;
  21378c:	6804      	ldr	r4, [r0, #0]
  21378e:	6863      	ldr	r3, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
  213790:	68a2      	ldr	r2, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
  213792:	4d0f      	ldr	r5, [pc, #60]	; (2137d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  213794:	42ac      	cmp	r4, r5
  213796:	d014      	beq.n	2137c2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  213798:	f5a5 6580 	sub.w	r5, r5, #1024	; 0x400
  21379c:	42ac      	cmp	r4, r5
  21379e:	d010      	beq.n	2137c2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  tmpcr2 &= ~TIM_CR2_MMS;
  2137a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
  2137a4:	680d      	ldr	r5, [r1, #0]
  2137a6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
  2137a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  2137ac:	6889      	ldr	r1, [r1, #8]
  2137ae:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
  2137b0:	6063      	str	r3, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
  2137b2:	6803      	ldr	r3, [r0, #0]
  2137b4:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
  2137b6:	2300      	movs	r3, #0
  2137b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
  2137bc:	4618      	mov	r0, r3
} 
  2137be:	bc30      	pop	{r4, r5}
  2137c0:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
  2137c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  2137c6:	684d      	ldr	r5, [r1, #4]
  2137c8:	432b      	orrs	r3, r5
  2137ca:	e7e9      	b.n	2137a0 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
  2137cc:	2002      	movs	r0, #2
  2137ce:	4770      	bx	lr
  2137d0:	40010400 	.word	0x40010400

002137d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
  2137d4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  2137d8:	2b01      	cmp	r3, #1
  2137da:	d023      	beq.n	213824 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
  2137dc:	2301      	movs	r3, #1
  2137de:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
  2137e2:	2302      	movs	r3, #2
  2137e4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
  2137e8:	68cb      	ldr	r3, [r1, #12]
  2137ea:	688a      	ldr	r2, [r1, #8]
  2137ec:	4313      	orrs	r3, r2
  2137ee:	684a      	ldr	r2, [r1, #4]
  2137f0:	4313      	orrs	r3, r2
  2137f2:	680a      	ldr	r2, [r1, #0]
  2137f4:	4313      	orrs	r3, r2
  2137f6:	690a      	ldr	r2, [r1, #16]
  2137f8:	4313      	orrs	r3, r2
  2137fa:	694a      	ldr	r2, [r1, #20]
  2137fc:	4313      	orrs	r3, r2
  2137fe:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  213800:	4313      	orrs	r3, r2
  213802:	69ca      	ldr	r2, [r1, #28]
  213804:	4313      	orrs	r3, r2
  213806:	6a0a      	ldr	r2, [r1, #32]
  213808:	4313      	orrs	r3, r2
  tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
  21380a:	698a      	ldr	r2, [r1, #24]
  tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
  21380c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
  213810:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
  213812:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  htim->Instance->BDTR = tmpbdtr;
  213816:	6802      	ldr	r2, [r0, #0]
  213818:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
  21381a:	2300      	movs	r3, #0
  21381c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
  213820:	4618      	mov	r0, r3
  213822:	4770      	bx	lr
  __HAL_LOCK(htim);
  213824:	2002      	movs	r0, #2
}
  213826:	4770      	bx	lr

00213828 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain 
  *         the parity bit (MSB position)     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  213828:	b510      	push	{r4, lr}
  uint32_t *tmp;
  
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
  21382a:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
  21382e:	b2e4      	uxtb	r4, r4
  213830:	2c01      	cmp	r4, #1
  213832:	d006      	beq.n	213842 <HAL_UART_Receive_DMA+0x1a>
  213834:	f890 4069 	ldrb.w	r4, [r0, #105]	; 0x69
  213838:	b2e4      	uxtb	r4, r4
  21383a:	2c12      	cmp	r4, #18
  21383c:	d001      	beq.n	213842 <HAL_UART_Receive_DMA+0x1a>
     
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
  21383e:	2002      	movs	r0, #2
  213840:	bd10      	pop	{r4, pc}
    if((pData == NULL ) || (Size == 0)) 
  213842:	2a00      	cmp	r2, #0
  213844:	d030      	beq.n	2138a8 <HAL_UART_Receive_DMA+0x80>
  213846:	2900      	cmp	r1, #0
  213848:	d02e      	beq.n	2138a8 <HAL_UART_Receive_DMA+0x80>
    __HAL_LOCK(huart);
  21384a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
  21384e:	2b01      	cmp	r3, #1
  213850:	d02c      	beq.n	2138ac <HAL_UART_Receive_DMA+0x84>
  213852:	2301      	movs	r3, #1
  213854:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
  213858:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
  21385a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->ErrorCode = HAL_UART_ERROR_NONE;
  21385e:	2300      	movs	r3, #0
  213860:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX) 
  213862:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  213866:	b2db      	uxtb	r3, r3
  213868:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
  21386a:	bf0c      	ite	eq
  21386c:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
  21386e:	2322      	movne	r3, #34	; 0x22
  213870:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  213874:	4613      	mov	r3, r2
  213876:	460a      	mov	r2, r1
  213878:	4604      	mov	r4, r0
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
  21387a:	6e41      	ldr	r1, [r0, #100]	; 0x64
  21387c:	480c      	ldr	r0, [pc, #48]	; (2138b0 <HAL_UART_Receive_DMA+0x88>)
  21387e:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
  213880:	6e61      	ldr	r1, [r4, #100]	; 0x64
  213882:	480c      	ldr	r0, [pc, #48]	; (2138b4 <HAL_UART_Receive_DMA+0x8c>)
  213884:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
  213886:	6e61      	ldr	r1, [r4, #100]	; 0x64
  213888:	480b      	ldr	r0, [pc, #44]	; (2138b8 <HAL_UART_Receive_DMA+0x90>)
  21388a:	6488      	str	r0, [r1, #72]	; 0x48
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
  21388c:	6821      	ldr	r1, [r4, #0]
  21388e:	3124      	adds	r1, #36	; 0x24
  213890:	6e60      	ldr	r0, [r4, #100]	; 0x64
  213892:	f7fc ff4d 	bl	210730 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
  213896:	6822      	ldr	r2, [r4, #0]
  213898:	6893      	ldr	r3, [r2, #8]
  21389a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  21389e:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
  2138a0:	2000      	movs	r0, #0
  2138a2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
  2138a6:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
  2138a8:	2001      	movs	r0, #1
  2138aa:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
  2138ac:	2002      	movs	r0, #2
  }
}
  2138ae:	bd10      	pop	{r4, pc}
  2138b0:	00213a73 	.word	0x00213a73
  2138b4:	00213aad 	.word	0x00213aad
  2138b8:	00213ab9 	.word	0x00213ab9

002138bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
  2138bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  2138c0:	4606      	mov	r6, r0
  2138c2:	460d      	mov	r5, r1
  2138c4:	4617      	mov	r7, r2
  2138c6:	461c      	mov	r4, r3
  uint32_t tickstart = HAL_GetTick();
  2138c8:	f7fb ffec 	bl	20f8a4 <HAL_GetTick>
  2138cc:	4680      	mov	r8, r0
  
  /* Wait until flag is set */
  if(Status == RESET)
  2138ce:	2f00      	cmp	r7, #0
  2138d0:	d132      	bne.n	213938 <UART_WaitOnFlagUntilTimeout+0x7c>
  {    
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
  2138d2:	6832      	ldr	r2, [r6, #0]
  2138d4:	69d3      	ldr	r3, [r2, #28]
  2138d6:	ea35 0303 	bics.w	r3, r5, r3
  2138da:	d054      	beq.n	213986 <UART_WaitOnFlagUntilTimeout+0xca>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
  2138dc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
  2138e0:	d0f8      	beq.n	2138d4 <UART_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0)||((HAL_GetTick()-tickstart) >=  Timeout))
  2138e2:	b9e4      	cbnz	r4, 21391e <UART_WaitOnFlagUntilTimeout+0x62>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
  2138e4:	6832      	ldr	r2, [r6, #0]
  2138e6:	6813      	ldr	r3, [r2, #0]
  2138e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  2138ec:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
  2138ee:	6832      	ldr	r2, [r6, #0]
  2138f0:	6813      	ldr	r3, [r2, #0]
  2138f2:	f023 0320 	bic.w	r3, r3, #32
  2138f6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
  2138f8:	6832      	ldr	r2, [r6, #0]
  2138fa:	6813      	ldr	r3, [r2, #0]
  2138fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  213900:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
  213902:	6832      	ldr	r2, [r6, #0]
  213904:	6893      	ldr	r3, [r2, #8]
  213906:	f023 0301 	bic.w	r3, r3, #1
  21390a:	6093      	str	r3, [r2, #8]
          
          huart->State= HAL_UART_STATE_READY;
  21390c:	2301      	movs	r3, #1
  21390e:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
  213912:	2300      	movs	r3, #0
  213914:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
          
          return HAL_TIMEOUT;
  213918:	2003      	movs	r0, #3
  21391a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0)||((HAL_GetTick()-tickstart) >=  Timeout))
  21391e:	f7fb ffc1 	bl	20f8a4 <HAL_GetTick>
  213922:	eba0 0008 	sub.w	r0, r0, r8
  213926:	4284      	cmp	r4, r0
  213928:	d8d3      	bhi.n	2138d2 <UART_WaitOnFlagUntilTimeout+0x16>
  21392a:	e7db      	b.n	2138e4 <UART_WaitOnFlagUntilTimeout+0x28>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick()-tickstart) >=  Timeout))
  21392c:	f7fb ffba 	bl	20f8a4 <HAL_GetTick>
  213930:	eba0 0008 	sub.w	r0, r0, r8
  213934:	4284      	cmp	r4, r0
  213936:	d909      	bls.n	21394c <UART_WaitOnFlagUntilTimeout+0x90>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
  213938:	6833      	ldr	r3, [r6, #0]
  21393a:	69da      	ldr	r2, [r3, #28]
  21393c:	ea35 0202 	bics.w	r2, r5, r2
  213940:	d124      	bne.n	21398c <UART_WaitOnFlagUntilTimeout+0xd0>
      if(Timeout != HAL_MAX_DELAY)
  213942:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
  213946:	d0f8      	beq.n	21393a <UART_WaitOnFlagUntilTimeout+0x7e>
        if((Timeout == 0)||((HAL_GetTick()-tickstart) >=  Timeout))
  213948:	2c00      	cmp	r4, #0
  21394a:	d1ef      	bne.n	21392c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
  21394c:	6832      	ldr	r2, [r6, #0]
  21394e:	6813      	ldr	r3, [r2, #0]
  213950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  213954:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
  213956:	6832      	ldr	r2, [r6, #0]
  213958:	6813      	ldr	r3, [r2, #0]
  21395a:	f023 0320 	bic.w	r3, r3, #32
  21395e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
  213960:	6832      	ldr	r2, [r6, #0]
  213962:	6813      	ldr	r3, [r2, #0]
  213964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  213968:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
  21396a:	6832      	ldr	r2, [r6, #0]
  21396c:	6893      	ldr	r3, [r2, #8]
  21396e:	f023 0301 	bic.w	r3, r3, #1
  213972:	6093      	str	r3, [r2, #8]
          
          huart->State= HAL_UART_STATE_READY;
  213974:	2301      	movs	r3, #1
  213976:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
  21397a:	2300      	movs	r3, #0
  21397c:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
          
          return HAL_TIMEOUT;
  213980:	2003      	movs	r0, #3
  213982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
  }
  return HAL_OK;      
  213986:	2000      	movs	r0, #0
  213988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  21398c:	2000      	movs	r0, #0
}
  21398e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00213992 <HAL_UART_Transmit>:
{
  213992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  213996:	4604      	mov	r4, r0
  213998:	460d      	mov	r5, r1
  21399a:	461e      	mov	r6, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
  21399c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  2139a0:	b2db      	uxtb	r3, r3
  2139a2:	2b01      	cmp	r3, #1
  2139a4:	d007      	beq.n	2139b6 <HAL_UART_Transmit+0x24>
  2139a6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  2139aa:	b2db      	uxtb	r3, r3
  2139ac:	2b22      	cmp	r3, #34	; 0x22
  2139ae:	d002      	beq.n	2139b6 <HAL_UART_Transmit+0x24>
    return HAL_BUSY;
  2139b0:	2002      	movs	r0, #2
  2139b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((pData == NULL ) || (Size == 0))
  2139b6:	2d00      	cmp	r5, #0
  2139b8:	d052      	beq.n	213a60 <HAL_UART_Transmit+0xce>
  2139ba:	2a00      	cmp	r2, #0
  2139bc:	d050      	beq.n	213a60 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
  2139be:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
  2139c2:	2b01      	cmp	r3, #1
  2139c4:	d04f      	beq.n	213a66 <HAL_UART_Transmit+0xd4>
  2139c6:	2301      	movs	r3, #1
  2139c8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
  2139cc:	2300      	movs	r3, #0
  2139ce:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
  2139d0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
  2139d4:	b2db      	uxtb	r3, r3
  2139d6:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
  2139d8:	bf0c      	ite	eq
  2139da:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
  2139dc:	2312      	movne	r3, #18
  2139de:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    huart->TxXferSize = Size;
  2139e2:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
  2139e6:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)  
  2139ea:	f04f 0800 	mov.w	r8, #0
  2139ee:	2780      	movs	r7, #128	; 0x80
  2139f0:	e003      	b.n	2139fa <HAL_UART_Transmit+0x68>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
  2139f2:	6823      	ldr	r3, [r4, #0]
  2139f4:	782a      	ldrb	r2, [r5, #0]
  2139f6:	629a      	str	r2, [r3, #40]	; 0x28
  2139f8:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
  2139fa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
  2139fe:	b1bb      	cbz	r3, 213a30 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
  213a00:	3b01      	subs	r3, #1
  213a02:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)  
  213a06:	4633      	mov	r3, r6
  213a08:	4642      	mov	r2, r8
  213a0a:	4639      	mov	r1, r7
  213a0c:	4620      	mov	r0, r4
  213a0e:	f7ff ff55 	bl	2138bc <UART_WaitOnFlagUntilTimeout>
  213a12:	bb58      	cbnz	r0, 213a6c <HAL_UART_Transmit+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
  213a14:	68a3      	ldr	r3, [r4, #8]
  213a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  213a1a:	d1ea      	bne.n	2139f2 <HAL_UART_Transmit+0x60>
  213a1c:	6923      	ldr	r3, [r4, #16]
  213a1e:	2b00      	cmp	r3, #0
  213a20:	d1e7      	bne.n	2139f2 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
  213a22:	6822      	ldr	r2, [r4, #0]
  213a24:	f835 3b02 	ldrh.w	r3, [r5], #2
  213a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
  213a2c:	6293      	str	r3, [r2, #40]	; 0x28
        pData += 2;
  213a2e:	e7e4      	b.n	2139fa <HAL_UART_Transmit+0x68>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)  
  213a30:	4633      	mov	r3, r6
  213a32:	2200      	movs	r2, #0
  213a34:	2140      	movs	r1, #64	; 0x40
  213a36:	4620      	mov	r0, r4
  213a38:	f7ff ff40 	bl	2138bc <UART_WaitOnFlagUntilTimeout>
  213a3c:	b110      	cbz	r0, 213a44 <HAL_UART_Transmit+0xb2>
      return HAL_TIMEOUT;
  213a3e:	2003      	movs	r0, #3
}
  213a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
  213a44:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
  213a48:	b2db      	uxtb	r3, r3
  213a4a:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
  213a4c:	bf0c      	ite	eq
  213a4e:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
  213a50:	2301      	movne	r3, #1
  213a52:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
  213a56:	2000      	movs	r0, #0
  213a58:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
  213a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
  213a60:	2001      	movs	r0, #1
  213a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(huart);
  213a66:	2002      	movs	r0, #2
  213a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return HAL_TIMEOUT;
  213a6c:	2003      	movs	r0, #3
  213a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00213a72 <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef>:
  * @brief DMA UART receive process complete callback 
  * @param hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
  213a72:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  213a74:	6b83      	ldr	r3, [r0, #56]	; 0x38
  
  /* DMA Normal mode */
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
  213a76:	6802      	ldr	r2, [r0, #0]
  213a78:	6812      	ldr	r2, [r2, #0]
  213a7a:	f412 7f80 	tst.w	r2, #256	; 0x100
  213a7e:	d110      	bne.n	213aa2 <_ZL19UART_DMAReceiveCpltP19__DMA_HandleTypeDef+0x30>
  { 
    huart->RxXferCount = 0;
  213a80:	2200      	movs	r2, #0
  213a82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
  213a86:	6819      	ldr	r1, [r3, #0]
  213a88:	688a      	ldr	r2, [r1, #8]
  213a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
  213a8e:	608a      	str	r2, [r1, #8]
    
    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
  213a90:	f893 2069 	ldrb.w	r2, [r3, #105]	; 0x69
  213a94:	b2d2      	uxtb	r2, r2
  213a96:	2a32      	cmp	r2, #50	; 0x32
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
  213a98:	bf0c      	ite	eq
  213a9a:	2212      	moveq	r2, #18
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
  213a9c:	2201      	movne	r2, #1
  213a9e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    }
  }
  HAL_UART_RxCpltCallback(huart);
  213aa2:	4618      	mov	r0, r3
  213aa4:	f7fb fddc 	bl	20f660 <HAL_UART_RxCpltCallback>
  213aa8:	bd08      	pop	{r3, pc}

00213aaa <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  huart: UART handle
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
  213aaa:	4770      	bx	lr

00213aac <_ZL18UART_DMARxHalfCpltP19__DMA_HandleTypeDef>:
{
  213aac:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart); 
  213aae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  213ab0:	f7ff fffb 	bl	213aaa <HAL_UART_RxHalfCpltCallback>
  213ab4:	bd08      	pop	{r3, pc}

00213ab6 <HAL_UART_ErrorCallback>:
  * @brief UART error callbacks
  * @param huart: uart handle
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  213ab6:	4770      	bx	lr

00213ab8 <_ZL13UART_DMAErrorP19__DMA_HandleTypeDef>:
{
  213ab8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  213aba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
  213abc:	2300      	movs	r3, #0
  213abe:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0;
  213ac2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->State= HAL_UART_STATE_READY;
  213ac6:	2301      	movs	r3, #1
  213ac8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
  213acc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  213ace:	f043 0310 	orr.w	r3, r3, #16
  213ad2:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
  213ad4:	f7ff ffef 	bl	213ab6 <HAL_UART_ErrorCallback>
  213ad8:	bd08      	pop	{r3, pc}
	...

00213adc <UART_SetConfig>:
  * @brief Configure the UART peripheral 
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  213adc:	b538      	push	{r3, r4, r5, lr}
  213ade:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value 
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
  213ae0:	6801      	ldr	r1, [r0, #0]
  213ae2:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  213ae4:	68a3      	ldr	r3, [r4, #8]
  213ae6:	6922      	ldr	r2, [r4, #16]
  213ae8:	4313      	orrs	r3, r2
  213aea:	6962      	ldr	r2, [r4, #20]
  213aec:	4313      	orrs	r3, r2
  213aee:	69e2      	ldr	r2, [r4, #28]
  213af0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
  213af2:	4aae      	ldr	r2, [pc, #696]	; (213dac <UART_SetConfig+0x2d0>)
  213af4:	4002      	ands	r2, r0
  213af6:	4313      	orrs	r3, r2
  213af8:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
  213afa:	6822      	ldr	r2, [r4, #0]
  213afc:	6853      	ldr	r3, [r2, #4]
  213afe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  213b02:	68e1      	ldr	r1, [r4, #12]
  213b04:	430b      	orrs	r3, r1
  213b06:	6053      	str	r3, [r2, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according 
   *   to huart->Init.HwFlowCtl value 
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  213b08:	6821      	ldr	r1, [r4, #0]
  213b0a:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  213b0c:	69a3      	ldr	r3, [r4, #24]
  213b0e:	6a20      	ldr	r0, [r4, #32]
  213b10:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  213b12:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
  213b16:	4313      	orrs	r3, r2
  213b18:	608b      	str	r3, [r1, #8]
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
  213b1a:	6825      	ldr	r5, [r4, #0]
  213b1c:	4ba4      	ldr	r3, [pc, #656]	; (213db0 <UART_SetConfig+0x2d4>)
  213b1e:	429d      	cmp	r5, r3
  213b20:	d027      	beq.n	213b72 <UART_SetConfig+0x96>
  213b22:	4ba4      	ldr	r3, [pc, #656]	; (213db4 <UART_SetConfig+0x2d8>)
  213b24:	429d      	cmp	r5, r3
  213b26:	d032      	beq.n	213b8e <UART_SetConfig+0xb2>
  213b28:	4ba3      	ldr	r3, [pc, #652]	; (213db8 <UART_SetConfig+0x2dc>)
  213b2a:	429d      	cmp	r5, r3
  213b2c:	d046      	beq.n	213bbc <UART_SetConfig+0xe0>
  213b2e:	4ba3      	ldr	r3, [pc, #652]	; (213dbc <UART_SetConfig+0x2e0>)
  213b30:	429d      	cmp	r5, r3
  213b32:	d06c      	beq.n	213c0e <UART_SetConfig+0x132>
  213b34:	4ba2      	ldr	r3, [pc, #648]	; (213dc0 <UART_SetConfig+0x2e4>)
  213b36:	429d      	cmp	r5, r3
  213b38:	f000 8081 	beq.w	213c3e <UART_SetConfig+0x162>
  213b3c:	4ba1      	ldr	r3, [pc, #644]	; (213dc4 <UART_SetConfig+0x2e8>)
  213b3e:	429d      	cmp	r5, r3
  213b40:	f000 80a9 	beq.w	213c96 <UART_SetConfig+0x1ba>
  213b44:	4ba0      	ldr	r3, [pc, #640]	; (213dc8 <UART_SetConfig+0x2ec>)
  213b46:	429d      	cmp	r5, r3
  213b48:	f000 80c5 	beq.w	213cd6 <UART_SetConfig+0x1fa>
  213b4c:	4b9f      	ldr	r3, [pc, #636]	; (213dcc <UART_SetConfig+0x2f0>)
  213b4e:	429d      	cmp	r5, r3
  213b50:	f000 80d5 	beq.w	213cfe <UART_SetConfig+0x222>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213b54:	69e3      	ldr	r3, [r4, #28]
  213b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213b5a:	f040 80f4 	bne.w	213d46 <UART_SetConfig+0x26a>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate)); 
      break;
      case UART_CLOCKSOURCE_UNDEFINED:                
    default:
        ret = HAL_ERROR; 
  213b5e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
  213b60:	2300      	movs	r3, #0
      break;
    }
    
    brrtemp = usartdiv & 0xFFF0;
  213b62:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
    huart->Instance->BRR = brrtemp;
  213b66:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
  213b68:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
  213b6c:	4313      	orrs	r3, r2
  213b6e:	60cb      	str	r3, [r1, #12]
  213b70:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
  213b72:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
  213b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  213b7a:	f003 0303 	and.w	r3, r3, #3
  213b7e:	2b03      	cmp	r3, #3
  213b80:	d857      	bhi.n	213c32 <UART_SetConfig+0x156>
  213b82:	e8df f013 	tbh	[pc, r3, lsl #1]
  213b86:	00e2      	.short	0x00e2
  213b88:	00ef00fb 	.word	0x00ef00fb
  213b8c:	002a      	.short	0x002a
  213b8e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
  213b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  213b96:	f003 030c 	and.w	r3, r3, #12
  213b9a:	2b0c      	cmp	r3, #12
  213b9c:	d849      	bhi.n	213c32 <UART_SetConfig+0x156>
  213b9e:	e8df f013 	tbh	[pc, r3, lsl #1]
  213ba2:	0029      	.short	0x0029
  213ba4:	00480048 	.word	0x00480048
  213ba8:	00ed0048 	.word	0x00ed0048
  213bac:	00480048 	.word	0x00480048
  213bb0:	00e10048 	.word	0x00e10048
  213bb4:	00480048 	.word	0x00480048
  213bb8:	001c0048 	.word	0x001c0048
  213bbc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
  213bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  213bc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
  213bc8:	2b10      	cmp	r3, #16
  213bca:	f000 80d7 	beq.w	213d7c <UART_SetConfig+0x2a0>
  213bce:	d910      	bls.n	213bf2 <UART_SetConfig+0x116>
  213bd0:	2b20      	cmp	r3, #32
  213bd2:	f000 80c7 	beq.w	213d64 <UART_SetConfig+0x288>
  213bd6:	2b30      	cmp	r3, #48	; 0x30
  213bd8:	d12b      	bne.n	213c32 <UART_SetConfig+0x156>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213bda:	69e3      	ldr	r3, [r4, #28]
  213bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213be0:	d042      	beq.n	213c68 <UART_SetConfig+0x18c>
      break; 
    case UART_CLOCKSOURCE_SYSCLK:  
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;  
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
  213be2:	6862      	ldr	r2, [r4, #4]
  213be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  213be8:	fbb3 f3f2 	udiv	r3, r3, r2
  213bec:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;  
  213bee:	2000      	movs	r0, #0
      break;
  213bf0:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
  213bf2:	b9f3      	cbnz	r3, 213c32 <UART_SetConfig+0x156>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213bf4:	69e3      	ldr	r3, [r4, #28]
  213bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213bfa:	d043      	beq.n	213c84 <UART_SetConfig+0x1a8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
  213bfc:	f7fe f840 	bl	211c80 <HAL_RCC_GetPCLK1Freq>
  213c00:	6863      	ldr	r3, [r4, #4]
  213c02:	fbb0 f0f3 	udiv	r0, r0, r3
  213c06:	b280      	uxth	r0, r0
  213c08:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;  
  213c0a:	2000      	movs	r0, #0
      break;
  213c0c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
  213c0e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
  213c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  213c16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  213c1a:	2b40      	cmp	r3, #64	; 0x40
  213c1c:	f000 80ae 	beq.w	213d7c <UART_SetConfig+0x2a0>
  213c20:	d905      	bls.n	213c2e <UART_SetConfig+0x152>
  213c22:	2b80      	cmp	r3, #128	; 0x80
  213c24:	f000 809e 	beq.w	213d64 <UART_SetConfig+0x288>
  213c28:	2bc0      	cmp	r3, #192	; 0xc0
  213c2a:	d0d6      	beq.n	213bda <UART_SetConfig+0xfe>
  213c2c:	e001      	b.n	213c32 <UART_SetConfig+0x156>
  213c2e:	2b00      	cmp	r3, #0
  213c30:	d0e0      	beq.n	213bf4 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213c32:	69e3      	ldr	r3, [r4, #28]
  213c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213c38:	d075      	beq.n	213d26 <UART_SetConfig+0x24a>
      case UART_CLOCKSOURCE_UNDEFINED:                
    default:
        ret = HAL_ERROR; 
  213c3a:	2001      	movs	r0, #1
  213c3c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
  213c3e:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
  213c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  213c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
  213c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  213c4e:	d06d      	beq.n	213d2c <UART_SetConfig+0x250>
  213c50:	d912      	bls.n	213c78 <UART_SetConfig+0x19c>
  213c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  213c56:	f000 8085 	beq.w	213d64 <UART_SetConfig+0x288>
  213c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
  213c5e:	d1e8      	bne.n	213c32 <UART_SetConfig+0x156>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213c60:	69e3      	ldr	r3, [r4, #28]
  213c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213c66:	d1bc      	bne.n	213be2 <UART_SetConfig+0x106>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate)); 
  213c68:	6862      	ldr	r2, [r4, #4]
  213c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  213c6e:	fbb3 f3f2 	udiv	r3, r3, r2
  213c72:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;  
  213c74:	2000      	movs	r0, #0
      break;
  213c76:	e774      	b.n	213b62 <UART_SetConfig+0x86>
  UART_GETCLOCKSOURCE(huart, clocksource);
  213c78:	2b00      	cmp	r3, #0
  213c7a:	d1da      	bne.n	213c32 <UART_SetConfig+0x156>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213c7c:	69e3      	ldr	r3, [r4, #28]
  213c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213c82:	d1bb      	bne.n	213bfc <UART_SetConfig+0x120>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
  213c84:	f7fd fffc 	bl	211c80 <HAL_RCC_GetPCLK1Freq>
  213c88:	0043      	lsls	r3, r0, #1
  213c8a:	6860      	ldr	r0, [r4, #4]
  213c8c:	fbb3 f3f0 	udiv	r3, r3, r0
  213c90:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;  
  213c92:	2000      	movs	r0, #0
      break;
  213c94:	e765      	b.n	213b62 <UART_SetConfig+0x86>
  UART_GETCLOCKSOURCE(huart, clocksource);
  213c96:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
  213c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  213c9e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
  213ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  213ca6:	d041      	beq.n	213d2c <UART_SetConfig+0x250>
  213ca8:	d906      	bls.n	213cb8 <UART_SetConfig+0x1dc>
  213caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  213cae:	d072      	beq.n	213d96 <UART_SetConfig+0x2ba>
  213cb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
  213cb4:	d0d4      	beq.n	213c60 <UART_SetConfig+0x184>
  213cb6:	e7bc      	b.n	213c32 <UART_SetConfig+0x156>
  213cb8:	2b00      	cmp	r3, #0
  213cba:	d1ba      	bne.n	213c32 <UART_SetConfig+0x156>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213cbc:	69e3      	ldr	r3, [r4, #28]
  213cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213cc2:	d146      	bne.n	213d52 <UART_SetConfig+0x276>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
  213cc4:	f7fd fff2 	bl	211cac <HAL_RCC_GetPCLK2Freq>
  213cc8:	0043      	lsls	r3, r0, #1
  213cca:	6860      	ldr	r0, [r4, #4]
  213ccc:	fbb3 f3f0 	udiv	r3, r3, r0
  213cd0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;  
  213cd2:	2000      	movs	r0, #0
      break;
  213cd4:	e745      	b.n	213b62 <UART_SetConfig+0x86>
  UART_GETCLOCKSOURCE(huart, clocksource);
  213cd6:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
  213cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  213cde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
  213ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  213ce6:	d021      	beq.n	213d2c <UART_SetConfig+0x250>
  213ce8:	d906      	bls.n	213cf8 <UART_SetConfig+0x21c>
  213cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  213cee:	d052      	beq.n	213d96 <UART_SetConfig+0x2ba>
  213cf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
  213cf4:	d0b4      	beq.n	213c60 <UART_SetConfig+0x184>
  213cf6:	e79c      	b.n	213c32 <UART_SetConfig+0x156>
  213cf8:	2b00      	cmp	r3, #0
  213cfa:	d0bf      	beq.n	213c7c <UART_SetConfig+0x1a0>
  213cfc:	e799      	b.n	213c32 <UART_SetConfig+0x156>
  213cfe:	f503 33de 	add.w	r3, r3, #113664	; 0x1bc00
  213d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
  213d06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  213d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  213d0e:	d00d      	beq.n	213d2c <UART_SetConfig+0x250>
  213d10:	d906      	bls.n	213d20 <UART_SetConfig+0x244>
  213d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213d16:	d03e      	beq.n	213d96 <UART_SetConfig+0x2ba>
  213d18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
  213d1c:	d0a0      	beq.n	213c60 <UART_SetConfig+0x184>
  213d1e:	e788      	b.n	213c32 <UART_SetConfig+0x156>
  213d20:	2b00      	cmp	r3, #0
  213d22:	d0ab      	beq.n	213c7c <UART_SetConfig+0x1a0>
  213d24:	e785      	b.n	213c32 <UART_SetConfig+0x156>
        ret = HAL_ERROR; 
  213d26:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
  213d28:	2300      	movs	r3, #0
  213d2a:	e71a      	b.n	213b62 <UART_SetConfig+0x86>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213d2c:	69e3      	ldr	r3, [r4, #28]
  213d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213d32:	d127      	bne.n	213d84 <UART_SetConfig+0x2a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
  213d34:	f7fd ff4e 	bl	211bd4 <HAL_RCC_GetSysClockFreq>
  213d38:	0043      	lsls	r3, r0, #1
  213d3a:	6860      	ldr	r0, [r4, #4]
  213d3c:	fbb3 f3f0 	udiv	r3, r3, r0
  213d40:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;  
  213d42:	2000      	movs	r0, #0
      break;
  213d44:	e70d      	b.n	213b62 <UART_SetConfig+0x86>
        ret = HAL_ERROR; 
  213d46:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;   
  213d48:	bd38      	pop	{r3, r4, r5, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213d4a:	69e3      	ldr	r3, [r4, #28]
  213d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213d50:	d0b8      	beq.n	213cc4 <UART_SetConfig+0x1e8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
  213d52:	f7fd ffab 	bl	211cac <HAL_RCC_GetPCLK2Freq>
  213d56:	6863      	ldr	r3, [r4, #4]
  213d58:	fbb0 f0f3 	udiv	r0, r0, r3
  213d5c:	b280      	uxth	r0, r0
  213d5e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;  
  213d60:	2000      	movs	r0, #0
      break;
  213d62:	bd38      	pop	{r3, r4, r5, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213d64:	69e3      	ldr	r3, [r4, #28]
  213d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213d6a:	d018      	beq.n	213d9e <UART_SetConfig+0x2c2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
  213d6c:	6862      	ldr	r2, [r4, #4]
  213d6e:	4b18      	ldr	r3, [pc, #96]	; (213dd0 <UART_SetConfig+0x2f4>)
  213d70:	fbb3 f3f2 	udiv	r3, r3, r2
  213d74:	b29b      	uxth	r3, r3
  213d76:	60eb      	str	r3, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;  
  213d78:	2000      	movs	r0, #0
      break; 
  213d7a:	bd38      	pop	{r3, r4, r5, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213d7c:	69e3      	ldr	r3, [r4, #28]
  213d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213d82:	d0d7      	beq.n	213d34 <UART_SetConfig+0x258>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
  213d84:	f7fd ff26 	bl	211bd4 <HAL_RCC_GetSysClockFreq>
  213d88:	6863      	ldr	r3, [r4, #4]
  213d8a:	fbb0 f0f3 	udiv	r0, r0, r3
  213d8e:	b280      	uxth	r0, r0
  213d90:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;  
  213d92:	2000      	movs	r0, #0
      break;  
  213d94:	bd38      	pop	{r3, r4, r5, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  213d96:	69e3      	ldr	r3, [r4, #28]
  213d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  213d9c:	d1e6      	bne.n	213d6c <UART_SetConfig+0x290>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
  213d9e:	6862      	ldr	r2, [r4, #4]
  213da0:	4b0c      	ldr	r3, [pc, #48]	; (213dd4 <UART_SetConfig+0x2f8>)
  213da2:	fbb3 f3f2 	udiv	r3, r3, r2
  213da6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;  
  213da8:	2000      	movs	r0, #0
      break;
  213daa:	e6da      	b.n	213b62 <UART_SetConfig+0x86>
  213dac:	efff69f3 	.word	0xefff69f3
  213db0:	40011000 	.word	0x40011000
  213db4:	40004400 	.word	0x40004400
  213db8:	40004800 	.word	0x40004800
  213dbc:	40004c00 	.word	0x40004c00
  213dc0:	40005000 	.word	0x40005000
  213dc4:	40011400 	.word	0x40011400
  213dc8:	40007800 	.word	0x40007800
  213dcc:	40007c00 	.word	0x40007c00
  213dd0:	00f42400 	.word	0x00f42400
  213dd4:	01e84800 	.word	0x01e84800

00213dd8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */ 
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
  213dd8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  213dda:	f013 0f01 	tst.w	r3, #1
  213dde:	d006      	beq.n	213dee <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
  213de0:	6802      	ldr	r2, [r0, #0]
  213de2:	6853      	ldr	r3, [r2, #4]
  213de4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  213de8:	6a81      	ldr	r1, [r0, #40]	; 0x28
  213dea:	430b      	orrs	r3, r1
  213dec:	6053      	str	r3, [r2, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
  213dee:	6a43      	ldr	r3, [r0, #36]	; 0x24
  213df0:	f013 0f02 	tst.w	r3, #2
  213df4:	d006      	beq.n	213e04 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
  213df6:	6802      	ldr	r2, [r0, #0]
  213df8:	6853      	ldr	r3, [r2, #4]
  213dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  213dfe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  213e00:	430b      	orrs	r3, r1
  213e02:	6053      	str	r3, [r2, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
  213e04:	6a43      	ldr	r3, [r0, #36]	; 0x24
  213e06:	f013 0f04 	tst.w	r3, #4
  213e0a:	d006      	beq.n	213e1a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
  213e0c:	6802      	ldr	r2, [r0, #0]
  213e0e:	6853      	ldr	r3, [r2, #4]
  213e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  213e14:	6b01      	ldr	r1, [r0, #48]	; 0x30
  213e16:	430b      	orrs	r3, r1
  213e18:	6053      	str	r3, [r2, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
  213e1a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  213e1c:	f013 0f08 	tst.w	r3, #8
  213e20:	d006      	beq.n	213e30 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
  213e22:	6802      	ldr	r2, [r0, #0]
  213e24:	6853      	ldr	r3, [r2, #4]
  213e26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  213e2a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  213e2c:	430b      	orrs	r3, r1
  213e2e:	6053      	str	r3, [r2, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
  213e30:	6a43      	ldr	r3, [r0, #36]	; 0x24
  213e32:	f013 0f10 	tst.w	r3, #16
  213e36:	d006      	beq.n	213e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));  
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
  213e38:	6802      	ldr	r2, [r0, #0]
  213e3a:	6893      	ldr	r3, [r2, #8]
  213e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  213e40:	6b81      	ldr	r1, [r0, #56]	; 0x38
  213e42:	430b      	orrs	r3, r1
  213e44:	6093      	str	r3, [r2, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
  213e46:	6a43      	ldr	r3, [r0, #36]	; 0x24
  213e48:	f013 0f20 	tst.w	r3, #32
  213e4c:	d006      	beq.n	213e5c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));   
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
  213e4e:	6802      	ldr	r2, [r0, #0]
  213e50:	6893      	ldr	r3, [r2, #8]
  213e52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  213e56:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  213e58:	430b      	orrs	r3, r1
  213e5a:	6093      	str	r3, [r2, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */              
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  213e5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
  213e5e:	f013 0f40 	tst.w	r3, #64	; 0x40
  213e62:	d00a      	beq.n	213e7a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
  213e64:	6802      	ldr	r2, [r0, #0]
  213e66:	6853      	ldr	r3, [r2, #4]
  213e68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  213e6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  213e6e:	430b      	orrs	r3, r1
  213e70:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
  213e72:	6c03      	ldr	r3, [r0, #64]	; 0x40
  213e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  213e78:	d00b      	beq.n	213e92 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }
  
  /* if required, configure MSB first on communication line */  
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
  213e7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  213e7c:	f013 0f80 	tst.w	r3, #128	; 0x80
  213e80:	d006      	beq.n	213e90 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));   
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
  213e82:	6802      	ldr	r2, [r0, #0]
  213e84:	6853      	ldr	r3, [r2, #4]
  213e86:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  213e8a:	6c81      	ldr	r1, [r0, #72]	; 0x48
  213e8c:	430b      	orrs	r3, r1
  213e8e:	6053      	str	r3, [r2, #4]
  213e90:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
  213e92:	6802      	ldr	r2, [r0, #0]
  213e94:	6853      	ldr	r3, [r2, #4]
  213e96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  213e9a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  213e9c:	430b      	orrs	r3, r1
  213e9e:	6053      	str	r3, [r2, #4]
  213ea0:	e7eb      	b.n	213e7a <UART_AdvFeatureConfig+0xa2>

00213ea2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  213ea2:	b510      	push	{r4, lr}
  213ea4:	4604      	mov	r4, r0
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  213ea6:	2300      	movs	r3, #0
  213ea8:	66c3      	str	r3, [r0, #108]	; 0x6c
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  213eaa:	6803      	ldr	r3, [r0, #0]
  213eac:	681b      	ldr	r3, [r3, #0]
  213eae:	f013 0f08 	tst.w	r3, #8
  213eb2:	d10b      	bne.n	213ecc <UART_CheckIdleState+0x2a>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  213eb4:	6823      	ldr	r3, [r4, #0]
  213eb6:	681b      	ldr	r3, [r3, #0]
  213eb8:	f013 0f04 	tst.w	r3, #4
  213ebc:	d111      	bne.n	213ee2 <UART_CheckIdleState+0x40>
      return HAL_TIMEOUT;
    }
  }
  
  /* Initialize the UART State */
  huart->State= HAL_UART_STATE_READY;
  213ebe:	2301      	movs	r3, #1
  213ec0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
  213ec4:	2000      	movs	r0, #0
  213ec6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  
  return HAL_OK;
  213eca:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)  
  213ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
  213ed0:	2200      	movs	r2, #0
  213ed2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  213ed6:	f7ff fcf1 	bl	2138bc <UART_WaitOnFlagUntilTimeout>
  213eda:	2800      	cmp	r0, #0
  213edc:	d0ea      	beq.n	213eb4 <UART_CheckIdleState+0x12>
      return HAL_TIMEOUT;
  213ede:	2003      	movs	r0, #3
  213ee0:	bd10      	pop	{r4, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)  
  213ee2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
  213ee6:	2200      	movs	r2, #0
  213ee8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  213eec:	4620      	mov	r0, r4
  213eee:	f7ff fce5 	bl	2138bc <UART_WaitOnFlagUntilTimeout>
  213ef2:	2800      	cmp	r0, #0
  213ef4:	d0e3      	beq.n	213ebe <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
  213ef6:	2003      	movs	r0, #3
}
  213ef8:	bd10      	pop	{r4, pc}

00213efa <HAL_UART_Init>:
  if(huart == NULL)
  213efa:	b378      	cbz	r0, 213f5c <HAL_UART_Init+0x62>
{
  213efc:	b510      	push	{r4, lr}
  213efe:	4604      	mov	r4, r0
  if(huart->State == HAL_UART_STATE_RESET)
  213f00:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
  213f04:	b30b      	cbz	r3, 213f4a <HAL_UART_Init+0x50>
  huart->State = HAL_UART_STATE_BUSY;
  213f06:	2302      	movs	r3, #2
  213f08:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
  213f0c:	6822      	ldr	r2, [r4, #0]
  213f0e:	6813      	ldr	r3, [r2, #0]
  213f10:	f023 0301 	bic.w	r3, r3, #1
  213f14:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
  213f16:	4620      	mov	r0, r4
  213f18:	f7ff fde0 	bl	213adc <UART_SetConfig>
  213f1c:	2801      	cmp	r0, #1
  213f1e:	d01f      	beq.n	213f60 <HAL_UART_Init+0x66>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
  213f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
  213f22:	b9bb      	cbnz	r3, 213f54 <HAL_UART_Init+0x5a>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
  213f24:	6822      	ldr	r2, [r4, #0]
  213f26:	6853      	ldr	r3, [r2, #4]
  213f28:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
  213f2c:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
  213f2e:	6822      	ldr	r2, [r4, #0]
  213f30:	6893      	ldr	r3, [r2, #8]
  213f32:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
  213f36:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
  213f38:	6822      	ldr	r2, [r4, #0]
  213f3a:	6813      	ldr	r3, [r2, #0]
  213f3c:	f043 0301 	orr.w	r3, r3, #1
  213f40:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
  213f42:	4620      	mov	r0, r4
  213f44:	f7ff ffad 	bl	213ea2 <UART_CheckIdleState>
  213f48:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
  213f4a:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
  213f4e:	f7fb fa89 	bl	20f464 <HAL_UART_MspInit>
  213f52:	e7d8      	b.n	213f06 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
  213f54:	4620      	mov	r0, r4
  213f56:	f7ff ff3f 	bl	213dd8 <UART_AdvFeatureConfig>
  213f5a:	e7e3      	b.n	213f24 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
  213f5c:	2001      	movs	r0, #1
  213f5e:	4770      	bx	lr
    return HAL_ERROR;
  213f60:	2001      	movs	r0, #1
}
  213f62:	bd10      	pop	{r4, pc}

00213f64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
  213f64:	b510      	push	{r4, lr}
  213f66:	4b03      	ldr	r3, [pc, #12]	; (213f74 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
  213f68:	6003      	str	r3, [r0, #0]
  213f6a:	4604      	mov	r4, r0
  213f6c:	f000 fe72 	bl	214c54 <_ZN10__cxxabiv117__class_type_infoD1Ev>
  213f70:	4620      	mov	r0, r4
  213f72:	bd10      	pop	{r4, pc}
  213f74:	00218678 	.word	0x00218678

00213f78 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
  213f78:	b510      	push	{r4, lr}
  213f7a:	4604      	mov	r4, r0
  213f7c:	f7ff fff2 	bl	213f64 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
  213f80:	4620      	mov	r0, r4
  213f82:	210c      	movs	r1, #12
  213f84:	f000 fe3c 	bl	214c00 <_ZdlPvj>
  213f88:	4620      	mov	r0, r4
  213f8a:	bd10      	pop	{r4, pc}

00213f8c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
  213f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  213f90:	9e06      	ldr	r6, [sp, #24]
  213f92:	4296      	cmp	r6, r2
  213f94:	4680      	mov	r8, r0
  213f96:	460f      	mov	r7, r1
  213f98:	4614      	mov	r4, r2
  213f9a:	461d      	mov	r5, r3
  213f9c:	d103      	bne.n	213fa6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
  213f9e:	4619      	mov	r1, r3
  213fa0:	f000 feac 	bl	214cfc <_ZNKSt9type_infoeqERKS_>
  213fa4:	b958      	cbnz	r0, 213fbe <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
  213fa6:	f8d8 0008 	ldr.w	r0, [r8, #8]
  213faa:	6803      	ldr	r3, [r0, #0]
  213fac:	9606      	str	r6, [sp, #24]
  213fae:	6a1e      	ldr	r6, [r3, #32]
  213fb0:	4622      	mov	r2, r4
  213fb2:	462b      	mov	r3, r5
  213fb4:	4639      	mov	r1, r7
  213fb6:	46b4      	mov	ip, r6
  213fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  213fbc:	4760      	bx	ip
  213fbe:	2006      	movs	r0, #6
  213fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00213fc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
  213fc4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  213fc8:	460e      	mov	r6, r1
  213fca:	4619      	mov	r1, r3
  213fcc:	4683      	mov	fp, r0
  213fce:	4617      	mov	r7, r2
  213fd0:	4699      	mov	r9, r3
  213fd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  213fd4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  213fd8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  213fdc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  213fde:	f000 fe8d 	bl	214cfc <_ZNKSt9type_infoeqERKS_>
  213fe2:	b190      	cbz	r0, 21400a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
  213fe4:	2e00      	cmp	r6, #0
  213fe6:	602c      	str	r4, [r5, #0]
  213fe8:	712f      	strb	r7, [r5, #4]
  213fea:	db09      	blt.n	214000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
  213fec:	4434      	add	r4, r6
  213fee:	45a0      	cmp	r8, r4
  213ff0:	bf0c      	ite	eq
  213ff2:	2406      	moveq	r4, #6
  213ff4:	2401      	movne	r4, #1
  213ff6:	71ac      	strb	r4, [r5, #6]
  213ff8:	2000      	movs	r0, #0
  213ffa:	b001      	add	sp, #4
  213ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  214000:	3602      	adds	r6, #2
  214002:	d1f9      	bne.n	213ff8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
  214004:	2301      	movs	r3, #1
  214006:	71ab      	strb	r3, [r5, #6]
  214008:	e7f6      	b.n	213ff8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
  21400a:	4544      	cmp	r4, r8
  21400c:	d104      	bne.n	214018 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
  21400e:	4651      	mov	r1, sl
  214010:	4658      	mov	r0, fp
  214012:	f000 fe73 	bl	214cfc <_ZNKSt9type_infoeqERKS_>
  214016:	b988      	cbnz	r0, 21403c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
  214018:	f8db 0008 	ldr.w	r0, [fp, #8]
  21401c:	6803      	ldr	r3, [r0, #0]
  21401e:	950d      	str	r5, [sp, #52]	; 0x34
  214020:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  214024:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  214028:	940a      	str	r4, [sp, #40]	; 0x28
  21402a:	69dc      	ldr	r4, [r3, #28]
  21402c:	463a      	mov	r2, r7
  21402e:	464b      	mov	r3, r9
  214030:	4631      	mov	r1, r6
  214032:	46a4      	mov	ip, r4
  214034:	b001      	add	sp, #4
  214036:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  21403a:	4760      	bx	ip
  21403c:	716f      	strb	r7, [r5, #5]
  21403e:	e7db      	b.n	213ff8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

00214040 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
  214040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  214044:	4604      	mov	r4, r0
  214046:	460d      	mov	r5, r1
  214048:	4616      	mov	r6, r2
  21404a:	461f      	mov	r7, r3
  21404c:	f000 fe16 	bl	214c7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  214050:	b948      	cbnz	r0, 214066 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
  214052:	68a0      	ldr	r0, [r4, #8]
  214054:	6803      	ldr	r3, [r0, #0]
  214056:	699c      	ldr	r4, [r3, #24]
  214058:	4632      	mov	r2, r6
  21405a:	463b      	mov	r3, r7
  21405c:	4629      	mov	r1, r5
  21405e:	46a4      	mov	ip, r4
  214060:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  214064:	4760      	bx	ip
  214066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0021406a <_ZdlPv>:
  21406a:	f002 bbd7 	b.w	21681c <free>

0021406e <__cxa_throw_bad_array_new_length>:
  21406e:	b508      	push	{r3, lr}
  214070:	f002 fb8c 	bl	21678c <abort>

00214074 <__aeabi_atexit>:
  214074:	460b      	mov	r3, r1
  214076:	4601      	mov	r1, r0
  214078:	4618      	mov	r0, r3
  21407a:	f002 bb8f 	b.w	21679c <__cxa_atexit>

0021407e <__cxa_pure_virtual>:
  21407e:	b508      	push	{r3, lr}
  214080:	f000 f80c 	bl	21409c <_ZSt9terminatev>

00214084 <_ZN10__cxxabiv111__terminateEPFvvE>:
  214084:	b508      	push	{r3, lr}
  214086:	4780      	blx	r0
  214088:	f002 fb80 	bl	21678c <abort>

0021408c <_ZSt13get_terminatev>:
  21408c:	4b02      	ldr	r3, [pc, #8]	; (214098 <_ZSt13get_terminatev+0xc>)
  21408e:	6818      	ldr	r0, [r3, #0]
  214090:	f3bf 8f5b 	dmb	ish
  214094:	4770      	bx	lr
  214096:	bf00      	nop
  214098:	2000000c 	.word	0x2000000c

0021409c <_ZSt9terminatev>:
  21409c:	b508      	push	{r3, lr}
  21409e:	f7ff fff5 	bl	21408c <_ZSt13get_terminatev>
  2140a2:	f7ff ffef 	bl	214084 <_ZN10__cxxabiv111__terminateEPFvvE>

002140a6 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
  2140a6:	b508      	push	{r3, lr}
  2140a8:	4780      	blx	r0
  2140aa:	f7ff fff7 	bl	21409c <_ZSt9terminatev>
	...

002140b0 <_ZSt14get_unexpectedv>:
  2140b0:	4b02      	ldr	r3, [pc, #8]	; (2140bc <_ZSt14get_unexpectedv+0xc>)
  2140b2:	6818      	ldr	r0, [r3, #0]
  2140b4:	f3bf 8f5b 	dmb	ish
  2140b8:	4770      	bx	lr
  2140ba:	bf00      	nop
  2140bc:	20000010 	.word	0x20000010

002140c0 <_ZSt10unexpectedv>:
  2140c0:	b508      	push	{r3, lr}
  2140c2:	f7ff fff5 	bl	2140b0 <_ZSt14get_unexpectedv>
  2140c6:	f7ff ffee 	bl	2140a6 <_ZN10__cxxabiv112__unexpectedEPFvvE>

002140ca <_Znwj>:
  2140ca:	b510      	push	{r4, lr}
  2140cc:	2800      	cmp	r0, #0
  2140ce:	bf14      	ite	ne
  2140d0:	4604      	movne	r4, r0
  2140d2:	2401      	moveq	r4, #1
  2140d4:	4620      	mov	r0, r4
  2140d6:	f002 fb99 	bl	21680c <malloc>
  2140da:	b930      	cbnz	r0, 2140ea <_Znwj+0x20>
  2140dc:	f000 fd92 	bl	214c04 <_ZSt15get_new_handlerv>
  2140e0:	b908      	cbnz	r0, 2140e6 <_Znwj+0x1c>
  2140e2:	f002 fb53 	bl	21678c <abort>
  2140e6:	4780      	blx	r0
  2140e8:	e7f4      	b.n	2140d4 <_Znwj+0xa>
  2140ea:	bd10      	pop	{r4, pc}

002140ec <_Znaj>:
  2140ec:	f7ff bfed 	b.w	2140ca <_Znwj>

002140f0 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
  2140f0:	b510      	push	{r4, lr}
  2140f2:	4b03      	ldr	r3, [pc, #12]	; (214100 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
  2140f4:	6003      	str	r3, [r0, #0]
  2140f6:	4604      	mov	r4, r0
  2140f8:	f000 fdac 	bl	214c54 <_ZN10__cxxabiv117__class_type_infoD1Ev>
  2140fc:	4620      	mov	r0, r4
  2140fe:	bd10      	pop	{r4, pc}
  214100:	002186d8 	.word	0x002186d8

00214104 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
  214104:	b510      	push	{r4, lr}
  214106:	4604      	mov	r4, r0
  214108:	f7ff fff2 	bl	2140f0 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
  21410c:	4620      	mov	r0, r4
  21410e:	2118      	movs	r1, #24
  214110:	f000 fd76 	bl	214c00 <_ZdlPvj>
  214114:	4620      	mov	r0, r4
  214116:	bd10      	pop	{r4, pc}

00214118 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
  214118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  21411c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  214120:	454a      	cmp	r2, r9
  214122:	4604      	mov	r4, r0
  214124:	460f      	mov	r7, r1
  214126:	4616      	mov	r6, r2
  214128:	4698      	mov	r8, r3
  21412a:	d103      	bne.n	214134 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
  21412c:	4619      	mov	r1, r3
  21412e:	f000 fde5 	bl	214cfc <_ZNKSt9type_infoeqERKS_>
  214132:	bb38      	cbnz	r0, 214184 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
  214134:	68e5      	ldr	r5, [r4, #12]
  214136:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
  21413a:	e001      	b.n	214140 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x28>
  21413c:	3d01      	subs	r5, #1
  21413e:	3c08      	subs	r4, #8
  214140:	b315      	cbz	r5, 214188 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x70>
  214142:	68e3      	ldr	r3, [r4, #12]
  214144:	079a      	lsls	r2, r3, #30
  214146:	d5f9      	bpl.n	21413c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
  214148:	f013 0a01 	ands.w	sl, r3, #1
  21414c:	ea4f 2223 	mov.w	r2, r3, asr #8
  214150:	d003      	beq.n	21415a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x42>
  214152:	1cfb      	adds	r3, r7, #3
  214154:	d0f2      	beq.n	21413c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
  214156:	6833      	ldr	r3, [r6, #0]
  214158:	589a      	ldr	r2, [r3, r2]
  21415a:	68a0      	ldr	r0, [r4, #8]
  21415c:	6803      	ldr	r3, [r0, #0]
  21415e:	f8cd 9000 	str.w	r9, [sp]
  214162:	f8d3 b020 	ldr.w	fp, [r3, #32]
  214166:	4432      	add	r2, r6
  214168:	4643      	mov	r3, r8
  21416a:	4639      	mov	r1, r7
  21416c:	47d8      	blx	fp
  21416e:	2803      	cmp	r0, #3
  214170:	dde4      	ble.n	21413c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
  214172:	f1ba 0f00 	cmp.w	sl, #0
  214176:	d002      	beq.n	21417e <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>
  214178:	f040 0001 	orr.w	r0, r0, #1
  21417c:	b2c0      	uxtb	r0, r0
  21417e:	b003      	add	sp, #12
  214180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  214184:	2006      	movs	r0, #6
  214186:	e7fa      	b.n	21417e <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>
  214188:	2001      	movs	r0, #1
  21418a:	e7f8      	b.n	21417e <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x66>

0021418c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
  21418c:	b4f0      	push	{r4, r5, r6, r7}
  21418e:	1e0e      	subs	r6, r1, #0
  214190:	9c04      	ldr	r4, [sp, #16]
  214192:	db06      	blt.n	2141a2 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
  214194:	1990      	adds	r0, r2, r6
  214196:	4284      	cmp	r4, r0
  214198:	bf14      	ite	ne
  21419a:	2001      	movne	r0, #1
  21419c:	2006      	moveq	r0, #6
  21419e:	bcf0      	pop	{r4, r5, r6, r7}
  2141a0:	4770      	bx	lr
  2141a2:	3602      	adds	r6, #2
  2141a4:	d005      	beq.n	2141b2 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x26>
  2141a6:	6805      	ldr	r5, [r0, #0]
  2141a8:	9404      	str	r4, [sp, #16]
  2141aa:	6a2c      	ldr	r4, [r5, #32]
  2141ac:	46a4      	mov	ip, r4
  2141ae:	bcf0      	pop	{r4, r5, r6, r7}
  2141b0:	4760      	bx	ip
  2141b2:	2001      	movs	r0, #1
  2141b4:	e7f3      	b.n	21419e <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

002141b6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
  2141b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2141ba:	b091      	sub	sp, #68	; 0x44
  2141bc:	4688      	mov	r8, r1
  2141be:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  2141c0:	9308      	str	r3, [sp, #32]
  2141c2:	68a3      	ldr	r3, [r4, #8]
  2141c4:	9207      	str	r2, [sp, #28]
  2141c6:	06d9      	lsls	r1, r3, #27
  2141c8:	bf44      	itt	mi
  2141ca:	6883      	ldrmi	r3, [r0, #8]
  2141cc:	60a3      	strmi	r3, [r4, #8]
  2141ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
  2141d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  2141d2:	4293      	cmp	r3, r2
  2141d4:	4681      	mov	r9, r0
  2141d6:	d105      	bne.n	2141e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x2e>
  2141d8:	991b      	ldr	r1, [sp, #108]	; 0x6c
  2141da:	f000 fd8f 	bl	214cfc <_ZNKSt9type_infoeqERKS_>
  2141de:	2800      	cmp	r0, #0
  2141e0:	f040 8115 	bne.w	21440e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x258>
  2141e4:	9908      	ldr	r1, [sp, #32]
  2141e6:	4648      	mov	r0, r9
  2141e8:	f000 fd88 	bl	214cfc <_ZNKSt9type_infoeqERKS_>
  2141ec:	4682      	mov	sl, r0
  2141ee:	2800      	cmp	r0, #0
  2141f0:	d16b      	bne.n	2142ca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x114>
  2141f2:	f1b8 0f00 	cmp.w	r8, #0
  2141f6:	bfa9      	itett	ge
  2141f8:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
  2141fa:	f8cd a024 	strlt.w	sl, [sp, #36]	; 0x24
  2141fe:	eba3 0308 	subge.w	r3, r3, r8
  214202:	9309      	strge	r3, [sp, #36]	; 0x24
  214204:	2301      	movs	r3, #1
  214206:	930a      	str	r3, [sp, #40]	; 0x28
  214208:	9b07      	ldr	r3, [sp, #28]
  21420a:	2600      	movs	r6, #0
  21420c:	f043 0301 	orr.w	r3, r3, #1
  214210:	9606      	str	r6, [sp, #24]
  214212:	46b3      	mov	fp, r6
  214214:	930b      	str	r3, [sp, #44]	; 0x2c
  214216:	f8d9 300c 	ldr.w	r3, [r9, #12]
  21421a:	9304      	str	r3, [sp, #16]
  21421c:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
  214220:	9305      	str	r3, [sp, #20]
  214222:	9b04      	ldr	r3, [sp, #16]
  214224:	2b00      	cmp	r3, #0
  214226:	f000 80e8 	beq.w	2143fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x244>
  21422a:	9b05      	ldr	r3, [sp, #20]
  21422c:	68a5      	ldr	r5, [r4, #8]
  21422e:	68db      	ldr	r3, [r3, #12]
  214230:	950f      	str	r5, [sp, #60]	; 0x3c
  214232:	07da      	lsls	r2, r3, #31
  214234:	bf48      	it	mi
  214236:	981a      	ldrmi	r0, [sp, #104]	; 0x68
  214238:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  21423c:	ea4f 2123 	mov.w	r1, r3, asr #8
  214240:	bf48      	it	mi
  214242:	6800      	ldrmi	r0, [r0, #0]
  214244:	f88d b038 	strb.w	fp, [sp, #56]	; 0x38
  214248:	bf48      	it	mi
  21424a:	5841      	ldrmi	r1, [r0, r1]
  21424c:	981a      	ldr	r0, [sp, #104]	; 0x68
  21424e:	f88d b039 	strb.w	fp, [sp, #57]	; 0x39
  214252:	4401      	add	r1, r0
  214254:	9809      	ldr	r0, [sp, #36]	; 0x24
  214256:	f88d b03a 	strb.w	fp, [sp, #58]	; 0x3a
  21425a:	bf4c      	ite	mi
  21425c:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
  21425e:	9a07      	ldrpl	r2, [sp, #28]
  214260:	b138      	cbz	r0, 214272 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xbc>
  214262:	4288      	cmp	r0, r1
  214264:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  214266:	bf2c      	ite	cs
  214268:	2000      	movcs	r0, #0
  21426a:	2001      	movcc	r0, #1
  21426c:	42b8      	cmp	r0, r7
  21426e:	f000 80b9 	beq.w	2143e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22e>
  214272:	079b      	lsls	r3, r3, #30
  214274:	d407      	bmi.n	214286 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
  214276:	f118 0f02 	cmn.w	r8, #2
  21427a:	d102      	bne.n	214282 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
  21427c:	07af      	lsls	r7, r5, #30
  21427e:	f000 80b3 	beq.w	2143e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x232>
  214282:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
  214286:	9b05      	ldr	r3, [sp, #20]
  214288:	6898      	ldr	r0, [r3, #8]
  21428a:	ad0d      	add	r5, sp, #52	; 0x34
  21428c:	6803      	ldr	r3, [r0, #0]
  21428e:	9503      	str	r5, [sp, #12]
  214290:	9d1c      	ldr	r5, [sp, #112]	; 0x70
  214292:	9502      	str	r5, [sp, #8]
  214294:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
  214296:	e88d 0022 	stmia.w	sp, {r1, r5}
  21429a:	4641      	mov	r1, r8
  21429c:	69dd      	ldr	r5, [r3, #28]
  21429e:	9b08      	ldr	r3, [sp, #32]
  2142a0:	47a8      	blx	r5
  2142a2:	7961      	ldrb	r1, [r4, #5]
  2142a4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
  2142a8:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
  2142ac:	4311      	orrs	r1, r2
  2142ae:	2d06      	cmp	r5, #6
  2142b0:	4603      	mov	r3, r0
  2142b2:	7161      	strb	r1, [r4, #5]
  2142b4:	d001      	beq.n	2142ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x104>
  2142b6:	2d02      	cmp	r5, #2
  2142b8:	d122      	bne.n	214300 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x14a>
  2142ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  2142bc:	6023      	str	r3, [r4, #0]
  2142be:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  2142c2:	7123      	strb	r3, [r4, #4]
  2142c4:	71a5      	strb	r5, [r4, #6]
  2142c6:	4682      	mov	sl, r0
  2142c8:	e077      	b.n	2143ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
  2142ca:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  2142cc:	6023      	str	r3, [r4, #0]
  2142ce:	f1b8 0f00 	cmp.w	r8, #0
  2142d2:	f89d 301c 	ldrb.w	r3, [sp, #28]
  2142d6:	7123      	strb	r3, [r4, #4]
  2142d8:	db0c      	blt.n	2142f4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
  2142da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  2142dc:	4498      	add	r8, r3
  2142de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  2142e0:	4543      	cmp	r3, r8
  2142e2:	bf0c      	ite	eq
  2142e4:	f04f 0806 	moveq.w	r8, #6
  2142e8:	f04f 0801 	movne.w	r8, #1
  2142ec:	f884 8006 	strb.w	r8, [r4, #6]
  2142f0:	2600      	movs	r6, #0
  2142f2:	e063      	b.n	2143bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x206>
  2142f4:	f118 0f02 	cmn.w	r8, #2
  2142f8:	d1fa      	bne.n	2142f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13a>
  2142fa:	2301      	movs	r3, #1
  2142fc:	71a3      	strb	r3, [r4, #6]
  2142fe:	e7f7      	b.n	2142f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13a>
  214300:	6822      	ldr	r2, [r4, #0]
  214302:	b986      	cbnz	r6, 214326 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x170>
  214304:	b97a      	cbnz	r2, 214326 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x170>
  214306:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  214308:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
  21430c:	6022      	str	r2, [r4, #0]
  21430e:	7125      	strb	r5, [r4, #4]
  214310:	b122      	cbz	r2, 21431c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
  214312:	b119      	cbz	r1, 21431c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
  214314:	f8d9 2008 	ldr.w	r2, [r9, #8]
  214318:	07d5      	lsls	r5, r2, #31
  21431a:	d5d4      	bpl.n	2142c6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x110>
  21431c:	7962      	ldrb	r2, [r4, #5]
  21431e:	2a04      	cmp	r2, #4
  214320:	d163      	bne.n	2143ea <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
  214322:	469a      	mov	sl, r3
  214324:	e049      	b.n	2143ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
  214326:	b15a      	cbz	r2, 214340 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18a>
  214328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  21432a:	429a      	cmp	r2, r3
  21432c:	d106      	bne.n	21433c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x186>
  21432e:	7923      	ldrb	r3, [r4, #4]
  214330:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
  214334:	4313      	orrs	r3, r2
  214336:	7123      	strb	r3, [r4, #4]
  214338:	4633      	mov	r3, r6
  21433a:	e7ef      	b.n	21431c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
  21433c:	b92b      	cbnz	r3, 21434a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x194>
  21433e:	b920      	cbnz	r0, 21434a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x194>
  214340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  214342:	2b00      	cmp	r3, #0
  214344:	d0f8      	beq.n	214338 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x182>
  214346:	2e00      	cmp	r6, #0
  214348:	d0f6      	beq.n	214338 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x182>
  21434a:	2903      	cmp	r1, #3
  21434c:	79a7      	ldrb	r7, [r4, #6]
  21434e:	d904      	bls.n	21435a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a4>
  214350:	07c8      	lsls	r0, r1, #31
  214352:	d560      	bpl.n	214416 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x260>
  214354:	68a3      	ldr	r3, [r4, #8]
  214356:	0799      	lsls	r1, r3, #30
  214358:	d55d      	bpl.n	214416 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x260>
  21435a:	b97f      	cbnz	r7, 21437c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c6>
  21435c:	2d03      	cmp	r5, #3
  21435e:	dd05      	ble.n	21436c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b6>
  214360:	07eb      	lsls	r3, r5, #31
  214362:	d55f      	bpl.n	214424 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x26e>
  214364:	f8d9 3008 	ldr.w	r3, [r9, #8]
  214368:	079f      	lsls	r7, r3, #30
  21436a:	d52b      	bpl.n	2143c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20e>
  21436c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  21436e:	9300      	str	r3, [sp, #0]
  214370:	4641      	mov	r1, r8
  214372:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  214374:	9808      	ldr	r0, [sp, #32]
  214376:	f7ff ff09 	bl	21418c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
  21437a:	4607      	mov	r7, r0
  21437c:	b945      	cbnz	r5, 214390 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1da>
  21437e:	2f03      	cmp	r7, #3
  214380:	dd53      	ble.n	21442a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x274>
  214382:	07fd      	lsls	r5, r7, #31
  214384:	d503      	bpl.n	21438e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d8>
  214386:	f8d9 3008 	ldr.w	r3, [r9, #8]
  21438a:	0798      	lsls	r0, r3, #30
  21438c:	d44d      	bmi.n	21442a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x274>
  21438e:	2501      	movs	r5, #1
  214390:	ea85 0307 	eor.w	r3, r5, r7
  214394:	b2db      	uxtb	r3, r3
  214396:	2b03      	cmp	r3, #3
  214398:	d916      	bls.n	2143c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x212>
  21439a:	2d03      	cmp	r5, #3
  21439c:	bfc1      	itttt	gt
  21439e:	9b0d      	ldrgt	r3, [sp, #52]	; 0x34
  2143a0:	6023      	strgt	r3, [r4, #0]
  2143a2:	462f      	movgt	r7, r5
  2143a4:	f89d 3038 	ldrbgt.w	r3, [sp, #56]	; 0x38
  2143a8:	bfca      	itet	gt
  2143aa:	7123      	strbgt	r3, [r4, #4]
  2143ac:	4633      	movle	r3, r6
  2143ae:	2300      	movgt	r3, #0
  2143b0:	07b9      	lsls	r1, r7, #30
  2143b2:	71a7      	strb	r7, [r4, #6]
  2143b4:	d401      	bmi.n	2143ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
  2143b6:	07fa      	lsls	r2, r7, #31
  2143b8:	d4b0      	bmi.n	21431c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
  2143ba:	4656      	mov	r6, sl
  2143bc:	4630      	mov	r0, r6
  2143be:	b011      	add	sp, #68	; 0x44
  2143c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2143c4:	2701      	movs	r7, #1
  2143c6:	e7e3      	b.n	214390 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1da>
  2143c8:	403d      	ands	r5, r7
  2143ca:	b2ed      	uxtb	r5, r5
  2143cc:	2d03      	cmp	r5, #3
  2143ce:	f8c4 b000 	str.w	fp, [r4]
  2143d2:	d904      	bls.n	2143de <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x228>
  2143d4:	2302      	movs	r3, #2
  2143d6:	71a3      	strb	r3, [r4, #6]
  2143d8:	f04f 0a01 	mov.w	sl, #1
  2143dc:	e7ed      	b.n	2143ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x204>
  2143de:	2301      	movs	r3, #1
  2143e0:	71a3      	strb	r3, [r4, #6]
  2143e2:	e79b      	b.n	21431c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x166>
  2143e4:	2301      	movs	r3, #1
  2143e6:	9306      	str	r3, [sp, #24]
  2143e8:	4633      	mov	r3, r6
  2143ea:	9a04      	ldr	r2, [sp, #16]
  2143ec:	3a01      	subs	r2, #1
  2143ee:	9204      	str	r2, [sp, #16]
  2143f0:	9a05      	ldr	r2, [sp, #20]
  2143f2:	3a08      	subs	r2, #8
  2143f4:	9205      	str	r2, [sp, #20]
  2143f6:	461e      	mov	r6, r3
  2143f8:	e713      	b.n	214222 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
  2143fa:	9b06      	ldr	r3, [sp, #24]
  2143fc:	2b00      	cmp	r3, #0
  2143fe:	d0dd      	beq.n	2143bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x206>
  214400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  214402:	9306      	str	r3, [sp, #24]
  214404:	2b00      	cmp	r3, #0
  214406:	d0d9      	beq.n	2143bc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x206>
  214408:	9b04      	ldr	r3, [sp, #16]
  21440a:	930a      	str	r3, [sp, #40]	; 0x28
  21440c:	e703      	b.n	214216 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x60>
  21440e:	f89d 301c 	ldrb.w	r3, [sp, #28]
  214412:	7163      	strb	r3, [r4, #5]
  214414:	e76c      	b.n	2142f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13a>
  214416:	2f00      	cmp	r7, #0
  214418:	bf08      	it	eq
  21441a:	2701      	moveq	r7, #1
  21441c:	2d00      	cmp	r5, #0
  21441e:	bf08      	it	eq
  214420:	2501      	moveq	r5, #1
  214422:	e7b5      	b.n	214390 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1da>
  214424:	2d00      	cmp	r5, #0
  214426:	d1cd      	bne.n	2143c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x20e>
  214428:	2701      	movs	r7, #1
  21442a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  21442c:	9300      	str	r3, [sp, #0]
  21442e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  214430:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  214432:	9808      	ldr	r0, [sp, #32]
  214434:	4641      	mov	r1, r8
  214436:	f7ff fea9 	bl	21418c <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
  21443a:	4605      	mov	r5, r0
  21443c:	e7a8      	b.n	214390 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1da>

0021443e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
  21443e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  214442:	b089      	sub	sp, #36	; 0x24
  214444:	4607      	mov	r7, r0
  214446:	9102      	str	r1, [sp, #8]
  214448:	4692      	mov	sl, r2
  21444a:	461c      	mov	r4, r3
  21444c:	f000 fc16 	bl	214c7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
  214450:	4605      	mov	r5, r0
  214452:	2800      	cmp	r0, #0
  214454:	d155      	bne.n	214502 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc4>
  214456:	f8d4 8008 	ldr.w	r8, [r4, #8]
  21445a:	f8d7 900c 	ldr.w	r9, [r7, #12]
  21445e:	f018 0f10 	tst.w	r8, #16
  214462:	bf18      	it	ne
  214464:	f8d7 8008 	ldrne.w	r8, [r7, #8]
  214468:	f008 0301 	and.w	r3, r8, #1
  21446c:	eb07 06c9 	add.w	r6, r7, r9, lsl #3
  214470:	f04f 0b00 	mov.w	fp, #0
  214474:	9303      	str	r3, [sp, #12]
  214476:	f1b9 0f00 	cmp.w	r9, #0
  21447a:	d06b      	beq.n	214554 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x116>
  21447c:	68f2      	ldr	r2, [r6, #12]
  21447e:	f8cd b010 	str.w	fp, [sp, #16]
  214482:	f002 0301 	and.w	r3, r2, #1
  214486:	9300      	str	r3, [sp, #0]
  214488:	f012 0302 	ands.w	r3, r2, #2
  21448c:	f88d b014 	strb.w	fp, [sp, #20]
  214490:	f8cd 8018 	str.w	r8, [sp, #24]
  214494:	f8cd b01c 	str.w	fp, [sp, #28]
  214498:	9301      	str	r3, [sp, #4]
  21449a:	d102      	bne.n	2144a2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x64>
  21449c:	9b03      	ldr	r3, [sp, #12]
  21449e:	2b00      	cmp	r3, #0
  2144a0:	d04a      	beq.n	214538 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
  2144a2:	f1ba 0f00 	cmp.w	sl, #0
  2144a6:	d030      	beq.n	21450a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xcc>
  2144a8:	9b00      	ldr	r3, [sp, #0]
  2144aa:	1212      	asrs	r2, r2, #8
  2144ac:	b113      	cbz	r3, 2144b4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x76>
  2144ae:	f8da 3000 	ldr.w	r3, [sl]
  2144b2:	589a      	ldr	r2, [r3, r2]
  2144b4:	4452      	add	r2, sl
  2144b6:	68b0      	ldr	r0, [r6, #8]
  2144b8:	9902      	ldr	r1, [sp, #8]
  2144ba:	6803      	ldr	r3, [r0, #0]
  2144bc:	699d      	ldr	r5, [r3, #24]
  2144be:	ab04      	add	r3, sp, #16
  2144c0:	47a8      	blx	r5
  2144c2:	4605      	mov	r5, r0
  2144c4:	2800      	cmp	r0, #0
  2144c6:	d037      	beq.n	214538 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
  2144c8:	9b07      	ldr	r3, [sp, #28]
  2144ca:	2b08      	cmp	r3, #8
  2144cc:	d103      	bne.n	2144d6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x98>
  2144ce:	9b00      	ldr	r3, [sp, #0]
  2144d0:	b10b      	cbz	r3, 2144d6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x98>
  2144d2:	68b3      	ldr	r3, [r6, #8]
  2144d4:	9307      	str	r3, [sp, #28]
  2144d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
  2144da:	2b03      	cmp	r3, #3
  2144dc:	dd02      	ble.n	2144e4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
  2144de:	9a01      	ldr	r2, [sp, #4]
  2144e0:	2a00      	cmp	r2, #0
  2144e2:	d03c      	beq.n	21455e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x120>
  2144e4:	68e1      	ldr	r1, [r4, #12]
  2144e6:	b9c1      	cbnz	r1, 21451a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xdc>
  2144e8:	ab04      	add	r3, sp, #16
  2144ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  2144ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  2144f0:	7923      	ldrb	r3, [r4, #4]
  2144f2:	2b03      	cmp	r3, #3
  2144f4:	dd05      	ble.n	214502 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc4>
  2144f6:	079a      	lsls	r2, r3, #30
  2144f8:	d509      	bpl.n	21450e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd0>
  2144fa:	68bb      	ldr	r3, [r7, #8]
  2144fc:	f013 0f01 	tst.w	r3, #1
  214500:	d11a      	bne.n	214538 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfa>
  214502:	4628      	mov	r0, r5
  214504:	b009      	add	sp, #36	; 0x24
  214506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  21450a:	4652      	mov	r2, sl
  21450c:	e7d3      	b.n	2144b6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x78>
  21450e:	07db      	lsls	r3, r3, #31
  214510:	d5f7      	bpl.n	214502 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc4>
  214512:	68bb      	ldr	r3, [r7, #8]
  214514:	f013 0f02 	tst.w	r3, #2
  214518:	e7f2      	b.n	214500 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc2>
  21451a:	6823      	ldr	r3, [r4, #0]
  21451c:	9a04      	ldr	r2, [sp, #16]
  21451e:	4293      	cmp	r3, r2
  214520:	d004      	beq.n	21452c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xee>
  214522:	2300      	movs	r3, #0
  214524:	6023      	str	r3, [r4, #0]
  214526:	2302      	movs	r3, #2
  214528:	7123      	strb	r3, [r4, #4]
  21452a:	e7ea      	b.n	214502 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc4>
  21452c:	b143      	cbz	r3, 214540 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x102>
  21452e:	7923      	ldrb	r3, [r4, #4]
  214530:	f89d 2014 	ldrb.w	r2, [sp, #20]
  214534:	4313      	orrs	r3, r2
  214536:	7123      	strb	r3, [r4, #4]
  214538:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  21453c:	3e08      	subs	r6, #8
  21453e:	e79a      	b.n	214476 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
  214540:	9807      	ldr	r0, [sp, #28]
  214542:	2808      	cmp	r0, #8
  214544:	d0ef      	beq.n	214526 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe8>
  214546:	2908      	cmp	r1, #8
  214548:	d0ed      	beq.n	214526 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe8>
  21454a:	f000 fbd7 	bl	214cfc <_ZNKSt9type_infoeqERKS_>
  21454e:	2800      	cmp	r0, #0
  214550:	d1ed      	bne.n	21452e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
  214552:	e7e8      	b.n	214526 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe8>
  214554:	7925      	ldrb	r5, [r4, #4]
  214556:	3500      	adds	r5, #0
  214558:	bf18      	it	ne
  21455a:	2501      	movne	r5, #1
  21455c:	e7d1      	b.n	214502 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xc4>
  21455e:	f023 0302 	bic.w	r3, r3, #2
  214562:	f88d 3014 	strb.w	r3, [sp, #20]
  214566:	e7bd      	b.n	2144e4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>

00214568 <__cxa_end_cleanup>:
  214568:	b41e      	push	{r1, r2, r3, r4}
  21456a:	f000 f89c 	bl	2146a6 <__gnu_end_cleanup>
  21456e:	bc1e      	pop	{r1, r2, r3, r4}
  214570:	f7ed f9f8 	bl	201964 <_Unwind_Resume>

00214574 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
  214574:	7803      	ldrb	r3, [r0, #0]
  214576:	2b47      	cmp	r3, #71	; 0x47
  214578:	d117      	bne.n	2145aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  21457a:	7843      	ldrb	r3, [r0, #1]
  21457c:	2b4e      	cmp	r3, #78	; 0x4e
  21457e:	d114      	bne.n	2145aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214580:	7883      	ldrb	r3, [r0, #2]
  214582:	2b55      	cmp	r3, #85	; 0x55
  214584:	d111      	bne.n	2145aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214586:	78c3      	ldrb	r3, [r0, #3]
  214588:	2b43      	cmp	r3, #67	; 0x43
  21458a:	d10e      	bne.n	2145aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  21458c:	7903      	ldrb	r3, [r0, #4]
  21458e:	2b43      	cmp	r3, #67	; 0x43
  214590:	d10b      	bne.n	2145aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214592:	7943      	ldrb	r3, [r0, #5]
  214594:	2b2b      	cmp	r3, #43	; 0x2b
  214596:	d108      	bne.n	2145aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214598:	7983      	ldrb	r3, [r0, #6]
  21459a:	2b2b      	cmp	r3, #43	; 0x2b
  21459c:	d105      	bne.n	2145aa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  21459e:	79c0      	ldrb	r0, [r0, #7]
  2145a0:	2801      	cmp	r0, #1
  2145a2:	bf8c      	ite	hi
  2145a4:	2000      	movhi	r0, #0
  2145a6:	2001      	movls	r0, #1
  2145a8:	4770      	bx	lr
  2145aa:	2000      	movs	r0, #0
  2145ac:	4770      	bx	lr
	...

002145b0 <__cxa_type_match>:
  2145b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  2145b4:	461e      	mov	r6, r3
  2145b6:	7803      	ldrb	r3, [r0, #0]
  2145b8:	2b47      	cmp	r3, #71	; 0x47
  2145ba:	460d      	mov	r5, r1
  2145bc:	4602      	mov	r2, r0
  2145be:	79c1      	ldrb	r1, [r0, #7]
  2145c0:	d148      	bne.n	214654 <__cxa_type_match+0xa4>
  2145c2:	7843      	ldrb	r3, [r0, #1]
  2145c4:	2b4e      	cmp	r3, #78	; 0x4e
  2145c6:	d145      	bne.n	214654 <__cxa_type_match+0xa4>
  2145c8:	7883      	ldrb	r3, [r0, #2]
  2145ca:	2b55      	cmp	r3, #85	; 0x55
  2145cc:	d142      	bne.n	214654 <__cxa_type_match+0xa4>
  2145ce:	78c3      	ldrb	r3, [r0, #3]
  2145d0:	2b43      	cmp	r3, #67	; 0x43
  2145d2:	d13f      	bne.n	214654 <__cxa_type_match+0xa4>
  2145d4:	7903      	ldrb	r3, [r0, #4]
  2145d6:	2b46      	cmp	r3, #70	; 0x46
  2145d8:	d13c      	bne.n	214654 <__cxa_type_match+0xa4>
  2145da:	7943      	ldrb	r3, [r0, #5]
  2145dc:	2b4f      	cmp	r3, #79	; 0x4f
  2145de:	d139      	bne.n	214654 <__cxa_type_match+0xa4>
  2145e0:	7983      	ldrb	r3, [r0, #6]
  2145e2:	2b52      	cmp	r3, #82	; 0x52
  2145e4:	d136      	bne.n	214654 <__cxa_type_match+0xa4>
  2145e6:	2900      	cmp	r1, #0
  2145e8:	d134      	bne.n	214654 <__cxa_type_match+0xa4>
  2145ea:	2301      	movs	r3, #1
  2145ec:	4608      	mov	r0, r1
  2145ee:	2400      	movs	r4, #0
  2145f0:	9401      	str	r4, [sp, #4]
  2145f2:	bb3b      	cbnz	r3, 214644 <__cxa_type_match+0x94>
  2145f4:	bb40      	cbnz	r0, 214648 <__cxa_type_match+0x98>
  2145f6:	2901      	cmp	r1, #1
  2145f8:	bf0a      	itet	eq
  2145fa:	f852 3c20 	ldreq.w	r3, [r2, #-32]
  2145fe:	f1a2 0320 	subne.w	r3, r2, #32
  214602:	3b78      	subeq	r3, #120	; 0x78
  214604:	2901      	cmp	r1, #1
  214606:	bf08      	it	eq
  214608:	f852 2c20 	ldreq.w	r2, [r2, #-32]
  21460c:	681c      	ldr	r4, [r3, #0]
  21460e:	bf18      	it	ne
  214610:	3258      	addne	r2, #88	; 0x58
  214612:	9201      	str	r2, [sp, #4]
  214614:	6823      	ldr	r3, [r4, #0]
  214616:	4620      	mov	r0, r4
  214618:	689b      	ldr	r3, [r3, #8]
  21461a:	4798      	blx	r3
  21461c:	b1b0      	cbz	r0, 21464c <__cxa_type_match+0x9c>
  21461e:	9b01      	ldr	r3, [sp, #4]
  214620:	681b      	ldr	r3, [r3, #0]
  214622:	9301      	str	r3, [sp, #4]
  214624:	2702      	movs	r7, #2
  214626:	682b      	ldr	r3, [r5, #0]
  214628:	aa01      	add	r2, sp, #4
  21462a:	f8d3 8010 	ldr.w	r8, [r3, #16]
  21462e:	4621      	mov	r1, r4
  214630:	2301      	movs	r3, #1
  214632:	4628      	mov	r0, r5
  214634:	47c0      	blx	r8
  214636:	b158      	cbz	r0, 214650 <__cxa_type_match+0xa0>
  214638:	9b01      	ldr	r3, [sp, #4]
  21463a:	6033      	str	r3, [r6, #0]
  21463c:	4638      	mov	r0, r7
  21463e:	b002      	add	sp, #8
  214640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  214644:	4c07      	ldr	r4, [pc, #28]	; (214664 <__cxa_type_match+0xb4>)
  214646:	e7e5      	b.n	214614 <__cxa_type_match+0x64>
  214648:	4c07      	ldr	r4, [pc, #28]	; (214668 <__cxa_type_match+0xb8>)
  21464a:	e7e3      	b.n	214614 <__cxa_type_match+0x64>
  21464c:	2701      	movs	r7, #1
  21464e:	e7ea      	b.n	214626 <__cxa_type_match+0x76>
  214650:	4607      	mov	r7, r0
  214652:	e7f3      	b.n	21463c <__cxa_type_match+0x8c>
  214654:	4610      	mov	r0, r2
  214656:	f7ff ff8d 	bl	214574 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
  21465a:	f080 0001 	eor.w	r0, r0, #1
  21465e:	b2c0      	uxtb	r0, r0
  214660:	2300      	movs	r3, #0
  214662:	e7c4      	b.n	2145ee <__cxa_type_match+0x3e>
  214664:	00218770 	.word	0x00218770
  214668:	00218778 	.word	0x00218778

0021466c <__cxa_begin_cleanup>:
  21466c:	b510      	push	{r4, lr}
  21466e:	4604      	mov	r4, r0
  214670:	f000 fcae 	bl	214fd0 <__cxa_get_globals>
  214674:	4602      	mov	r2, r0
  214676:	4620      	mov	r0, r4
  214678:	f1a4 0120 	sub.w	r1, r4, #32
  21467c:	f7ff ff7a 	bl	214574 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
  214680:	b160      	cbz	r0, 21469c <__cxa_begin_cleanup+0x30>
  214682:	f854 3c04 	ldr.w	r3, [r4, #-4]
  214686:	3301      	adds	r3, #1
  214688:	2b01      	cmp	r3, #1
  21468a:	f844 3c04 	str.w	r3, [r4, #-4]
  21468e:	d103      	bne.n	214698 <__cxa_begin_cleanup+0x2c>
  214690:	6893      	ldr	r3, [r2, #8]
  214692:	f844 3c08 	str.w	r3, [r4, #-8]
  214696:	6091      	str	r1, [r2, #8]
  214698:	2001      	movs	r0, #1
  21469a:	bd10      	pop	{r4, pc}
  21469c:	6893      	ldr	r3, [r2, #8]
  21469e:	2b00      	cmp	r3, #0
  2146a0:	d0f9      	beq.n	214696 <__cxa_begin_cleanup+0x2a>
  2146a2:	f7ff fcfb 	bl	21409c <_ZSt9terminatev>

002146a6 <__gnu_end_cleanup>:
  2146a6:	b510      	push	{r4, lr}
  2146a8:	f000 fc92 	bl	214fd0 <__cxa_get_globals>
  2146ac:	6882      	ldr	r2, [r0, #8]
  2146ae:	4601      	mov	r1, r0
  2146b0:	b90a      	cbnz	r2, 2146b6 <__gnu_end_cleanup+0x10>
  2146b2:	f7ff fcf3 	bl	21409c <_ZSt9terminatev>
  2146b6:	f102 0420 	add.w	r4, r2, #32
  2146ba:	4620      	mov	r0, r4
  2146bc:	f7ff ff5a 	bl	214574 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
  2146c0:	b140      	cbz	r0, 2146d4 <__gnu_end_cleanup+0x2e>
  2146c2:	69d3      	ldr	r3, [r2, #28]
  2146c4:	3b01      	subs	r3, #1
  2146c6:	61d3      	str	r3, [r2, #28]
  2146c8:	b913      	cbnz	r3, 2146d0 <__gnu_end_cleanup+0x2a>
  2146ca:	6990      	ldr	r0, [r2, #24]
  2146cc:	6088      	str	r0, [r1, #8]
  2146ce:	6193      	str	r3, [r2, #24]
  2146d0:	4620      	mov	r0, r4
  2146d2:	bd10      	pop	{r4, pc}
  2146d4:	6088      	str	r0, [r1, #8]
  2146d6:	e7fb      	b.n	2146d0 <__gnu_end_cleanup+0x2a>

002146d8 <_ZL12read_uleb128PKhPm>:
  2146d8:	b570      	push	{r4, r5, r6, lr}
  2146da:	2300      	movs	r3, #0
  2146dc:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
  2146e0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
  2146e4:	f810 5b01 	ldrb.w	r5, [r0], #1
  2146e8:	1994      	adds	r4, r2, r6
  2146ea:	f005 027f 	and.w	r2, r5, #127	; 0x7f
  2146ee:	40a2      	lsls	r2, r4
  2146f0:	4313      	orrs	r3, r2
  2146f2:	062a      	lsls	r2, r5, #24
  2146f4:	d4f4      	bmi.n	2146e0 <_ZL12read_uleb128PKhPm+0x8>
  2146f6:	600b      	str	r3, [r1, #0]
  2146f8:	bd70      	pop	{r4, r5, r6, pc}

002146fa <_ZL12read_sleb128PKhPl>:
  2146fa:	b530      	push	{r4, r5, lr}
  2146fc:	2300      	movs	r3, #0
  2146fe:	461a      	mov	r2, r3
  214700:	f810 4b01 	ldrb.w	r4, [r0], #1
  214704:	f004 057f 	and.w	r5, r4, #127	; 0x7f
  214708:	4095      	lsls	r5, r2
  21470a:	432b      	orrs	r3, r5
  21470c:	0625      	lsls	r5, r4, #24
  21470e:	f102 0207 	add.w	r2, r2, #7
  214712:	d4f5      	bmi.n	214700 <_ZL12read_sleb128PKhPl+0x6>
  214714:	2a1f      	cmp	r2, #31
  214716:	d806      	bhi.n	214726 <_ZL12read_sleb128PKhPl+0x2c>
  214718:	0664      	lsls	r4, r4, #25
  21471a:	bf42      	ittt	mi
  21471c:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
  214720:	fa04 f202 	lslmi.w	r2, r4, r2
  214724:	4313      	orrmi	r3, r2
  214726:	600b      	str	r3, [r1, #0]
  214728:	bd30      	pop	{r4, r5, pc}

0021472a <_ZL28read_encoded_value_with_basehjPKhPj>:
  21472a:	2850      	cmp	r0, #80	; 0x50
  21472c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  21472e:	4605      	mov	r5, r0
  214730:	460e      	mov	r6, r1
  214732:	4614      	mov	r4, r2
  214734:	461f      	mov	r7, r3
  214736:	d107      	bne.n	214748 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
  214738:	1cd0      	adds	r0, r2, #3
  21473a:	f020 0003 	bic.w	r0, r0, #3
  21473e:	f850 3b04 	ldr.w	r3, [r0], #4
  214742:	603b      	str	r3, [r7, #0]
  214744:	b003      	add	sp, #12
  214746:	bdf0      	pop	{r4, r5, r6, r7, pc}
  214748:	f000 030f 	and.w	r3, r0, #15
  21474c:	2b0c      	cmp	r3, #12
  21474e:	d82e      	bhi.n	2147ae <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
  214750:	e8df f003 	tbb	[pc, r3]
  214754:	251d0725 	.word	0x251d0725
  214758:	2d2d2d29 	.word	0x2d2d2d29
  21475c:	2521182d 	.word	0x2521182d
  214760:	29          	.byte	0x29
  214761:	00          	.byte	0x00
  214762:	a901      	add	r1, sp, #4
  214764:	4620      	mov	r0, r4
  214766:	f7ff ffb7 	bl	2146d8 <_ZL12read_uleb128PKhPm>
  21476a:	9b01      	ldr	r3, [sp, #4]
  21476c:	2b00      	cmp	r3, #0
  21476e:	d0e8      	beq.n	214742 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
  214770:	f005 0270 	and.w	r2, r5, #112	; 0x70
  214774:	2a10      	cmp	r2, #16
  214776:	bf08      	it	eq
  214778:	4626      	moveq	r6, r4
  21477a:	4433      	add	r3, r6
  21477c:	062a      	lsls	r2, r5, #24
  21477e:	bf48      	it	mi
  214780:	681b      	ldrmi	r3, [r3, #0]
  214782:	e7de      	b.n	214742 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
  214784:	a901      	add	r1, sp, #4
  214786:	4620      	mov	r0, r4
  214788:	f7ff ffb7 	bl	2146fa <_ZL12read_sleb128PKhPl>
  21478c:	e7ed      	b.n	21476a <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
  21478e:	4620      	mov	r0, r4
  214790:	f830 3b02 	ldrh.w	r3, [r0], #2
  214794:	e7ea      	b.n	21476c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
  214796:	4620      	mov	r0, r4
  214798:	f930 3b02 	ldrsh.w	r3, [r0], #2
  21479c:	e7e6      	b.n	21476c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
  21479e:	4620      	mov	r0, r4
  2147a0:	f850 3b04 	ldr.w	r3, [r0], #4
  2147a4:	e7e2      	b.n	21476c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
  2147a6:	4620      	mov	r0, r4
  2147a8:	f850 3b08 	ldr.w	r3, [r0], #8
  2147ac:	e7de      	b.n	21476c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
  2147ae:	f001 ffed 	bl	21678c <abort>

002147b2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
  2147b2:	b508      	push	{r3, lr}
  2147b4:	4603      	mov	r3, r0
  2147b6:	2bff      	cmp	r3, #255	; 0xff
  2147b8:	4608      	mov	r0, r1
  2147ba:	d007      	beq.n	2147cc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
  2147bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  2147c0:	2b20      	cmp	r3, #32
  2147c2:	d00d      	beq.n	2147e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
  2147c4:	d804      	bhi.n	2147d0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
  2147c6:	b10b      	cbz	r3, 2147cc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
  2147c8:	2b10      	cmp	r3, #16
  2147ca:	d107      	bne.n	2147dc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
  2147cc:	2000      	movs	r0, #0
  2147ce:	bd08      	pop	{r3, pc}
  2147d0:	2b40      	cmp	r3, #64	; 0x40
  2147d2:	d00d      	beq.n	2147f0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
  2147d4:	2b50      	cmp	r3, #80	; 0x50
  2147d6:	d0f9      	beq.n	2147cc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
  2147d8:	2b30      	cmp	r3, #48	; 0x30
  2147da:	d005      	beq.n	2147e8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
  2147dc:	f001 ffd6 	bl	21678c <abort>
  2147e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  2147e4:	f7ed babe 	b.w	201d64 <_Unwind_GetTextRelBase>
  2147e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  2147ec:	f7ed babe 	b.w	201d6c <_Unwind_GetDataRelBase>
  2147f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  2147f4:	f7ed baa6 	b.w	201d44 <_Unwind_GetRegionStart>

002147f8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
  2147f8:	b570      	push	{r4, r5, r6, lr}
  2147fa:	460c      	mov	r4, r1
  2147fc:	4601      	mov	r1, r0
  2147fe:	4620      	mov	r0, r4
  214800:	4615      	mov	r5, r2
  214802:	461e      	mov	r6, r3
  214804:	f7ff ffd5 	bl	2147b2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  214808:	4633      	mov	r3, r6
  21480a:	462a      	mov	r2, r5
  21480c:	4601      	mov	r1, r0
  21480e:	4620      	mov	r0, r4
  214810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  214814:	f7ff bf89 	b.w	21472a <_ZL28read_encoded_value_with_basehjPKhPj>

00214818 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
  214818:	b573      	push	{r0, r1, r4, r5, r6, lr}
  21481a:	460e      	mov	r6, r1
  21481c:	4614      	mov	r4, r2
  21481e:	4605      	mov	r5, r0
  214820:	b328      	cbz	r0, 21486e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
  214822:	f7ed fa8f 	bl	201d44 <_Unwind_GetRegionStart>
  214826:	6020      	str	r0, [r4, #0]
  214828:	7831      	ldrb	r1, [r6, #0]
  21482a:	29ff      	cmp	r1, #255	; 0xff
  21482c:	f106 0201 	add.w	r2, r6, #1
  214830:	d01e      	beq.n	214870 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
  214832:	1d23      	adds	r3, r4, #4
  214834:	4628      	mov	r0, r5
  214836:	f7ff ffdf 	bl	2147f8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
  21483a:	4602      	mov	r2, r0
  21483c:	7813      	ldrb	r3, [r2, #0]
  21483e:	7523      	strb	r3, [r4, #20]
  214840:	2bff      	cmp	r3, #255	; 0xff
  214842:	f102 0001 	add.w	r0, r2, #1
  214846:	d015      	beq.n	214874 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
  214848:	2310      	movs	r3, #16
  21484a:	7523      	strb	r3, [r4, #20]
  21484c:	a901      	add	r1, sp, #4
  21484e:	f7ff ff43 	bl	2146d8 <_ZL12read_uleb128PKhPm>
  214852:	9b01      	ldr	r3, [sp, #4]
  214854:	4403      	add	r3, r0
  214856:	60e3      	str	r3, [r4, #12]
  214858:	7803      	ldrb	r3, [r0, #0]
  21485a:	7563      	strb	r3, [r4, #21]
  21485c:	a901      	add	r1, sp, #4
  21485e:	3001      	adds	r0, #1
  214860:	f7ff ff3a 	bl	2146d8 <_ZL12read_uleb128PKhPm>
  214864:	9b01      	ldr	r3, [sp, #4]
  214866:	4403      	add	r3, r0
  214868:	6123      	str	r3, [r4, #16]
  21486a:	b002      	add	sp, #8
  21486c:	bd70      	pop	{r4, r5, r6, pc}
  21486e:	e7da      	b.n	214826 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
  214870:	6060      	str	r0, [r4, #4]
  214872:	e7e3      	b.n	21483c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
  214874:	2300      	movs	r3, #0
  214876:	e7ee      	b.n	214856 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

00214878 <_Unwind_GetGR>:
  214878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  21487a:	ab03      	add	r3, sp, #12
  21487c:	9300      	str	r3, [sp, #0]
  21487e:	2300      	movs	r3, #0
  214880:	460a      	mov	r2, r1
  214882:	4619      	mov	r1, r3
  214884:	f7ec fcc8 	bl	201218 <_Unwind_VRS_Get>
  214888:	9803      	ldr	r0, [sp, #12]
  21488a:	b005      	add	sp, #20
  21488c:	f85d fb04 	ldr.w	pc, [sp], #4

00214890 <__gxx_personality_v0>:
  214890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  214894:	b091      	sub	sp, #68	; 0x44
  214896:	2300      	movs	r3, #0
  214898:	9304      	str	r3, [sp, #16]
  21489a:	f000 0303 	and.w	r3, r0, #3
  21489e:	2b01      	cmp	r3, #1
  2148a0:	4607      	mov	r7, r0
  2148a2:	460c      	mov	r4, r1
  2148a4:	4616      	mov	r6, r2
  2148a6:	d011      	beq.n	2148cc <__gxx_personality_v0+0x3c>
  2148a8:	d303      	bcc.n	2148b2 <__gxx_personality_v0+0x22>
  2148aa:	2b02      	cmp	r3, #2
  2148ac:	d003      	beq.n	2148b6 <__gxx_personality_v0+0x26>
  2148ae:	f001 ff6d 	bl	21678c <abort>
  2148b2:	0702      	lsls	r2, r0, #28
  2148b4:	d51a      	bpl.n	2148ec <__gxx_personality_v0+0x5c>
  2148b6:	4631      	mov	r1, r6
  2148b8:	4620      	mov	r0, r4
  2148ba:	f7ed fa2f 	bl	201d1c <__gnu_unwind_frame>
  2148be:	b118      	cbz	r0, 2148c8 <__gxx_personality_v0+0x38>
  2148c0:	2009      	movs	r0, #9
  2148c2:	b011      	add	sp, #68	; 0x44
  2148c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  2148c8:	2008      	movs	r0, #8
  2148ca:	e7fa      	b.n	2148c2 <__gxx_personality_v0+0x32>
  2148cc:	f000 0508 	and.w	r5, r0, #8
  2148d0:	f005 08ff 	and.w	r8, r5, #255	; 0xff
  2148d4:	bb85      	cbnz	r5, 214938 <__gxx_personality_v0+0xa8>
  2148d6:	f8d1 9020 	ldr.w	r9, [r1, #32]
  2148da:	4610      	mov	r0, r2
  2148dc:	210d      	movs	r1, #13
  2148de:	f7ff ffcb 	bl	214878 <_Unwind_GetGR>
  2148e2:	4581      	cmp	r9, r0
  2148e4:	f040 8140 	bne.w	214b68 <__gxx_personality_v0+0x2d8>
  2148e8:	2506      	movs	r5, #6
  2148ea:	e000      	b.n	2148ee <__gxx_personality_v0+0x5e>
  2148ec:	2501      	movs	r5, #1
  2148ee:	ab10      	add	r3, sp, #64	; 0x40
  2148f0:	f007 0708 	and.w	r7, r7, #8
  2148f4:	f843 4d2c 	str.w	r4, [r3, #-44]!
  2148f8:	9300      	str	r3, [sp, #0]
  2148fa:	2300      	movs	r3, #0
  2148fc:	433d      	orrs	r5, r7
  2148fe:	220c      	movs	r2, #12
  214900:	4619      	mov	r1, r3
  214902:	4630      	mov	r0, r6
  214904:	f7ec fcae 	bl	201264 <_Unwind_VRS_Set>
  214908:	2d06      	cmp	r5, #6
  21490a:	f040 8139 	bne.w	214b80 <__gxx_personality_v0+0x2f0>
  21490e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
  214912:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  214914:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  214916:	f1b8 0f00 	cmp.w	r8, #0
  21491a:	bf0c      	ite	eq
  21491c:	f04f 0a01 	moveq.w	sl, #1
  214920:	f04f 0a03 	movne.w	sl, #3
  214924:	f015 0508 	ands.w	r5, r5, #8
  214928:	f000 80ce 	beq.w	214ac8 <__gxx_personality_v0+0x238>
  21492c:	f1ba 0f01 	cmp.w	sl, #1
  214930:	f040 80c6 	bne.w	214ac0 <__gxx_personality_v0+0x230>
  214934:	f7ff fbb2 	bl	21409c <_ZSt9terminatev>
  214938:	2502      	movs	r5, #2
  21493a:	e7d8      	b.n	2148ee <__gxx_personality_v0+0x5e>
  21493c:	9a07      	ldr	r2, [sp, #28]
  21493e:	4413      	add	r3, r2
  214940:	429f      	cmp	r7, r3
  214942:	f080 8137 	bcs.w	214bb4 <__gxx_personality_v0+0x324>
  214946:	f8dd 8020 	ldr.w	r8, [sp, #32]
  21494a:	f1b8 0f00 	cmp.w	r8, #0
  21494e:	d001      	beq.n	214954 <__gxx_personality_v0+0xc4>
  214950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  214952:	4498      	add	r8, r3
  214954:	9f09      	ldr	r7, [sp, #36]	; 0x24
  214956:	b117      	cbz	r7, 21495e <__gxx_personality_v0+0xce>
  214958:	1e78      	subs	r0, r7, #1
  21495a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  21495c:	4407      	add	r7, r0
  21495e:	f1b8 0f00 	cmp.w	r8, #0
  214962:	d0a8      	beq.n	2148b6 <__gxx_personality_v0+0x26>
  214964:	2f00      	cmp	r7, #0
  214966:	f000 80a1 	beq.w	214aac <__gxx_personality_v0+0x21c>
  21496a:	f015 0308 	ands.w	r3, r5, #8
  21496e:	9302      	str	r3, [sp, #8]
  214970:	d036      	beq.n	2149e0 <__gxx_personality_v0+0x150>
  214972:	2347      	movs	r3, #71	; 0x47
  214974:	7023      	strb	r3, [r4, #0]
  214976:	234e      	movs	r3, #78	; 0x4e
  214978:	7063      	strb	r3, [r4, #1]
  21497a:	2355      	movs	r3, #85	; 0x55
  21497c:	70a3      	strb	r3, [r4, #2]
  21497e:	2343      	movs	r3, #67	; 0x43
  214980:	70e3      	strb	r3, [r4, #3]
  214982:	2346      	movs	r3, #70	; 0x46
  214984:	7123      	strb	r3, [r4, #4]
  214986:	234f      	movs	r3, #79	; 0x4f
  214988:	7163      	strb	r3, [r4, #5]
  21498a:	2352      	movs	r3, #82	; 0x52
  21498c:	71a3      	strb	r3, [r4, #6]
  21498e:	2300      	movs	r3, #0
  214990:	71e3      	strb	r3, [r4, #7]
  214992:	f04f 0a00 	mov.w	sl, #0
  214996:	f06f 0b03 	mvn.w	fp, #3
  21499a:	a907      	add	r1, sp, #28
  21499c:	4638      	mov	r0, r7
  21499e:	f7ff feac 	bl	2146fa <_ZL12read_sleb128PKhPl>
  2149a2:	a908      	add	r1, sp, #32
  2149a4:	9003      	str	r0, [sp, #12]
  2149a6:	f7ff fea8 	bl	2146fa <_ZL12read_sleb128PKhPl>
  2149aa:	9a07      	ldr	r2, [sp, #28]
  2149ac:	2a00      	cmp	r2, #0
  2149ae:	d076      	beq.n	214a9e <__gxx_personality_v0+0x20e>
  2149b0:	dd3d      	ble.n	214a2e <__gxx_personality_v0+0x19e>
  2149b2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
  2149b6:	28ff      	cmp	r0, #255	; 0xff
  2149b8:	d035      	beq.n	214a26 <__gxx_personality_v0+0x196>
  2149ba:	f000 0307 	and.w	r3, r0, #7
  2149be:	2b04      	cmp	r3, #4
  2149c0:	f63f af75 	bhi.w	2148ae <__gxx_personality_v0+0x1e>
  2149c4:	a101      	add	r1, pc, #4	; (adr r1, 2149cc <__gxx_personality_v0+0x13c>)
  2149c6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  2149ca:	bf00      	nop
  2149cc:	00214a2b 	.word	0x00214a2b
  2149d0:	002148af 	.word	0x002148af
  2149d4:	002149f3 	.word	0x002149f3
  2149d8:	00214a2b 	.word	0x00214a2b
  2149dc:	00214a23 	.word	0x00214a23
  2149e0:	79e3      	ldrb	r3, [r4, #7]
  2149e2:	2b01      	cmp	r3, #1
  2149e4:	bf0c      	ite	eq
  2149e6:	f854 3c20 	ldreq.w	r3, [r4, #-32]
  2149ea:	f104 0358 	addne.w	r3, r4, #88	; 0x58
  2149ee:	9304      	str	r3, [sp, #16]
  2149f0:	e7cf      	b.n	214992 <__gxx_personality_v0+0x102>
  2149f2:	2702      	movs	r7, #2
  2149f4:	990d      	ldr	r1, [sp, #52]	; 0x34
  2149f6:	ab09      	add	r3, sp, #36	; 0x24
  2149f8:	fb07 1212 	mls	r2, r7, r2, r1
  2149fc:	990c      	ldr	r1, [sp, #48]	; 0x30
  2149fe:	f7ff fe94 	bl	21472a <_ZL28read_encoded_value_with_basehjPKhPj>
  214a02:	9909      	ldr	r1, [sp, #36]	; 0x24
  214a04:	b369      	cbz	r1, 214a62 <__gxx_personality_v0+0x1d2>
  214a06:	b12c      	cbz	r4, 214a14 <__gxx_personality_v0+0x184>
  214a08:	ab04      	add	r3, sp, #16
  214a0a:	2200      	movs	r2, #0
  214a0c:	4620      	mov	r0, r4
  214a0e:	f7ff fdcf 	bl	2145b0 <__cxa_type_match>
  214a12:	bb30      	cbnz	r0, 214a62 <__gxx_personality_v0+0x1d2>
  214a14:	9f08      	ldr	r7, [sp, #32]
  214a16:	2f00      	cmp	r7, #0
  214a18:	d044      	beq.n	214aa4 <__gxx_personality_v0+0x214>
  214a1a:	9b03      	ldr	r3, [sp, #12]
  214a1c:	443b      	add	r3, r7
  214a1e:	461f      	mov	r7, r3
  214a20:	e7bb      	b.n	21499a <__gxx_personality_v0+0x10a>
  214a22:	2708      	movs	r7, #8
  214a24:	e7e6      	b.n	2149f4 <__gxx_personality_v0+0x164>
  214a26:	2700      	movs	r7, #0
  214a28:	e7e4      	b.n	2149f4 <__gxx_personality_v0+0x164>
  214a2a:	2704      	movs	r7, #4
  214a2c:	e7e2      	b.n	2149f4 <__gxx_personality_v0+0x164>
  214a2e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  214a30:	3201      	adds	r2, #1
  214a32:	b36c      	cbz	r4, 214a90 <__gxx_personality_v0+0x200>
  214a34:	9b02      	ldr	r3, [sp, #8]
  214a36:	bb5b      	cbnz	r3, 214a90 <__gxx_personality_v0+0x200>
  214a38:	9b04      	ldr	r3, [sp, #16]
  214a3a:	9306      	str	r3, [sp, #24]
  214a3c:	fb0b 7202 	mla	r2, fp, r2, r7
  214a40:	1f17      	subs	r7, r2, #4
  214a42:	f857 1f04 	ldr.w	r1, [r7, #4]!
  214a46:	b141      	cbz	r1, 214a5a <__gxx_personality_v0+0x1ca>
  214a48:	ab06      	add	r3, sp, #24
  214a4a:	2200      	movs	r2, #0
  214a4c:	4439      	add	r1, r7
  214a4e:	4620      	mov	r0, r4
  214a50:	f7ff fdae 	bl	2145b0 <__cxa_type_match>
  214a54:	2800      	cmp	r0, #0
  214a56:	d0f4      	beq.n	214a42 <__gxx_personality_v0+0x1b2>
  214a58:	2101      	movs	r1, #1
  214a5a:	f081 0101 	eor.w	r1, r1, #1
  214a5e:	2900      	cmp	r1, #0
  214a60:	d0d8      	beq.n	214a14 <__gxx_personality_v0+0x184>
  214a62:	9f07      	ldr	r7, [sp, #28]
  214a64:	f04f 0a03 	mov.w	sl, #3
  214a68:	07eb      	lsls	r3, r5, #31
  214a6a:	d527      	bpl.n	214abc <__gxx_personality_v0+0x22c>
  214a6c:	f1ba 0f02 	cmp.w	sl, #2
  214a70:	f43f af21 	beq.w	2148b6 <__gxx_personality_v0+0x26>
  214a74:	210d      	movs	r1, #13
  214a76:	4630      	mov	r0, r6
  214a78:	9d04      	ldr	r5, [sp, #16]
  214a7a:	f7ff fefd 	bl	214878 <_Unwind_GetGR>
  214a7e:	6265      	str	r5, [r4, #36]	; 0x24
  214a80:	6220      	str	r0, [r4, #32]
  214a82:	62a7      	str	r7, [r4, #40]	; 0x28
  214a84:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
  214a88:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  214a8c:	2006      	movs	r0, #6
  214a8e:	e718      	b.n	2148c2 <__gxx_personality_v0+0x32>
  214a90:	fb0b f202 	mul.w	r2, fp, r2
  214a94:	58b9      	ldr	r1, [r7, r2]
  214a96:	fab1 f181 	clz	r1, r1
  214a9a:	0949      	lsrs	r1, r1, #5
  214a9c:	e7df      	b.n	214a5e <__gxx_personality_v0+0x1ce>
  214a9e:	f04f 0a01 	mov.w	sl, #1
  214aa2:	e7b7      	b.n	214a14 <__gxx_personality_v0+0x184>
  214aa4:	f1ba 0f00 	cmp.w	sl, #0
  214aa8:	f43f af05 	beq.w	2148b6 <__gxx_personality_v0+0x26>
  214aac:	f04f 0a02 	mov.w	sl, #2
  214ab0:	e7da      	b.n	214a68 <__gxx_personality_v0+0x1d8>
  214ab2:	2700      	movs	r7, #0
  214ab4:	46b8      	mov	r8, r7
  214ab6:	f04f 0a01 	mov.w	sl, #1
  214aba:	e7d5      	b.n	214a68 <__gxx_personality_v0+0x1d8>
  214abc:	4649      	mov	r1, r9
  214abe:	e731      	b.n	214924 <__gxx_personality_v0+0x94>
  214ac0:	2f00      	cmp	r7, #0
  214ac2:	da23      	bge.n	214b0c <__gxx_personality_v0+0x27c>
  214ac4:	f7ff fafc 	bl	2140c0 <_ZSt10unexpectedv>
  214ac8:	f1ba 0f01 	cmp.w	sl, #1
  214acc:	d102      	bne.n	214ad4 <__gxx_personality_v0+0x244>
  214ace:	4620      	mov	r0, r4
  214ad0:	f000 fa13 	bl	214efa <__cxa_call_terminate>
  214ad4:	2f00      	cmp	r7, #0
  214ad6:	da19      	bge.n	214b0c <__gxx_personality_v0+0x27c>
  214ad8:	aa0a      	add	r2, sp, #40	; 0x28
  214ada:	4630      	mov	r0, r6
  214adc:	f7ff fe9c 	bl	214818 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  214ae0:	4631      	mov	r1, r6
  214ae2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
  214ae6:	f7ff fe64 	bl	2147b2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  214aea:	f06f 0303 	mvn.w	r3, #3
  214aee:	fb07 3203 	mla	r2, r7, r3, r3
  214af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  214af4:	900c      	str	r0, [sp, #48]	; 0x30
  214af6:	4413      	add	r3, r2
  214af8:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
  214afc:	b10a      	cbz	r2, 214b02 <__gxx_personality_v0+0x272>
  214afe:	3501      	adds	r5, #1
  214b00:	e7fa      	b.n	214af8 <__gxx_personality_v0+0x268>
  214b02:	2204      	movs	r2, #4
  214b04:	62a5      	str	r5, [r4, #40]	; 0x28
  214b06:	62e0      	str	r0, [r4, #44]	; 0x2c
  214b08:	6322      	str	r2, [r4, #48]	; 0x30
  214b0a:	6363      	str	r3, [r4, #52]	; 0x34
  214b0c:	ab10      	add	r3, sp, #64	; 0x40
  214b0e:	4630      	mov	r0, r6
  214b10:	f843 4d1c 	str.w	r4, [r3, #-28]!
  214b14:	9300      	str	r3, [sp, #0]
  214b16:	2300      	movs	r3, #0
  214b18:	461a      	mov	r2, r3
  214b1a:	4619      	mov	r1, r3
  214b1c:	f7ec fba2 	bl	201264 <_Unwind_VRS_Set>
  214b20:	ab10      	add	r3, sp, #64	; 0x40
  214b22:	2201      	movs	r2, #1
  214b24:	f843 7d20 	str.w	r7, [r3, #-32]!
  214b28:	9300      	str	r3, [sp, #0]
  214b2a:	2300      	movs	r3, #0
  214b2c:	4619      	mov	r1, r3
  214b2e:	4630      	mov	r0, r6
  214b30:	f7ec fb98 	bl	201264 <_Unwind_VRS_Set>
  214b34:	210f      	movs	r1, #15
  214b36:	4630      	mov	r0, r6
  214b38:	f7ff fe9e 	bl	214878 <_Unwind_GetGR>
  214b3c:	ab10      	add	r3, sp, #64	; 0x40
  214b3e:	f000 0001 	and.w	r0, r0, #1
  214b42:	ea40 0008 	orr.w	r0, r0, r8
  214b46:	f843 0d24 	str.w	r0, [r3, #-36]!
  214b4a:	9300      	str	r3, [sp, #0]
  214b4c:	2300      	movs	r3, #0
  214b4e:	220f      	movs	r2, #15
  214b50:	4619      	mov	r1, r3
  214b52:	4630      	mov	r0, r6
  214b54:	f7ec fb86 	bl	201264 <_Unwind_VRS_Set>
  214b58:	f1ba 0f02 	cmp.w	sl, #2
  214b5c:	d102      	bne.n	214b64 <__gxx_personality_v0+0x2d4>
  214b5e:	4620      	mov	r0, r4
  214b60:	f7ff fd84 	bl	21466c <__cxa_begin_cleanup>
  214b64:	2007      	movs	r0, #7
  214b66:	e6ac      	b.n	2148c2 <__gxx_personality_v0+0x32>
  214b68:	aa10      	add	r2, sp, #64	; 0x40
  214b6a:	4643      	mov	r3, r8
  214b6c:	f842 4d2c 	str.w	r4, [r2, #-44]!
  214b70:	4641      	mov	r1, r8
  214b72:	9200      	str	r2, [sp, #0]
  214b74:	4630      	mov	r0, r6
  214b76:	220c      	movs	r2, #12
  214b78:	f045 0502 	orr.w	r5, r5, #2
  214b7c:	f7ec fb72 	bl	201264 <_Unwind_VRS_Set>
  214b80:	4630      	mov	r0, r6
  214b82:	f7ed f8e5 	bl	201d50 <_Unwind_GetLanguageSpecificData>
  214b86:	4681      	mov	r9, r0
  214b88:	2800      	cmp	r0, #0
  214b8a:	f43f ae94 	beq.w	2148b6 <__gxx_personality_v0+0x26>
  214b8e:	aa0a      	add	r2, sp, #40	; 0x28
  214b90:	4601      	mov	r1, r0
  214b92:	4630      	mov	r0, r6
  214b94:	f7ff fe40 	bl	214818 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
  214b98:	4631      	mov	r1, r6
  214b9a:	4680      	mov	r8, r0
  214b9c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
  214ba0:	f7ff fe07 	bl	2147b2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
  214ba4:	210f      	movs	r1, #15
  214ba6:	900c      	str	r0, [sp, #48]	; 0x30
  214ba8:	4630      	mov	r0, r6
  214baa:	f7ff fe65 	bl	214878 <_Unwind_GetGR>
  214bae:	f020 0001 	bic.w	r0, r0, #1
  214bb2:	1e47      	subs	r7, r0, #1
  214bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  214bb6:	4598      	cmp	r8, r3
  214bb8:	f4bf af7b 	bcs.w	214ab2 <__gxx_personality_v0+0x222>
  214bbc:	4642      	mov	r2, r8
  214bbe:	ab06      	add	r3, sp, #24
  214bc0:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
  214bc4:	2000      	movs	r0, #0
  214bc6:	f7ff fe17 	bl	2147f8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
  214bca:	ab07      	add	r3, sp, #28
  214bcc:	4602      	mov	r2, r0
  214bce:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
  214bd2:	2000      	movs	r0, #0
  214bd4:	f7ff fe10 	bl	2147f8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
  214bd8:	ab08      	add	r3, sp, #32
  214bda:	4602      	mov	r2, r0
  214bdc:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
  214be0:	2000      	movs	r0, #0
  214be2:	f7ff fe09 	bl	2147f8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
  214be6:	a909      	add	r1, sp, #36	; 0x24
  214be8:	f7ff fd76 	bl	2146d8 <_ZL12read_uleb128PKhPm>
  214bec:	9a06      	ldr	r2, [sp, #24]
  214bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  214bf0:	4413      	add	r3, r2
  214bf2:	429f      	cmp	r7, r3
  214bf4:	4680      	mov	r8, r0
  214bf6:	f4bf aea1 	bcs.w	21493c <__gxx_personality_v0+0xac>
  214bfa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  214bfe:	e7d9      	b.n	214bb4 <__gxx_personality_v0+0x324>

00214c00 <_ZdlPvj>:
  214c00:	f7ff ba33 	b.w	21406a <_ZdlPv>

00214c04 <_ZSt15get_new_handlerv>:
  214c04:	4b02      	ldr	r3, [pc, #8]	; (214c10 <_ZSt15get_new_handlerv+0xc>)
  214c06:	6818      	ldr	r0, [r3, #0]
  214c08:	f3bf 8f5b 	dmb	ish
  214c0c:	4770      	bx	lr
  214c0e:	bf00      	nop
  214c10:	200049cc 	.word	0x200049cc

00214c14 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
  214c14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  214c16:	2310      	movs	r3, #16
  214c18:	9302      	str	r3, [sp, #8]
  214c1a:	6803      	ldr	r3, [r0, #0]
  214c1c:	2400      	movs	r4, #0
  214c1e:	4615      	mov	r5, r2
  214c20:	699e      	ldr	r6, [r3, #24]
  214c22:	9400      	str	r4, [sp, #0]
  214c24:	466b      	mov	r3, sp
  214c26:	f88d 4004 	strb.w	r4, [sp, #4]
  214c2a:	9403      	str	r4, [sp, #12]
  214c2c:	6812      	ldr	r2, [r2, #0]
  214c2e:	47b0      	blx	r6
  214c30:	f89d 3004 	ldrb.w	r3, [sp, #4]
  214c34:	f003 0306 	and.w	r3, r3, #6
  214c38:	2b06      	cmp	r3, #6
  214c3a:	bf03      	ittte	eq
  214c3c:	9b00      	ldreq	r3, [sp, #0]
  214c3e:	602b      	streq	r3, [r5, #0]
  214c40:	2001      	moveq	r0, #1
  214c42:	4620      	movne	r0, r4
  214c44:	b004      	add	sp, #16
  214c46:	bd70      	pop	{r4, r5, r6, pc}

00214c48 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
  214c48:	9800      	ldr	r0, [sp, #0]
  214c4a:	4290      	cmp	r0, r2
  214c4c:	bf0c      	ite	eq
  214c4e:	2006      	moveq	r0, #6
  214c50:	2001      	movne	r0, #1
  214c52:	4770      	bx	lr

00214c54 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
  214c54:	b510      	push	{r4, lr}
  214c56:	4b03      	ldr	r3, [pc, #12]	; (214c64 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
  214c58:	6003      	str	r3, [r0, #0]
  214c5a:	4604      	mov	r4, r0
  214c5c:	f000 f84b 	bl	214cf6 <_ZNSt9type_infoD1Ev>
  214c60:	4620      	mov	r0, r4
  214c62:	bd10      	pop	{r4, pc}
  214c64:	00218734 	.word	0x00218734

00214c68 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
  214c68:	b510      	push	{r4, lr}
  214c6a:	4604      	mov	r4, r0
  214c6c:	f7ff fff2 	bl	214c54 <_ZN10__cxxabiv117__class_type_infoD1Ev>
  214c70:	4620      	mov	r0, r4
  214c72:	2108      	movs	r1, #8
  214c74:	f7ff ffc4 	bl	214c00 <_ZdlPvj>
  214c78:	4620      	mov	r0, r4
  214c7a:	bd10      	pop	{r4, pc}

00214c7c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
  214c7c:	b538      	push	{r3, r4, r5, lr}
  214c7e:	4615      	mov	r5, r2
  214c80:	461c      	mov	r4, r3
  214c82:	f000 f83b 	bl	214cfc <_ZNKSt9type_infoeqERKS_>
  214c86:	b120      	cbz	r0, 214c92 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
  214c88:	2308      	movs	r3, #8
  214c8a:	60e3      	str	r3, [r4, #12]
  214c8c:	2306      	movs	r3, #6
  214c8e:	6025      	str	r5, [r4, #0]
  214c90:	7123      	strb	r3, [r4, #4]
  214c92:	bd38      	pop	{r3, r4, r5, pc}

00214c94 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
  214c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  214c98:	4605      	mov	r5, r0
  214c9a:	460c      	mov	r4, r1
  214c9c:	4616      	mov	r6, r2
  214c9e:	461f      	mov	r7, r3
  214ca0:	f000 f82c 	bl	214cfc <_ZNKSt9type_infoeqERKS_>
  214ca4:	b948      	cbnz	r0, 214cba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
  214ca6:	2f03      	cmp	r7, #3
  214ca8:	d807      	bhi.n	214cba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
  214caa:	6823      	ldr	r3, [r4, #0]
  214cac:	4632      	mov	r2, r6
  214cae:	4629      	mov	r1, r5
  214cb0:	4620      	mov	r0, r4
  214cb2:	695b      	ldr	r3, [r3, #20]
  214cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  214cb8:	4718      	bx	r3
  214cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00214cbe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
  214cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  214cc2:	9e06      	ldr	r6, [sp, #24]
  214cc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  214cc6:	4698      	mov	r8, r3
  214cc8:	9b08      	ldr	r3, [sp, #32]
  214cca:	429e      	cmp	r6, r3
  214ccc:	4607      	mov	r7, r0
  214cce:	4615      	mov	r5, r2
  214cd0:	d103      	bne.n	214cda <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
  214cd2:	9907      	ldr	r1, [sp, #28]
  214cd4:	f000 f812 	bl	214cfc <_ZNKSt9type_infoeqERKS_>
  214cd8:	b958      	cbnz	r0, 214cf2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
  214cda:	4641      	mov	r1, r8
  214cdc:	4638      	mov	r0, r7
  214cde:	f000 f80d 	bl	214cfc <_ZNKSt9type_infoeqERKS_>
  214ce2:	b118      	cbz	r0, 214cec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
  214ce4:	2301      	movs	r3, #1
  214ce6:	6026      	str	r6, [r4, #0]
  214ce8:	7125      	strb	r5, [r4, #4]
  214cea:	71a3      	strb	r3, [r4, #6]
  214cec:	2000      	movs	r0, #0
  214cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  214cf2:	7165      	strb	r5, [r4, #5]
  214cf4:	e7fa      	b.n	214cec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

00214cf6 <_ZNSt9type_infoD1Ev>:
  214cf6:	4770      	bx	lr

00214cf8 <_ZNKSt9type_info14__is_pointer_pEv>:
  214cf8:	2000      	movs	r0, #0
  214cfa:	4770      	bx	lr

00214cfc <_ZNKSt9type_infoeqERKS_>:
  214cfc:	4281      	cmp	r1, r0
  214cfe:	b508      	push	{r3, lr}
  214d00:	d00e      	beq.n	214d20 <_ZNKSt9type_infoeqERKS_+0x24>
  214d02:	6840      	ldr	r0, [r0, #4]
  214d04:	7803      	ldrb	r3, [r0, #0]
  214d06:	2b2a      	cmp	r3, #42	; 0x2a
  214d08:	d00c      	beq.n	214d24 <_ZNKSt9type_infoeqERKS_+0x28>
  214d0a:	6849      	ldr	r1, [r1, #4]
  214d0c:	780b      	ldrb	r3, [r1, #0]
  214d0e:	2b2a      	cmp	r3, #42	; 0x2a
  214d10:	bf08      	it	eq
  214d12:	3101      	addeq	r1, #1
  214d14:	f7eb fa78 	bl	200208 <strcmp>
  214d18:	fab0 f080 	clz	r0, r0
  214d1c:	0940      	lsrs	r0, r0, #5
  214d1e:	bd08      	pop	{r3, pc}
  214d20:	2001      	movs	r0, #1
  214d22:	bd08      	pop	{r3, pc}
  214d24:	2000      	movs	r0, #0
  214d26:	bd08      	pop	{r3, pc}

00214d28 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
  214d28:	68c3      	ldr	r3, [r0, #12]
  214d2a:	689a      	ldr	r2, [r3, #8]
  214d2c:	60c2      	str	r2, [r0, #12]
  214d2e:	b102      	cbz	r2, 214d32 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xa>
  214d30:	6050      	str	r0, [r2, #4]
  214d32:	6842      	ldr	r2, [r0, #4]
  214d34:	605a      	str	r2, [r3, #4]
  214d36:	680a      	ldr	r2, [r1, #0]
  214d38:	4290      	cmp	r0, r2
  214d3a:	d103      	bne.n	214d44 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1c>
  214d3c:	600b      	str	r3, [r1, #0]
  214d3e:	6098      	str	r0, [r3, #8]
  214d40:	6043      	str	r3, [r0, #4]
  214d42:	4770      	bx	lr
  214d44:	6842      	ldr	r2, [r0, #4]
  214d46:	6891      	ldr	r1, [r2, #8]
  214d48:	4288      	cmp	r0, r1
  214d4a:	bf0c      	ite	eq
  214d4c:	6093      	streq	r3, [r2, #8]
  214d4e:	60d3      	strne	r3, [r2, #12]
  214d50:	e7f5      	b.n	214d3e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x16>

00214d52 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
  214d52:	6883      	ldr	r3, [r0, #8]
  214d54:	68da      	ldr	r2, [r3, #12]
  214d56:	6082      	str	r2, [r0, #8]
  214d58:	b102      	cbz	r2, 214d5c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xa>
  214d5a:	6050      	str	r0, [r2, #4]
  214d5c:	6842      	ldr	r2, [r0, #4]
  214d5e:	605a      	str	r2, [r3, #4]
  214d60:	680a      	ldr	r2, [r1, #0]
  214d62:	4290      	cmp	r0, r2
  214d64:	d103      	bne.n	214d6e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1c>
  214d66:	600b      	str	r3, [r1, #0]
  214d68:	60d8      	str	r0, [r3, #12]
  214d6a:	6043      	str	r3, [r0, #4]
  214d6c:	4770      	bx	lr
  214d6e:	6842      	ldr	r2, [r0, #4]
  214d70:	68d1      	ldr	r1, [r2, #12]
  214d72:	4288      	cmp	r0, r1
  214d74:	bf0c      	ite	eq
  214d76:	60d3      	streq	r3, [r2, #12]
  214d78:	6093      	strne	r3, [r2, #8]
  214d7a:	e7f5      	b.n	214d68 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x16>

00214d7c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
  214d7c:	7803      	ldrb	r3, [r0, #0]
  214d7e:	b933      	cbnz	r3, 214d8e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
  214d80:	6843      	ldr	r3, [r0, #4]
  214d82:	685b      	ldr	r3, [r3, #4]
  214d84:	4298      	cmp	r0, r3
  214d86:	d102      	bne.n	214d8e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
  214d88:	68c3      	ldr	r3, [r0, #12]
  214d8a:	4618      	mov	r0, r3
  214d8c:	4770      	bx	lr
  214d8e:	6883      	ldr	r3, [r0, #8]
  214d90:	b123      	cbz	r3, 214d9c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
  214d92:	68da      	ldr	r2, [r3, #12]
  214d94:	2a00      	cmp	r2, #0
  214d96:	d0f8      	beq.n	214d8a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
  214d98:	4613      	mov	r3, r2
  214d9a:	e7fa      	b.n	214d92 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
  214d9c:	6843      	ldr	r3, [r0, #4]
  214d9e:	689a      	ldr	r2, [r3, #8]
  214da0:	4282      	cmp	r2, r0
  214da2:	d1f2      	bne.n	214d8a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
  214da4:	4618      	mov	r0, r3
  214da6:	685b      	ldr	r3, [r3, #4]
  214da8:	e7f9      	b.n	214d9e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

00214daa <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
  214daa:	f7ff bfe7 	b.w	214d7c <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

00214dae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
  214dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  214db2:	461f      	mov	r7, r3
  214db4:	f103 0904 	add.w	r9, r3, #4
  214db8:	2300      	movs	r3, #0
  214dba:	460c      	mov	r4, r1
  214dbc:	604a      	str	r2, [r1, #4]
  214dbe:	608b      	str	r3, [r1, #8]
  214dc0:	60cb      	str	r3, [r1, #12]
  214dc2:	700b      	strb	r3, [r1, #0]
  214dc4:	b318      	cbz	r0, 214e0e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x60>
  214dc6:	4297      	cmp	r7, r2
  214dc8:	6091      	str	r1, [r2, #8]
  214dca:	d102      	bne.n	214dd2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x24>
  214dcc:	6079      	str	r1, [r7, #4]
  214dce:	60fc      	str	r4, [r7, #12]
  214dd0:	e003      	b.n	214dda <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
  214dd2:	68bb      	ldr	r3, [r7, #8]
  214dd4:	429a      	cmp	r2, r3
  214dd6:	bf08      	it	eq
  214dd8:	60b9      	streq	r1, [r7, #8]
  214dda:	f04f 0801 	mov.w	r8, #1
  214dde:	f04f 0a00 	mov.w	sl, #0
  214de2:	687b      	ldr	r3, [r7, #4]
  214de4:	429c      	cmp	r4, r3
  214de6:	d040      	beq.n	214e6a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbc>
  214de8:	6865      	ldr	r5, [r4, #4]
  214dea:	782a      	ldrb	r2, [r5, #0]
  214dec:	2a00      	cmp	r2, #0
  214dee:	d13b      	bne.n	214e68 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xba>
  214df0:	686e      	ldr	r6, [r5, #4]
  214df2:	68b3      	ldr	r3, [r6, #8]
  214df4:	429d      	cmp	r5, r3
  214df6:	d121      	bne.n	214e3c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
  214df8:	68f3      	ldr	r3, [r6, #12]
  214dfa:	b16b      	cbz	r3, 214e18 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6a>
  214dfc:	781a      	ldrb	r2, [r3, #0]
  214dfe:	b95a      	cbnz	r2, 214e18 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x6a>
  214e00:	f885 8000 	strb.w	r8, [r5]
  214e04:	4634      	mov	r4, r6
  214e06:	f883 8000 	strb.w	r8, [r3]
  214e0a:	7032      	strb	r2, [r6, #0]
  214e0c:	e7e9      	b.n	214de2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
  214e0e:	60d1      	str	r1, [r2, #12]
  214e10:	68fb      	ldr	r3, [r7, #12]
  214e12:	429a      	cmp	r2, r3
  214e14:	d1e1      	bne.n	214dda <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
  214e16:	e7da      	b.n	214dce <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
  214e18:	68eb      	ldr	r3, [r5, #12]
  214e1a:	429c      	cmp	r4, r3
  214e1c:	d104      	bne.n	214e28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x7a>
  214e1e:	4649      	mov	r1, r9
  214e20:	4628      	mov	r0, r5
  214e22:	f7ff ff81 	bl	214d28 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
  214e26:	462c      	mov	r4, r5
  214e28:	6863      	ldr	r3, [r4, #4]
  214e2a:	4649      	mov	r1, r9
  214e2c:	f883 8000 	strb.w	r8, [r3]
  214e30:	4630      	mov	r0, r6
  214e32:	f886 a000 	strb.w	sl, [r6]
  214e36:	f7ff ff8c 	bl	214d52 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
  214e3a:	e7d2      	b.n	214de2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
  214e3c:	b113      	cbz	r3, 214e44 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x96>
  214e3e:	781a      	ldrb	r2, [r3, #0]
  214e40:	2a00      	cmp	r2, #0
  214e42:	d0dd      	beq.n	214e00 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x52>
  214e44:	68ab      	ldr	r3, [r5, #8]
  214e46:	429c      	cmp	r4, r3
  214e48:	d104      	bne.n	214e54 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xa6>
  214e4a:	4649      	mov	r1, r9
  214e4c:	4628      	mov	r0, r5
  214e4e:	f7ff ff80 	bl	214d52 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
  214e52:	462c      	mov	r4, r5
  214e54:	6863      	ldr	r3, [r4, #4]
  214e56:	4649      	mov	r1, r9
  214e58:	f883 8000 	strb.w	r8, [r3]
  214e5c:	4630      	mov	r0, r6
  214e5e:	f886 a000 	strb.w	sl, [r6]
  214e62:	f7ff ff61 	bl	214d28 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
  214e66:	e7bc      	b.n	214de2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x34>
  214e68:	461c      	mov	r4, r3
  214e6a:	2301      	movs	r3, #1
  214e6c:	7023      	strb	r3, [r4, #0]
  214e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00214e72 <_ZSt17__throw_bad_allocv>:
  214e72:	b508      	push	{r3, lr}
  214e74:	f001 fc8a 	bl	21678c <abort>

00214e78 <_ZSt19__throw_logic_errorPKc>:
  214e78:	b508      	push	{r3, lr}
  214e7a:	f001 fc87 	bl	21678c <abort>

00214e7e <_ZSt20__throw_length_errorPKc>:
  214e7e:	b508      	push	{r3, lr}
  214e80:	f001 fc84 	bl	21678c <abort>

00214e84 <_ZSt20__throw_out_of_rangePKc>:
  214e84:	b508      	push	{r3, lr}
  214e86:	f001 fc81 	bl	21678c <abort>

00214e8a <_ZSt24__throw_out_of_range_fmtPKcz>:
  214e8a:	b40f      	push	{r0, r1, r2, r3}
  214e8c:	b580      	push	{r7, lr}
  214e8e:	b082      	sub	sp, #8
  214e90:	af00      	add	r7, sp, #0
  214e92:	f107 0410 	add.w	r4, r7, #16
  214e96:	f854 5b04 	ldr.w	r5, [r4], #4
  214e9a:	4628      	mov	r0, r5
  214e9c:	f7eb f9be 	bl	20021c <strlen>
  214ea0:	f200 230e 	addw	r3, r0, #526	; 0x20e
  214ea4:	f023 0307 	bic.w	r3, r3, #7
  214ea8:	ebad 0d03 	sub.w	sp, sp, r3
  214eac:	f500 7100 	add.w	r1, r0, #512	; 0x200
  214eb0:	4623      	mov	r3, r4
  214eb2:	462a      	mov	r2, r5
  214eb4:	4668      	mov	r0, sp
  214eb6:	607c      	str	r4, [r7, #4]
  214eb8:	f000 f8da 	bl	215070 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
  214ebc:	f001 fc66 	bl	21678c <abort>

00214ec0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
  214ec0:	7803      	ldrb	r3, [r0, #0]
  214ec2:	2b47      	cmp	r3, #71	; 0x47
  214ec4:	d117      	bne.n	214ef6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214ec6:	7843      	ldrb	r3, [r0, #1]
  214ec8:	2b4e      	cmp	r3, #78	; 0x4e
  214eca:	d114      	bne.n	214ef6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214ecc:	7883      	ldrb	r3, [r0, #2]
  214ece:	2b55      	cmp	r3, #85	; 0x55
  214ed0:	d111      	bne.n	214ef6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214ed2:	78c3      	ldrb	r3, [r0, #3]
  214ed4:	2b43      	cmp	r3, #67	; 0x43
  214ed6:	d10e      	bne.n	214ef6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214ed8:	7903      	ldrb	r3, [r0, #4]
  214eda:	2b43      	cmp	r3, #67	; 0x43
  214edc:	d10b      	bne.n	214ef6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214ede:	7943      	ldrb	r3, [r0, #5]
  214ee0:	2b2b      	cmp	r3, #43	; 0x2b
  214ee2:	d108      	bne.n	214ef6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214ee4:	7983      	ldrb	r3, [r0, #6]
  214ee6:	2b2b      	cmp	r3, #43	; 0x2b
  214ee8:	d105      	bne.n	214ef6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214eea:	79c0      	ldrb	r0, [r0, #7]
  214eec:	2801      	cmp	r0, #1
  214eee:	bf8c      	ite	hi
  214ef0:	2000      	movhi	r0, #0
  214ef2:	2001      	movls	r0, #1
  214ef4:	4770      	bx	lr
  214ef6:	2000      	movs	r0, #0
  214ef8:	4770      	bx	lr

00214efa <__cxa_call_terminate>:
  214efa:	b510      	push	{r4, lr}
  214efc:	4604      	mov	r4, r0
  214efe:	b148      	cbz	r0, 214f14 <__cxa_call_terminate+0x1a>
  214f00:	f000 f83b 	bl	214f7a <__cxa_begin_catch>
  214f04:	4620      	mov	r0, r4
  214f06:	f7ff ffdb 	bl	214ec0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
  214f0a:	b118      	cbz	r0, 214f14 <__cxa_call_terminate+0x1a>
  214f0c:	f854 0c14 	ldr.w	r0, [r4, #-20]
  214f10:	f7ff f8b8 	bl	214084 <_ZN10__cxxabiv111__terminateEPFvvE>
  214f14:	f7ff f8c2 	bl	21409c <_ZSt9terminatev>

00214f18 <__cxa_call_unexpected>:
  214f18:	b538      	push	{r3, r4, r5, lr}
  214f1a:	4602      	mov	r2, r0
  214f1c:	f7ff ffd0 	bl	214ec0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
  214f20:	b140      	cbz	r0, 214f34 <__cxa_call_unexpected+0x1c>
  214f22:	f852 4c18 	ldr.w	r4, [r2, #-24]
  214f26:	2500      	movs	r5, #0
  214f28:	4610      	mov	r0, r2
  214f2a:	f000 f826 	bl	214f7a <__cxa_begin_catch>
  214f2e:	b125      	cbz	r5, 214f3a <__cxa_call_unexpected+0x22>
  214f30:	f7ff f8c6 	bl	2140c0 <_ZSt10unexpectedv>
  214f34:	4604      	mov	r4, r0
  214f36:	2501      	movs	r5, #1
  214f38:	e7f6      	b.n	214f28 <__cxa_call_unexpected+0x10>
  214f3a:	4620      	mov	r0, r4
  214f3c:	f7ff f8b3 	bl	2140a6 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00214f40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
  214f40:	7803      	ldrb	r3, [r0, #0]
  214f42:	2b47      	cmp	r3, #71	; 0x47
  214f44:	d117      	bne.n	214f76 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214f46:	7843      	ldrb	r3, [r0, #1]
  214f48:	2b4e      	cmp	r3, #78	; 0x4e
  214f4a:	d114      	bne.n	214f76 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214f4c:	7883      	ldrb	r3, [r0, #2]
  214f4e:	2b55      	cmp	r3, #85	; 0x55
  214f50:	d111      	bne.n	214f76 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214f52:	78c3      	ldrb	r3, [r0, #3]
  214f54:	2b43      	cmp	r3, #67	; 0x43
  214f56:	d10e      	bne.n	214f76 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214f58:	7903      	ldrb	r3, [r0, #4]
  214f5a:	2b43      	cmp	r3, #67	; 0x43
  214f5c:	d10b      	bne.n	214f76 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214f5e:	7943      	ldrb	r3, [r0, #5]
  214f60:	2b2b      	cmp	r3, #43	; 0x2b
  214f62:	d108      	bne.n	214f76 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214f64:	7983      	ldrb	r3, [r0, #6]
  214f66:	2b2b      	cmp	r3, #43	; 0x2b
  214f68:	d105      	bne.n	214f76 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
  214f6a:	79c0      	ldrb	r0, [r0, #7]
  214f6c:	2801      	cmp	r0, #1
  214f6e:	bf8c      	ite	hi
  214f70:	2000      	movhi	r0, #0
  214f72:	2001      	movls	r0, #1
  214f74:	4770      	bx	lr
  214f76:	2000      	movs	r0, #0
  214f78:	4770      	bx	lr

00214f7a <__cxa_begin_catch>:
  214f7a:	b538      	push	{r3, r4, r5, lr}
  214f7c:	4605      	mov	r5, r0
  214f7e:	f000 f827 	bl	214fd0 <__cxa_get_globals>
  214f82:	4601      	mov	r1, r0
  214f84:	6802      	ldr	r2, [r0, #0]
  214f86:	4628      	mov	r0, r5
  214f88:	f1a5 0420 	sub.w	r4, r5, #32
  214f8c:	f7ff ffd8 	bl	214f40 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
  214f90:	b930      	cbnz	r0, 214fa0 <__cxa_begin_catch+0x26>
  214f92:	b10a      	cbz	r2, 214f98 <__cxa_begin_catch+0x1e>
  214f94:	f7ff f882 	bl	21409c <_ZSt9terminatev>
  214f98:	600c      	str	r4, [r1, #0]
  214f9a:	4614      	mov	r4, r2
  214f9c:	4620      	mov	r0, r4
  214f9e:	bd38      	pop	{r3, r4, r5, pc}
  214fa0:	f855 3c0c 	ldr.w	r3, [r5, #-12]
  214fa4:	2b00      	cmp	r3, #0
  214fa6:	bfb4      	ite	lt
  214fa8:	f1c3 0301 	rsblt	r3, r3, #1
  214fac:	3301      	addge	r3, #1
  214fae:	f845 3c0c 	str.w	r3, [r5, #-12]
  214fb2:	684b      	ldr	r3, [r1, #4]
  214fb4:	42a2      	cmp	r2, r4
  214fb6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  214fba:	604b      	str	r3, [r1, #4]
  214fbc:	4628      	mov	r0, r5
  214fbe:	bf1c      	itt	ne
  214fc0:	f845 2c10 	strne.w	r2, [r5, #-16]
  214fc4:	600c      	strne	r4, [r1, #0]
  214fc6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
  214fc8:	f7ec f91e 	bl	201208 <_Unwind_Complete>
  214fcc:	e7e6      	b.n	214f9c <__cxa_begin_catch+0x22>
	...

00214fd0 <__cxa_get_globals>:
  214fd0:	4800      	ldr	r0, [pc, #0]	; (214fd4 <__cxa_get_globals+0x4>)
  214fd2:	4770      	bx	lr
  214fd4:	200049d0 	.word	0x200049d0

00214fd8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
  214fd8:	b580      	push	{r7, lr}
  214fda:	b09c      	sub	sp, #112	; 0x70
  214fdc:	af00      	add	r7, sp, #0
  214fde:	1a0e      	subs	r6, r1, r0
  214fe0:	4680      	mov	r8, r0
  214fe2:	226c      	movs	r2, #108	; 0x6c
  214fe4:	490e      	ldr	r1, [pc, #56]	; (215020 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
  214fe6:	1d38      	adds	r0, r7, #4
  214fe8:	f001 fc2f 	bl	21684a <memcpy>
  214fec:	f106 037a 	add.w	r3, r6, #122	; 0x7a
  214ff0:	f023 0307 	bic.w	r3, r3, #7
  214ff4:	ebad 0d03 	sub.w	sp, sp, r3
  214ff8:	226b      	movs	r2, #107	; 0x6b
  214ffa:	1d39      	adds	r1, r7, #4
  214ffc:	1c75      	adds	r5, r6, #1
  214ffe:	4668      	mov	r0, sp
  215000:	f001 fc23 	bl	21684a <memcpy>
  215004:	446d      	add	r5, sp
  215006:	4632      	mov	r2, r6
  215008:	4641      	mov	r1, r8
  21500a:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
  21500e:	f001 fc1c 	bl	21684a <memcpy>
  215012:	2300      	movs	r3, #0
  215014:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
  215018:	4668      	mov	r0, sp
  21501a:	f7ff ff2d 	bl	214e78 <_ZSt19__throw_logic_errorPKc>
  21501e:	bf00      	nop
  215020:	002187c4 	.word	0x002187c4

00215024 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
  215024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  215028:	b084      	sub	sp, #16
  21502a:	af04      	add	r7, sp, #16
  21502c:	b088      	sub	sp, #32
  21502e:	2301      	movs	r3, #1
  215030:	9302      	str	r3, [sp, #8]
  215032:	2302      	movs	r3, #2
  215034:	9301      	str	r3, [sp, #4]
  215036:	4b0d      	ldr	r3, [pc, #52]	; (21506c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x48>)
  215038:	681b      	ldr	r3, [r3, #0]
  21503a:	9300      	str	r3, [sp, #0]
  21503c:	4606      	mov	r6, r0
  21503e:	2300      	movs	r3, #0
  215040:	a80a      	add	r0, sp, #40	; 0x28
  215042:	4688      	mov	r8, r1
  215044:	f000 f854 	bl	2150f0 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>
  215048:	4540      	cmp	r0, r8
  21504a:	ad04      	add	r5, sp, #16
  21504c:	4604      	mov	r4, r0
  21504e:	d80a      	bhi.n	215066 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x42>
  215050:	f1c0 0118 	rsb	r1, r0, #24
  215054:	4602      	mov	r2, r0
  215056:	4429      	add	r1, r5
  215058:	4630      	mov	r0, r6
  21505a:	f001 fbf6 	bl	21684a <memcpy>
  21505e:	4620      	mov	r0, r4
  215060:	46bd      	mov	sp, r7
  215062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  215066:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  21506a:	e7f8      	b.n	21505e <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3a>
  21506c:	20000014 	.word	0x20000014

00215070 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
  215070:	3901      	subs	r1, #1
  215072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  215076:	4606      	mov	r6, r0
  215078:	4615      	mov	r5, r2
  21507a:	1847      	adds	r7, r0, r1
  21507c:	4604      	mov	r4, r0
  21507e:	782a      	ldrb	r2, [r5, #0]
  215080:	b392      	cbz	r2, 2150e8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x78>
  215082:	42bc      	cmp	r4, r7
  215084:	d22c      	bcs.n	2150e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
  215086:	2a25      	cmp	r2, #37	; 0x25
  215088:	d107      	bne.n	21509a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
  21508a:	786a      	ldrb	r2, [r5, #1]
  21508c:	2a73      	cmp	r2, #115	; 0x73
  21508e:	d009      	beq.n	2150a4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x34>
  215090:	2a7a      	cmp	r2, #122	; 0x7a
  215092:	d012      	beq.n	2150ba <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4a>
  215094:	2a25      	cmp	r2, #37	; 0x25
  215096:	d100      	bne.n	21509a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
  215098:	3501      	adds	r5, #1
  21509a:	782a      	ldrb	r2, [r5, #0]
  21509c:	7022      	strb	r2, [r4, #0]
  21509e:	3501      	adds	r5, #1
  2150a0:	3401      	adds	r4, #1
  2150a2:	e7ec      	b.n	21507e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
  2150a4:	1d19      	adds	r1, r3, #4
  2150a6:	681b      	ldr	r3, [r3, #0]
  2150a8:	3b01      	subs	r3, #1
  2150aa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
  2150ae:	b1a2      	cbz	r2, 2150da <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6a>
  2150b0:	42bc      	cmp	r4, r7
  2150b2:	d015      	beq.n	2150e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
  2150b4:	f804 2b01 	strb.w	r2, [r4], #1
  2150b8:	e7f7      	b.n	2150aa <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3a>
  2150ba:	78aa      	ldrb	r2, [r5, #2]
  2150bc:	2a75      	cmp	r2, #117	; 0x75
  2150be:	d1ec      	bne.n	21509a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2a>
  2150c0:	681a      	ldr	r2, [r3, #0]
  2150c2:	1b39      	subs	r1, r7, r4
  2150c4:	4620      	mov	r0, r4
  2150c6:	f103 0804 	add.w	r8, r3, #4
  2150ca:	f7ff ffab 	bl	215024 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
  2150ce:	2800      	cmp	r0, #0
  2150d0:	dd06      	ble.n	2150e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x70>
  2150d2:	4404      	add	r4, r0
  2150d4:	3503      	adds	r5, #3
  2150d6:	4643      	mov	r3, r8
  2150d8:	e7d1      	b.n	21507e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
  2150da:	3502      	adds	r5, #2
  2150dc:	460b      	mov	r3, r1
  2150de:	e7ce      	b.n	21507e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
  2150e0:	4621      	mov	r1, r4
  2150e2:	4630      	mov	r0, r6
  2150e4:	f7ff ff78 	bl	214fd8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
  2150e8:	7022      	strb	r2, [r4, #0]
  2150ea:	1ba0      	subs	r0, r4, r6
  2150ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

002150f0 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>:
  2150f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  2150f4:	4614      	mov	r4, r2
  2150f6:	f89d 2020 	ldrb.w	r2, [sp, #32]
  2150fa:	9f06      	ldr	r7, [sp, #24]
  2150fc:	461d      	mov	r5, r3
  2150fe:	4680      	mov	r8, r0
  215100:	9b07      	ldr	r3, [sp, #28]
  215102:	b1ca      	cbz	r2, 215138 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x48>
  215104:	4606      	mov	r6, r0
  215106:	4620      	mov	r0, r4
  215108:	4629      	mov	r1, r5
  21510a:	220a      	movs	r2, #10
  21510c:	2300      	movs	r3, #0
  21510e:	f7eb fd2f 	bl	200b70 <__aeabi_uldivmod>
  215112:	443a      	add	r2, r7
  215114:	4620      	mov	r0, r4
  215116:	7913      	ldrb	r3, [r2, #4]
  215118:	f806 3d01 	strb.w	r3, [r6, #-1]!
  21511c:	4629      	mov	r1, r5
  21511e:	2300      	movs	r3, #0
  215120:	220a      	movs	r2, #10
  215122:	f7eb fd25 	bl	200b70 <__aeabi_uldivmod>
  215126:	4604      	mov	r4, r0
  215128:	460d      	mov	r5, r1
  21512a:	ea54 0305 	orrs.w	r3, r4, r5
  21512e:	d1ea      	bne.n	215106 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x16>
  215130:	eba8 0006 	sub.w	r0, r8, r6
  215134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  215138:	f003 024a 	and.w	r2, r3, #74	; 0x4a
  21513c:	2a40      	cmp	r2, #64	; 0x40
  21513e:	d110      	bne.n	215162 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x72>
  215140:	4606      	mov	r6, r0
  215142:	f004 0307 	and.w	r3, r4, #7
  215146:	443b      	add	r3, r7
  215148:	08ea      	lsrs	r2, r5, #3
  21514a:	791b      	ldrb	r3, [r3, #4]
  21514c:	f806 3d01 	strb.w	r3, [r6, #-1]!
  215150:	08e3      	lsrs	r3, r4, #3
  215152:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
  215156:	461c      	mov	r4, r3
  215158:	4615      	mov	r5, r2
  21515a:	ea54 0305 	orrs.w	r3, r4, r5
  21515e:	d1f0      	bne.n	215142 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x52>
  215160:	e7e6      	b.n	215130 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x40>
  215162:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  215166:	bf14      	ite	ne
  215168:	2314      	movne	r3, #20
  21516a:	2304      	moveq	r3, #4
  21516c:	4606      	mov	r6, r0
  21516e:	441f      	add	r7, r3
  215170:	f004 030f 	and.w	r3, r4, #15
  215174:	092a      	lsrs	r2, r5, #4
  215176:	5cfb      	ldrb	r3, [r7, r3]
  215178:	f806 3d01 	strb.w	r3, [r6, #-1]!
  21517c:	0923      	lsrs	r3, r4, #4
  21517e:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  215182:	461c      	mov	r4, r3
  215184:	4615      	mov	r5, r2
  215186:	ea54 0305 	orrs.w	r3, r4, r5
  21518a:	d1f1      	bne.n	215170 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x80>
  21518c:	e7d0      	b.n	215130 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x40>
	...

00215190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
  215190:	4b24      	ldr	r3, [pc, #144]	; (215224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
  215192:	681a      	ldr	r2, [r3, #0]
  215194:	07d0      	lsls	r0, r2, #31
  215196:	bf5c      	itt	pl
  215198:	2201      	movpl	r2, #1
  21519a:	601a      	strpl	r2, [r3, #0]
  21519c:	4b22      	ldr	r3, [pc, #136]	; (215228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
  21519e:	681a      	ldr	r2, [r3, #0]
  2151a0:	07d1      	lsls	r1, r2, #31
  2151a2:	bf5c      	itt	pl
  2151a4:	2201      	movpl	r2, #1
  2151a6:	601a      	strpl	r2, [r3, #0]
  2151a8:	4b20      	ldr	r3, [pc, #128]	; (21522c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
  2151aa:	681a      	ldr	r2, [r3, #0]
  2151ac:	07d2      	lsls	r2, r2, #31
  2151ae:	bf5c      	itt	pl
  2151b0:	2201      	movpl	r2, #1
  2151b2:	601a      	strpl	r2, [r3, #0]
  2151b4:	4b1e      	ldr	r3, [pc, #120]	; (215230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
  2151b6:	681a      	ldr	r2, [r3, #0]
  2151b8:	07d0      	lsls	r0, r2, #31
  2151ba:	bf5c      	itt	pl
  2151bc:	2201      	movpl	r2, #1
  2151be:	601a      	strpl	r2, [r3, #0]
  2151c0:	4b1c      	ldr	r3, [pc, #112]	; (215234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
  2151c2:	681a      	ldr	r2, [r3, #0]
  2151c4:	07d1      	lsls	r1, r2, #31
  2151c6:	bf5c      	itt	pl
  2151c8:	2201      	movpl	r2, #1
  2151ca:	601a      	strpl	r2, [r3, #0]
  2151cc:	4b1a      	ldr	r3, [pc, #104]	; (215238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
  2151ce:	681a      	ldr	r2, [r3, #0]
  2151d0:	07d2      	lsls	r2, r2, #31
  2151d2:	bf5c      	itt	pl
  2151d4:	2201      	movpl	r2, #1
  2151d6:	601a      	strpl	r2, [r3, #0]
  2151d8:	4b18      	ldr	r3, [pc, #96]	; (21523c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
  2151da:	681a      	ldr	r2, [r3, #0]
  2151dc:	07d0      	lsls	r0, r2, #31
  2151de:	bf5c      	itt	pl
  2151e0:	2201      	movpl	r2, #1
  2151e2:	601a      	strpl	r2, [r3, #0]
  2151e4:	4b16      	ldr	r3, [pc, #88]	; (215240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
  2151e6:	681a      	ldr	r2, [r3, #0]
  2151e8:	07d1      	lsls	r1, r2, #31
  2151ea:	bf5c      	itt	pl
  2151ec:	2201      	movpl	r2, #1
  2151ee:	601a      	strpl	r2, [r3, #0]
  2151f0:	4b14      	ldr	r3, [pc, #80]	; (215244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
  2151f2:	681a      	ldr	r2, [r3, #0]
  2151f4:	07d2      	lsls	r2, r2, #31
  2151f6:	bf5c      	itt	pl
  2151f8:	2201      	movpl	r2, #1
  2151fa:	601a      	strpl	r2, [r3, #0]
  2151fc:	4b12      	ldr	r3, [pc, #72]	; (215248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
  2151fe:	681a      	ldr	r2, [r3, #0]
  215200:	07d0      	lsls	r0, r2, #31
  215202:	bf5c      	itt	pl
  215204:	2201      	movpl	r2, #1
  215206:	601a      	strpl	r2, [r3, #0]
  215208:	4b10      	ldr	r3, [pc, #64]	; (21524c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
  21520a:	681a      	ldr	r2, [r3, #0]
  21520c:	07d1      	lsls	r1, r2, #31
  21520e:	bf5c      	itt	pl
  215210:	2201      	movpl	r2, #1
  215212:	601a      	strpl	r2, [r3, #0]
  215214:	4b0e      	ldr	r3, [pc, #56]	; (215250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
  215216:	681a      	ldr	r2, [r3, #0]
  215218:	07d2      	lsls	r2, r2, #31
  21521a:	bf5c      	itt	pl
  21521c:	2201      	movpl	r2, #1
  21521e:	601a      	strpl	r2, [r3, #0]
  215220:	4770      	bx	lr
  215222:	bf00      	nop
  215224:	20004a08 	.word	0x20004a08
  215228:	20004a04 	.word	0x20004a04
  21522c:	20004a00 	.word	0x20004a00
  215230:	200049fc 	.word	0x200049fc
  215234:	200049f8 	.word	0x200049f8
  215238:	200049f4 	.word	0x200049f4
  21523c:	200049f0 	.word	0x200049f0
  215240:	200049ec 	.word	0x200049ec
  215244:	200049e8 	.word	0x200049e8
  215248:	200049e4 	.word	0x200049e4
  21524c:	200049e0 	.word	0x200049e0
  215250:	200049dc 	.word	0x200049dc

00215254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
  215254:	4b18      	ldr	r3, [pc, #96]	; (2152b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
  215256:	681a      	ldr	r2, [r3, #0]
  215258:	07d1      	lsls	r1, r2, #31
  21525a:	bf5c      	itt	pl
  21525c:	2201      	movpl	r2, #1
  21525e:	601a      	strpl	r2, [r3, #0]
  215260:	4b16      	ldr	r3, [pc, #88]	; (2152bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
  215262:	681a      	ldr	r2, [r3, #0]
  215264:	07d2      	lsls	r2, r2, #31
  215266:	bf5c      	itt	pl
  215268:	2201      	movpl	r2, #1
  21526a:	601a      	strpl	r2, [r3, #0]
  21526c:	4b14      	ldr	r3, [pc, #80]	; (2152c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
  21526e:	681a      	ldr	r2, [r3, #0]
  215270:	07d0      	lsls	r0, r2, #31
  215272:	bf5c      	itt	pl
  215274:	2201      	movpl	r2, #1
  215276:	601a      	strpl	r2, [r3, #0]
  215278:	4b12      	ldr	r3, [pc, #72]	; (2152c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
  21527a:	681a      	ldr	r2, [r3, #0]
  21527c:	07d1      	lsls	r1, r2, #31
  21527e:	bf5c      	itt	pl
  215280:	2201      	movpl	r2, #1
  215282:	601a      	strpl	r2, [r3, #0]
  215284:	4b10      	ldr	r3, [pc, #64]	; (2152c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
  215286:	681a      	ldr	r2, [r3, #0]
  215288:	07d2      	lsls	r2, r2, #31
  21528a:	bf5c      	itt	pl
  21528c:	2201      	movpl	r2, #1
  21528e:	601a      	strpl	r2, [r3, #0]
  215290:	4b0e      	ldr	r3, [pc, #56]	; (2152cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
  215292:	681a      	ldr	r2, [r3, #0]
  215294:	07d0      	lsls	r0, r2, #31
  215296:	bf5c      	itt	pl
  215298:	2201      	movpl	r2, #1
  21529a:	601a      	strpl	r2, [r3, #0]
  21529c:	4b0c      	ldr	r3, [pc, #48]	; (2152d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
  21529e:	681a      	ldr	r2, [r3, #0]
  2152a0:	07d1      	lsls	r1, r2, #31
  2152a2:	bf5c      	itt	pl
  2152a4:	2201      	movpl	r2, #1
  2152a6:	601a      	strpl	r2, [r3, #0]
  2152a8:	4b0a      	ldr	r3, [pc, #40]	; (2152d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
  2152aa:	681a      	ldr	r2, [r3, #0]
  2152ac:	07d2      	lsls	r2, r2, #31
  2152ae:	bf5c      	itt	pl
  2152b0:	2201      	movpl	r2, #1
  2152b2:	601a      	strpl	r2, [r3, #0]
  2152b4:	4770      	bx	lr
  2152b6:	bf00      	nop
  2152b8:	20004a28 	.word	0x20004a28
  2152bc:	20004a24 	.word	0x20004a24
  2152c0:	20004a20 	.word	0x20004a20
  2152c4:	20004a1c 	.word	0x20004a1c
  2152c8:	20004a18 	.word	0x20004a18
  2152cc:	20004a14 	.word	0x20004a14
  2152d0:	20004a10 	.word	0x20004a10
  2152d4:	20004a0c 	.word	0x20004a0c

002152d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
  2152d8:	4b24      	ldr	r3, [pc, #144]	; (21536c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
  2152da:	681a      	ldr	r2, [r3, #0]
  2152dc:	07d0      	lsls	r0, r2, #31
  2152de:	bf5c      	itt	pl
  2152e0:	2201      	movpl	r2, #1
  2152e2:	601a      	strpl	r2, [r3, #0]
  2152e4:	4b22      	ldr	r3, [pc, #136]	; (215370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
  2152e6:	681a      	ldr	r2, [r3, #0]
  2152e8:	07d1      	lsls	r1, r2, #31
  2152ea:	bf5c      	itt	pl
  2152ec:	2201      	movpl	r2, #1
  2152ee:	601a      	strpl	r2, [r3, #0]
  2152f0:	4b20      	ldr	r3, [pc, #128]	; (215374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
  2152f2:	681a      	ldr	r2, [r3, #0]
  2152f4:	07d2      	lsls	r2, r2, #31
  2152f6:	bf5c      	itt	pl
  2152f8:	2201      	movpl	r2, #1
  2152fa:	601a      	strpl	r2, [r3, #0]
  2152fc:	4b1e      	ldr	r3, [pc, #120]	; (215378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
  2152fe:	681a      	ldr	r2, [r3, #0]
  215300:	07d0      	lsls	r0, r2, #31
  215302:	bf5c      	itt	pl
  215304:	2201      	movpl	r2, #1
  215306:	601a      	strpl	r2, [r3, #0]
  215308:	4b1c      	ldr	r3, [pc, #112]	; (21537c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
  21530a:	681a      	ldr	r2, [r3, #0]
  21530c:	07d1      	lsls	r1, r2, #31
  21530e:	bf5c      	itt	pl
  215310:	2201      	movpl	r2, #1
  215312:	601a      	strpl	r2, [r3, #0]
  215314:	4b1a      	ldr	r3, [pc, #104]	; (215380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
  215316:	681a      	ldr	r2, [r3, #0]
  215318:	07d2      	lsls	r2, r2, #31
  21531a:	bf5c      	itt	pl
  21531c:	2201      	movpl	r2, #1
  21531e:	601a      	strpl	r2, [r3, #0]
  215320:	4b18      	ldr	r3, [pc, #96]	; (215384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
  215322:	681a      	ldr	r2, [r3, #0]
  215324:	07d0      	lsls	r0, r2, #31
  215326:	bf5c      	itt	pl
  215328:	2201      	movpl	r2, #1
  21532a:	601a      	strpl	r2, [r3, #0]
  21532c:	4b16      	ldr	r3, [pc, #88]	; (215388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
  21532e:	681a      	ldr	r2, [r3, #0]
  215330:	07d1      	lsls	r1, r2, #31
  215332:	bf5c      	itt	pl
  215334:	2201      	movpl	r2, #1
  215336:	601a      	strpl	r2, [r3, #0]
  215338:	4b14      	ldr	r3, [pc, #80]	; (21538c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
  21533a:	681a      	ldr	r2, [r3, #0]
  21533c:	07d2      	lsls	r2, r2, #31
  21533e:	bf5c      	itt	pl
  215340:	2201      	movpl	r2, #1
  215342:	601a      	strpl	r2, [r3, #0]
  215344:	4b12      	ldr	r3, [pc, #72]	; (215390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
  215346:	681a      	ldr	r2, [r3, #0]
  215348:	07d0      	lsls	r0, r2, #31
  21534a:	bf5c      	itt	pl
  21534c:	2201      	movpl	r2, #1
  21534e:	601a      	strpl	r2, [r3, #0]
  215350:	4b10      	ldr	r3, [pc, #64]	; (215394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
  215352:	681a      	ldr	r2, [r3, #0]
  215354:	07d1      	lsls	r1, r2, #31
  215356:	bf5c      	itt	pl
  215358:	2201      	movpl	r2, #1
  21535a:	601a      	strpl	r2, [r3, #0]
  21535c:	4b0e      	ldr	r3, [pc, #56]	; (215398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
  21535e:	681a      	ldr	r2, [r3, #0]
  215360:	07d2      	lsls	r2, r2, #31
  215362:	bf5c      	itt	pl
  215364:	2201      	movpl	r2, #1
  215366:	601a      	strpl	r2, [r3, #0]
  215368:	4770      	bx	lr
  21536a:	bf00      	nop
  21536c:	20004a58 	.word	0x20004a58
  215370:	20004a54 	.word	0x20004a54
  215374:	20004a50 	.word	0x20004a50
  215378:	20004a4c 	.word	0x20004a4c
  21537c:	20004a48 	.word	0x20004a48
  215380:	20004a44 	.word	0x20004a44
  215384:	20004a40 	.word	0x20004a40
  215388:	20004a3c 	.word	0x20004a3c
  21538c:	20004a38 	.word	0x20004a38
  215390:	20004a34 	.word	0x20004a34
  215394:	20004a30 	.word	0x20004a30
  215398:	20004a2c 	.word	0x20004a2c

0021539c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
  21539c:	4b18      	ldr	r3, [pc, #96]	; (215400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
  21539e:	681a      	ldr	r2, [r3, #0]
  2153a0:	07d1      	lsls	r1, r2, #31
  2153a2:	bf5c      	itt	pl
  2153a4:	2201      	movpl	r2, #1
  2153a6:	601a      	strpl	r2, [r3, #0]
  2153a8:	4b16      	ldr	r3, [pc, #88]	; (215404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
  2153aa:	681a      	ldr	r2, [r3, #0]
  2153ac:	07d2      	lsls	r2, r2, #31
  2153ae:	bf5c      	itt	pl
  2153b0:	2201      	movpl	r2, #1
  2153b2:	601a      	strpl	r2, [r3, #0]
  2153b4:	4b14      	ldr	r3, [pc, #80]	; (215408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
  2153b6:	681a      	ldr	r2, [r3, #0]
  2153b8:	07d0      	lsls	r0, r2, #31
  2153ba:	bf5c      	itt	pl
  2153bc:	2201      	movpl	r2, #1
  2153be:	601a      	strpl	r2, [r3, #0]
  2153c0:	4b12      	ldr	r3, [pc, #72]	; (21540c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
  2153c2:	681a      	ldr	r2, [r3, #0]
  2153c4:	07d1      	lsls	r1, r2, #31
  2153c6:	bf5c      	itt	pl
  2153c8:	2201      	movpl	r2, #1
  2153ca:	601a      	strpl	r2, [r3, #0]
  2153cc:	4b10      	ldr	r3, [pc, #64]	; (215410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
  2153ce:	681a      	ldr	r2, [r3, #0]
  2153d0:	07d2      	lsls	r2, r2, #31
  2153d2:	bf5c      	itt	pl
  2153d4:	2201      	movpl	r2, #1
  2153d6:	601a      	strpl	r2, [r3, #0]
  2153d8:	4b0e      	ldr	r3, [pc, #56]	; (215414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
  2153da:	681a      	ldr	r2, [r3, #0]
  2153dc:	07d0      	lsls	r0, r2, #31
  2153de:	bf5c      	itt	pl
  2153e0:	2201      	movpl	r2, #1
  2153e2:	601a      	strpl	r2, [r3, #0]
  2153e4:	4b0c      	ldr	r3, [pc, #48]	; (215418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
  2153e6:	681a      	ldr	r2, [r3, #0]
  2153e8:	07d1      	lsls	r1, r2, #31
  2153ea:	bf5c      	itt	pl
  2153ec:	2201      	movpl	r2, #1
  2153ee:	601a      	strpl	r2, [r3, #0]
  2153f0:	4b0a      	ldr	r3, [pc, #40]	; (21541c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
  2153f2:	681a      	ldr	r2, [r3, #0]
  2153f4:	07d2      	lsls	r2, r2, #31
  2153f6:	bf5c      	itt	pl
  2153f8:	2201      	movpl	r2, #1
  2153fa:	601a      	strpl	r2, [r3, #0]
  2153fc:	4770      	bx	lr
  2153fe:	bf00      	nop
  215400:	20004a78 	.word	0x20004a78
  215404:	20004a74 	.word	0x20004a74
  215408:	20004a70 	.word	0x20004a70
  21540c:	20004a6c 	.word	0x20004a6c
  215410:	20004a68 	.word	0x20004a68
  215414:	20004a64 	.word	0x20004a64
  215418:	20004a60 	.word	0x20004a60
  21541c:	20004a5c 	.word	0x20004a5c

00215420 <cosf>:
  215420:	ee10 3a10 	vmov	r3, s0
  215424:	b507      	push	{r0, r1, r2, lr}
  215426:	4a1c      	ldr	r2, [pc, #112]	; (215498 <cosf+0x78>)
  215428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  21542c:	4293      	cmp	r3, r2
  21542e:	dc04      	bgt.n	21543a <cosf+0x1a>
  215430:	eddf 0a1a 	vldr	s1, [pc, #104]	; 21549c <cosf+0x7c>
  215434:	f000 fd08 	bl	215e48 <__kernel_cosf>
  215438:	e004      	b.n	215444 <cosf+0x24>
  21543a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  21543e:	db04      	blt.n	21544a <cosf+0x2a>
  215440:	ee30 0a40 	vsub.f32	s0, s0, s0
  215444:	b003      	add	sp, #12
  215446:	f85d fb04 	ldr.w	pc, [sp], #4
  21544a:	4668      	mov	r0, sp
  21544c:	f000 fbd0 	bl	215bf0 <__ieee754_rem_pio2f>
  215450:	f000 0003 	and.w	r0, r0, #3
  215454:	2801      	cmp	r0, #1
  215456:	d007      	beq.n	215468 <cosf+0x48>
  215458:	2802      	cmp	r0, #2
  21545a:	d00e      	beq.n	21547a <cosf+0x5a>
  21545c:	b9a0      	cbnz	r0, 215488 <cosf+0x68>
  21545e:	eddd 0a01 	vldr	s1, [sp, #4]
  215462:	ed9d 0a00 	vldr	s0, [sp]
  215466:	e7e5      	b.n	215434 <cosf+0x14>
  215468:	eddd 0a01 	vldr	s1, [sp, #4]
  21546c:	ed9d 0a00 	vldr	s0, [sp]
  215470:	f000 ffa6 	bl	2163c0 <__kernel_sinf>
  215474:	eeb1 0a40 	vneg.f32	s0, s0
  215478:	e7e4      	b.n	215444 <cosf+0x24>
  21547a:	eddd 0a01 	vldr	s1, [sp, #4]
  21547e:	ed9d 0a00 	vldr	s0, [sp]
  215482:	f000 fce1 	bl	215e48 <__kernel_cosf>
  215486:	e7f5      	b.n	215474 <cosf+0x54>
  215488:	2001      	movs	r0, #1
  21548a:	eddd 0a01 	vldr	s1, [sp, #4]
  21548e:	ed9d 0a00 	vldr	s0, [sp]
  215492:	f000 ff95 	bl	2163c0 <__kernel_sinf>
  215496:	e7d5      	b.n	215444 <cosf+0x24>
  215498:	3f490fd8 	.word	0x3f490fd8
  21549c:	00000000 	.word	0x00000000

002154a0 <sinf>:
  2154a0:	ee10 3a10 	vmov	r3, s0
  2154a4:	b507      	push	{r0, r1, r2, lr}
  2154a6:	4a1d      	ldr	r2, [pc, #116]	; (21551c <sinf+0x7c>)
  2154a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  2154ac:	4293      	cmp	r3, r2
  2154ae:	dc05      	bgt.n	2154bc <sinf+0x1c>
  2154b0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 215520 <sinf+0x80>
  2154b4:	2000      	movs	r0, #0
  2154b6:	f000 ff83 	bl	2163c0 <__kernel_sinf>
  2154ba:	e004      	b.n	2154c6 <sinf+0x26>
  2154bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  2154c0:	db04      	blt.n	2154cc <sinf+0x2c>
  2154c2:	ee30 0a40 	vsub.f32	s0, s0, s0
  2154c6:	b003      	add	sp, #12
  2154c8:	f85d fb04 	ldr.w	pc, [sp], #4
  2154cc:	4668      	mov	r0, sp
  2154ce:	f000 fb8f 	bl	215bf0 <__ieee754_rem_pio2f>
  2154d2:	f000 0003 	and.w	r0, r0, #3
  2154d6:	2801      	cmp	r0, #1
  2154d8:	d008      	beq.n	2154ec <sinf+0x4c>
  2154da:	2802      	cmp	r0, #2
  2154dc:	d00d      	beq.n	2154fa <sinf+0x5a>
  2154de:	b9b0      	cbnz	r0, 21550e <sinf+0x6e>
  2154e0:	2001      	movs	r0, #1
  2154e2:	eddd 0a01 	vldr	s1, [sp, #4]
  2154e6:	ed9d 0a00 	vldr	s0, [sp]
  2154ea:	e7e4      	b.n	2154b6 <sinf+0x16>
  2154ec:	eddd 0a01 	vldr	s1, [sp, #4]
  2154f0:	ed9d 0a00 	vldr	s0, [sp]
  2154f4:	f000 fca8 	bl	215e48 <__kernel_cosf>
  2154f8:	e7e5      	b.n	2154c6 <sinf+0x26>
  2154fa:	2001      	movs	r0, #1
  2154fc:	eddd 0a01 	vldr	s1, [sp, #4]
  215500:	ed9d 0a00 	vldr	s0, [sp]
  215504:	f000 ff5c 	bl	2163c0 <__kernel_sinf>
  215508:	eeb1 0a40 	vneg.f32	s0, s0
  21550c:	e7db      	b.n	2154c6 <sinf+0x26>
  21550e:	eddd 0a01 	vldr	s1, [sp, #4]
  215512:	ed9d 0a00 	vldr	s0, [sp]
  215516:	f000 fc97 	bl	215e48 <__kernel_cosf>
  21551a:	e7f5      	b.n	215508 <sinf+0x68>
  21551c:	3f490fd8 	.word	0x3f490fd8
  215520:	00000000 	.word	0x00000000

00215524 <atan2f>:
  215524:	f000 b8f0 	b.w	215708 <__ieee754_atan2f>

00215528 <expf>:
  215528:	b530      	push	{r4, r5, lr}
  21552a:	ed2d 8b02 	vpush	{d8}
  21552e:	4d35      	ldr	r5, [pc, #212]	; (215604 <expf+0xdc>)
  215530:	b08b      	sub	sp, #44	; 0x2c
  215532:	eeb0 8a40 	vmov.f32	s16, s0
  215536:	f000 f995 	bl	215864 <__ieee754_expf>
  21553a:	f995 3000 	ldrsb.w	r3, [r5]
  21553e:	3301      	adds	r3, #1
  215540:	ee10 4a10 	vmov	r4, s0
  215544:	d030      	beq.n	2155a8 <expf+0x80>
  215546:	eeb0 0a48 	vmov.f32	s0, s16
  21554a:	f001 f866 	bl	21661a <finitef>
  21554e:	b358      	cbz	r0, 2155a8 <expf+0x80>
  215550:	eddf 7a2d 	vldr	s15, [pc, #180]	; 215608 <expf+0xe0>
  215554:	eeb4 8ae7 	vcmpe.f32	s16, s15
  215558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  21555c:	dd35      	ble.n	2155ca <expf+0xa2>
  21555e:	2303      	movs	r3, #3
  215560:	9300      	str	r3, [sp, #0]
  215562:	4b2a      	ldr	r3, [pc, #168]	; (21560c <expf+0xe4>)
  215564:	9301      	str	r3, [sp, #4]
  215566:	ee18 0a10 	vmov	r0, s16
  21556a:	2300      	movs	r3, #0
  21556c:	9308      	str	r3, [sp, #32]
  21556e:	f7ea ffc1 	bl	2004f4 <__aeabi_f2d>
  215572:	f995 3000 	ldrsb.w	r3, [r5]
  215576:	e9cd 0104 	strd	r0, r1, [sp, #16]
  21557a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  21557e:	b9cb      	cbnz	r3, 2155b4 <expf+0x8c>
  215580:	4b23      	ldr	r3, [pc, #140]	; (215610 <expf+0xe8>)
  215582:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  215586:	e9cd 2306 	strd	r2, r3, [sp, #24]
  21558a:	4668      	mov	r0, sp
  21558c:	f000 ff60 	bl	216450 <matherr>
  215590:	b1b0      	cbz	r0, 2155c0 <expf+0x98>
  215592:	9b08      	ldr	r3, [sp, #32]
  215594:	b11b      	cbz	r3, 21559e <expf+0x76>
  215596:	f001 f90f 	bl	2167b8 <__errno>
  21559a:	9b08      	ldr	r3, [sp, #32]
  21559c:	6003      	str	r3, [r0, #0]
  21559e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  2155a2:	f7eb fa95 	bl	200ad0 <__aeabi_d2f>
  2155a6:	4604      	mov	r4, r0
  2155a8:	ee00 4a10 	vmov	s0, r4
  2155ac:	b00b      	add	sp, #44	; 0x2c
  2155ae:	ecbd 8b02 	vpop	{d8}
  2155b2:	bd30      	pop	{r4, r5, pc}
  2155b4:	4917      	ldr	r1, [pc, #92]	; (215614 <expf+0xec>)
  2155b6:	2000      	movs	r0, #0
  2155b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
  2155bc:	2b02      	cmp	r3, #2
  2155be:	d1e4      	bne.n	21558a <expf+0x62>
  2155c0:	f001 f8fa 	bl	2167b8 <__errno>
  2155c4:	2322      	movs	r3, #34	; 0x22
  2155c6:	6003      	str	r3, [r0, #0]
  2155c8:	e7e3      	b.n	215592 <expf+0x6a>
  2155ca:	eddf 7a13 	vldr	s15, [pc, #76]	; 215618 <expf+0xf0>
  2155ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
  2155d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  2155d6:	d5e7      	bpl.n	2155a8 <expf+0x80>
  2155d8:	2304      	movs	r3, #4
  2155da:	9300      	str	r3, [sp, #0]
  2155dc:	4b0b      	ldr	r3, [pc, #44]	; (21560c <expf+0xe4>)
  2155de:	9301      	str	r3, [sp, #4]
  2155e0:	ee18 0a10 	vmov	r0, s16
  2155e4:	2300      	movs	r3, #0
  2155e6:	9308      	str	r3, [sp, #32]
  2155e8:	f7ea ff84 	bl	2004f4 <__aeabi_f2d>
  2155ec:	2300      	movs	r3, #0
  2155ee:	2200      	movs	r2, #0
  2155f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  2155f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
  2155f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  2155fc:	f995 3000 	ldrsb.w	r3, [r5]
  215600:	e7dc      	b.n	2155bc <expf+0x94>
  215602:	bf00      	nop
  215604:	20000018 	.word	0x20000018
  215608:	42b17180 	.word	0x42b17180
  21560c:	002188b1 	.word	0x002188b1
  215610:	47efffff 	.word	0x47efffff
  215614:	7ff00000 	.word	0x7ff00000
  215618:	c2cff1b5 	.word	0xc2cff1b5

0021561c <logf>:
  21561c:	b510      	push	{r4, lr}
  21561e:	ed2d 8b02 	vpush	{d8}
  215622:	b08a      	sub	sp, #40	; 0x28
  215624:	eeb0 8a40 	vmov.f32	s16, s0
  215628:	f000 f9f0 	bl	215a0c <__ieee754_logf>
  21562c:	4b31      	ldr	r3, [pc, #196]	; (2156f4 <logf+0xd8>)
  21562e:	f993 4000 	ldrsb.w	r4, [r3]
  215632:	1c63      	adds	r3, r4, #1
  215634:	d059      	beq.n	2156ea <logf+0xce>
  215636:	eeb4 8a48 	vcmp.f32	s16, s16
  21563a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  21563e:	d654      	bvs.n	2156ea <logf+0xce>
  215640:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
  215644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  215648:	dc4f      	bgt.n	2156ea <logf+0xce>
  21564a:	4b2b      	ldr	r3, [pc, #172]	; (2156f8 <logf+0xdc>)
  21564c:	9301      	str	r3, [sp, #4]
  21564e:	ee18 0a10 	vmov	r0, s16
  215652:	2300      	movs	r3, #0
  215654:	9308      	str	r3, [sp, #32]
  215656:	f7ea ff4d 	bl	2004f4 <__aeabi_f2d>
  21565a:	e9cd 0104 	strd	r0, r1, [sp, #16]
  21565e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  215662:	b994      	cbnz	r4, 21568a <logf+0x6e>
  215664:	4b25      	ldr	r3, [pc, #148]	; (2156fc <logf+0xe0>)
  215666:	eeb5 8a40 	vcmp.f32	s16, #0.0
  21566a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  21566e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  215672:	e9cd 2306 	strd	r2, r3, [sp, #24]
  215676:	d025      	beq.n	2156c4 <logf+0xa8>
  215678:	2301      	movs	r3, #1
  21567a:	2c02      	cmp	r4, #2
  21567c:	9300      	str	r3, [sp, #0]
  21567e:	d116      	bne.n	2156ae <logf+0x92>
  215680:	f001 f89a 	bl	2167b8 <__errno>
  215684:	2321      	movs	r3, #33	; 0x21
  215686:	6003      	str	r3, [r0, #0]
  215688:	e016      	b.n	2156b8 <logf+0x9c>
  21568a:	4b1d      	ldr	r3, [pc, #116]	; (215700 <logf+0xe4>)
  21568c:	eeb5 8a40 	vcmp.f32	s16, #0.0
  215690:	2200      	movs	r2, #0
  215692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  215696:	e9cd 2306 	strd	r2, r3, [sp, #24]
  21569a:	d1ed      	bne.n	215678 <logf+0x5c>
  21569c:	2302      	movs	r3, #2
  21569e:	429c      	cmp	r4, r3
  2156a0:	9300      	str	r3, [sp, #0]
  2156a2:	d111      	bne.n	2156c8 <logf+0xac>
  2156a4:	f001 f888 	bl	2167b8 <__errno>
  2156a8:	2322      	movs	r3, #34	; 0x22
  2156aa:	6003      	str	r3, [r0, #0]
  2156ac:	e011      	b.n	2156d2 <logf+0xb6>
  2156ae:	4668      	mov	r0, sp
  2156b0:	f000 fece 	bl	216450 <matherr>
  2156b4:	2800      	cmp	r0, #0
  2156b6:	d0e3      	beq.n	215680 <logf+0x64>
  2156b8:	4812      	ldr	r0, [pc, #72]	; (215704 <logf+0xe8>)
  2156ba:	f000 fecd 	bl	216458 <nan>
  2156be:	ed8d 0b06 	vstr	d0, [sp, #24]
  2156c2:	e006      	b.n	2156d2 <logf+0xb6>
  2156c4:	2302      	movs	r3, #2
  2156c6:	9300      	str	r3, [sp, #0]
  2156c8:	4668      	mov	r0, sp
  2156ca:	f000 fec1 	bl	216450 <matherr>
  2156ce:	2800      	cmp	r0, #0
  2156d0:	d0e8      	beq.n	2156a4 <logf+0x88>
  2156d2:	9b08      	ldr	r3, [sp, #32]
  2156d4:	b11b      	cbz	r3, 2156de <logf+0xc2>
  2156d6:	f001 f86f 	bl	2167b8 <__errno>
  2156da:	9b08      	ldr	r3, [sp, #32]
  2156dc:	6003      	str	r3, [r0, #0]
  2156de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  2156e2:	f7eb f9f5 	bl	200ad0 <__aeabi_d2f>
  2156e6:	ee00 0a10 	vmov	s0, r0
  2156ea:	b00a      	add	sp, #40	; 0x28
  2156ec:	ecbd 8b02 	vpop	{d8}
  2156f0:	bd10      	pop	{r4, pc}
  2156f2:	bf00      	nop
  2156f4:	20000018 	.word	0x20000018
  2156f8:	002188b6 	.word	0x002188b6
  2156fc:	c7efffff 	.word	0xc7efffff
  215700:	fff00000 	.word	0xfff00000
  215704:	0021882f 	.word	0x0021882f

00215708 <__ieee754_atan2f>:
  215708:	ee10 2a90 	vmov	r2, s1
  21570c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
  215710:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  215714:	b510      	push	{r4, lr}
  215716:	eef0 7a40 	vmov.f32	s15, s0
  21571a:	dc06      	bgt.n	21572a <__ieee754_atan2f+0x22>
  21571c:	ee10 0a10 	vmov	r0, s0
  215720:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  215724:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  215728:	dd04      	ble.n	215734 <__ieee754_atan2f+0x2c>
  21572a:	ee77 7aa0 	vadd.f32	s15, s15, s1
  21572e:	eeb0 0a67 	vmov.f32	s0, s15
  215732:	bd10      	pop	{r4, pc}
  215734:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
  215738:	d103      	bne.n	215742 <__ieee754_atan2f+0x3a>
  21573a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  21573e:	f000 be93 	b.w	216468 <atanf>
  215742:	1794      	asrs	r4, r2, #30
  215744:	f004 0402 	and.w	r4, r4, #2
  215748:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
  21574c:	b943      	cbnz	r3, 215760 <__ieee754_atan2f+0x58>
  21574e:	2c02      	cmp	r4, #2
  215750:	d033      	beq.n	2157ba <__ieee754_atan2f+0xb2>
  215752:	ed9f 7a39 	vldr	s14, [pc, #228]	; 215838 <__ieee754_atan2f+0x130>
  215756:	2c03      	cmp	r4, #3
  215758:	bf08      	it	eq
  21575a:	eef0 7a47 	vmoveq.f32	s15, s14
  21575e:	e7e6      	b.n	21572e <__ieee754_atan2f+0x26>
  215760:	b941      	cbnz	r1, 215774 <__ieee754_atan2f+0x6c>
  215762:	ed9f 7a36 	vldr	s14, [pc, #216]	; 21583c <__ieee754_atan2f+0x134>
  215766:	eddf 7a36 	vldr	s15, [pc, #216]	; 215840 <__ieee754_atan2f+0x138>
  21576a:	2800      	cmp	r0, #0
  21576c:	bfb8      	it	lt
  21576e:	eef0 7a47 	vmovlt.f32	s15, s14
  215772:	e7dc      	b.n	21572e <__ieee754_atan2f+0x26>
  215774:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  215778:	d125      	bne.n	2157c6 <__ieee754_atan2f+0xbe>
  21577a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  21577e:	d112      	bne.n	2157a6 <__ieee754_atan2f+0x9e>
  215780:	2c02      	cmp	r4, #2
  215782:	d00a      	beq.n	21579a <__ieee754_atan2f+0x92>
  215784:	2c03      	cmp	r4, #3
  215786:	d00b      	beq.n	2157a0 <__ieee754_atan2f+0x98>
  215788:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 215844 <__ieee754_atan2f+0x13c>
  21578c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 215848 <__ieee754_atan2f+0x140>
  215790:	2c01      	cmp	r4, #1
  215792:	bf18      	it	ne
  215794:	eef0 7a47 	vmovne.f32	s15, s14
  215798:	e7c9      	b.n	21572e <__ieee754_atan2f+0x26>
  21579a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 21584c <__ieee754_atan2f+0x144>
  21579e:	e7c6      	b.n	21572e <__ieee754_atan2f+0x26>
  2157a0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 215850 <__ieee754_atan2f+0x148>
  2157a4:	e7c3      	b.n	21572e <__ieee754_atan2f+0x26>
  2157a6:	2c02      	cmp	r4, #2
  2157a8:	d007      	beq.n	2157ba <__ieee754_atan2f+0xb2>
  2157aa:	2c03      	cmp	r4, #3
  2157ac:	d008      	beq.n	2157c0 <__ieee754_atan2f+0xb8>
  2157ae:	2c01      	cmp	r4, #1
  2157b0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 215854 <__ieee754_atan2f+0x14c>
  2157b4:	eddf 7a28 	vldr	s15, [pc, #160]	; 215858 <__ieee754_atan2f+0x150>
  2157b8:	e7eb      	b.n	215792 <__ieee754_atan2f+0x8a>
  2157ba:	eddf 7a28 	vldr	s15, [pc, #160]	; 21585c <__ieee754_atan2f+0x154>
  2157be:	e7b6      	b.n	21572e <__ieee754_atan2f+0x26>
  2157c0:	eddf 7a1d 	vldr	s15, [pc, #116]	; 215838 <__ieee754_atan2f+0x130>
  2157c4:	e7b3      	b.n	21572e <__ieee754_atan2f+0x26>
  2157c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  2157ca:	d0ca      	beq.n	215762 <__ieee754_atan2f+0x5a>
  2157cc:	1a5b      	subs	r3, r3, r1
  2157ce:	15db      	asrs	r3, r3, #23
  2157d0:	2b3c      	cmp	r3, #60	; 0x3c
  2157d2:	dc1a      	bgt.n	21580a <__ieee754_atan2f+0x102>
  2157d4:	2a00      	cmp	r2, #0
  2157d6:	da01      	bge.n	2157dc <__ieee754_atan2f+0xd4>
  2157d8:	333c      	adds	r3, #60	; 0x3c
  2157da:	db19      	blt.n	215810 <__ieee754_atan2f+0x108>
  2157dc:	ee87 0aa0 	vdiv.f32	s0, s15, s1
  2157e0:	f000 ff14 	bl	21660c <fabsf>
  2157e4:	f000 fe40 	bl	216468 <atanf>
  2157e8:	eef0 7a40 	vmov.f32	s15, s0
  2157ec:	2c01      	cmp	r4, #1
  2157ee:	d012      	beq.n	215816 <__ieee754_atan2f+0x10e>
  2157f0:	2c02      	cmp	r4, #2
  2157f2:	d017      	beq.n	215824 <__ieee754_atan2f+0x11c>
  2157f4:	2c00      	cmp	r4, #0
  2157f6:	d09a      	beq.n	21572e <__ieee754_atan2f+0x26>
  2157f8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 215860 <__ieee754_atan2f+0x158>
  2157fc:	ee77 7a87 	vadd.f32	s15, s15, s14
  215800:	ed9f 7a16 	vldr	s14, [pc, #88]	; 21585c <__ieee754_atan2f+0x154>
  215804:	ee77 7ac7 	vsub.f32	s15, s15, s14
  215808:	e791      	b.n	21572e <__ieee754_atan2f+0x26>
  21580a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 215840 <__ieee754_atan2f+0x138>
  21580e:	e7ed      	b.n	2157ec <__ieee754_atan2f+0xe4>
  215810:	eddf 7a10 	vldr	s15, [pc, #64]	; 215854 <__ieee754_atan2f+0x14c>
  215814:	e7ea      	b.n	2157ec <__ieee754_atan2f+0xe4>
  215816:	ee17 3a90 	vmov	r3, s15
  21581a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  21581e:	ee07 3a90 	vmov	s15, r3
  215822:	e784      	b.n	21572e <__ieee754_atan2f+0x26>
  215824:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 215860 <__ieee754_atan2f+0x158>
  215828:	ee77 7a87 	vadd.f32	s15, s15, s14
  21582c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 21585c <__ieee754_atan2f+0x154>
  215830:	ee77 7a67 	vsub.f32	s15, s14, s15
  215834:	e77b      	b.n	21572e <__ieee754_atan2f+0x26>
  215836:	bf00      	nop
  215838:	c0490fdb 	.word	0xc0490fdb
  21583c:	bfc90fdb 	.word	0xbfc90fdb
  215840:	3fc90fdb 	.word	0x3fc90fdb
  215844:	3f490fdb 	.word	0x3f490fdb
  215848:	bf490fdb 	.word	0xbf490fdb
  21584c:	4016cbe4 	.word	0x4016cbe4
  215850:	c016cbe4 	.word	0xc016cbe4
  215854:	00000000 	.word	0x00000000
  215858:	80000000 	.word	0x80000000
  21585c:	40490fdb 	.word	0x40490fdb
  215860:	33bbbd2e 	.word	0x33bbbd2e

00215864 <__ieee754_expf>:
  215864:	ee10 2a10 	vmov	r2, s0
  215868:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
  21586c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  215870:	d902      	bls.n	215878 <__ieee754_expf+0x14>
  215872:	ee30 0a00 	vadd.f32	s0, s0, s0
  215876:	4770      	bx	lr
  215878:	ea4f 73d2 	mov.w	r3, r2, lsr #31
  21587c:	d106      	bne.n	21588c <__ieee754_expf+0x28>
  21587e:	eddf 7a51 	vldr	s15, [pc, #324]	; 2159c4 <__ieee754_expf+0x160>
  215882:	2b00      	cmp	r3, #0
  215884:	bf18      	it	ne
  215886:	eeb0 0a67 	vmovne.f32	s0, s15
  21588a:	4770      	bx	lr
  21588c:	484e      	ldr	r0, [pc, #312]	; (2159c8 <__ieee754_expf+0x164>)
  21588e:	4282      	cmp	r2, r0
  215890:	dd04      	ble.n	21589c <__ieee754_expf+0x38>
  215892:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 2159cc <__ieee754_expf+0x168>
  215896:	ee20 0a00 	vmul.f32	s0, s0, s0
  21589a:	4770      	bx	lr
  21589c:	2a00      	cmp	r2, #0
  21589e:	da03      	bge.n	2158a8 <__ieee754_expf+0x44>
  2158a0:	4a4b      	ldr	r2, [pc, #300]	; (2159d0 <__ieee754_expf+0x16c>)
  2158a2:	4291      	cmp	r1, r2
  2158a4:	f200 808a 	bhi.w	2159bc <__ieee754_expf+0x158>
  2158a8:	4a4a      	ldr	r2, [pc, #296]	; (2159d4 <__ieee754_expf+0x170>)
  2158aa:	4291      	cmp	r1, r2
  2158ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  2158b0:	d954      	bls.n	21595c <__ieee754_expf+0xf8>
  2158b2:	4a49      	ldr	r2, [pc, #292]	; (2159d8 <__ieee754_expf+0x174>)
  2158b4:	4291      	cmp	r1, r2
  2158b6:	ea4f 0283 	mov.w	r2, r3, lsl #2
  2158ba:	d836      	bhi.n	21592a <__ieee754_expf+0xc6>
  2158bc:	4947      	ldr	r1, [pc, #284]	; (2159dc <__ieee754_expf+0x178>)
  2158be:	4411      	add	r1, r2
  2158c0:	ed91 7a00 	vldr	s14, [r1]
  2158c4:	4946      	ldr	r1, [pc, #280]	; (2159e0 <__ieee754_expf+0x17c>)
  2158c6:	440a      	add	r2, r1
  2158c8:	edd2 7a00 	vldr	s15, [r2]
  2158cc:	ee30 7a47 	vsub.f32	s14, s0, s14
  2158d0:	f1c3 0201 	rsb	r2, r3, #1
  2158d4:	1ad2      	subs	r2, r2, r3
  2158d6:	ee37 0a67 	vsub.f32	s0, s14, s15
  2158da:	ee60 6a00 	vmul.f32	s13, s0, s0
  2158de:	eddf 5a41 	vldr	s11, [pc, #260]	; 2159e4 <__ieee754_expf+0x180>
  2158e2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 2159e8 <__ieee754_expf+0x184>
  2158e6:	eea6 5aa5 	vfma.f32	s10, s13, s11
  2158ea:	eddf 5a40 	vldr	s11, [pc, #256]	; 2159ec <__ieee754_expf+0x188>
  2158ee:	eee6 5a85 	vfma.f32	s11, s13, s10
  2158f2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 2159f0 <__ieee754_expf+0x18c>
  2158f6:	eea6 5aa5 	vfma.f32	s10, s13, s11
  2158fa:	eddf 5a3e 	vldr	s11, [pc, #248]	; 2159f4 <__ieee754_expf+0x190>
  2158fe:	eee6 5a85 	vfma.f32	s11, s13, s10
  215902:	eeb0 5a40 	vmov.f32	s10, s0
  215906:	eea6 5ae5 	vfms.f32	s10, s13, s11
  21590a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
  21590e:	eef0 6a45 	vmov.f32	s13, s10
  215912:	ee20 5a05 	vmul.f32	s10, s0, s10
  215916:	bb92      	cbnz	r2, 21597e <__ieee754_expf+0x11a>
  215918:	ee76 6ae5 	vsub.f32	s13, s13, s11
  21591c:	eec5 7a26 	vdiv.f32	s15, s10, s13
  215920:	ee37 0ac0 	vsub.f32	s0, s15, s0
  215924:	ee36 0a40 	vsub.f32	s0, s12, s0
  215928:	4770      	bx	lr
  21592a:	4b33      	ldr	r3, [pc, #204]	; (2159f8 <__ieee754_expf+0x194>)
  21592c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 2159fc <__ieee754_expf+0x198>
  215930:	4413      	add	r3, r2
  215932:	edd3 7a00 	vldr	s15, [r3]
  215936:	eee0 7a07 	vfma.f32	s15, s0, s14
  21593a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 215a00 <__ieee754_expf+0x19c>
  21593e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  215942:	ee17 2a90 	vmov	r2, s15
  215946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  21594a:	eea7 0ac7 	vfms.f32	s0, s15, s14
  21594e:	eeb0 7a40 	vmov.f32	s14, s0
  215952:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 215a04 <__ieee754_expf+0x1a0>
  215956:	ee67 7a80 	vmul.f32	s15, s15, s0
  21595a:	e7bc      	b.n	2158d6 <__ieee754_expf+0x72>
  21595c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
  215960:	d20b      	bcs.n	21597a <__ieee754_expf+0x116>
  215962:	eddf 6a1a 	vldr	s13, [pc, #104]	; 2159cc <__ieee754_expf+0x168>
  215966:	ee70 6a26 	vadd.f32	s13, s0, s13
  21596a:	eef4 6ac6 	vcmpe.f32	s13, s12
  21596e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  215972:	dd02      	ble.n	21597a <__ieee754_expf+0x116>
  215974:	ee30 0a06 	vadd.f32	s0, s0, s12
  215978:	4770      	bx	lr
  21597a:	2200      	movs	r2, #0
  21597c:	e7ad      	b.n	2158da <__ieee754_expf+0x76>
  21597e:	ee75 6ae6 	vsub.f32	s13, s11, s13
  215982:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
  215986:	ee85 0a26 	vdiv.f32	s0, s10, s13
  21598a:	bfb8      	it	lt
  21598c:	3264      	addlt	r2, #100	; 0x64
  21598e:	ee77 7ac0 	vsub.f32	s15, s15, s0
  215992:	ee37 0ac7 	vsub.f32	s0, s15, s14
  215996:	ee76 7a40 	vsub.f32	s15, s12, s0
  21599a:	ee17 3a90 	vmov	r3, s15
  21599e:	bfab      	itete	ge
  2159a0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
  2159a4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
  2159a8:	ee00 3a10 	vmovge	s0, r3
  2159ac:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 215a08 <__ieee754_expf+0x1a4>
  2159b0:	bfbc      	itt	lt
  2159b2:	ee00 3a10 	vmovlt	s0, r3
  2159b6:	ee20 0a27 	vmullt.f32	s0, s0, s15
  2159ba:	4770      	bx	lr
  2159bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 2159c4 <__ieee754_expf+0x160>
  2159c0:	4770      	bx	lr
  2159c2:	bf00      	nop
  2159c4:	00000000 	.word	0x00000000
  2159c8:	42b17217 	.word	0x42b17217
  2159cc:	7149f2ca 	.word	0x7149f2ca
  2159d0:	42cff1b5 	.word	0x42cff1b5
  2159d4:	3eb17218 	.word	0x3eb17218
  2159d8:	3f851591 	.word	0x3f851591
  2159dc:	002188c4 	.word	0x002188c4
  2159e0:	002188cc 	.word	0x002188cc
  2159e4:	3331bb4c 	.word	0x3331bb4c
  2159e8:	b5ddea0e 	.word	0xb5ddea0e
  2159ec:	388ab355 	.word	0x388ab355
  2159f0:	bb360b61 	.word	0xbb360b61
  2159f4:	3e2aaaab 	.word	0x3e2aaaab
  2159f8:	002188bc 	.word	0x002188bc
  2159fc:	3fb8aa3b 	.word	0x3fb8aa3b
  215a00:	3f317180 	.word	0x3f317180
  215a04:	3717f7d1 	.word	0x3717f7d1
  215a08:	0d800000 	.word	0x0d800000

00215a0c <__ieee754_logf>:
  215a0c:	ee10 3a10 	vmov	r3, s0
  215a10:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
  215a14:	d106      	bne.n	215a24 <__ieee754_logf+0x18>
  215a16:	eddf 7a67 	vldr	s15, [pc, #412]	; 215bb4 <__ieee754_logf+0x1a8>
  215a1a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 215bb8 <__ieee754_logf+0x1ac>
  215a1e:	ee87 0a27 	vdiv.f32	s0, s14, s15
  215a22:	4770      	bx	lr
  215a24:	2b00      	cmp	r3, #0
  215a26:	da04      	bge.n	215a32 <__ieee754_logf+0x26>
  215a28:	ee30 7a40 	vsub.f32	s14, s0, s0
  215a2c:	eddf 7a61 	vldr	s15, [pc, #388]	; 215bb4 <__ieee754_logf+0x1a8>
  215a30:	e7f5      	b.n	215a1e <__ieee754_logf+0x12>
  215a32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  215a36:	db02      	blt.n	215a3e <__ieee754_logf+0x32>
  215a38:	ee30 0a00 	vadd.f32	s0, s0, s0
  215a3c:	4770      	bx	lr
  215a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
  215a42:	bfbf      	itttt	lt
  215a44:	eddf 7a5d 	vldrlt	s15, [pc, #372]	; 215bbc <__ieee754_logf+0x1b0>
  215a48:	ee60 7a27 	vmullt.f32	s15, s0, s15
  215a4c:	f06f 0118 	mvnlt.w	r1, #24
  215a50:	ee17 3a90 	vmovlt	r3, s15
  215a54:	ea4f 52e3 	mov.w	r2, r3, asr #23
  215a58:	bfa8      	it	ge
  215a5a:	2100      	movge	r1, #0
  215a5c:	3a7f      	subs	r2, #127	; 0x7f
  215a5e:	440a      	add	r2, r1
  215a60:	4957      	ldr	r1, [pc, #348]	; (215bc0 <__ieee754_logf+0x1b4>)
  215a62:	f3c3 0316 	ubfx	r3, r3, #0, #23
  215a66:	4419      	add	r1, r3
  215a68:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
  215a6c:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
  215a70:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
  215a74:	4319      	orrs	r1, r3
  215a76:	ee07 1a90 	vmov	s15, r1
  215a7a:	f103 010f 	add.w	r1, r3, #15
  215a7e:	f3c1 0116 	ubfx	r1, r1, #0, #23
  215a82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  215a86:	290f      	cmp	r1, #15
  215a88:	ee37 0ac0 	vsub.f32	s0, s15, s0
  215a8c:	dc31      	bgt.n	215af2 <__ieee754_logf+0xe6>
  215a8e:	eeb5 0a40 	vcmp.f32	s0, #0.0
  215a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  215a96:	d10f      	bne.n	215ab8 <__ieee754_logf+0xac>
  215a98:	2a00      	cmp	r2, #0
  215a9a:	f000 8087 	beq.w	215bac <__ieee754_logf+0x1a0>
  215a9e:	ee07 2a90 	vmov	s15, r2
  215aa2:	ed9f 0a48 	vldr	s0, [pc, #288]	; 215bc4 <__ieee754_logf+0x1b8>
  215aa6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 215bc8 <__ieee754_logf+0x1bc>
  215aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  215aae:	ee27 0a80 	vmul.f32	s0, s15, s0
  215ab2:	eea7 0a87 	vfma.f32	s0, s15, s14
  215ab6:	4770      	bx	lr
  215ab8:	eddf 7a44 	vldr	s15, [pc, #272]	; 215bcc <__ieee754_logf+0x1c0>
  215abc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  215ac0:	eea0 7a67 	vfms.f32	s14, s0, s15
  215ac4:	ee60 7a00 	vmul.f32	s15, s0, s0
  215ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
  215acc:	b912      	cbnz	r2, 215ad4 <__ieee754_logf+0xc8>
  215ace:	ee30 0a47 	vsub.f32	s0, s0, s14
  215ad2:	4770      	bx	lr
  215ad4:	ee07 2a90 	vmov	s15, r2
  215ad8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 215bc4 <__ieee754_logf+0x1b8>
  215adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  215ae0:	eea7 7ae6 	vfms.f32	s14, s15, s13
  215ae4:	ee37 0a40 	vsub.f32	s0, s14, s0
  215ae8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 215bc8 <__ieee754_logf+0x1bc>
  215aec:	ee97 0a87 	vfnms.f32	s0, s15, s14
  215af0:	4770      	bx	lr
  215af2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
  215af6:	ee70 7a27 	vadd.f32	s15, s0, s15
  215afa:	ed9f 5a35 	vldr	s10, [pc, #212]	; 215bd0 <__ieee754_logf+0x1c4>
  215afe:	4935      	ldr	r1, [pc, #212]	; (215bd4 <__ieee754_logf+0x1c8>)
  215b00:	eec0 6a27 	vdiv.f32	s13, s0, s15
  215b04:	4419      	add	r1, r3
  215b06:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
  215b0a:	f503 7322 	add.w	r3, r3, #648	; 0x288
  215b0e:	430b      	orrs	r3, r1
  215b10:	2b00      	cmp	r3, #0
  215b12:	ee07 2a90 	vmov	s15, r2
  215b16:	ee26 6aa6 	vmul.f32	s12, s13, s13
  215b1a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
  215b1e:	ee26 7a06 	vmul.f32	s14, s12, s12
  215b22:	eddf 7a2d 	vldr	s15, [pc, #180]	; 215bd8 <__ieee754_logf+0x1cc>
  215b26:	eee7 7a05 	vfma.f32	s15, s14, s10
  215b2a:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 215bdc <__ieee754_logf+0x1d0>
  215b2e:	eea7 5a27 	vfma.f32	s10, s14, s15
  215b32:	eddf 7a2b 	vldr	s15, [pc, #172]	; 215be0 <__ieee754_logf+0x1d4>
  215b36:	eee7 7a05 	vfma.f32	s15, s14, s10
  215b3a:	ed9f 5a2a 	vldr	s10, [pc, #168]	; 215be4 <__ieee754_logf+0x1d8>
  215b3e:	ee67 7a86 	vmul.f32	s15, s15, s12
  215b42:	ed9f 6a29 	vldr	s12, [pc, #164]	; 215be8 <__ieee754_logf+0x1dc>
  215b46:	eea7 5a06 	vfma.f32	s10, s14, s12
  215b4a:	ed9f 6a28 	vldr	s12, [pc, #160]	; 215bec <__ieee754_logf+0x1e0>
  215b4e:	eea7 6a05 	vfma.f32	s12, s14, s10
  215b52:	eee7 7a06 	vfma.f32	s15, s14, s12
  215b56:	dd1a      	ble.n	215b8e <__ieee754_logf+0x182>
  215b58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  215b5c:	ee20 7a07 	vmul.f32	s14, s0, s14
  215b60:	ee27 7a00 	vmul.f32	s14, s14, s0
  215b64:	ee77 7a87 	vadd.f32	s15, s15, s14
  215b68:	b912      	cbnz	r2, 215b70 <__ieee754_logf+0x164>
  215b6a:	eea6 7ae7 	vfms.f32	s14, s13, s15
  215b6e:	e7ae      	b.n	215ace <__ieee754_logf+0xc2>
  215b70:	ed9f 6a14 	vldr	s12, [pc, #80]	; 215bc4 <__ieee754_logf+0x1b8>
  215b74:	ee25 6a86 	vmul.f32	s12, s11, s12
  215b78:	eea6 6aa7 	vfma.f32	s12, s13, s15
  215b7c:	ee37 7a46 	vsub.f32	s14, s14, s12
  215b80:	ee37 0a40 	vsub.f32	s0, s14, s0
  215b84:	eddf 7a10 	vldr	s15, [pc, #64]	; 215bc8 <__ieee754_logf+0x1bc>
  215b88:	ee95 0aa7 	vfnms.f32	s0, s11, s15
  215b8c:	4770      	bx	lr
  215b8e:	ee70 7a67 	vsub.f32	s15, s0, s15
  215b92:	b912      	cbnz	r2, 215b9a <__ieee754_logf+0x18e>
  215b94:	eea6 0ae7 	vfms.f32	s0, s13, s15
  215b98:	4770      	bx	lr
  215b9a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 215bc4 <__ieee754_logf+0x1b8>
  215b9e:	ee27 7a65 	vnmul.f32	s14, s14, s11
  215ba2:	eea6 7aa7 	vfma.f32	s14, s13, s15
  215ba6:	ee37 0a40 	vsub.f32	s0, s14, s0
  215baa:	e7eb      	b.n	215b84 <__ieee754_logf+0x178>
  215bac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 215bb4 <__ieee754_logf+0x1a8>
  215bb0:	4770      	bx	lr
  215bb2:	bf00      	nop
  215bb4:	00000000 	.word	0x00000000
  215bb8:	cc000000 	.word	0xcc000000
  215bbc:	4c000000 	.word	0x4c000000
  215bc0:	004afb20 	.word	0x004afb20
  215bc4:	3717f7d1 	.word	0x3717f7d1
  215bc8:	3f317180 	.word	0x3f317180
  215bcc:	3eaaaaab 	.word	0x3eaaaaab
  215bd0:	3e178897 	.word	0x3e178897
  215bd4:	ffcf5c30 	.word	0xffcf5c30
  215bd8:	3e3a3325 	.word	0x3e3a3325
  215bdc:	3e924925 	.word	0x3e924925
  215be0:	3f2aaaab 	.word	0x3f2aaaab
  215be4:	3e638e29 	.word	0x3e638e29
  215be8:	3e1cd04f 	.word	0x3e1cd04f
  215bec:	3ecccccd 	.word	0x3ecccccd

00215bf0 <__ieee754_rem_pio2f>:
  215bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
  215bf2:	ee10 6a10 	vmov	r6, s0
  215bf6:	4b86      	ldr	r3, [pc, #536]	; (215e10 <__ieee754_rem_pio2f+0x220>)
  215bf8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
  215bfc:	429c      	cmp	r4, r3
  215bfe:	b087      	sub	sp, #28
  215c00:	4605      	mov	r5, r0
  215c02:	dc05      	bgt.n	215c10 <__ieee754_rem_pio2f+0x20>
  215c04:	2300      	movs	r3, #0
  215c06:	ed85 0a00 	vstr	s0, [r5]
  215c0a:	6043      	str	r3, [r0, #4]
  215c0c:	2000      	movs	r0, #0
  215c0e:	e020      	b.n	215c52 <__ieee754_rem_pio2f+0x62>
  215c10:	4b80      	ldr	r3, [pc, #512]	; (215e14 <__ieee754_rem_pio2f+0x224>)
  215c12:	429c      	cmp	r4, r3
  215c14:	dc38      	bgt.n	215c88 <__ieee754_rem_pio2f+0x98>
  215c16:	2e00      	cmp	r6, #0
  215c18:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 215e18 <__ieee754_rem_pio2f+0x228>
  215c1c:	4b7f      	ldr	r3, [pc, #508]	; (215e1c <__ieee754_rem_pio2f+0x22c>)
  215c1e:	f024 040f 	bic.w	r4, r4, #15
  215c22:	dd18      	ble.n	215c56 <__ieee754_rem_pio2f+0x66>
  215c24:	429c      	cmp	r4, r3
  215c26:	ee70 7a47 	vsub.f32	s15, s0, s14
  215c2a:	bf09      	itett	eq
  215c2c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 215e20 <__ieee754_rem_pio2f+0x230>
  215c30:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 215e24 <__ieee754_rem_pio2f+0x234>
  215c34:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
  215c38:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 215e28 <__ieee754_rem_pio2f+0x238>
  215c3c:	ee77 6ac7 	vsub.f32	s13, s15, s14
  215c40:	ee77 7ae6 	vsub.f32	s15, s15, s13
  215c44:	edc0 6a00 	vstr	s13, [r0]
  215c48:	ee77 7ac7 	vsub.f32	s15, s15, s14
  215c4c:	edc0 7a01 	vstr	s15, [r0, #4]
  215c50:	2001      	movs	r0, #1
  215c52:	b007      	add	sp, #28
  215c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  215c56:	429c      	cmp	r4, r3
  215c58:	ee70 7a07 	vadd.f32	s15, s0, s14
  215c5c:	bf09      	itett	eq
  215c5e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 215e20 <__ieee754_rem_pio2f+0x230>
  215c62:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 215e24 <__ieee754_rem_pio2f+0x234>
  215c66:	ee77 7a87 	vaddeq.f32	s15, s15, s14
  215c6a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 215e28 <__ieee754_rem_pio2f+0x238>
  215c6e:	ee77 6a87 	vadd.f32	s13, s15, s14
  215c72:	ee77 7ae6 	vsub.f32	s15, s15, s13
  215c76:	edc0 6a00 	vstr	s13, [r0]
  215c7a:	ee77 7a87 	vadd.f32	s15, s15, s14
  215c7e:	edc0 7a01 	vstr	s15, [r0, #4]
  215c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  215c86:	e7e4      	b.n	215c52 <__ieee754_rem_pio2f+0x62>
  215c88:	4b68      	ldr	r3, [pc, #416]	; (215e2c <__ieee754_rem_pio2f+0x23c>)
  215c8a:	429c      	cmp	r4, r3
  215c8c:	dc71      	bgt.n	215d72 <__ieee754_rem_pio2f+0x182>
  215c8e:	f000 fcbd 	bl	21660c <fabsf>
  215c92:	ed9f 7a67 	vldr	s14, [pc, #412]	; 215e30 <__ieee754_rem_pio2f+0x240>
  215c96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  215c9a:	eee0 7a07 	vfma.f32	s15, s0, s14
  215c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  215ca2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
  215ca6:	ee17 0a90 	vmov	r0, s15
  215caa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 215e18 <__ieee754_rem_pio2f+0x228>
  215cae:	eeb1 7a46 	vneg.f32	s14, s12
  215cb2:	eea7 0a27 	vfma.f32	s0, s14, s15
  215cb6:	281f      	cmp	r0, #31
  215cb8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 215e24 <__ieee754_rem_pio2f+0x234>
  215cbc:	ee66 7a27 	vmul.f32	s15, s12, s15
  215cc0:	ee70 6a67 	vsub.f32	s13, s0, s15
  215cc4:	ee16 3a90 	vmov	r3, s13
  215cc8:	dc1c      	bgt.n	215d04 <__ieee754_rem_pio2f+0x114>
  215cca:	1e47      	subs	r7, r0, #1
  215ccc:	4959      	ldr	r1, [pc, #356]	; (215e34 <__ieee754_rem_pio2f+0x244>)
  215cce:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
  215cd2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
  215cd6:	428a      	cmp	r2, r1
  215cd8:	d014      	beq.n	215d04 <__ieee754_rem_pio2f+0x114>
  215cda:	602b      	str	r3, [r5, #0]
  215cdc:	ed95 7a00 	vldr	s14, [r5]
  215ce0:	ee30 0a47 	vsub.f32	s0, s0, s14
  215ce4:	2e00      	cmp	r6, #0
  215ce6:	ee30 0a67 	vsub.f32	s0, s0, s15
  215cea:	ed85 0a01 	vstr	s0, [r5, #4]
  215cee:	dab0      	bge.n	215c52 <__ieee754_rem_pio2f+0x62>
  215cf0:	eeb1 7a47 	vneg.f32	s14, s14
  215cf4:	eeb1 0a40 	vneg.f32	s0, s0
  215cf8:	ed85 7a00 	vstr	s14, [r5]
  215cfc:	ed85 0a01 	vstr	s0, [r5, #4]
  215d00:	4240      	negs	r0, r0
  215d02:	e7a6      	b.n	215c52 <__ieee754_rem_pio2f+0x62>
  215d04:	15e4      	asrs	r4, r4, #23
  215d06:	f3c3 52c7 	ubfx	r2, r3, #23, #8
  215d0a:	1aa2      	subs	r2, r4, r2
  215d0c:	2a08      	cmp	r2, #8
  215d0e:	dde4      	ble.n	215cda <__ieee754_rem_pio2f+0xea>
  215d10:	eddf 7a43 	vldr	s15, [pc, #268]	; 215e20 <__ieee754_rem_pio2f+0x230>
  215d14:	eef0 6a40 	vmov.f32	s13, s0
  215d18:	eee7 6a27 	vfma.f32	s13, s14, s15
  215d1c:	ee30 0a66 	vsub.f32	s0, s0, s13
  215d20:	eea7 0a27 	vfma.f32	s0, s14, s15
  215d24:	eddf 7a40 	vldr	s15, [pc, #256]	; 215e28 <__ieee754_rem_pio2f+0x238>
  215d28:	ee96 0a27 	vfnms.f32	s0, s12, s15
  215d2c:	ee76 5ac0 	vsub.f32	s11, s13, s0
  215d30:	eef0 7a40 	vmov.f32	s15, s0
  215d34:	ee15 3a90 	vmov	r3, s11
  215d38:	f3c3 52c7 	ubfx	r2, r3, #23, #8
  215d3c:	1aa4      	subs	r4, r4, r2
  215d3e:	2c19      	cmp	r4, #25
  215d40:	dc04      	bgt.n	215d4c <__ieee754_rem_pio2f+0x15c>
  215d42:	edc5 5a00 	vstr	s11, [r5]
  215d46:	eeb0 0a66 	vmov.f32	s0, s13
  215d4a:	e7c7      	b.n	215cdc <__ieee754_rem_pio2f+0xec>
  215d4c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 215e38 <__ieee754_rem_pio2f+0x248>
  215d50:	eeb0 0a66 	vmov.f32	s0, s13
  215d54:	eea7 0a25 	vfma.f32	s0, s14, s11
  215d58:	ee76 7ac0 	vsub.f32	s15, s13, s0
  215d5c:	eee7 7a25 	vfma.f32	s15, s14, s11
  215d60:	ed9f 7a36 	vldr	s14, [pc, #216]	; 215e3c <__ieee754_rem_pio2f+0x24c>
  215d64:	eed6 7a07 	vfnms.f32	s15, s12, s14
  215d68:	ee30 7a67 	vsub.f32	s14, s0, s15
  215d6c:	ed85 7a00 	vstr	s14, [r5]
  215d70:	e7b4      	b.n	215cdc <__ieee754_rem_pio2f+0xec>
  215d72:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
  215d76:	db06      	blt.n	215d86 <__ieee754_rem_pio2f+0x196>
  215d78:	ee70 7a40 	vsub.f32	s15, s0, s0
  215d7c:	edc0 7a01 	vstr	s15, [r0, #4]
  215d80:	edc0 7a00 	vstr	s15, [r0]
  215d84:	e742      	b.n	215c0c <__ieee754_rem_pio2f+0x1c>
  215d86:	15e2      	asrs	r2, r4, #23
  215d88:	3a86      	subs	r2, #134	; 0x86
  215d8a:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
  215d8e:	ee07 3a90 	vmov	s15, r3
  215d92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  215d96:	eddf 6a2a 	vldr	s13, [pc, #168]	; 215e40 <__ieee754_rem_pio2f+0x250>
  215d9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  215d9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
  215da2:	ed8d 7a03 	vstr	s14, [sp, #12]
  215da6:	ee67 7aa6 	vmul.f32	s15, s15, s13
  215daa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  215dae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  215db2:	ee77 7ac7 	vsub.f32	s15, s15, s14
  215db6:	ed8d 7a04 	vstr	s14, [sp, #16]
  215dba:	ee67 7aa6 	vmul.f32	s15, s15, s13
  215dbe:	eef5 7a40 	vcmp.f32	s15, #0.0
  215dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  215dc6:	edcd 7a05 	vstr	s15, [sp, #20]
  215dca:	d11e      	bne.n	215e0a <__ieee754_rem_pio2f+0x21a>
  215dcc:	eeb5 7a40 	vcmp.f32	s14, #0.0
  215dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  215dd4:	bf14      	ite	ne
  215dd6:	2302      	movne	r3, #2
  215dd8:	2301      	moveq	r3, #1
  215dda:	491a      	ldr	r1, [pc, #104]	; (215e44 <__ieee754_rem_pio2f+0x254>)
  215ddc:	9101      	str	r1, [sp, #4]
  215dde:	2102      	movs	r1, #2
  215de0:	9100      	str	r1, [sp, #0]
  215de2:	a803      	add	r0, sp, #12
  215de4:	4629      	mov	r1, r5
  215de6:	f000 f88d 	bl	215f04 <__kernel_rem_pio2f>
  215dea:	2e00      	cmp	r6, #0
  215dec:	f6bf af31 	bge.w	215c52 <__ieee754_rem_pio2f+0x62>
  215df0:	edd5 7a00 	vldr	s15, [r5]
  215df4:	eef1 7a67 	vneg.f32	s15, s15
  215df8:	edc5 7a00 	vstr	s15, [r5]
  215dfc:	edd5 7a01 	vldr	s15, [r5, #4]
  215e00:	eef1 7a67 	vneg.f32	s15, s15
  215e04:	edc5 7a01 	vstr	s15, [r5, #4]
  215e08:	e77a      	b.n	215d00 <__ieee754_rem_pio2f+0x110>
  215e0a:	2303      	movs	r3, #3
  215e0c:	e7e5      	b.n	215dda <__ieee754_rem_pio2f+0x1ea>
  215e0e:	bf00      	nop
  215e10:	3f490fd8 	.word	0x3f490fd8
  215e14:	4016cbe3 	.word	0x4016cbe3
  215e18:	3fc90f80 	.word	0x3fc90f80
  215e1c:	3fc90fd0 	.word	0x3fc90fd0
  215e20:	37354400 	.word	0x37354400
  215e24:	37354443 	.word	0x37354443
  215e28:	2e85a308 	.word	0x2e85a308
  215e2c:	43490f80 	.word	0x43490f80
  215e30:	3f22f984 	.word	0x3f22f984
  215e34:	002188d4 	.word	0x002188d4
  215e38:	2e85a300 	.word	0x2e85a300
  215e3c:	248d3132 	.word	0x248d3132
  215e40:	43800000 	.word	0x43800000
  215e44:	00218954 	.word	0x00218954

00215e48 <__kernel_cosf>:
  215e48:	ee10 3a10 	vmov	r3, s0
  215e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  215e50:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
  215e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  215e58:	da05      	bge.n	215e66 <__kernel_cosf+0x1e>
  215e5a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  215e5e:	ee17 2a90 	vmov	r2, s15
  215e62:	2a00      	cmp	r2, #0
  215e64:	d03b      	beq.n	215ede <__kernel_cosf+0x96>
  215e66:	ee20 7a00 	vmul.f32	s14, s0, s0
  215e6a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 215ee4 <__kernel_cosf+0x9c>
  215e6e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 215ee8 <__kernel_cosf+0xa0>
  215e72:	eddf 5a1e 	vldr	s11, [pc, #120]	; 215eec <__kernel_cosf+0xa4>
  215e76:	4a1e      	ldr	r2, [pc, #120]	; (215ef0 <__kernel_cosf+0xa8>)
  215e78:	eea7 6a27 	vfma.f32	s12, s14, s15
  215e7c:	4293      	cmp	r3, r2
  215e7e:	ee60 0a20 	vmul.f32	s1, s0, s1
  215e82:	eee7 5a06 	vfma.f32	s11, s14, s12
  215e86:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 215ef4 <__kernel_cosf+0xac>
  215e8a:	eea7 6a25 	vfma.f32	s12, s14, s11
  215e8e:	eddf 5a1a 	vldr	s11, [pc, #104]	; 215ef8 <__kernel_cosf+0xb0>
  215e92:	eee7 5a06 	vfma.f32	s11, s14, s12
  215e96:	ed9f 6a19 	vldr	s12, [pc, #100]	; 215efc <__kernel_cosf+0xb4>
  215e9a:	eea7 6a25 	vfma.f32	s12, s14, s11
  215e9e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
  215ea2:	ee26 6a07 	vmul.f32	s12, s12, s14
  215ea6:	dc06      	bgt.n	215eb6 <__kernel_cosf+0x6e>
  215ea8:	eed7 0a06 	vfnms.f32	s1, s14, s12
  215eac:	eed7 0a25 	vfnms.f32	s1, s14, s11
  215eb0:	ee36 0ae0 	vsub.f32	s0, s13, s1
  215eb4:	4770      	bx	lr
  215eb6:	4a12      	ldr	r2, [pc, #72]	; (215f00 <__kernel_cosf+0xb8>)
  215eb8:	4293      	cmp	r3, r2
  215eba:	bfda      	itte	le
  215ebc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
  215ec0:	ee07 3a90 	vmovle	s15, r3
  215ec4:	eef5 7a02 	vmovgt.f32	s15, #82	; 0x3e900000  0.2812500
  215ec8:	ee76 6ae7 	vsub.f32	s13, s13, s15
  215ecc:	eed7 0a06 	vfnms.f32	s1, s14, s12
  215ed0:	eed7 7a25 	vfnms.f32	s15, s14, s11
  215ed4:	ee77 7ae0 	vsub.f32	s15, s15, s1
  215ed8:	ee36 0ae7 	vsub.f32	s0, s13, s15
  215edc:	4770      	bx	lr
  215ede:	eeb0 0a66 	vmov.f32	s0, s13
  215ee2:	4770      	bx	lr
  215ee4:	310f74f6 	.word	0x310f74f6
  215ee8:	ad47d74e 	.word	0xad47d74e
  215eec:	b493f27c 	.word	0xb493f27c
  215ef0:	3e999999 	.word	0x3e999999
  215ef4:	37d00d01 	.word	0x37d00d01
  215ef8:	bab60b61 	.word	0xbab60b61
  215efc:	3d2aaaab 	.word	0x3d2aaaab
  215f00:	3f480000 	.word	0x3f480000

00215f04 <__kernel_rem_pio2f>:
  215f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  215f08:	ed2d 8b04 	vpush	{d8-d9}
  215f0c:	b0d7      	sub	sp, #348	; 0x15c
  215f0e:	468b      	mov	fp, r1
  215f10:	9301      	str	r3, [sp, #4]
  215f12:	9964      	ldr	r1, [sp, #400]	; 0x190
  215f14:	4bcb      	ldr	r3, [pc, #812]	; (216244 <__kernel_rem_pio2f+0x340>)
  215f16:	9002      	str	r0, [sp, #8]
  215f18:	f853 a021 	ldr.w	sl, [r3, r1, lsl #2]
  215f1c:	9b01      	ldr	r3, [sp, #4]
  215f1e:	9e65      	ldr	r6, [sp, #404]	; 0x194
  215f20:	ed9f 7acc 	vldr	s14, [pc, #816]	; 216254 <__kernel_rem_pio2f+0x350>
  215f24:	3b01      	subs	r3, #1
  215f26:	1ed0      	subs	r0, r2, #3
  215f28:	2408      	movs	r4, #8
  215f2a:	fb90 f0f4 	sdiv	r0, r0, r4
  215f2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  215f32:	1c45      	adds	r5, r0, #1
  215f34:	1ac7      	subs	r7, r0, r3
  215f36:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
  215f3a:	eb0a 0e03 	add.w	lr, sl, r3
  215f3e:	ac1a      	add	r4, sp, #104	; 0x68
  215f40:	eb06 0c87 	add.w	ip, r6, r7, lsl #2
  215f44:	2200      	movs	r2, #0
  215f46:	4572      	cmp	r2, lr
  215f48:	dd0f      	ble.n	215f6a <__kernel_rem_pio2f+0x66>
  215f4a:	f50d 7e84 	add.w	lr, sp, #264	; 0x108
  215f4e:	2400      	movs	r4, #0
  215f50:	4554      	cmp	r4, sl
  215f52:	dc26      	bgt.n	215fa2 <__kernel_rem_pio2f+0x9e>
  215f54:	9a01      	ldr	r2, [sp, #4]
  215f56:	9f02      	ldr	r7, [sp, #8]
  215f58:	eddf 7abe 	vldr	s15, [pc, #760]	; 216254 <__kernel_rem_pio2f+0x350>
  215f5c:	4422      	add	r2, r4
  215f5e:	a91a      	add	r1, sp, #104	; 0x68
  215f60:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  215f64:	f04f 0c00 	mov.w	ip, #0
  215f68:	e015      	b.n	215f96 <__kernel_rem_pio2f+0x92>
  215f6a:	42d7      	cmn	r7, r2
  215f6c:	bf5d      	ittte	pl
  215f6e:	f85c 1022 	ldrpl.w	r1, [ip, r2, lsl #2]
  215f72:	ee07 1a90 	vmovpl	s15, r1
  215f76:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
  215f7a:	eef0 7a47 	vmovmi.f32	s15, s14
  215f7e:	ece4 7a01 	vstmia	r4!, {s15}
  215f82:	3201      	adds	r2, #1
  215f84:	e7df      	b.n	215f46 <__kernel_rem_pio2f+0x42>
  215f86:	ecf7 6a01 	vldmia	r7!, {s13}
  215f8a:	ed32 7a01 	vldmdb	r2!, {s14}
  215f8e:	eee6 7a87 	vfma.f32	s15, s13, s14
  215f92:	f10c 0c01 	add.w	ip, ip, #1
  215f96:	459c      	cmp	ip, r3
  215f98:	ddf5      	ble.n	215f86 <__kernel_rem_pio2f+0x82>
  215f9a:	ecee 7a01 	vstmia	lr!, {s15}
  215f9e:	3401      	adds	r4, #1
  215fa0:	e7d6      	b.n	215f50 <__kernel_rem_pio2f+0x4c>
  215fa2:	aa06      	add	r2, sp, #24
  215fa4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
  215fa8:	9204      	str	r2, [sp, #16]
  215faa:	eddf 8aa7 	vldr	s17, [pc, #668]	; 216248 <__kernel_rem_pio2f+0x344>
  215fae:	ed9f 9aa7 	vldr	s18, [pc, #668]	; 21624c <__kernel_rem_pio2f+0x348>
  215fb2:	eb06 0280 	add.w	r2, r6, r0, lsl #2
  215fb6:	9203      	str	r2, [sp, #12]
  215fb8:	4657      	mov	r7, sl
  215fba:	aa56      	add	r2, sp, #344	; 0x158
  215fbc:	f107 4880 	add.w	r8, r7, #1073741824	; 0x40000000
  215fc0:	eb02 0287 	add.w	r2, r2, r7, lsl #2
  215fc4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  215fc8:	ed12 0a14 	vldr	s0, [r2, #-80]	; 0xffffffb0
  215fcc:	ea4f 0888 	mov.w	r8, r8, lsl #2
  215fd0:	aa56      	add	r2, sp, #344	; 0x158
  215fd2:	eb02 0008 	add.w	r0, r2, r8
  215fd6:	384c      	subs	r0, #76	; 0x4c
  215fd8:	2200      	movs	r2, #0
  215fda:	1abc      	subs	r4, r7, r2
  215fdc:	2c00      	cmp	r4, #0
  215fde:	dc4a      	bgt.n	216076 <__kernel_rem_pio2f+0x172>
  215fe0:	4628      	mov	r0, r5
  215fe2:	9305      	str	r3, [sp, #20]
  215fe4:	f000 fb66 	bl	2166b4 <scalbnf>
  215fe8:	eeb0 8a40 	vmov.f32	s16, s0
  215fec:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
  215ff0:	ee28 0a00 	vmul.f32	s0, s16, s0
  215ff4:	f000 fb1c 	bl	216630 <floorf>
  215ff8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
  215ffc:	eea0 8a67 	vfms.f32	s16, s0, s15
  216000:	2d00      	cmp	r5, #0
  216002:	9b05      	ldr	r3, [sp, #20]
  216004:	eefd 7ac8 	vcvt.s32.f32	s15, s16
  216008:	ee17 9a90 	vmov	r9, s15
  21600c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  216010:	ee38 8a67 	vsub.f32	s16, s16, s15
  216014:	dd44      	ble.n	2160a0 <__kernel_rem_pio2f+0x19c>
  216016:	1e78      	subs	r0, r7, #1
  216018:	aa06      	add	r2, sp, #24
  21601a:	f1c5 0408 	rsb	r4, r5, #8
  21601e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
  216022:	fa46 f204 	asr.w	r2, r6, r4
  216026:	4491      	add	r9, r2
  216028:	40a2      	lsls	r2, r4
  21602a:	1ab6      	subs	r6, r6, r2
  21602c:	aa06      	add	r2, sp, #24
  21602e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
  216032:	f1c5 0207 	rsb	r2, r5, #7
  216036:	4116      	asrs	r6, r2
  216038:	2e00      	cmp	r6, #0
  21603a:	dd40      	ble.n	2160be <__kernel_rem_pio2f+0x1ba>
  21603c:	2400      	movs	r4, #0
  21603e:	f109 0901 	add.w	r9, r9, #1
  216042:	4620      	mov	r0, r4
  216044:	42a7      	cmp	r7, r4
  216046:	dc75      	bgt.n	216134 <__kernel_rem_pio2f+0x230>
  216048:	2d00      	cmp	r5, #0
  21604a:	dd05      	ble.n	216058 <__kernel_rem_pio2f+0x154>
  21604c:	2d01      	cmp	r5, #1
  21604e:	f000 8086 	beq.w	21615e <__kernel_rem_pio2f+0x25a>
  216052:	2d02      	cmp	r5, #2
  216054:	f000 808d 	beq.w	216172 <__kernel_rem_pio2f+0x26e>
  216058:	2e02      	cmp	r6, #2
  21605a:	d130      	bne.n	2160be <__kernel_rem_pio2f+0x1ba>
  21605c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  216060:	ee30 8a48 	vsub.f32	s16, s0, s16
  216064:	b358      	cbz	r0, 2160be <__kernel_rem_pio2f+0x1ba>
  216066:	4628      	mov	r0, r5
  216068:	9305      	str	r3, [sp, #20]
  21606a:	f000 fb23 	bl	2166b4 <scalbnf>
  21606e:	9b05      	ldr	r3, [sp, #20]
  216070:	ee38 8a40 	vsub.f32	s16, s16, s0
  216074:	e023      	b.n	2160be <__kernel_rem_pio2f+0x1ba>
  216076:	ee60 7a28 	vmul.f32	s15, s0, s17
  21607a:	ac06      	add	r4, sp, #24
  21607c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  216080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  216084:	eea7 0ac9 	vfms.f32	s0, s15, s18
  216088:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  21608c:	ee10 1a10 	vmov	r1, s0
  216090:	ed30 0a01 	vldmdb	r0!, {s0}
  216094:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
  216098:	ee37 0a80 	vadd.f32	s0, s15, s0
  21609c:	3201      	adds	r2, #1
  21609e:	e79c      	b.n	215fda <__kernel_rem_pio2f+0xd6>
  2160a0:	d105      	bne.n	2160ae <__kernel_rem_pio2f+0x1aa>
  2160a2:	1e7a      	subs	r2, r7, #1
  2160a4:	a906      	add	r1, sp, #24
  2160a6:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
  2160aa:	1236      	asrs	r6, r6, #8
  2160ac:	e7c4      	b.n	216038 <__kernel_rem_pio2f+0x134>
  2160ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  2160b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
  2160b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  2160ba:	da39      	bge.n	216130 <__kernel_rem_pio2f+0x22c>
  2160bc:	2600      	movs	r6, #0
  2160be:	eeb5 8a40 	vcmp.f32	s16, #0.0
  2160c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  2160c6:	f040 808d 	bne.w	2161e4 <__kernel_rem_pio2f+0x2e0>
  2160ca:	1e7c      	subs	r4, r7, #1
  2160cc:	4620      	mov	r0, r4
  2160ce:	2200      	movs	r2, #0
  2160d0:	4550      	cmp	r0, sl
  2160d2:	da55      	bge.n	216180 <__kernel_rem_pio2f+0x27c>
  2160d4:	2a00      	cmp	r2, #0
  2160d6:	d164      	bne.n	2161a2 <__kernel_rem_pio2f+0x29e>
  2160d8:	2401      	movs	r4, #1
  2160da:	f06f 0003 	mvn.w	r0, #3
  2160de:	fb00 f204 	mul.w	r2, r0, r4
  2160e2:	9904      	ldr	r1, [sp, #16]
  2160e4:	588a      	ldr	r2, [r1, r2]
  2160e6:	2a00      	cmp	r2, #0
  2160e8:	d050      	beq.n	21618c <__kernel_rem_pio2f+0x288>
  2160ea:	aa56      	add	r2, sp, #344	; 0x158
  2160ec:	4490      	add	r8, r2
  2160ee:	9a01      	ldr	r2, [sp, #4]
  2160f0:	a91a      	add	r1, sp, #104	; 0x68
  2160f2:	443a      	add	r2, r7
  2160f4:	1c78      	adds	r0, r7, #1
  2160f6:	f1a8 0848 	sub.w	r8, r8, #72	; 0x48
  2160fa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  2160fe:	4427      	add	r7, r4
  216100:	42b8      	cmp	r0, r7
  216102:	f73f af5a 	bgt.w	215fba <__kernel_rem_pio2f+0xb6>
  216106:	9903      	ldr	r1, [sp, #12]
  216108:	9e02      	ldr	r6, [sp, #8]
  21610a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  21610e:	9105      	str	r1, [sp, #20]
  216110:	ee07 1a90 	vmov	s15, r1
  216114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  216118:	2400      	movs	r4, #0
  21611a:	ece2 7a01 	vstmia	r2!, {s15}
  21611e:	eddf 7a4d 	vldr	s15, [pc, #308]	; 216254 <__kernel_rem_pio2f+0x350>
  216122:	4696      	mov	lr, r2
  216124:	429c      	cmp	r4, r3
  216126:	dd33      	ble.n	216190 <__kernel_rem_pio2f+0x28c>
  216128:	ece8 7a01 	vstmia	r8!, {s15}
  21612c:	3001      	adds	r0, #1
  21612e:	e7e7      	b.n	216100 <__kernel_rem_pio2f+0x1fc>
  216130:	2602      	movs	r6, #2
  216132:	e783      	b.n	21603c <__kernel_rem_pio2f+0x138>
  216134:	aa06      	add	r2, sp, #24
  216136:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
  21613a:	b948      	cbnz	r0, 216150 <__kernel_rem_pio2f+0x24c>
  21613c:	b12a      	cbz	r2, 21614a <__kernel_rem_pio2f+0x246>
  21613e:	a906      	add	r1, sp, #24
  216140:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
  216144:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  216148:	2201      	movs	r2, #1
  21614a:	3401      	adds	r4, #1
  21614c:	4610      	mov	r0, r2
  21614e:	e779      	b.n	216044 <__kernel_rem_pio2f+0x140>
  216150:	a906      	add	r1, sp, #24
  216152:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  216156:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  21615a:	4602      	mov	r2, r0
  21615c:	e7f5      	b.n	21614a <__kernel_rem_pio2f+0x246>
  21615e:	1e7c      	subs	r4, r7, #1
  216160:	aa06      	add	r2, sp, #24
  216162:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
  216166:	f002 027f 	and.w	r2, r2, #127	; 0x7f
  21616a:	a906      	add	r1, sp, #24
  21616c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
  216170:	e772      	b.n	216058 <__kernel_rem_pio2f+0x154>
  216172:	1e7c      	subs	r4, r7, #1
  216174:	aa06      	add	r2, sp, #24
  216176:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
  21617a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  21617e:	e7f4      	b.n	21616a <__kernel_rem_pio2f+0x266>
  216180:	a906      	add	r1, sp, #24
  216182:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  216186:	3801      	subs	r0, #1
  216188:	430a      	orrs	r2, r1
  21618a:	e7a1      	b.n	2160d0 <__kernel_rem_pio2f+0x1cc>
  21618c:	3401      	adds	r4, #1
  21618e:	e7a6      	b.n	2160de <__kernel_rem_pio2f+0x1da>
  216190:	ecf6 6a01 	vldmia	r6!, {s13}
  216194:	ed3e 7a01 	vldmdb	lr!, {s14}
  216198:	3401      	adds	r4, #1
  21619a:	eee6 7a87 	vfma.f32	s15, s13, s14
  21619e:	e7c1      	b.n	216124 <__kernel_rem_pio2f+0x220>
  2161a0:	3c01      	subs	r4, #1
  2161a2:	ab06      	add	r3, sp, #24
  2161a4:	3d08      	subs	r5, #8
  2161a6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
  2161aa:	2b00      	cmp	r3, #0
  2161ac:	d0f8      	beq.n	2161a0 <__kernel_rem_pio2f+0x29c>
  2161ae:	4628      	mov	r0, r5
  2161b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  2161b4:	f000 fa7e 	bl	2166b4 <scalbnf>
  2161b8:	00a3      	lsls	r3, r4, #2
  2161ba:	aa42      	add	r2, sp, #264	; 0x108
  2161bc:	3304      	adds	r3, #4
  2161be:	ed9f 7a22 	vldr	s14, [pc, #136]	; 216248 <__kernel_rem_pio2f+0x344>
  2161c2:	18d0      	adds	r0, r2, r3
  2161c4:	4622      	mov	r2, r4
  2161c6:	2a00      	cmp	r2, #0
  2161c8:	da46      	bge.n	216258 <__kernel_rem_pio2f+0x354>
  2161ca:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
  2161ce:	2200      	movs	r2, #0
  2161d0:	1aa5      	subs	r5, r4, r2
  2161d2:	d460      	bmi.n	216296 <__kernel_rem_pio2f+0x392>
  2161d4:	a942      	add	r1, sp, #264	; 0x108
  2161d6:	4f1e      	ldr	r7, [pc, #120]	; (216250 <__kernel_rem_pio2f+0x34c>)
  2161d8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 216254 <__kernel_rem_pio2f+0x350>
  2161dc:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  2161e0:	2000      	movs	r0, #0
  2161e2:	e050      	b.n	216286 <__kernel_rem_pio2f+0x382>
  2161e4:	4268      	negs	r0, r5
  2161e6:	eeb0 0a48 	vmov.f32	s0, s16
  2161ea:	f000 fa63 	bl	2166b4 <scalbnf>
  2161ee:	ed9f 7a17 	vldr	s14, [pc, #92]	; 21624c <__kernel_rem_pio2f+0x348>
  2161f2:	eeb4 0ac7 	vcmpe.f32	s0, s14
  2161f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  2161fa:	db19      	blt.n	216230 <__kernel_rem_pio2f+0x32c>
  2161fc:	eddf 7a12 	vldr	s15, [pc, #72]	; 216248 <__kernel_rem_pio2f+0x344>
  216200:	ee60 7a27 	vmul.f32	s15, s0, s15
  216204:	aa06      	add	r2, sp, #24
  216206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  21620a:	1c7c      	adds	r4, r7, #1
  21620c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  216210:	3508      	adds	r5, #8
  216212:	eea7 0ac7 	vfms.f32	s0, s15, s14
  216216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  21621a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  21621e:	ee10 3a10 	vmov	r3, s0
  216222:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
  216226:	ee17 3a90 	vmov	r3, s15
  21622a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  21622e:	e7be      	b.n	2161ae <__kernel_rem_pio2f+0x2aa>
  216230:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  216234:	aa06      	add	r2, sp, #24
  216236:	ee10 3a10 	vmov	r3, s0
  21623a:	463c      	mov	r4, r7
  21623c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
  216240:	e7b5      	b.n	2161ae <__kernel_rem_pio2f+0x2aa>
  216242:	bf00      	nop
  216244:	00218c98 	.word	0x00218c98
  216248:	3b800000 	.word	0x3b800000
  21624c:	43800000 	.word	0x43800000
  216250:	00218c6c 	.word	0x00218c6c
  216254:	00000000 	.word	0x00000000
  216258:	a906      	add	r1, sp, #24
  21625a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  21625e:	9101      	str	r1, [sp, #4]
  216260:	ee07 1a90 	vmov	s15, r1
  216264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  216268:	3a01      	subs	r2, #1
  21626a:	ee67 7a80 	vmul.f32	s15, s15, s0
  21626e:	ee20 0a07 	vmul.f32	s0, s0, s14
  216272:	ed60 7a01 	vstmdb	r0!, {s15}
  216276:	e7a6      	b.n	2161c6 <__kernel_rem_pio2f+0x2c2>
  216278:	ecf7 6a01 	vldmia	r7!, {s13}
  21627c:	ecb5 7a01 	vldmia	r5!, {s14}
  216280:	eee6 7a87 	vfma.f32	s15, s13, s14
  216284:	3001      	adds	r0, #1
  216286:	4550      	cmp	r0, sl
  216288:	dc01      	bgt.n	21628e <__kernel_rem_pio2f+0x38a>
  21628a:	4290      	cmp	r0, r2
  21628c:	ddf4      	ble.n	216278 <__kernel_rem_pio2f+0x374>
  21628e:	ecee 7a01 	vstmia	lr!, {s15}
  216292:	3201      	adds	r2, #1
  216294:	e79c      	b.n	2161d0 <__kernel_rem_pio2f+0x2cc>
  216296:	9a64      	ldr	r2, [sp, #400]	; 0x190
  216298:	2a03      	cmp	r2, #3
  21629a:	d843      	bhi.n	216324 <__kernel_rem_pio2f+0x420>
  21629c:	e8df f002 	tbb	[pc, r2]
  2162a0:	021d1d37 	.word	0x021d1d37
  2162a4:	aa2e      	add	r2, sp, #184	; 0xb8
  2162a6:	4413      	add	r3, r2
  2162a8:	461a      	mov	r2, r3
  2162aa:	4620      	mov	r0, r4
  2162ac:	2800      	cmp	r0, #0
  2162ae:	dc55      	bgt.n	21635c <__kernel_rem_pio2f+0x458>
  2162b0:	461a      	mov	r2, r3
  2162b2:	4620      	mov	r0, r4
  2162b4:	2801      	cmp	r0, #1
  2162b6:	dc61      	bgt.n	21637c <__kernel_rem_pio2f+0x478>
  2162b8:	ed5f 7a1a 	vldr	s15, [pc, #-104]	; 216254 <__kernel_rem_pio2f+0x350>
  2162bc:	2c01      	cmp	r4, #1
  2162be:	dc6d      	bgt.n	21639c <__kernel_rem_pio2f+0x498>
  2162c0:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
  2162c4:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
  2162c8:	2e00      	cmp	r6, #0
  2162ca:	d16d      	bne.n	2163a8 <__kernel_rem_pio2f+0x4a4>
  2162cc:	edcb 6a00 	vstr	s13, [fp]
  2162d0:	ed8b 7a01 	vstr	s14, [fp, #4]
  2162d4:	edcb 7a02 	vstr	s15, [fp, #8]
  2162d8:	e024      	b.n	216324 <__kernel_rem_pio2f+0x420>
  2162da:	aa2e      	add	r2, sp, #184	; 0xb8
  2162dc:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 216254 <__kernel_rem_pio2f+0x350>
  2162e0:	4413      	add	r3, r2
  2162e2:	4622      	mov	r2, r4
  2162e4:	2a00      	cmp	r2, #0
  2162e6:	da2a      	bge.n	21633e <__kernel_rem_pio2f+0x43a>
  2162e8:	b37e      	cbz	r6, 21634a <__kernel_rem_pio2f+0x446>
  2162ea:	eef1 7a47 	vneg.f32	s15, s14
  2162ee:	edcb 7a00 	vstr	s15, [fp]
  2162f2:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
  2162f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
  2162fa:	aa2f      	add	r2, sp, #188	; 0xbc
  2162fc:	2301      	movs	r3, #1
  2162fe:	429c      	cmp	r4, r3
  216300:	da26      	bge.n	216350 <__kernel_rem_pio2f+0x44c>
  216302:	b10e      	cbz	r6, 216308 <__kernel_rem_pio2f+0x404>
  216304:	eef1 7a67 	vneg.f32	s15, s15
  216308:	edcb 7a01 	vstr	s15, [fp, #4]
  21630c:	e00a      	b.n	216324 <__kernel_rem_pio2f+0x420>
  21630e:	aa2e      	add	r2, sp, #184	; 0xb8
  216310:	ed5f 7a30 	vldr	s15, [pc, #-192]	; 216254 <__kernel_rem_pio2f+0x350>
  216314:	4413      	add	r3, r2
  216316:	2c00      	cmp	r4, #0
  216318:	da0b      	bge.n	216332 <__kernel_rem_pio2f+0x42e>
  21631a:	b10e      	cbz	r6, 216320 <__kernel_rem_pio2f+0x41c>
  21631c:	eef1 7a67 	vneg.f32	s15, s15
  216320:	edcb 7a00 	vstr	s15, [fp]
  216324:	f009 0007 	and.w	r0, r9, #7
  216328:	b057      	add	sp, #348	; 0x15c
  21632a:	ecbd 8b04 	vpop	{d8-d9}
  21632e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  216332:	ed33 7a01 	vldmdb	r3!, {s14}
  216336:	3c01      	subs	r4, #1
  216338:	ee77 7a87 	vadd.f32	s15, s15, s14
  21633c:	e7eb      	b.n	216316 <__kernel_rem_pio2f+0x412>
  21633e:	ed73 7a01 	vldmdb	r3!, {s15}
  216342:	3a01      	subs	r2, #1
  216344:	ee37 7a27 	vadd.f32	s14, s14, s15
  216348:	e7cc      	b.n	2162e4 <__kernel_rem_pio2f+0x3e0>
  21634a:	eef0 7a47 	vmov.f32	s15, s14
  21634e:	e7ce      	b.n	2162ee <__kernel_rem_pio2f+0x3ea>
  216350:	ecb2 7a01 	vldmia	r2!, {s14}
  216354:	3301      	adds	r3, #1
  216356:	ee77 7a87 	vadd.f32	s15, s15, s14
  21635a:	e7d0      	b.n	2162fe <__kernel_rem_pio2f+0x3fa>
  21635c:	ed52 6a01 	vldr	s13, [r2, #-4]
  216360:	ed52 7a02 	vldr	s15, [r2, #-8]
  216364:	ee37 7aa6 	vadd.f32	s14, s15, s13
  216368:	3801      	subs	r0, #1
  21636a:	ee77 7ac7 	vsub.f32	s15, s15, s14
  21636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
  216372:	ed62 7a01 	vstmdb	r2!, {s15}
  216376:	ed02 7a01 	vstr	s14, [r2, #-4]
  21637a:	e797      	b.n	2162ac <__kernel_rem_pio2f+0x3a8>
  21637c:	ed52 6a01 	vldr	s13, [r2, #-4]
  216380:	ed52 7a02 	vldr	s15, [r2, #-8]
  216384:	ee37 7aa6 	vadd.f32	s14, s15, s13
  216388:	3801      	subs	r0, #1
  21638a:	ee77 7ac7 	vsub.f32	s15, s15, s14
  21638e:	ee77 7aa6 	vadd.f32	s15, s15, s13
  216392:	ed62 7a01 	vstmdb	r2!, {s15}
  216396:	ed02 7a01 	vstr	s14, [r2, #-4]
  21639a:	e78b      	b.n	2162b4 <__kernel_rem_pio2f+0x3b0>
  21639c:	ed33 7a01 	vldmdb	r3!, {s14}
  2163a0:	3c01      	subs	r4, #1
  2163a2:	ee77 7a87 	vadd.f32	s15, s15, s14
  2163a6:	e789      	b.n	2162bc <__kernel_rem_pio2f+0x3b8>
  2163a8:	eef1 6a66 	vneg.f32	s13, s13
  2163ac:	eeb1 7a47 	vneg.f32	s14, s14
  2163b0:	edcb 6a00 	vstr	s13, [fp]
  2163b4:	ed8b 7a01 	vstr	s14, [fp, #4]
  2163b8:	eef1 7a67 	vneg.f32	s15, s15
  2163bc:	e78a      	b.n	2162d4 <__kernel_rem_pio2f+0x3d0>
  2163be:	bf00      	nop

002163c0 <__kernel_sinf>:
  2163c0:	ee10 3a10 	vmov	r3, s0
  2163c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  2163c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
  2163cc:	da04      	bge.n	2163d8 <__kernel_sinf+0x18>
  2163ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  2163d2:	ee17 3a90 	vmov	r3, s15
  2163d6:	b35b      	cbz	r3, 216430 <__kernel_sinf+0x70>
  2163d8:	ee20 7a00 	vmul.f32	s14, s0, s0
  2163dc:	eddf 7a15 	vldr	s15, [pc, #84]	; 216434 <__kernel_sinf+0x74>
  2163e0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 216438 <__kernel_sinf+0x78>
  2163e4:	eea7 6a27 	vfma.f32	s12, s14, s15
  2163e8:	eddf 7a14 	vldr	s15, [pc, #80]	; 21643c <__kernel_sinf+0x7c>
  2163ec:	eee7 7a06 	vfma.f32	s15, s14, s12
  2163f0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 216440 <__kernel_sinf+0x80>
  2163f4:	eea7 6a27 	vfma.f32	s12, s14, s15
  2163f8:	eddf 7a12 	vldr	s15, [pc, #72]	; 216444 <__kernel_sinf+0x84>
  2163fc:	ee60 6a07 	vmul.f32	s13, s0, s14
  216400:	eee7 7a06 	vfma.f32	s15, s14, s12
  216404:	b930      	cbnz	r0, 216414 <__kernel_sinf+0x54>
  216406:	ed9f 6a10 	vldr	s12, [pc, #64]	; 216448 <__kernel_sinf+0x88>
  21640a:	eea7 6a27 	vfma.f32	s12, s14, s15
  21640e:	eea6 0a86 	vfma.f32	s0, s13, s12
  216412:	4770      	bx	lr
  216414:	ee67 7ae6 	vnmul.f32	s15, s15, s13
  216418:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  21641c:	eee0 7a86 	vfma.f32	s15, s1, s12
  216420:	eed7 0a27 	vfnms.f32	s1, s14, s15
  216424:	eddf 7a09 	vldr	s15, [pc, #36]	; 21644c <__kernel_sinf+0x8c>
  216428:	eee6 0aa7 	vfma.f32	s1, s13, s15
  21642c:	ee30 0a60 	vsub.f32	s0, s0, s1
  216430:	4770      	bx	lr
  216432:	bf00      	nop
  216434:	2f2ec9d3 	.word	0x2f2ec9d3
  216438:	b2d72f34 	.word	0xb2d72f34
  21643c:	3638ef1b 	.word	0x3638ef1b
  216440:	b9500d01 	.word	0xb9500d01
  216444:	3c088889 	.word	0x3c088889
  216448:	be2aaaab 	.word	0xbe2aaaab
  21644c:	3e2aaaab 	.word	0x3e2aaaab

00216450 <matherr>:
  216450:	2000      	movs	r0, #0
  216452:	4770      	bx	lr
  216454:	0000      	movs	r0, r0
	...

00216458 <nan>:
  216458:	ed9f 0b01 	vldr	d0, [pc, #4]	; 216460 <nan+0x8>
  21645c:	4770      	bx	lr
  21645e:	bf00      	nop
  216460:	00000000 	.word	0x00000000
  216464:	7ff80000 	.word	0x7ff80000

00216468 <atanf>:
  216468:	b538      	push	{r3, r4, r5, lr}
  21646a:	ee10 5a10 	vmov	r5, s0
  21646e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
  216472:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
  216476:	eef0 7a40 	vmov.f32	s15, s0
  21647a:	db10      	blt.n	21649e <atanf+0x36>
  21647c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
  216480:	dd04      	ble.n	21648c <atanf+0x24>
  216482:	ee70 7a00 	vadd.f32	s15, s0, s0
  216486:	eeb0 0a67 	vmov.f32	s0, s15
  21648a:	bd38      	pop	{r3, r4, r5, pc}
  21648c:	eddf 7a4c 	vldr	s15, [pc, #304]	; 2165c0 <atanf+0x158>
  216490:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 2165c4 <atanf+0x15c>
  216494:	2d00      	cmp	r5, #0
  216496:	bfc8      	it	gt
  216498:	eef0 7a47 	vmovgt.f32	s15, s14
  21649c:	e7f3      	b.n	216486 <atanf+0x1e>
  21649e:	4b4a      	ldr	r3, [pc, #296]	; (2165c8 <atanf+0x160>)
  2164a0:	429c      	cmp	r4, r3
  2164a2:	dc10      	bgt.n	2164c6 <atanf+0x5e>
  2164a4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
  2164a8:	da0a      	bge.n	2164c0 <atanf+0x58>
  2164aa:	ed9f 7a48 	vldr	s14, [pc, #288]	; 2165cc <atanf+0x164>
  2164ae:	ee30 7a07 	vadd.f32	s14, s0, s14
  2164b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  2164b6:	eeb4 7ae6 	vcmpe.f32	s14, s13
  2164ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  2164be:	dce2      	bgt.n	216486 <atanf+0x1e>
  2164c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  2164c4:	e013      	b.n	2164ee <atanf+0x86>
  2164c6:	f000 f8a1 	bl	21660c <fabsf>
  2164ca:	4b41      	ldr	r3, [pc, #260]	; (2165d0 <atanf+0x168>)
  2164cc:	429c      	cmp	r4, r3
  2164ce:	dc4d      	bgt.n	21656c <atanf+0x104>
  2164d0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
  2164d4:	429c      	cmp	r4, r3
  2164d6:	dc3f      	bgt.n	216558 <atanf+0xf0>
  2164d8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
  2164dc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  2164e0:	eea0 7a27 	vfma.f32	s14, s0, s15
  2164e4:	2300      	movs	r3, #0
  2164e6:	ee30 0a27 	vadd.f32	s0, s0, s15
  2164ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
  2164ee:	1c5a      	adds	r2, r3, #1
  2164f0:	ee27 6aa7 	vmul.f32	s12, s15, s15
  2164f4:	eddf 6a37 	vldr	s13, [pc, #220]	; 2165d4 <atanf+0x16c>
  2164f8:	eddf 5a37 	vldr	s11, [pc, #220]	; 2165d8 <atanf+0x170>
  2164fc:	ed9f 5a37 	vldr	s10, [pc, #220]	; 2165dc <atanf+0x174>
  216500:	ee26 7a06 	vmul.f32	s14, s12, s12
  216504:	eee7 5a26 	vfma.f32	s11, s14, s13
  216508:	eddf 6a35 	vldr	s13, [pc, #212]	; 2165e0 <atanf+0x178>
  21650c:	eee7 6a25 	vfma.f32	s13, s14, s11
  216510:	eddf 5a34 	vldr	s11, [pc, #208]	; 2165e4 <atanf+0x17c>
  216514:	eee7 5a26 	vfma.f32	s11, s14, s13
  216518:	eddf 6a33 	vldr	s13, [pc, #204]	; 2165e8 <atanf+0x180>
  21651c:	eee7 6a25 	vfma.f32	s13, s14, s11
  216520:	eddf 5a32 	vldr	s11, [pc, #200]	; 2165ec <atanf+0x184>
  216524:	eee7 5a26 	vfma.f32	s11, s14, s13
  216528:	eddf 6a31 	vldr	s13, [pc, #196]	; 2165f0 <atanf+0x188>
  21652c:	eea7 5a26 	vfma.f32	s10, s14, s13
  216530:	eddf 6a30 	vldr	s13, [pc, #192]	; 2165f4 <atanf+0x18c>
  216534:	eee7 6a05 	vfma.f32	s13, s14, s10
  216538:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 2165f8 <atanf+0x190>
  21653c:	eea7 5a26 	vfma.f32	s10, s14, s13
  216540:	eddf 6a2e 	vldr	s13, [pc, #184]	; 2165fc <atanf+0x194>
  216544:	eee7 6a05 	vfma.f32	s13, s14, s10
  216548:	ee26 7a87 	vmul.f32	s14, s13, s14
  21654c:	ee05 7a86 	vmla.f32	s14, s11, s12
  216550:	d121      	bne.n	216596 <atanf+0x12e>
  216552:	eee7 7ac7 	vfms.f32	s15, s15, s14
  216556:	e796      	b.n	216486 <atanf+0x1e>
  216558:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  21655c:	ee30 7a67 	vsub.f32	s14, s0, s15
  216560:	ee30 0a27 	vadd.f32	s0, s0, s15
  216564:	2301      	movs	r3, #1
  216566:	eec7 7a00 	vdiv.f32	s15, s14, s0
  21656a:	e7c0      	b.n	2164ee <atanf+0x86>
  21656c:	4b24      	ldr	r3, [pc, #144]	; (216600 <atanf+0x198>)
  21656e:	429c      	cmp	r4, r3
  216570:	dc0b      	bgt.n	21658a <atanf+0x122>
  216572:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
  216576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  21657a:	eea0 7a27 	vfma.f32	s14, s0, s15
  21657e:	2302      	movs	r3, #2
  216580:	ee70 6a67 	vsub.f32	s13, s0, s15
  216584:	eec6 7a87 	vdiv.f32	s15, s13, s14
  216588:	e7b1      	b.n	2164ee <atanf+0x86>
  21658a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  21658e:	eec7 7a00 	vdiv.f32	s15, s14, s0
  216592:	2303      	movs	r3, #3
  216594:	e7ab      	b.n	2164ee <atanf+0x86>
  216596:	4a1b      	ldr	r2, [pc, #108]	; (216604 <atanf+0x19c>)
  216598:	491b      	ldr	r1, [pc, #108]	; (216608 <atanf+0x1a0>)
  21659a:	009b      	lsls	r3, r3, #2
  21659c:	441a      	add	r2, r3
  21659e:	440b      	add	r3, r1
  2165a0:	edd3 6a00 	vldr	s13, [r3]
  2165a4:	eed7 6a87 	vfnms.f32	s13, s15, s14
  2165a8:	2d00      	cmp	r5, #0
  2165aa:	ed92 7a00 	vldr	s14, [r2]
  2165ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
  2165b2:	ee77 7a67 	vsub.f32	s15, s14, s15
  2165b6:	bfb8      	it	lt
  2165b8:	eef1 7a67 	vneglt.f32	s15, s15
  2165bc:	e763      	b.n	216486 <atanf+0x1e>
  2165be:	bf00      	nop
  2165c0:	bfc90fdb 	.word	0xbfc90fdb
  2165c4:	3fc90fdb 	.word	0x3fc90fdb
  2165c8:	3edfffff 	.word	0x3edfffff
  2165cc:	7149f2ca 	.word	0x7149f2ca
  2165d0:	3f97ffff 	.word	0x3f97ffff
  2165d4:	3c8569d7 	.word	0x3c8569d7
  2165d8:	3d4bda59 	.word	0x3d4bda59
  2165dc:	bd6ef16b 	.word	0xbd6ef16b
  2165e0:	3d886b35 	.word	0x3d886b35
  2165e4:	3dba2e6e 	.word	0x3dba2e6e
  2165e8:	3e124925 	.word	0x3e124925
  2165ec:	3eaaaaab 	.word	0x3eaaaaab
  2165f0:	bd15a221 	.word	0xbd15a221
  2165f4:	bd9d8795 	.word	0xbd9d8795
  2165f8:	bde38e38 	.word	0xbde38e38
  2165fc:	be4ccccd 	.word	0xbe4ccccd
  216600:	401bffff 	.word	0x401bffff
  216604:	00218ca4 	.word	0x00218ca4
  216608:	00218cb4 	.word	0x00218cb4

0021660c <fabsf>:
  21660c:	ee10 3a10 	vmov	r3, s0
  216610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  216614:	ee00 3a10 	vmov	s0, r3
  216618:	4770      	bx	lr

0021661a <finitef>:
  21661a:	ee10 3a10 	vmov	r3, s0
  21661e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  216622:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
  216626:	bfac      	ite	ge
  216628:	2000      	movge	r0, #0
  21662a:	2001      	movlt	r0, #1
  21662c:	4770      	bx	lr
	...

00216630 <floorf>:
  216630:	ee10 3a10 	vmov	r3, s0
  216634:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
  216638:	0dca      	lsrs	r2, r1, #23
  21663a:	3a7f      	subs	r2, #127	; 0x7f
  21663c:	2a16      	cmp	r2, #22
  21663e:	dc2a      	bgt.n	216696 <floorf+0x66>
  216640:	2a00      	cmp	r2, #0
  216642:	da11      	bge.n	216668 <floorf+0x38>
  216644:	eddf 7a18 	vldr	s15, [pc, #96]	; 2166a8 <floorf+0x78>
  216648:	ee30 0a27 	vadd.f32	s0, s0, s15
  21664c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  216650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  216654:	dd05      	ble.n	216662 <floorf+0x32>
  216656:	2b00      	cmp	r3, #0
  216658:	da23      	bge.n	2166a2 <floorf+0x72>
  21665a:	4a14      	ldr	r2, [pc, #80]	; (2166ac <floorf+0x7c>)
  21665c:	2900      	cmp	r1, #0
  21665e:	bf18      	it	ne
  216660:	4613      	movne	r3, r2
  216662:	ee00 3a10 	vmov	s0, r3
  216666:	4770      	bx	lr
  216668:	4911      	ldr	r1, [pc, #68]	; (2166b0 <floorf+0x80>)
  21666a:	4111      	asrs	r1, r2
  21666c:	420b      	tst	r3, r1
  21666e:	d0fa      	beq.n	216666 <floorf+0x36>
  216670:	eddf 7a0d 	vldr	s15, [pc, #52]	; 2166a8 <floorf+0x78>
  216674:	ee30 0a27 	vadd.f32	s0, s0, s15
  216678:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  21667c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  216680:	ddef      	ble.n	216662 <floorf+0x32>
  216682:	2b00      	cmp	r3, #0
  216684:	bfbe      	ittt	lt
  216686:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
  21668a:	fa40 f202 	asrlt.w	r2, r0, r2
  21668e:	189b      	addlt	r3, r3, r2
  216690:	ea23 0301 	bic.w	r3, r3, r1
  216694:	e7e5      	b.n	216662 <floorf+0x32>
  216696:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  21669a:	d3e4      	bcc.n	216666 <floorf+0x36>
  21669c:	ee30 0a00 	vadd.f32	s0, s0, s0
  2166a0:	4770      	bx	lr
  2166a2:	2300      	movs	r3, #0
  2166a4:	e7dd      	b.n	216662 <floorf+0x32>
  2166a6:	bf00      	nop
  2166a8:	7149f2ca 	.word	0x7149f2ca
  2166ac:	bf800000 	.word	0xbf800000
  2166b0:	007fffff 	.word	0x007fffff

002166b4 <scalbnf>:
  2166b4:	b508      	push	{r3, lr}
  2166b6:	ee10 2a10 	vmov	r2, s0
  2166ba:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
  2166be:	ed2d 8b02 	vpush	{d8}
  2166c2:	eef0 0a40 	vmov.f32	s1, s0
  2166c6:	d004      	beq.n	2166d2 <scalbnf+0x1e>
  2166c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  2166cc:	d306      	bcc.n	2166dc <scalbnf+0x28>
  2166ce:	ee70 0a00 	vadd.f32	s1, s0, s0
  2166d2:	ecbd 8b02 	vpop	{d8}
  2166d6:	eeb0 0a60 	vmov.f32	s0, s1
  2166da:	bd08      	pop	{r3, pc}
  2166dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
  2166e0:	d21c      	bcs.n	21671c <scalbnf+0x68>
  2166e2:	4b1f      	ldr	r3, [pc, #124]	; (216760 <scalbnf+0xac>)
  2166e4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 216764 <scalbnf+0xb0>
  2166e8:	4298      	cmp	r0, r3
  2166ea:	ee60 0a27 	vmul.f32	s1, s0, s15
  2166ee:	db10      	blt.n	216712 <scalbnf+0x5e>
  2166f0:	ee10 2a90 	vmov	r2, s1
  2166f4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
  2166f8:	3b19      	subs	r3, #25
  2166fa:	4403      	add	r3, r0
  2166fc:	2bfe      	cmp	r3, #254	; 0xfe
  2166fe:	dd0f      	ble.n	216720 <scalbnf+0x6c>
  216700:	ed9f 8a19 	vldr	s16, [pc, #100]	; 216768 <scalbnf+0xb4>
  216704:	eeb0 0a48 	vmov.f32	s0, s16
  216708:	f000 f834 	bl	216774 <copysignf>
  21670c:	ee60 0a08 	vmul.f32	s1, s0, s16
  216710:	e7df      	b.n	2166d2 <scalbnf+0x1e>
  216712:	eddf 7a16 	vldr	s15, [pc, #88]	; 21676c <scalbnf+0xb8>
  216716:	ee60 0aa7 	vmul.f32	s1, s1, s15
  21671a:	e7da      	b.n	2166d2 <scalbnf+0x1e>
  21671c:	0ddb      	lsrs	r3, r3, #23
  21671e:	e7ec      	b.n	2166fa <scalbnf+0x46>
  216720:	2b00      	cmp	r3, #0
  216722:	dd06      	ble.n	216732 <scalbnf+0x7e>
  216724:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
  216728:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
  21672c:	ee00 3a90 	vmov	s1, r3
  216730:	e7cf      	b.n	2166d2 <scalbnf+0x1e>
  216732:	f113 0f16 	cmn.w	r3, #22
  216736:	da06      	bge.n	216746 <scalbnf+0x92>
  216738:	f24c 3350 	movw	r3, #50000	; 0xc350
  21673c:	4298      	cmp	r0, r3
  21673e:	dcdf      	bgt.n	216700 <scalbnf+0x4c>
  216740:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 21676c <scalbnf+0xb8>
  216744:	e7de      	b.n	216704 <scalbnf+0x50>
  216746:	3319      	adds	r3, #25
  216748:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
  21674c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
  216750:	eddf 7a07 	vldr	s15, [pc, #28]	; 216770 <scalbnf+0xbc>
  216754:	ee07 3a10 	vmov	s14, r3
  216758:	ee67 0a27 	vmul.f32	s1, s14, s15
  21675c:	e7b9      	b.n	2166d2 <scalbnf+0x1e>
  21675e:	bf00      	nop
  216760:	ffff3cb0 	.word	0xffff3cb0
  216764:	4c000000 	.word	0x4c000000
  216768:	7149f2ca 	.word	0x7149f2ca
  21676c:	0da24260 	.word	0x0da24260
  216770:	33000000 	.word	0x33000000

00216774 <copysignf>:
  216774:	ee10 3a10 	vmov	r3, s0
  216778:	ee10 2a90 	vmov	r2, s1
  21677c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  216780:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
  216784:	4313      	orrs	r3, r2
  216786:	ee00 3a10 	vmov	s0, r3
  21678a:	4770      	bx	lr

0021678c <abort>:
  21678c:	b508      	push	{r3, lr}
  21678e:	2006      	movs	r0, #6
  216790:	f000 f96c 	bl	216a6c <raise>
  216794:	2001      	movs	r0, #1
  216796:	f000 f9d5 	bl	216b44 <_exit>
	...

0021679c <__cxa_atexit>:
  21679c:	b510      	push	{r4, lr}
  21679e:	4c05      	ldr	r4, [pc, #20]	; (2167b4 <__cxa_atexit+0x18>)
  2167a0:	4613      	mov	r3, r2
  2167a2:	b12c      	cbz	r4, 2167b0 <__cxa_atexit+0x14>
  2167a4:	460a      	mov	r2, r1
  2167a6:	4601      	mov	r1, r0
  2167a8:	2002      	movs	r0, #2
  2167aa:	f3af 8000 	nop.w
  2167ae:	bd10      	pop	{r4, pc}
  2167b0:	4620      	mov	r0, r4
  2167b2:	bd10      	pop	{r4, pc}
  2167b4:	00000000 	.word	0x00000000

002167b8 <__errno>:
  2167b8:	4b01      	ldr	r3, [pc, #4]	; (2167c0 <__errno+0x8>)
  2167ba:	6818      	ldr	r0, [r3, #0]
  2167bc:	4770      	bx	lr
  2167be:	bf00      	nop
  2167c0:	2000001c 	.word	0x2000001c

002167c4 <__libc_init_array>:
  2167c4:	b570      	push	{r4, r5, r6, lr}
  2167c6:	4e0d      	ldr	r6, [pc, #52]	; (2167fc <__libc_init_array+0x38>)
  2167c8:	4c0d      	ldr	r4, [pc, #52]	; (216800 <__libc_init_array+0x3c>)
  2167ca:	1ba4      	subs	r4, r4, r6
  2167cc:	10a4      	asrs	r4, r4, #2
  2167ce:	2500      	movs	r5, #0
  2167d0:	42a5      	cmp	r5, r4
  2167d2:	d109      	bne.n	2167e8 <__libc_init_array+0x24>
  2167d4:	4e0b      	ldr	r6, [pc, #44]	; (216804 <__libc_init_array+0x40>)
  2167d6:	4c0c      	ldr	r4, [pc, #48]	; (216808 <__libc_init_array+0x44>)
  2167d8:	f000 f9b6 	bl	216b48 <_init>
  2167dc:	1ba4      	subs	r4, r4, r6
  2167de:	10a4      	asrs	r4, r4, #2
  2167e0:	2500      	movs	r5, #0
  2167e2:	42a5      	cmp	r5, r4
  2167e4:	d105      	bne.n	2167f2 <__libc_init_array+0x2e>
  2167e6:	bd70      	pop	{r4, r5, r6, pc}
  2167e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  2167ec:	4798      	blx	r3
  2167ee:	3501      	adds	r5, #1
  2167f0:	e7ee      	b.n	2167d0 <__libc_init_array+0xc>
  2167f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  2167f6:	4798      	blx	r3
  2167f8:	3501      	adds	r5, #1
  2167fa:	e7f2      	b.n	2167e2 <__libc_init_array+0x1e>
  2167fc:	00219718 	.word	0x00219718
  216800:	00219718 	.word	0x00219718
  216804:	00219718 	.word	0x00219718
  216808:	00219748 	.word	0x00219748

0021680c <malloc>:
  21680c:	4b02      	ldr	r3, [pc, #8]	; (216818 <malloc+0xc>)
  21680e:	4601      	mov	r1, r0
  216810:	6818      	ldr	r0, [r3, #0]
  216812:	f000 b88d 	b.w	216930 <_malloc_r>
  216816:	bf00      	nop
  216818:	2000001c 	.word	0x2000001c

0021681c <free>:
  21681c:	4b02      	ldr	r3, [pc, #8]	; (216828 <free+0xc>)
  21681e:	4601      	mov	r1, r0
  216820:	6818      	ldr	r0, [r3, #0]
  216822:	f000 b837 	b.w	216894 <_free_r>
  216826:	bf00      	nop
  216828:	2000001c 	.word	0x2000001c

0021682c <memcmp>:
  21682c:	b510      	push	{r4, lr}
  21682e:	3901      	subs	r1, #1
  216830:	4402      	add	r2, r0
  216832:	4290      	cmp	r0, r2
  216834:	d101      	bne.n	21683a <memcmp+0xe>
  216836:	2000      	movs	r0, #0
  216838:	bd10      	pop	{r4, pc}
  21683a:	f810 3b01 	ldrb.w	r3, [r0], #1
  21683e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
  216842:	42a3      	cmp	r3, r4
  216844:	d0f5      	beq.n	216832 <memcmp+0x6>
  216846:	1b18      	subs	r0, r3, r4
  216848:	bd10      	pop	{r4, pc}

0021684a <memcpy>:
  21684a:	b510      	push	{r4, lr}
  21684c:	1e43      	subs	r3, r0, #1
  21684e:	440a      	add	r2, r1
  216850:	4291      	cmp	r1, r2
  216852:	d100      	bne.n	216856 <memcpy+0xc>
  216854:	bd10      	pop	{r4, pc}
  216856:	f811 4b01 	ldrb.w	r4, [r1], #1
  21685a:	f803 4f01 	strb.w	r4, [r3, #1]!
  21685e:	e7f7      	b.n	216850 <memcpy+0x6>

00216860 <memmove>:
  216860:	4288      	cmp	r0, r1
  216862:	b510      	push	{r4, lr}
  216864:	eb01 0302 	add.w	r3, r1, r2
  216868:	d803      	bhi.n	216872 <memmove+0x12>
  21686a:	1e42      	subs	r2, r0, #1
  21686c:	4299      	cmp	r1, r3
  21686e:	d10c      	bne.n	21688a <memmove+0x2a>
  216870:	bd10      	pop	{r4, pc}
  216872:	4298      	cmp	r0, r3
  216874:	d2f9      	bcs.n	21686a <memmove+0xa>
  216876:	1881      	adds	r1, r0, r2
  216878:	1ad2      	subs	r2, r2, r3
  21687a:	42d3      	cmn	r3, r2
  21687c:	d100      	bne.n	216880 <memmove+0x20>
  21687e:	bd10      	pop	{r4, pc}
  216880:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  216884:	f801 4d01 	strb.w	r4, [r1, #-1]!
  216888:	e7f7      	b.n	21687a <memmove+0x1a>
  21688a:	f811 4b01 	ldrb.w	r4, [r1], #1
  21688e:	f802 4f01 	strb.w	r4, [r2, #1]!
  216892:	e7eb      	b.n	21686c <memmove+0xc>

00216894 <_free_r>:
  216894:	b538      	push	{r3, r4, r5, lr}
  216896:	4605      	mov	r5, r0
  216898:	2900      	cmp	r1, #0
  21689a:	d045      	beq.n	216928 <_free_r+0x94>
  21689c:	f851 3c04 	ldr.w	r3, [r1, #-4]
  2168a0:	1f0c      	subs	r4, r1, #4
  2168a2:	2b00      	cmp	r3, #0
  2168a4:	bfb8      	it	lt
  2168a6:	18e4      	addlt	r4, r4, r3
  2168a8:	f000 f8fc 	bl	216aa4 <__malloc_lock>
  2168ac:	4a1f      	ldr	r2, [pc, #124]	; (21692c <_free_r+0x98>)
  2168ae:	6813      	ldr	r3, [r2, #0]
  2168b0:	4610      	mov	r0, r2
  2168b2:	b933      	cbnz	r3, 2168c2 <_free_r+0x2e>
  2168b4:	6063      	str	r3, [r4, #4]
  2168b6:	6014      	str	r4, [r2, #0]
  2168b8:	4628      	mov	r0, r5
  2168ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  2168be:	f000 b8f2 	b.w	216aa6 <__malloc_unlock>
  2168c2:	42a3      	cmp	r3, r4
  2168c4:	d90c      	bls.n	2168e0 <_free_r+0x4c>
  2168c6:	6821      	ldr	r1, [r4, #0]
  2168c8:	1862      	adds	r2, r4, r1
  2168ca:	4293      	cmp	r3, r2
  2168cc:	bf04      	itt	eq
  2168ce:	681a      	ldreq	r2, [r3, #0]
  2168d0:	685b      	ldreq	r3, [r3, #4]
  2168d2:	6063      	str	r3, [r4, #4]
  2168d4:	bf04      	itt	eq
  2168d6:	1852      	addeq	r2, r2, r1
  2168d8:	6022      	streq	r2, [r4, #0]
  2168da:	6004      	str	r4, [r0, #0]
  2168dc:	e7ec      	b.n	2168b8 <_free_r+0x24>
  2168de:	4613      	mov	r3, r2
  2168e0:	685a      	ldr	r2, [r3, #4]
  2168e2:	b10a      	cbz	r2, 2168e8 <_free_r+0x54>
  2168e4:	42a2      	cmp	r2, r4
  2168e6:	d9fa      	bls.n	2168de <_free_r+0x4a>
  2168e8:	6819      	ldr	r1, [r3, #0]
  2168ea:	1858      	adds	r0, r3, r1
  2168ec:	42a0      	cmp	r0, r4
  2168ee:	d10b      	bne.n	216908 <_free_r+0x74>
  2168f0:	6820      	ldr	r0, [r4, #0]
  2168f2:	4401      	add	r1, r0
  2168f4:	1858      	adds	r0, r3, r1
  2168f6:	4282      	cmp	r2, r0
  2168f8:	6019      	str	r1, [r3, #0]
  2168fa:	d1dd      	bne.n	2168b8 <_free_r+0x24>
  2168fc:	6810      	ldr	r0, [r2, #0]
  2168fe:	6852      	ldr	r2, [r2, #4]
  216900:	605a      	str	r2, [r3, #4]
  216902:	4401      	add	r1, r0
  216904:	6019      	str	r1, [r3, #0]
  216906:	e7d7      	b.n	2168b8 <_free_r+0x24>
  216908:	d902      	bls.n	216910 <_free_r+0x7c>
  21690a:	230c      	movs	r3, #12
  21690c:	602b      	str	r3, [r5, #0]
  21690e:	e7d3      	b.n	2168b8 <_free_r+0x24>
  216910:	6820      	ldr	r0, [r4, #0]
  216912:	1821      	adds	r1, r4, r0
  216914:	428a      	cmp	r2, r1
  216916:	bf04      	itt	eq
  216918:	6811      	ldreq	r1, [r2, #0]
  21691a:	6852      	ldreq	r2, [r2, #4]
  21691c:	6062      	str	r2, [r4, #4]
  21691e:	bf04      	itt	eq
  216920:	1809      	addeq	r1, r1, r0
  216922:	6021      	streq	r1, [r4, #0]
  216924:	605c      	str	r4, [r3, #4]
  216926:	e7c7      	b.n	2168b8 <_free_r+0x24>
  216928:	bd38      	pop	{r3, r4, r5, pc}
  21692a:	bf00      	nop
  21692c:	20004a7c 	.word	0x20004a7c

00216930 <_malloc_r>:
  216930:	b570      	push	{r4, r5, r6, lr}
  216932:	1ccd      	adds	r5, r1, #3
  216934:	f025 0503 	bic.w	r5, r5, #3
  216938:	3508      	adds	r5, #8
  21693a:	2d0c      	cmp	r5, #12
  21693c:	bf38      	it	cc
  21693e:	250c      	movcc	r5, #12
  216940:	2d00      	cmp	r5, #0
  216942:	4606      	mov	r6, r0
  216944:	db01      	blt.n	21694a <_malloc_r+0x1a>
  216946:	42a9      	cmp	r1, r5
  216948:	d903      	bls.n	216952 <_malloc_r+0x22>
  21694a:	230c      	movs	r3, #12
  21694c:	6033      	str	r3, [r6, #0]
  21694e:	2000      	movs	r0, #0
  216950:	bd70      	pop	{r4, r5, r6, pc}
  216952:	f000 f8a7 	bl	216aa4 <__malloc_lock>
  216956:	4a23      	ldr	r2, [pc, #140]	; (2169e4 <_malloc_r+0xb4>)
  216958:	6814      	ldr	r4, [r2, #0]
  21695a:	4621      	mov	r1, r4
  21695c:	b991      	cbnz	r1, 216984 <_malloc_r+0x54>
  21695e:	4c22      	ldr	r4, [pc, #136]	; (2169e8 <_malloc_r+0xb8>)
  216960:	6823      	ldr	r3, [r4, #0]
  216962:	b91b      	cbnz	r3, 21696c <_malloc_r+0x3c>
  216964:	4630      	mov	r0, r6
  216966:	f000 f849 	bl	2169fc <_sbrk_r>
  21696a:	6020      	str	r0, [r4, #0]
  21696c:	4629      	mov	r1, r5
  21696e:	4630      	mov	r0, r6
  216970:	f000 f844 	bl	2169fc <_sbrk_r>
  216974:	1c43      	adds	r3, r0, #1
  216976:	d126      	bne.n	2169c6 <_malloc_r+0x96>
  216978:	230c      	movs	r3, #12
  21697a:	6033      	str	r3, [r6, #0]
  21697c:	4630      	mov	r0, r6
  21697e:	f000 f892 	bl	216aa6 <__malloc_unlock>
  216982:	e7e4      	b.n	21694e <_malloc_r+0x1e>
  216984:	680b      	ldr	r3, [r1, #0]
  216986:	1b5b      	subs	r3, r3, r5
  216988:	d41a      	bmi.n	2169c0 <_malloc_r+0x90>
  21698a:	2b0b      	cmp	r3, #11
  21698c:	d90f      	bls.n	2169ae <_malloc_r+0x7e>
  21698e:	600b      	str	r3, [r1, #0]
  216990:	50cd      	str	r5, [r1, r3]
  216992:	18cc      	adds	r4, r1, r3
  216994:	4630      	mov	r0, r6
  216996:	f000 f886 	bl	216aa6 <__malloc_unlock>
  21699a:	f104 000b 	add.w	r0, r4, #11
  21699e:	1d23      	adds	r3, r4, #4
  2169a0:	f020 0007 	bic.w	r0, r0, #7
  2169a4:	1ac3      	subs	r3, r0, r3
  2169a6:	d01b      	beq.n	2169e0 <_malloc_r+0xb0>
  2169a8:	425a      	negs	r2, r3
  2169aa:	50e2      	str	r2, [r4, r3]
  2169ac:	bd70      	pop	{r4, r5, r6, pc}
  2169ae:	428c      	cmp	r4, r1
  2169b0:	bf0d      	iteet	eq
  2169b2:	6863      	ldreq	r3, [r4, #4]
  2169b4:	684b      	ldrne	r3, [r1, #4]
  2169b6:	6063      	strne	r3, [r4, #4]
  2169b8:	6013      	streq	r3, [r2, #0]
  2169ba:	bf18      	it	ne
  2169bc:	460c      	movne	r4, r1
  2169be:	e7e9      	b.n	216994 <_malloc_r+0x64>
  2169c0:	460c      	mov	r4, r1
  2169c2:	6849      	ldr	r1, [r1, #4]
  2169c4:	e7ca      	b.n	21695c <_malloc_r+0x2c>
  2169c6:	1cc4      	adds	r4, r0, #3
  2169c8:	f024 0403 	bic.w	r4, r4, #3
  2169cc:	42a0      	cmp	r0, r4
  2169ce:	d005      	beq.n	2169dc <_malloc_r+0xac>
  2169d0:	1a21      	subs	r1, r4, r0
  2169d2:	4630      	mov	r0, r6
  2169d4:	f000 f812 	bl	2169fc <_sbrk_r>
  2169d8:	3001      	adds	r0, #1
  2169da:	d0cd      	beq.n	216978 <_malloc_r+0x48>
  2169dc:	6025      	str	r5, [r4, #0]
  2169de:	e7d9      	b.n	216994 <_malloc_r+0x64>
  2169e0:	bd70      	pop	{r4, r5, r6, pc}
  2169e2:	bf00      	nop
  2169e4:	20004a7c 	.word	0x20004a7c
  2169e8:	20004a80 	.word	0x20004a80

002169ec <realloc>:
  2169ec:	4b02      	ldr	r3, [pc, #8]	; (2169f8 <realloc+0xc>)
  2169ee:	460a      	mov	r2, r1
  2169f0:	4601      	mov	r1, r0
  2169f2:	6818      	ldr	r0, [r3, #0]
  2169f4:	f000 b858 	b.w	216aa8 <_realloc_r>
  2169f8:	2000001c 	.word	0x2000001c

002169fc <_sbrk_r>:
  2169fc:	b538      	push	{r3, r4, r5, lr}
  2169fe:	4c06      	ldr	r4, [pc, #24]	; (216a18 <_sbrk_r+0x1c>)
  216a00:	2300      	movs	r3, #0
  216a02:	4605      	mov	r5, r0
  216a04:	4608      	mov	r0, r1
  216a06:	6023      	str	r3, [r4, #0]
  216a08:	f000 f88e 	bl	216b28 <_sbrk>
  216a0c:	1c43      	adds	r3, r0, #1
  216a0e:	d102      	bne.n	216a16 <_sbrk_r+0x1a>
  216a10:	6823      	ldr	r3, [r4, #0]
  216a12:	b103      	cbz	r3, 216a16 <_sbrk_r+0x1a>
  216a14:	602b      	str	r3, [r5, #0]
  216a16:	bd38      	pop	{r3, r4, r5, pc}
  216a18:	20004a88 	.word	0x20004a88

00216a1c <_raise_r>:
  216a1c:	291f      	cmp	r1, #31
  216a1e:	b538      	push	{r3, r4, r5, lr}
  216a20:	4604      	mov	r4, r0
  216a22:	460d      	mov	r5, r1
  216a24:	d904      	bls.n	216a30 <_raise_r+0x14>
  216a26:	2316      	movs	r3, #22
  216a28:	6003      	str	r3, [r0, #0]
  216a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  216a2e:	bd38      	pop	{r3, r4, r5, pc}
  216a30:	6c42      	ldr	r2, [r0, #68]	; 0x44
  216a32:	b112      	cbz	r2, 216a3a <_raise_r+0x1e>
  216a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
  216a38:	b94b      	cbnz	r3, 216a4e <_raise_r+0x32>
  216a3a:	4620      	mov	r0, r4
  216a3c:	f000 f830 	bl	216aa0 <_getpid_r>
  216a40:	462a      	mov	r2, r5
  216a42:	4601      	mov	r1, r0
  216a44:	4620      	mov	r0, r4
  216a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  216a4a:	f000 b817 	b.w	216a7c <_kill_r>
  216a4e:	2b01      	cmp	r3, #1
  216a50:	d00a      	beq.n	216a68 <_raise_r+0x4c>
  216a52:	1c59      	adds	r1, r3, #1
  216a54:	d103      	bne.n	216a5e <_raise_r+0x42>
  216a56:	2316      	movs	r3, #22
  216a58:	6003      	str	r3, [r0, #0]
  216a5a:	2001      	movs	r0, #1
  216a5c:	bd38      	pop	{r3, r4, r5, pc}
  216a5e:	2400      	movs	r4, #0
  216a60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
  216a64:	4628      	mov	r0, r5
  216a66:	4798      	blx	r3
  216a68:	2000      	movs	r0, #0
  216a6a:	bd38      	pop	{r3, r4, r5, pc}

00216a6c <raise>:
  216a6c:	4b02      	ldr	r3, [pc, #8]	; (216a78 <raise+0xc>)
  216a6e:	4601      	mov	r1, r0
  216a70:	6818      	ldr	r0, [r3, #0]
  216a72:	f7ff bfd3 	b.w	216a1c <_raise_r>
  216a76:	bf00      	nop
  216a78:	2000001c 	.word	0x2000001c

00216a7c <_kill_r>:
  216a7c:	b538      	push	{r3, r4, r5, lr}
  216a7e:	4c07      	ldr	r4, [pc, #28]	; (216a9c <_kill_r+0x20>)
  216a80:	2300      	movs	r3, #0
  216a82:	4605      	mov	r5, r0
  216a84:	4608      	mov	r0, r1
  216a86:	4611      	mov	r1, r2
  216a88:	6023      	str	r3, [r4, #0]
  216a8a:	f000 f845 	bl	216b18 <_kill>
  216a8e:	1c43      	adds	r3, r0, #1
  216a90:	d102      	bne.n	216a98 <_kill_r+0x1c>
  216a92:	6823      	ldr	r3, [r4, #0]
  216a94:	b103      	cbz	r3, 216a98 <_kill_r+0x1c>
  216a96:	602b      	str	r3, [r5, #0]
  216a98:	bd38      	pop	{r3, r4, r5, pc}
  216a9a:	bf00      	nop
  216a9c:	20004a88 	.word	0x20004a88

00216aa0 <_getpid_r>:
  216aa0:	f000 b832 	b.w	216b08 <_getpid>

00216aa4 <__malloc_lock>:
  216aa4:	4770      	bx	lr

00216aa6 <__malloc_unlock>:
  216aa6:	4770      	bx	lr

00216aa8 <_realloc_r>:
  216aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  216aaa:	4607      	mov	r7, r0
  216aac:	4614      	mov	r4, r2
  216aae:	460e      	mov	r6, r1
  216ab0:	b921      	cbnz	r1, 216abc <_realloc_r+0x14>
  216ab2:	4611      	mov	r1, r2
  216ab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  216ab8:	f7ff bf3a 	b.w	216930 <_malloc_r>
  216abc:	b922      	cbnz	r2, 216ac8 <_realloc_r+0x20>
  216abe:	f7ff fee9 	bl	216894 <_free_r>
  216ac2:	4625      	mov	r5, r4
  216ac4:	4628      	mov	r0, r5
  216ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  216ac8:	f000 f814 	bl	216af4 <_malloc_usable_size_r>
  216acc:	4284      	cmp	r4, r0
  216ace:	d90f      	bls.n	216af0 <_realloc_r+0x48>
  216ad0:	4621      	mov	r1, r4
  216ad2:	4638      	mov	r0, r7
  216ad4:	f7ff ff2c 	bl	216930 <_malloc_r>
  216ad8:	4605      	mov	r5, r0
  216ada:	2800      	cmp	r0, #0
  216adc:	d0f2      	beq.n	216ac4 <_realloc_r+0x1c>
  216ade:	4631      	mov	r1, r6
  216ae0:	4622      	mov	r2, r4
  216ae2:	f7ff feb2 	bl	21684a <memcpy>
  216ae6:	4631      	mov	r1, r6
  216ae8:	4638      	mov	r0, r7
  216aea:	f7ff fed3 	bl	216894 <_free_r>
  216aee:	e7e9      	b.n	216ac4 <_realloc_r+0x1c>
  216af0:	4635      	mov	r5, r6
  216af2:	e7e7      	b.n	216ac4 <_realloc_r+0x1c>

00216af4 <_malloc_usable_size_r>:
  216af4:	f851 0c04 	ldr.w	r0, [r1, #-4]
  216af8:	2800      	cmp	r0, #0
  216afa:	f1a0 0004 	sub.w	r0, r0, #4
  216afe:	bfbc      	itt	lt
  216b00:	580b      	ldrlt	r3, [r1, r0]
  216b02:	18c0      	addlt	r0, r0, r3
  216b04:	4770      	bx	lr
	...

00216b08 <_getpid>:
  216b08:	4b02      	ldr	r3, [pc, #8]	; (216b14 <_getpid+0xc>)
  216b0a:	2258      	movs	r2, #88	; 0x58
  216b0c:	601a      	str	r2, [r3, #0]
  216b0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  216b12:	4770      	bx	lr
  216b14:	20004a88 	.word	0x20004a88

00216b18 <_kill>:
  216b18:	4b02      	ldr	r3, [pc, #8]	; (216b24 <_kill+0xc>)
  216b1a:	2258      	movs	r2, #88	; 0x58
  216b1c:	601a      	str	r2, [r3, #0]
  216b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  216b22:	4770      	bx	lr
  216b24:	20004a88 	.word	0x20004a88

00216b28 <_sbrk>:
  216b28:	4b04      	ldr	r3, [pc, #16]	; (216b3c <_sbrk+0x14>)
  216b2a:	6819      	ldr	r1, [r3, #0]
  216b2c:	4602      	mov	r2, r0
  216b2e:	b909      	cbnz	r1, 216b34 <_sbrk+0xc>
  216b30:	4903      	ldr	r1, [pc, #12]	; (216b40 <_sbrk+0x18>)
  216b32:	6019      	str	r1, [r3, #0]
  216b34:	6818      	ldr	r0, [r3, #0]
  216b36:	4402      	add	r2, r0
  216b38:	601a      	str	r2, [r3, #0]
  216b3a:	4770      	bx	lr
  216b3c:	20004a84 	.word	0x20004a84
  216b40:	20004a8c 	.word	0x20004a8c

00216b44 <_exit>:
  216b44:	e7fe      	b.n	216b44 <_exit>
	...

00216b48 <_init>:
  216b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  216b4a:	bf00      	nop
  216b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  216b4e:	bc08      	pop	{r3}
  216b50:	469e      	mov	lr, r3
  216b52:	4770      	bx	lr

00216b54 <_fini>:
  216b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  216b56:	bf00      	nop
  216b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
  216b5a:	bc08      	pop	{r3}
  216b5c:	469e      	mov	lr, r3
  216b5e:	4770      	bx	lr
