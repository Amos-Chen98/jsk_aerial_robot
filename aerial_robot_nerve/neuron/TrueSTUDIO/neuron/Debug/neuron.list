
neuron.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000054  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000360  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000068  20000000  080067a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000002f4  20000068  08006810  00020068  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  2000035c  08006810  0002035c  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003ef18  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000079a8  00000000  00000000  0005efa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000d26f  00000000  00000000  00066951  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  00073bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fa0  00000000  00000000  000748e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ca4c  00000000  00000000  00076880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008b88  00000000  00000000  000832cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0008be54  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002d84  00000000  00000000  0008bed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000076  00000000  00000000  0008ec54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08006028 	.word	0x08006028

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08006028 	.word	0x08006028

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800021c:	f1a2 0201 	sub.w	r2, r2, #1
 8000220:	d1ed      	bne.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__aeabi_f2uiz>:
 800061c:	0042      	lsls	r2, r0, #1
 800061e:	d20e      	bcs.n	800063e <__aeabi_f2uiz+0x22>
 8000620:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000624:	d30b      	bcc.n	800063e <__aeabi_f2uiz+0x22>
 8000626:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800062a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062e:	d409      	bmi.n	8000644 <__aeabi_f2uiz+0x28>
 8000630:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	4770      	bx	lr
 800063e:	f04f 0000 	mov.w	r0, #0
 8000642:	4770      	bx	lr
 8000644:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000648:	d101      	bne.n	800064e <__aeabi_f2uiz+0x32>
 800064a:	0242      	lsls	r2, r0, #9
 800064c:	d102      	bne.n	8000654 <__aeabi_f2uiz+0x38>
 800064e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000652:	4770      	bx	lr
 8000654:	f04f 0000 	mov.w	r0, #0
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <selfrel_offset31>:
 800065c:	6803      	ldr	r3, [r0, #0]
 800065e:	005a      	lsls	r2, r3, #1
 8000660:	bf4c      	ite	mi
 8000662:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000666:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800066a:	4418      	add	r0, r3
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <search_EIT_table>:
 8000670:	b361      	cbz	r1, 80006cc <search_EIT_table+0x5c>
 8000672:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000676:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800067a:	4690      	mov	r8, r2
 800067c:	4606      	mov	r6, r0
 800067e:	46d1      	mov	r9, sl
 8000680:	2700      	movs	r7, #0
 8000682:	eb07 0409 	add.w	r4, r7, r9
 8000686:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800068a:	1064      	asrs	r4, r4, #1
 800068c:	00e5      	lsls	r5, r4, #3
 800068e:	1971      	adds	r1, r6, r5
 8000690:	4608      	mov	r0, r1
 8000692:	f7ff ffe3 	bl	800065c <selfrel_offset31>
 8000696:	45a2      	cmp	sl, r4
 8000698:	4683      	mov	fp, r0
 800069a:	f105 0008 	add.w	r0, r5, #8
 800069e:	4430      	add	r0, r6
 80006a0:	d009      	beq.n	80006b6 <search_EIT_table+0x46>
 80006a2:	f7ff ffdb 	bl	800065c <selfrel_offset31>
 80006a6:	45c3      	cmp	fp, r8
 80006a8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80006ac:	d805      	bhi.n	80006ba <search_EIT_table+0x4a>
 80006ae:	4540      	cmp	r0, r8
 80006b0:	d209      	bcs.n	80006c6 <search_EIT_table+0x56>
 80006b2:	1c67      	adds	r7, r4, #1
 80006b4:	e7e5      	b.n	8000682 <search_EIT_table+0x12>
 80006b6:	45c3      	cmp	fp, r8
 80006b8:	d905      	bls.n	80006c6 <search_EIT_table+0x56>
 80006ba:	42a7      	cmp	r7, r4
 80006bc:	d002      	beq.n	80006c4 <search_EIT_table+0x54>
 80006be:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80006c2:	e7de      	b.n	8000682 <search_EIT_table+0x12>
 80006c4:	2100      	movs	r1, #0
 80006c6:	4608      	mov	r0, r1
 80006c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006cc:	4608      	mov	r0, r1
 80006ce:	4770      	bx	lr

080006d0 <__gnu_unwind_get_pr_addr>:
 80006d0:	2801      	cmp	r0, #1
 80006d2:	d007      	beq.n	80006e4 <__gnu_unwind_get_pr_addr+0x14>
 80006d4:	2802      	cmp	r0, #2
 80006d6:	d007      	beq.n	80006e8 <__gnu_unwind_get_pr_addr+0x18>
 80006d8:	4b04      	ldr	r3, [pc, #16]	; (80006ec <__gnu_unwind_get_pr_addr+0x1c>)
 80006da:	2800      	cmp	r0, #0
 80006dc:	bf0c      	ite	eq
 80006de:	4618      	moveq	r0, r3
 80006e0:	2000      	movne	r0, #0
 80006e2:	4770      	bx	lr
 80006e4:	4802      	ldr	r0, [pc, #8]	; (80006f0 <__gnu_unwind_get_pr_addr+0x20>)
 80006e6:	4770      	bx	lr
 80006e8:	4802      	ldr	r0, [pc, #8]	; (80006f4 <__gnu_unwind_get_pr_addr+0x24>)
 80006ea:	4770      	bx	lr
 80006ec:	08000de1 	.word	0x08000de1
 80006f0:	08000de5 	.word	0x08000de5
 80006f4:	08000de9 	.word	0x08000de9

080006f8 <get_eit_entry>:
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <get_eit_entry+0x98>)
 80006fc:	b083      	sub	sp, #12
 80006fe:	4604      	mov	r4, r0
 8000700:	1e8d      	subs	r5, r1, #2
 8000702:	b373      	cbz	r3, 8000762 <get_eit_entry+0x6a>
 8000704:	a901      	add	r1, sp, #4
 8000706:	4628      	mov	r0, r5
 8000708:	f3af 8000 	nop.w
 800070c:	b318      	cbz	r0, 8000756 <get_eit_entry+0x5e>
 800070e:	9901      	ldr	r1, [sp, #4]
 8000710:	462a      	mov	r2, r5
 8000712:	f7ff ffad 	bl	8000670 <search_EIT_table>
 8000716:	4601      	mov	r1, r0
 8000718:	b1e8      	cbz	r0, 8000756 <get_eit_entry+0x5e>
 800071a:	f7ff ff9f 	bl	800065c <selfrel_offset31>
 800071e:	684b      	ldr	r3, [r1, #4]
 8000720:	64a0      	str	r0, [r4, #72]	; 0x48
 8000722:	2b01      	cmp	r3, #1
 8000724:	d011      	beq.n	800074a <get_eit_entry+0x52>
 8000726:	2b00      	cmp	r3, #0
 8000728:	db22      	blt.n	8000770 <get_eit_entry+0x78>
 800072a:	1d08      	adds	r0, r1, #4
 800072c:	f7ff ff96 	bl	800065c <selfrel_offset31>
 8000730:	2300      	movs	r3, #0
 8000732:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000734:	6523      	str	r3, [r4, #80]	; 0x50
 8000736:	6803      	ldr	r3, [r0, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db1e      	blt.n	800077a <get_eit_entry+0x82>
 800073c:	f7ff ff8e 	bl	800065c <selfrel_offset31>
 8000740:	2300      	movs	r3, #0
 8000742:	6120      	str	r0, [r4, #16]
 8000744:	4618      	mov	r0, r3
 8000746:	b003      	add	sp, #12
 8000748:	bd30      	pop	{r4, r5, pc}
 800074a:	2305      	movs	r3, #5
 800074c:	2200      	movs	r2, #0
 800074e:	4618      	mov	r0, r3
 8000750:	6122      	str	r2, [r4, #16]
 8000752:	b003      	add	sp, #12
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	2309      	movs	r3, #9
 8000758:	2200      	movs	r2, #0
 800075a:	4618      	mov	r0, r3
 800075c:	6122      	str	r2, [r4, #16]
 800075e:	b003      	add	sp, #12
 8000760:	bd30      	pop	{r4, r5, pc}
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <get_eit_entry+0x9c>)
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <get_eit_entry+0xa0>)
 8000766:	4618      	mov	r0, r3
 8000768:	1ac9      	subs	r1, r1, r3
 800076a:	10c9      	asrs	r1, r1, #3
 800076c:	9101      	str	r1, [sp, #4]
 800076e:	e7cf      	b.n	8000710 <get_eit_entry+0x18>
 8000770:	2301      	movs	r3, #1
 8000772:	1d08      	adds	r0, r1, #4
 8000774:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000776:	6523      	str	r3, [r4, #80]	; 0x50
 8000778:	e7dd      	b.n	8000736 <get_eit_entry+0x3e>
 800077a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800077e:	f7ff ffa7 	bl	80006d0 <__gnu_unwind_get_pr_addr>
 8000782:	2800      	cmp	r0, #0
 8000784:	6120      	str	r0, [r4, #16]
 8000786:	bf14      	ite	ne
 8000788:	2300      	movne	r3, #0
 800078a:	2309      	moveq	r3, #9
 800078c:	e7da      	b.n	8000744 <get_eit_entry+0x4c>
 800078e:	bf00      	nop
 8000790:	00000000 	.word	0x00000000
 8000794:	08006440 	.word	0x08006440
 8000798:	080067a0 	.word	0x080067a0

0800079c <restore_non_core_regs>:
 800079c:	6803      	ldr	r3, [r0, #0]
 800079e:	b510      	push	{r4, lr}
 80007a0:	07da      	lsls	r2, r3, #31
 80007a2:	4604      	mov	r4, r0
 80007a4:	d406      	bmi.n	80007b4 <restore_non_core_regs+0x18>
 80007a6:	079b      	lsls	r3, r3, #30
 80007a8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80007ac:	d509      	bpl.n	80007c2 <restore_non_core_regs+0x26>
 80007ae:	f000 fc57 	bl	8001060 <__gnu_Unwind_Restore_VFP_D>
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	0759      	lsls	r1, r3, #29
 80007b6:	d509      	bpl.n	80007cc <restore_non_core_regs+0x30>
 80007b8:	071a      	lsls	r2, r3, #28
 80007ba:	d50e      	bpl.n	80007da <restore_non_core_regs+0x3e>
 80007bc:	06db      	lsls	r3, r3, #27
 80007be:	d513      	bpl.n	80007e8 <restore_non_core_regs+0x4c>
 80007c0:	bd10      	pop	{r4, pc}
 80007c2:	f000 fc45 	bl	8001050 <__gnu_Unwind_Restore_VFP>
 80007c6:	6823      	ldr	r3, [r4, #0]
 80007c8:	0759      	lsls	r1, r3, #29
 80007ca:	d4f5      	bmi.n	80007b8 <restore_non_core_regs+0x1c>
 80007cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80007d0:	f000 fc4e 	bl	8001070 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80007d4:	6823      	ldr	r3, [r4, #0]
 80007d6:	071a      	lsls	r2, r3, #28
 80007d8:	d4f0      	bmi.n	80007bc <restore_non_core_regs+0x20>
 80007da:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80007de:	f000 fc4f 	bl	8001080 <__gnu_Unwind_Restore_WMMXD>
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	06db      	lsls	r3, r3, #27
 80007e6:	d4eb      	bmi.n	80007c0 <restore_non_core_regs+0x24>
 80007e8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80007ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f0:	f000 bc8a 	b.w	8001108 <__gnu_Unwind_Restore_WMMXC>

080007f4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80007f4:	6803      	ldr	r3, [r0, #0]
 80007f6:	b103      	cbz	r3, 80007fa <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80007f8:	4403      	add	r3, r0
 80007fa:	4618      	mov	r0, r3
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop

08000800 <__gnu_unwind_24bit.isra.1>:
 8000800:	2009      	movs	r0, #9
 8000802:	4770      	bx	lr

08000804 <_Unwind_DebugHook>:
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop

08000808 <unwind_phase2>:
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	4604      	mov	r4, r0
 800080c:	460d      	mov	r5, r1
 800080e:	e008      	b.n	8000822 <unwind_phase2+0x1a>
 8000810:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000812:	6923      	ldr	r3, [r4, #16]
 8000814:	6162      	str	r2, [r4, #20]
 8000816:	4621      	mov	r1, r4
 8000818:	462a      	mov	r2, r5
 800081a:	2001      	movs	r0, #1
 800081c:	4798      	blx	r3
 800081e:	2808      	cmp	r0, #8
 8000820:	d108      	bne.n	8000834 <unwind_phase2+0x2c>
 8000822:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000824:	4620      	mov	r0, r4
 8000826:	f7ff ff67 	bl	80006f8 <get_eit_entry>
 800082a:	4606      	mov	r6, r0
 800082c:	2800      	cmp	r0, #0
 800082e:	d0ef      	beq.n	8000810 <unwind_phase2+0x8>
 8000830:	f005 fb9c 	bl	8005f6c <abort>
 8000834:	2807      	cmp	r0, #7
 8000836:	d1fb      	bne.n	8000830 <unwind_phase2+0x28>
 8000838:	4630      	mov	r0, r6
 800083a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800083c:	f7ff ffe2 	bl	8000804 <_Unwind_DebugHook>
 8000840:	1d28      	adds	r0, r5, #4
 8000842:	f000 fbf9 	bl	8001038 <__restore_core_regs>
 8000846:	bf00      	nop

08000848 <unwind_phase2_forced>:
 8000848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800084c:	4605      	mov	r5, r0
 800084e:	2700      	movs	r7, #0
 8000850:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000854:	ac03      	add	r4, sp, #12
 8000856:	1d0e      	adds	r6, r1, #4
 8000858:	4692      	mov	sl, r2
 800085a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800085c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000862:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000866:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800086a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800086e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000876:	ac02      	add	r4, sp, #8
 8000878:	4628      	mov	r0, r5
 800087a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800087c:	6027      	str	r7, [r4, #0]
 800087e:	f7ff ff3b 	bl	80006f8 <get_eit_entry>
 8000882:	f1ba 0f00 	cmp.w	sl, #0
 8000886:	4607      	mov	r7, r0
 8000888:	bf14      	ite	ne
 800088a:	260a      	movne	r6, #10
 800088c:	2609      	moveq	r6, #9
 800088e:	b17f      	cbz	r7, 80008b0 <unwind_phase2_forced+0x68>
 8000890:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000892:	f046 0110 	orr.w	r1, r6, #16
 8000896:	e88d 0210 	stmia.w	sp, {r4, r9}
 800089a:	462a      	mov	r2, r5
 800089c:	6463      	str	r3, [r4, #68]	; 0x44
 800089e:	2001      	movs	r0, #1
 80008a0:	462b      	mov	r3, r5
 80008a2:	47c0      	blx	r8
 80008a4:	bb78      	cbnz	r0, 8000906 <unwind_phase2_forced+0xbe>
 80008a6:	4638      	mov	r0, r7
 80008a8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80008ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80008b6:	616b      	str	r3, [r5, #20]
 80008b8:	4621      	mov	r1, r4
 80008ba:	a87a      	add	r0, sp, #488	; 0x1e8
 80008bc:	f005 faf4 	bl	8005ea8 <memcpy>
 80008c0:	692b      	ldr	r3, [r5, #16]
 80008c2:	aa7a      	add	r2, sp, #488	; 0x1e8
 80008c4:	4629      	mov	r1, r5
 80008c6:	4630      	mov	r0, r6
 80008c8:	4798      	blx	r3
 80008ca:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80008cc:	4682      	mov	sl, r0
 80008ce:	e88d 0210 	stmia.w	sp, {r4, r9}
 80008d2:	4631      	mov	r1, r6
 80008d4:	6463      	str	r3, [r4, #68]	; 0x44
 80008d6:	462a      	mov	r2, r5
 80008d8:	462b      	mov	r3, r5
 80008da:	2001      	movs	r0, #1
 80008dc:	47c0      	blx	r8
 80008de:	b990      	cbnz	r0, 8000906 <unwind_phase2_forced+0xbe>
 80008e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80008e4:	a97a      	add	r1, sp, #488	; 0x1e8
 80008e6:	4620      	mov	r0, r4
 80008e8:	f005 fade 	bl	8005ea8 <memcpy>
 80008ec:	f1ba 0f08 	cmp.w	sl, #8
 80008f0:	d106      	bne.n	8000900 <unwind_phase2_forced+0xb8>
 80008f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80008f4:	4628      	mov	r0, r5
 80008f6:	f7ff feff 	bl	80006f8 <get_eit_entry>
 80008fa:	2609      	movs	r6, #9
 80008fc:	4607      	mov	r7, r0
 80008fe:	e7c6      	b.n	800088e <unwind_phase2_forced+0x46>
 8000900:	f1ba 0f07 	cmp.w	sl, #7
 8000904:	d005      	beq.n	8000912 <unwind_phase2_forced+0xca>
 8000906:	2709      	movs	r7, #9
 8000908:	4638      	mov	r0, r7
 800090a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	4638      	mov	r0, r7
 8000914:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000916:	f7ff ff75 	bl	8000804 <_Unwind_DebugHook>
 800091a:	a803      	add	r0, sp, #12
 800091c:	f000 fb8c 	bl	8001038 <__restore_core_regs>

08000920 <_Unwind_GetCFA>:
 8000920:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000922:	4770      	bx	lr

08000924 <__gnu_Unwind_RaiseException>:
 8000924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000926:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800092a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800092c:	b0f9      	sub	sp, #484	; 0x1e4
 800092e:	640b      	str	r3, [r1, #64]	; 0x40
 8000930:	1d0e      	adds	r6, r1, #4
 8000932:	ad01      	add	r5, sp, #4
 8000934:	460f      	mov	r7, r1
 8000936:	4604      	mov	r4, r0
 8000938:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800093a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800093c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800093e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000940:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000944:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000948:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800094c:	f8cd e000 	str.w	lr, [sp]
 8000950:	e006      	b.n	8000960 <__gnu_Unwind_RaiseException+0x3c>
 8000952:	6923      	ldr	r3, [r4, #16]
 8000954:	466a      	mov	r2, sp
 8000956:	4621      	mov	r1, r4
 8000958:	4798      	blx	r3
 800095a:	2808      	cmp	r0, #8
 800095c:	4605      	mov	r5, r0
 800095e:	d108      	bne.n	8000972 <__gnu_Unwind_RaiseException+0x4e>
 8000960:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000962:	4620      	mov	r0, r4
 8000964:	f7ff fec8 	bl	80006f8 <get_eit_entry>
 8000968:	2800      	cmp	r0, #0
 800096a:	d0f2      	beq.n	8000952 <__gnu_Unwind_RaiseException+0x2e>
 800096c:	2009      	movs	r0, #9
 800096e:	b079      	add	sp, #484	; 0x1e4
 8000970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000972:	4668      	mov	r0, sp
 8000974:	f7ff ff12 	bl	800079c <restore_non_core_regs>
 8000978:	2d06      	cmp	r5, #6
 800097a:	d1f7      	bne.n	800096c <__gnu_Unwind_RaiseException+0x48>
 800097c:	4639      	mov	r1, r7
 800097e:	4620      	mov	r0, r4
 8000980:	f7ff ff42 	bl	8000808 <unwind_phase2>

08000984 <__gnu_Unwind_ForcedUnwind>:
 8000984:	b430      	push	{r4, r5}
 8000986:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000988:	60c1      	str	r1, [r0, #12]
 800098a:	6182      	str	r2, [r0, #24]
 800098c:	4619      	mov	r1, r3
 800098e:	641d      	str	r5, [r3, #64]	; 0x40
 8000990:	2200      	movs	r2, #0
 8000992:	bc30      	pop	{r4, r5}
 8000994:	e758      	b.n	8000848 <unwind_phase2_forced>
 8000996:	bf00      	nop

08000998 <__gnu_Unwind_Resume>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	6943      	ldr	r3, [r0, #20]
 800099c:	68c6      	ldr	r6, [r0, #12]
 800099e:	640b      	str	r3, [r1, #64]	; 0x40
 80009a0:	b126      	cbz	r6, 80009ac <__gnu_Unwind_Resume+0x14>
 80009a2:	2201      	movs	r2, #1
 80009a4:	f7ff ff50 	bl	8000848 <unwind_phase2_forced>
 80009a8:	f005 fae0 	bl	8005f6c <abort>
 80009ac:	6903      	ldr	r3, [r0, #16]
 80009ae:	460a      	mov	r2, r1
 80009b0:	4604      	mov	r4, r0
 80009b2:	460d      	mov	r5, r1
 80009b4:	4601      	mov	r1, r0
 80009b6:	2002      	movs	r0, #2
 80009b8:	4798      	blx	r3
 80009ba:	2807      	cmp	r0, #7
 80009bc:	d007      	beq.n	80009ce <__gnu_Unwind_Resume+0x36>
 80009be:	2808      	cmp	r0, #8
 80009c0:	d103      	bne.n	80009ca <__gnu_Unwind_Resume+0x32>
 80009c2:	4629      	mov	r1, r5
 80009c4:	4620      	mov	r0, r4
 80009c6:	f7ff ff1f 	bl	8000808 <unwind_phase2>
 80009ca:	f005 facf 	bl	8005f6c <abort>
 80009ce:	4630      	mov	r0, r6
 80009d0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80009d2:	f7ff ff17 	bl	8000804 <_Unwind_DebugHook>
 80009d6:	1d28      	adds	r0, r5, #4
 80009d8:	f000 fb2e 	bl	8001038 <__restore_core_regs>

080009dc <__gnu_Unwind_Resume_or_Rethrow>:
 80009dc:	68c2      	ldr	r2, [r0, #12]
 80009de:	b12a      	cbz	r2, 80009ec <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80009e0:	b410      	push	{r4}
 80009e2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80009e4:	2200      	movs	r2, #0
 80009e6:	640c      	str	r4, [r1, #64]	; 0x40
 80009e8:	bc10      	pop	{r4}
 80009ea:	e72d      	b.n	8000848 <unwind_phase2_forced>
 80009ec:	e79a      	b.n	8000924 <__gnu_Unwind_RaiseException>
 80009ee:	bf00      	nop

080009f0 <_Unwind_Complete>:
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <_Unwind_DeleteException>:
 80009f4:	6883      	ldr	r3, [r0, #8]
 80009f6:	b113      	cbz	r3, 80009fe <_Unwind_DeleteException+0xa>
 80009f8:	4601      	mov	r1, r0
 80009fa:	2001      	movs	r0, #1
 80009fc:	4718      	bx	r3
 80009fe:	4770      	bx	lr

08000a00 <_Unwind_VRS_Get>:
 8000a00:	b500      	push	{lr}
 8000a02:	2904      	cmp	r1, #4
 8000a04:	d807      	bhi.n	8000a16 <_Unwind_VRS_Get+0x16>
 8000a06:	e8df f001 	tbb	[pc, r1]
 8000a0a:	0903      	.short	0x0903
 8000a0c:	0906      	.short	0x0906
 8000a0e:	09          	.byte	0x09
 8000a0f:	00          	.byte	0x00
 8000a10:	b90b      	cbnz	r3, 8000a16 <_Unwind_VRS_Get+0x16>
 8000a12:	2a0f      	cmp	r2, #15
 8000a14:	d905      	bls.n	8000a22 <_Unwind_VRS_Get+0x22>
 8000a16:	2002      	movs	r0, #2
 8000a18:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000a26:	6852      	ldr	r2, [r2, #4]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	9b01      	ldr	r3, [sp, #4]
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a32:	bf00      	nop

08000a34 <_Unwind_GetGR>:
 8000a34:	2300      	movs	r3, #0
 8000a36:	b510      	push	{r4, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	ac03      	add	r4, sp, #12
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	9400      	str	r4, [sp, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f7ff ffdd 	bl	8000a00 <_Unwind_VRS_Get>
 8000a46:	9803      	ldr	r0, [sp, #12]
 8000a48:	b004      	add	sp, #16
 8000a4a:	bd10      	pop	{r4, pc}

08000a4c <_Unwind_VRS_Set>:
 8000a4c:	b500      	push	{lr}
 8000a4e:	2904      	cmp	r1, #4
 8000a50:	d807      	bhi.n	8000a62 <_Unwind_VRS_Set+0x16>
 8000a52:	e8df f001 	tbb	[pc, r1]
 8000a56:	0903      	.short	0x0903
 8000a58:	0906      	.short	0x0906
 8000a5a:	09          	.byte	0x09
 8000a5b:	00          	.byte	0x00
 8000a5c:	b90b      	cbnz	r3, 8000a62 <_Unwind_VRS_Set+0x16>
 8000a5e:	2a0f      	cmp	r2, #15
 8000a60:	d905      	bls.n	8000a6e <_Unwind_VRS_Set+0x22>
 8000a62:	2002      	movs	r0, #2
 8000a64:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a6e:	9901      	ldr	r1, [sp, #4]
 8000a70:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000a74:	6809      	ldr	r1, [r1, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	6051      	str	r1, [r2, #4]
 8000a7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a7e:	bf00      	nop

08000a80 <_Unwind_SetGR>:
 8000a80:	2300      	movs	r3, #0
 8000a82:	b510      	push	{r4, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	ac04      	add	r4, sp, #16
 8000a88:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000a8c:	9400      	str	r4, [sp, #0]
 8000a8e:	460a      	mov	r2, r1
 8000a90:	4619      	mov	r1, r3
 8000a92:	f7ff ffdb 	bl	8000a4c <_Unwind_VRS_Set>
 8000a96:	b004      	add	sp, #16
 8000a98:	bd10      	pop	{r4, pc}
 8000a9a:	bf00      	nop

08000a9c <__gnu_Unwind_Backtrace>:
 8000a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9e:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000aa2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000aa4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	1d15      	adds	r5, r2, #4
 8000aac:	ac17      	add	r4, sp, #92	; 0x5c
 8000aae:	4607      	mov	r7, r0
 8000ab0:	460e      	mov	r6, r1
 8000ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000abe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ac2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ac6:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8000aca:	e012      	b.n	8000af2 <__gnu_Unwind_Backtrace+0x56>
 8000acc:	210c      	movs	r1, #12
 8000ace:	a816      	add	r0, sp, #88	; 0x58
 8000ad0:	466a      	mov	r2, sp
 8000ad2:	f7ff ffd5 	bl	8000a80 <_Unwind_SetGR>
 8000ad6:	4631      	mov	r1, r6
 8000ad8:	a816      	add	r0, sp, #88	; 0x58
 8000ada:	47b8      	blx	r7
 8000adc:	b978      	cbnz	r0, 8000afe <__gnu_Unwind_Backtrace+0x62>
 8000ade:	9b04      	ldr	r3, [sp, #16]
 8000ae0:	aa16      	add	r2, sp, #88	; 0x58
 8000ae2:	4669      	mov	r1, sp
 8000ae4:	2008      	movs	r0, #8
 8000ae6:	4798      	blx	r3
 8000ae8:	2805      	cmp	r0, #5
 8000aea:	4604      	mov	r4, r0
 8000aec:	d008      	beq.n	8000b00 <__gnu_Unwind_Backtrace+0x64>
 8000aee:	2809      	cmp	r0, #9
 8000af0:	d005      	beq.n	8000afe <__gnu_Unwind_Backtrace+0x62>
 8000af2:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000af4:	4668      	mov	r0, sp
 8000af6:	f7ff fdff 	bl	80006f8 <get_eit_entry>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d0e6      	beq.n	8000acc <__gnu_Unwind_Backtrace+0x30>
 8000afe:	2409      	movs	r4, #9
 8000b00:	a816      	add	r0, sp, #88	; 0x58
 8000b02:	f7ff fe4b 	bl	800079c <restore_non_core_regs>
 8000b06:	4620      	mov	r0, r4
 8000b08:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b0e:	bf00      	nop

08000b10 <__gnu_unwind_pr_common>:
 8000b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b14:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000b16:	4691      	mov	r9, r2
 8000b18:	6822      	ldr	r2, [r4, #0]
 8000b1a:	b08b      	sub	sp, #44	; 0x2c
 8000b1c:	3404      	adds	r4, #4
 8000b1e:	460d      	mov	r5, r1
 8000b20:	9207      	str	r2, [sp, #28]
 8000b22:	9408      	str	r4, [sp, #32]
 8000b24:	f000 0b03 	and.w	fp, r0, #3
 8000b28:	461e      	mov	r6, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d160      	bne.n	8000bf0 <__gnu_unwind_pr_common+0xe0>
 8000b2e:	2303      	movs	r3, #3
 8000b30:	0212      	lsls	r2, r2, #8
 8000b32:	9207      	str	r2, [sp, #28]
 8000b34:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000b38:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b3c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000b3e:	f1bb 0f02 	cmp.w	fp, #2
 8000b42:	bf08      	it	eq
 8000b44:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000b46:	f013 0301 	ands.w	r3, r3, #1
 8000b4a:	d140      	bne.n	8000bce <__gnu_unwind_pr_common+0xbe>
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	f000 0308 	and.w	r3, r0, #8
 8000b52:	9303      	str	r3, [sp, #12]
 8000b54:	f8d4 8000 	ldr.w	r8, [r4]
 8000b58:	f1b8 0f00 	cmp.w	r8, #0
 8000b5c:	d039      	beq.n	8000bd2 <__gnu_unwind_pr_common+0xc2>
 8000b5e:	2e02      	cmp	r6, #2
 8000b60:	d043      	beq.n	8000bea <__gnu_unwind_pr_common+0xda>
 8000b62:	f8b4 8000 	ldrh.w	r8, [r4]
 8000b66:	8867      	ldrh	r7, [r4, #2]
 8000b68:	3404      	adds	r4, #4
 8000b6a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000b6c:	f027 0a01 	bic.w	sl, r7, #1
 8000b70:	210f      	movs	r1, #15
 8000b72:	4648      	mov	r0, r9
 8000b74:	449a      	add	sl, r3
 8000b76:	f7ff ff5d 	bl	8000a34 <_Unwind_GetGR>
 8000b7a:	4582      	cmp	sl, r0
 8000b7c:	d833      	bhi.n	8000be6 <__gnu_unwind_pr_common+0xd6>
 8000b7e:	f028 0301 	bic.w	r3, r8, #1
 8000b82:	449a      	add	sl, r3
 8000b84:	4550      	cmp	r0, sl
 8000b86:	bf2c      	ite	cs
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	2001      	movcc	r0, #1
 8000b8c:	007f      	lsls	r7, r7, #1
 8000b8e:	f007 0702 	and.w	r7, r7, #2
 8000b92:	f008 0801 	and.w	r8, r8, #1
 8000b96:	ea47 0708 	orr.w	r7, r7, r8
 8000b9a:	2f01      	cmp	r7, #1
 8000b9c:	d03e      	beq.n	8000c1c <__gnu_unwind_pr_common+0x10c>
 8000b9e:	d335      	bcc.n	8000c0c <__gnu_unwind_pr_common+0xfc>
 8000ba0:	2f02      	cmp	r7, #2
 8000ba2:	d11c      	bne.n	8000bde <__gnu_unwind_pr_common+0xce>
 8000ba4:	6823      	ldr	r3, [r4, #0]
 8000ba6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000baa:	9202      	str	r2, [sp, #8]
 8000bac:	f1bb 0f00 	cmp.w	fp, #0
 8000bb0:	d176      	bne.n	8000ca0 <__gnu_unwind_pr_common+0x190>
 8000bb2:	b128      	cbz	r0, 8000bc0 <__gnu_unwind_pr_common+0xb0>
 8000bb4:	9903      	ldr	r1, [sp, #12]
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d07e      	beq.n	8000cb8 <__gnu_unwind_pr_common+0x1a8>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f000 80a6 	beq.w	8000d0c <__gnu_unwind_pr_common+0x1fc>
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db77      	blt.n	8000cb4 <__gnu_unwind_pr_common+0x1a4>
 8000bc4:	9b02      	ldr	r3, [sp, #8]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000bcc:	e7c2      	b.n	8000b54 <__gnu_unwind_pr_common+0x44>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	2e02      	cmp	r6, #2
 8000bd4:	dd3e      	ble.n	8000c54 <__gnu_unwind_pr_common+0x144>
 8000bd6:	f7ff fe13 	bl	8000800 <__gnu_unwind_24bit.isra.1>
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d040      	beq.n	8000c60 <__gnu_unwind_pr_common+0x150>
 8000bde:	2009      	movs	r0, #9
 8000be0:	b00b      	add	sp, #44	; 0x2c
 8000be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000be6:	2000      	movs	r0, #0
 8000be8:	e7d0      	b.n	8000b8c <__gnu_unwind_pr_common+0x7c>
 8000bea:	6867      	ldr	r7, [r4, #4]
 8000bec:	3408      	adds	r4, #8
 8000bee:	e7bc      	b.n	8000b6a <__gnu_unwind_pr_common+0x5a>
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	dca3      	bgt.n	8000b3c <__gnu_unwind_pr_common+0x2c>
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	0c13      	lsrs	r3, r2, #16
 8000bf8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000bfc:	0412      	lsls	r2, r2, #16
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000c04:	9207      	str	r2, [sp, #28]
 8000c06:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8000c0a:	e797      	b.n	8000b3c <__gnu_unwind_pr_common+0x2c>
 8000c0c:	f1bb 0f00 	cmp.w	fp, #0
 8000c10:	d002      	beq.n	8000c18 <__gnu_unwind_pr_common+0x108>
 8000c12:	2800      	cmp	r0, #0
 8000c14:	f040 80bd 	bne.w	8000d92 <__gnu_unwind_pr_common+0x282>
 8000c18:	3404      	adds	r4, #4
 8000c1a:	e79b      	b.n	8000b54 <__gnu_unwind_pr_common+0x44>
 8000c1c:	f1bb 0f00 	cmp.w	fp, #0
 8000c20:	d125      	bne.n	8000c6e <__gnu_unwind_pr_common+0x15e>
 8000c22:	b1a8      	cbz	r0, 8000c50 <__gnu_unwind_pr_common+0x140>
 8000c24:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000c28:	1c99      	adds	r1, r3, #2
 8000c2a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000c2e:	d0d6      	beq.n	8000bde <__gnu_unwind_pr_common+0xce>
 8000c30:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000c34:	3301      	adds	r3, #1
 8000c36:	9106      	str	r1, [sp, #24]
 8000c38:	f000 80a3 	beq.w	8000d82 <__gnu_unwind_pr_common+0x272>
 8000c3c:	1d20      	adds	r0, r4, #4
 8000c3e:	f7ff fdd9 	bl	80007f4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000c42:	ab06      	add	r3, sp, #24
 8000c44:	4601      	mov	r1, r0
 8000c46:	4628      	mov	r0, r5
 8000c48:	f3af 8000 	nop.w
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d177      	bne.n	8000d40 <__gnu_unwind_pr_common+0x230>
 8000c50:	3408      	adds	r4, #8
 8000c52:	e77f      	b.n	8000b54 <__gnu_unwind_pr_common+0x44>
 8000c54:	a907      	add	r1, sp, #28
 8000c56:	4648      	mov	r0, r9
 8000c58:	f000 faf0 	bl	800123c <__gnu_unwind_execute>
 8000c5c:	2800      	cmp	r0, #0
 8000c5e:	d1be      	bne.n	8000bde <__gnu_unwind_pr_common+0xce>
 8000c60:	9b01      	ldr	r3, [sp, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d15c      	bne.n	8000d20 <__gnu_unwind_pr_common+0x210>
 8000c66:	2008      	movs	r0, #8
 8000c68:	b00b      	add	sp, #44	; 0x2c
 8000c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c6e:	210d      	movs	r1, #13
 8000c70:	4648      	mov	r0, r9
 8000c72:	6a2f      	ldr	r7, [r5, #32]
 8000c74:	f7ff fede 	bl	8000a34 <_Unwind_GetGR>
 8000c78:	4287      	cmp	r7, r0
 8000c7a:	d1e9      	bne.n	8000c50 <__gnu_unwind_pr_common+0x140>
 8000c7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c7e:	429c      	cmp	r4, r3
 8000c80:	d1e6      	bne.n	8000c50 <__gnu_unwind_pr_common+0x140>
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff fcea 	bl	800065c <selfrel_offset31>
 8000c88:	210f      	movs	r1, #15
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	4648      	mov	r0, r9
 8000c8e:	f7ff fef7 	bl	8000a80 <_Unwind_SetGR>
 8000c92:	4648      	mov	r0, r9
 8000c94:	462a      	mov	r2, r5
 8000c96:	2100      	movs	r1, #0
 8000c98:	f7ff fef2 	bl	8000a80 <_Unwind_SetGR>
 8000c9c:	2007      	movs	r0, #7
 8000c9e:	e79f      	b.n	8000be0 <__gnu_unwind_pr_common+0xd0>
 8000ca0:	210d      	movs	r1, #13
 8000ca2:	4648      	mov	r0, r9
 8000ca4:	6a2f      	ldr	r7, [r5, #32]
 8000ca6:	f7ff fec5 	bl	8000a34 <_Unwind_GetGR>
 8000caa:	4287      	cmp	r7, r0
 8000cac:	d058      	beq.n	8000d60 <__gnu_unwind_pr_common+0x250>
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da87      	bge.n	8000bc4 <__gnu_unwind_pr_common+0xb4>
 8000cb4:	3404      	adds	r4, #4
 8000cb6:	e785      	b.n	8000bc4 <__gnu_unwind_pr_common+0xb4>
 8000cb8:	9b02      	ldr	r3, [sp, #8]
 8000cba:	b33b      	cbz	r3, 8000d0c <__gnu_unwind_pr_common+0x1fc>
 8000cbc:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000cc0:	1d27      	adds	r7, r4, #4
 8000cc2:	f8cd b010 	str.w	fp, [sp, #16]
 8000cc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000cca:	46a3      	mov	fp, r4
 8000ccc:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000cd0:	461c      	mov	r4, r3
 8000cd2:	9605      	str	r6, [sp, #20]
 8000cd4:	e002      	b.n	8000cdc <__gnu_unwind_pr_common+0x1cc>
 8000cd6:	45b2      	cmp	sl, r6
 8000cd8:	46b0      	mov	r8, r6
 8000cda:	d016      	beq.n	8000d0a <__gnu_unwind_pr_common+0x1fa>
 8000cdc:	4638      	mov	r0, r7
 8000cde:	9406      	str	r4, [sp, #24]
 8000ce0:	f7ff fd88 	bl	80007f4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000ce4:	ab06      	add	r3, sp, #24
 8000ce6:	4601      	mov	r1, r0
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4628      	mov	r0, r5
 8000cec:	f3af 8000 	nop.w
 8000cf0:	f108 0601 	add.w	r6, r8, #1
 8000cf4:	3704      	adds	r7, #4
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	d0ed      	beq.n	8000cd6 <__gnu_unwind_pr_common+0x1c6>
 8000cfa:	9b02      	ldr	r3, [sp, #8]
 8000cfc:	465c      	mov	r4, fp
 8000cfe:	4543      	cmp	r3, r8
 8000d00:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000d04:	9e05      	ldr	r6, [sp, #20]
 8000d06:	d1d2      	bne.n	8000cae <__gnu_unwind_pr_common+0x19e>
 8000d08:	e000      	b.n	8000d0c <__gnu_unwind_pr_common+0x1fc>
 8000d0a:	465c      	mov	r4, fp
 8000d0c:	4648      	mov	r0, r9
 8000d0e:	210d      	movs	r1, #13
 8000d10:	f7ff fe90 	bl	8000a34 <_Unwind_GetGR>
 8000d14:	9b06      	ldr	r3, [sp, #24]
 8000d16:	6228      	str	r0, [r5, #32]
 8000d18:	62ac      	str	r4, [r5, #40]	; 0x28
 8000d1a:	626b      	str	r3, [r5, #36]	; 0x24
 8000d1c:	2006      	movs	r0, #6
 8000d1e:	e75f      	b.n	8000be0 <__gnu_unwind_pr_common+0xd0>
 8000d20:	210f      	movs	r1, #15
 8000d22:	4648      	mov	r0, r9
 8000d24:	f7ff fe86 	bl	8000a34 <_Unwind_GetGR>
 8000d28:	210e      	movs	r1, #14
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	4648      	mov	r0, r9
 8000d2e:	f7ff fea7 	bl	8000a80 <_Unwind_SetGR>
 8000d32:	4648      	mov	r0, r9
 8000d34:	4a29      	ldr	r2, [pc, #164]	; (8000ddc <__gnu_unwind_pr_common+0x2cc>)
 8000d36:	210f      	movs	r1, #15
 8000d38:	f7ff fea2 	bl	8000a80 <_Unwind_SetGR>
 8000d3c:	2007      	movs	r0, #7
 8000d3e:	e74f      	b.n	8000be0 <__gnu_unwind_pr_common+0xd0>
 8000d40:	4607      	mov	r7, r0
 8000d42:	210d      	movs	r1, #13
 8000d44:	4648      	mov	r0, r9
 8000d46:	f7ff fe75 	bl	8000a34 <_Unwind_GetGR>
 8000d4a:	2f02      	cmp	r7, #2
 8000d4c:	6228      	str	r0, [r5, #32]
 8000d4e:	d11d      	bne.n	8000d8c <__gnu_unwind_pr_common+0x27c>
 8000d50:	462b      	mov	r3, r5
 8000d52:	9a06      	ldr	r2, [sp, #24]
 8000d54:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000d58:	626b      	str	r3, [r5, #36]	; 0x24
 8000d5a:	62ac      	str	r4, [r5, #40]	; 0x28
 8000d5c:	2006      	movs	r0, #6
 8000d5e:	e73f      	b.n	8000be0 <__gnu_unwind_pr_common+0xd0>
 8000d60:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000d62:	429c      	cmp	r4, r3
 8000d64:	d1a3      	bne.n	8000cae <__gnu_unwind_pr_common+0x19e>
 8000d66:	2204      	movs	r2, #4
 8000d68:	2700      	movs	r7, #0
 8000d6a:	9902      	ldr	r1, [sp, #8]
 8000d6c:	18a3      	adds	r3, r4, r2
 8000d6e:	62a9      	str	r1, [r5, #40]	; 0x28
 8000d70:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000d72:	632a      	str	r2, [r5, #48]	; 0x30
 8000d74:	636b      	str	r3, [r5, #52]	; 0x34
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	42bb      	cmp	r3, r7
 8000d7a:	db1d      	blt.n	8000db8 <__gnu_unwind_pr_common+0x2a8>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	e720      	b.n	8000bc4 <__gnu_unwind_pr_common+0xb4>
 8000d82:	4648      	mov	r0, r9
 8000d84:	210d      	movs	r1, #13
 8000d86:	f7ff fe55 	bl	8000a34 <_Unwind_GetGR>
 8000d8a:	6228      	str	r0, [r5, #32]
 8000d8c:	9b06      	ldr	r3, [sp, #24]
 8000d8e:	626b      	str	r3, [r5, #36]	; 0x24
 8000d90:	e7e3      	b.n	8000d5a <__gnu_unwind_pr_common+0x24a>
 8000d92:	4620      	mov	r0, r4
 8000d94:	f7ff fc62 	bl	800065c <selfrel_offset31>
 8000d98:	3404      	adds	r4, #4
 8000d9a:	4606      	mov	r6, r0
 8000d9c:	63ac      	str	r4, [r5, #56]	; 0x38
 8000d9e:	4628      	mov	r0, r5
 8000da0:	f3af 8000 	nop.w
 8000da4:	2800      	cmp	r0, #0
 8000da6:	f43f af1a 	beq.w	8000bde <__gnu_unwind_pr_common+0xce>
 8000daa:	4648      	mov	r0, r9
 8000dac:	4632      	mov	r2, r6
 8000dae:	210f      	movs	r1, #15
 8000db0:	f7ff fe66 	bl	8000a80 <_Unwind_SetGR>
 8000db4:	2007      	movs	r0, #7
 8000db6:	e713      	b.n	8000be0 <__gnu_unwind_pr_common+0xd0>
 8000db8:	4608      	mov	r0, r1
 8000dba:	3001      	adds	r0, #1
 8000dbc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000dc0:	f7ff fc4c 	bl	800065c <selfrel_offset31>
 8000dc4:	210f      	movs	r1, #15
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	4648      	mov	r0, r9
 8000dca:	f7ff fe59 	bl	8000a80 <_Unwind_SetGR>
 8000dce:	4648      	mov	r0, r9
 8000dd0:	462a      	mov	r2, r5
 8000dd2:	4639      	mov	r1, r7
 8000dd4:	f7ff fe54 	bl	8000a80 <_Unwind_SetGR>
 8000dd8:	2007      	movs	r0, #7
 8000dda:	e701      	b.n	8000be0 <__gnu_unwind_pr_common+0xd0>
 8000ddc:	00000000 	.word	0x00000000

08000de0 <__aeabi_unwind_cpp_pr0>:
 8000de0:	2300      	movs	r3, #0
 8000de2:	e695      	b.n	8000b10 <__gnu_unwind_pr_common>

08000de4 <__aeabi_unwind_cpp_pr1>:
 8000de4:	2301      	movs	r3, #1
 8000de6:	e693      	b.n	8000b10 <__gnu_unwind_pr_common>

08000de8 <__aeabi_unwind_cpp_pr2>:
 8000de8:	2302      	movs	r3, #2
 8000dea:	e691      	b.n	8000b10 <__gnu_unwind_pr_common>

08000dec <_Unwind_VRS_Pop>:
 8000dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dee:	4604      	mov	r4, r0
 8000df0:	b0c5      	sub	sp, #276	; 0x114
 8000df2:	2904      	cmp	r1, #4
 8000df4:	d80d      	bhi.n	8000e12 <_Unwind_VRS_Pop+0x26>
 8000df6:	e8df f001 	tbb	[pc, r1]
 8000dfa:	0355      	.short	0x0355
 8000dfc:	310c      	.short	0x310c
 8000dfe:	0f          	.byte	0x0f
 8000dff:	00          	.byte	0x00
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000e06:	b295      	uxth	r5, r2
 8000e08:	d164      	bne.n	8000ed4 <_Unwind_VRS_Pop+0xe8>
 8000e0a:	1972      	adds	r2, r6, r5
 8000e0c:	2a10      	cmp	r2, #16
 8000e0e:	f240 809d 	bls.w	8000f4c <_Unwind_VRS_Pop+0x160>
 8000e12:	2002      	movs	r0, #2
 8000e14:	b045      	add	sp, #276	; 0x114
 8000e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1fa      	bne.n	8000e12 <_Unwind_VRS_Pop+0x26>
 8000e1c:	2a10      	cmp	r2, #16
 8000e1e:	d8f8      	bhi.n	8000e12 <_Unwind_VRS_Pop+0x26>
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	06d8      	lsls	r0, r3, #27
 8000e24:	f100 80c8 	bmi.w	8000fb8 <_Unwind_VRS_Pop+0x1cc>
 8000e28:	ae22      	add	r6, sp, #136	; 0x88
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	9201      	str	r2, [sp, #4]
 8000e2e:	2501      	movs	r5, #1
 8000e30:	f000 f974 	bl	800111c <__gnu_Unwind_Save_WMMXC>
 8000e34:	2300      	movs	r3, #0
 8000e36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e38:	9a01      	ldr	r2, [sp, #4]
 8000e3a:	fa05 f103 	lsl.w	r1, r5, r3
 8000e3e:	4211      	tst	r1, r2
 8000e40:	d003      	beq.n	8000e4a <_Unwind_VRS_Pop+0x5e>
 8000e42:	6801      	ldr	r1, [r0, #0]
 8000e44:	3004      	adds	r0, #4
 8000e46:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	2b04      	cmp	r3, #4
 8000e4e:	d1f4      	bne.n	8000e3a <_Unwind_VRS_Pop+0x4e>
 8000e50:	63a0      	str	r0, [r4, #56]	; 0x38
 8000e52:	4630      	mov	r0, r6
 8000e54:	f000 f958 	bl	8001108 <__gnu_Unwind_Restore_WMMXC>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e7db      	b.n	8000e14 <_Unwind_VRS_Pop+0x28>
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	d1d8      	bne.n	8000e12 <_Unwind_VRS_Pop+0x26>
 8000e60:	0c15      	lsrs	r5, r2, #16
 8000e62:	b297      	uxth	r7, r2
 8000e64:	19eb      	adds	r3, r5, r7
 8000e66:	2b10      	cmp	r3, #16
 8000e68:	d8d3      	bhi.n	8000e12 <_Unwind_VRS_Pop+0x26>
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	071e      	lsls	r6, r3, #28
 8000e6e:	f100 80b7 	bmi.w	8000fe0 <_Unwind_VRS_Pop+0x1f4>
 8000e72:	ae22      	add	r6, sp, #136	; 0x88
 8000e74:	4630      	mov	r0, r6
 8000e76:	f000 f925 	bl	80010c4 <__gnu_Unwind_Save_WMMXD>
 8000e7a:	00ed      	lsls	r5, r5, #3
 8000e7c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e7e:	b15f      	cbz	r7, 8000e98 <_Unwind_VRS_Pop+0xac>
 8000e80:	3d04      	subs	r5, #4
 8000e82:	4603      	mov	r3, r0
 8000e84:	1971      	adds	r1, r6, r5
 8000e86:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8000e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000e8e:	4283      	cmp	r3, r0
 8000e90:	f841 2f04 	str.w	r2, [r1, #4]!
 8000e94:	d1f9      	bne.n	8000e8a <_Unwind_VRS_Pop+0x9e>
 8000e96:	4618      	mov	r0, r3
 8000e98:	63a0      	str	r0, [r4, #56]	; 0x38
 8000e9a:	4630      	mov	r0, r6
 8000e9c:	f000 f8f0 	bl	8001080 <__gnu_Unwind_Restore_WMMXD>
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	e7b7      	b.n	8000e14 <_Unwind_VRS_Pop+0x28>
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1b4      	bne.n	8000e12 <_Unwind_VRS_Pop+0x26>
 8000ea8:	2701      	movs	r7, #1
 8000eaa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000eac:	b296      	uxth	r6, r2
 8000eae:	1d20      	adds	r0, r4, #4
 8000eb0:	fa07 f103 	lsl.w	r1, r7, r3
 8000eb4:	4231      	tst	r1, r6
 8000eb6:	f103 0301 	add.w	r3, r3, #1
 8000eba:	d002      	beq.n	8000ec2 <_Unwind_VRS_Pop+0xd6>
 8000ebc:	6829      	ldr	r1, [r5, #0]
 8000ebe:	3504      	adds	r5, #4
 8000ec0:	6001      	str	r1, [r0, #0]
 8000ec2:	2b10      	cmp	r3, #16
 8000ec4:	f100 0004 	add.w	r0, r0, #4
 8000ec8:	d1f2      	bne.n	8000eb0 <_Unwind_VRS_Pop+0xc4>
 8000eca:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000ece:	d13b      	bne.n	8000f48 <_Unwind_VRS_Pop+0x15c>
 8000ed0:	63a5      	str	r5, [r4, #56]	; 0x38
 8000ed2:	e79f      	b.n	8000e14 <_Unwind_VRS_Pop+0x28>
 8000ed4:	2b05      	cmp	r3, #5
 8000ed6:	d19c      	bne.n	8000e12 <_Unwind_VRS_Pop+0x26>
 8000ed8:	1977      	adds	r7, r6, r5
 8000eda:	2f20      	cmp	r7, #32
 8000edc:	d899      	bhi.n	8000e12 <_Unwind_VRS_Pop+0x26>
 8000ede:	2e0f      	cmp	r6, #15
 8000ee0:	d966      	bls.n	8000fb0 <_Unwind_VRS_Pop+0x1c4>
 8000ee2:	462f      	mov	r7, r5
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d13a      	bne.n	8000f5e <_Unwind_VRS_Pop+0x172>
 8000ee8:	462a      	mov	r2, r5
 8000eea:	2700      	movs	r7, #0
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000ef0:	dd72      	ble.n	8000fd8 <_Unwind_VRS_Pop+0x1ec>
 8000ef2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000ef6:	4601      	mov	r1, r0
 8000ef8:	a844      	add	r0, sp, #272	; 0x110
 8000efa:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000efe:	388c      	subs	r0, #140	; 0x8c
 8000f00:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f04:	4291      	cmp	r1, r2
 8000f06:	f840 5f04 	str.w	r5, [r0, #4]!
 8000f0a:	d1f9      	bne.n	8000f00 <_Unwind_VRS_Pop+0x114>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	b197      	cbz	r7, 8000f36 <_Unwind_VRS_Pop+0x14a>
 8000f10:	2e10      	cmp	r6, #16
 8000f12:	4632      	mov	r2, r6
 8000f14:	bf38      	it	cc
 8000f16:	2210      	movcc	r2, #16
 8000f18:	a944      	add	r1, sp, #272	; 0x110
 8000f1a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000f1e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000f22:	0079      	lsls	r1, r7, #1
 8000f24:	3a04      	subs	r2, #4
 8000f26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000f2a:	f850 5b04 	ldr.w	r5, [r0], #4
 8000f2e:	4288      	cmp	r0, r1
 8000f30:	f842 5f04 	str.w	r5, [r2, #4]!
 8000f34:	d1f9      	bne.n	8000f2a <_Unwind_VRS_Pop+0x13e>
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d048      	beq.n	8000fcc <_Unwind_VRS_Pop+0x1e0>
 8000f3a:	2e0f      	cmp	r6, #15
 8000f3c:	63a1      	str	r1, [r4, #56]	; 0x38
 8000f3e:	d933      	bls.n	8000fa8 <_Unwind_VRS_Pop+0x1bc>
 8000f40:	b117      	cbz	r7, 8000f48 <_Unwind_VRS_Pop+0x15c>
 8000f42:	a802      	add	r0, sp, #8
 8000f44:	f000 f894 	bl	8001070 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000f48:	2000      	movs	r0, #0
 8000f4a:	e763      	b.n	8000e14 <_Unwind_VRS_Pop+0x28>
 8000f4c:	2e0f      	cmp	r6, #15
 8000f4e:	f63f af60 	bhi.w	8000e12 <_Unwind_VRS_Pop+0x26>
 8000f52:	2700      	movs	r7, #0
 8000f54:	6822      	ldr	r2, [r4, #0]
 8000f56:	07d1      	lsls	r1, r2, #31
 8000f58:	d417      	bmi.n	8000f8a <_Unwind_VRS_Pop+0x19e>
 8000f5a:	2f00      	cmp	r7, #0
 8000f5c:	d060      	beq.n	8001020 <_Unwind_VRS_Pop+0x234>
 8000f5e:	6822      	ldr	r2, [r4, #0]
 8000f60:	0751      	lsls	r1, r2, #29
 8000f62:	d445      	bmi.n	8000ff0 <_Unwind_VRS_Pop+0x204>
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d04d      	beq.n	8001004 <_Unwind_VRS_Pop+0x218>
 8000f68:	2e0f      	cmp	r6, #15
 8000f6a:	d806      	bhi.n	8000f7a <_Unwind_VRS_Pop+0x18e>
 8000f6c:	a822      	add	r0, sp, #136	; 0x88
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	f000 f87a 	bl	8001068 <__gnu_Unwind_Save_VFP_D>
 8000f74:	9b01      	ldr	r3, [sp, #4]
 8000f76:	2f00      	cmp	r7, #0
 8000f78:	d0b6      	beq.n	8000ee8 <_Unwind_VRS_Pop+0xfc>
 8000f7a:	a802      	add	r0, sp, #8
 8000f7c:	9301      	str	r3, [sp, #4]
 8000f7e:	f000 f87b 	bl	8001078 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f82:	9b01      	ldr	r3, [sp, #4]
 8000f84:	f1c6 0210 	rsb	r2, r6, #16
 8000f88:	e7b0      	b.n	8000eec <_Unwind_VRS_Pop+0x100>
 8000f8a:	f022 0101 	bic.w	r1, r2, #1
 8000f8e:	2b05      	cmp	r3, #5
 8000f90:	6021      	str	r1, [r4, #0]
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	4620      	mov	r0, r4
 8000f96:	d03b      	beq.n	8001010 <_Unwind_VRS_Pop+0x224>
 8000f98:	f022 0203 	bic.w	r2, r2, #3
 8000f9c:	f840 2b48 	str.w	r2, [r0], #72
 8000fa0:	f000 f85a 	bl	8001058 <__gnu_Unwind_Save_VFP>
 8000fa4:	9b01      	ldr	r3, [sp, #4]
 8000fa6:	e7d8      	b.n	8000f5a <_Unwind_VRS_Pop+0x16e>
 8000fa8:	a822      	add	r0, sp, #136	; 0x88
 8000faa:	f000 f859 	bl	8001060 <__gnu_Unwind_Restore_VFP_D>
 8000fae:	e7c7      	b.n	8000f40 <_Unwind_VRS_Pop+0x154>
 8000fb0:	2f10      	cmp	r7, #16
 8000fb2:	d9ce      	bls.n	8000f52 <_Unwind_VRS_Pop+0x166>
 8000fb4:	3f10      	subs	r7, #16
 8000fb6:	e7cd      	b.n	8000f54 <_Unwind_VRS_Pop+0x168>
 8000fb8:	f023 0310 	bic.w	r3, r3, #16
 8000fbc:	6023      	str	r3, [r4, #0]
 8000fbe:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000fc2:	9201      	str	r2, [sp, #4]
 8000fc4:	f000 f8aa 	bl	800111c <__gnu_Unwind_Save_WMMXC>
 8000fc8:	9a01      	ldr	r2, [sp, #4]
 8000fca:	e72d      	b.n	8000e28 <_Unwind_VRS_Pop+0x3c>
 8000fcc:	3104      	adds	r1, #4
 8000fce:	63a1      	str	r1, [r4, #56]	; 0x38
 8000fd0:	a822      	add	r0, sp, #136	; 0x88
 8000fd2:	f000 f83d 	bl	8001050 <__gnu_Unwind_Restore_VFP>
 8000fd6:	e7b7      	b.n	8000f48 <_Unwind_VRS_Pop+0x15c>
 8000fd8:	2f00      	cmp	r7, #0
 8000fda:	d199      	bne.n	8000f10 <_Unwind_VRS_Pop+0x124>
 8000fdc:	4601      	mov	r1, r0
 8000fde:	e7aa      	b.n	8000f36 <_Unwind_VRS_Pop+0x14a>
 8000fe0:	f023 0308 	bic.w	r3, r3, #8
 8000fe4:	6023      	str	r3, [r4, #0]
 8000fe6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000fea:	f000 f86b 	bl	80010c4 <__gnu_Unwind_Save_WMMXD>
 8000fee:	e740      	b.n	8000e72 <_Unwind_VRS_Pop+0x86>
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f022 0204 	bic.w	r2, r2, #4
 8000ff6:	f840 2bd0 	str.w	r2, [r0], #208
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f000 f83c 	bl	8001078 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001000:	9b01      	ldr	r3, [sp, #4]
 8001002:	e7af      	b.n	8000f64 <_Unwind_VRS_Pop+0x178>
 8001004:	a822      	add	r0, sp, #136	; 0x88
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f000 f826 	bl	8001058 <__gnu_Unwind_Save_VFP>
 800100c:	9b01      	ldr	r3, [sp, #4]
 800100e:	e7b9      	b.n	8000f84 <_Unwind_VRS_Pop+0x198>
 8001010:	f041 0102 	orr.w	r1, r1, #2
 8001014:	f840 1b48 	str.w	r1, [r0], #72
 8001018:	f000 f826 	bl	8001068 <__gnu_Unwind_Save_VFP_D>
 800101c:	9b01      	ldr	r3, [sp, #4]
 800101e:	e79c      	b.n	8000f5a <_Unwind_VRS_Pop+0x16e>
 8001020:	2b01      	cmp	r3, #1
 8001022:	d003      	beq.n	800102c <_Unwind_VRS_Pop+0x240>
 8001024:	2e0f      	cmp	r6, #15
 8001026:	f63f af5f 	bhi.w	8000ee8 <_Unwind_VRS_Pop+0xfc>
 800102a:	e79f      	b.n	8000f6c <_Unwind_VRS_Pop+0x180>
 800102c:	a822      	add	r0, sp, #136	; 0x88
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	f000 f812 	bl	8001058 <__gnu_Unwind_Save_VFP>
 8001034:	9b01      	ldr	r3, [sp, #4]
 8001036:	e757      	b.n	8000ee8 <_Unwind_VRS_Pop+0xfc>

08001038 <__restore_core_regs>:
 8001038:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800103c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001040:	469c      	mov	ip, r3
 8001042:	46a6      	mov	lr, r4
 8001044:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001048:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800104c:	46e5      	mov	sp, ip
 800104e:	bd00      	pop	{pc}

08001050 <__gnu_Unwind_Restore_VFP>:
 8001050:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <__gnu_Unwind_Save_VFP>:
 8001058:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <__gnu_Unwind_Restore_VFP_D>:
 8001060:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__gnu_Unwind_Save_VFP_D>:
 8001068:	ec80 0b20 	vstmia	r0, {d0-d15}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001070:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001078:	ecc0 0b20 	vstmia	r0, {d16-d31}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <__gnu_Unwind_Restore_WMMXD>:
 8001080:	ecf0 0102 	ldfe	f0, [r0], #8
 8001084:	ecf0 1102 	ldfe	f1, [r0], #8
 8001088:	ecf0 2102 	ldfe	f2, [r0], #8
 800108c:	ecf0 3102 	ldfe	f3, [r0], #8
 8001090:	ecf0 4102 	ldfe	f4, [r0], #8
 8001094:	ecf0 5102 	ldfe	f5, [r0], #8
 8001098:	ecf0 6102 	ldfe	f6, [r0], #8
 800109c:	ecf0 7102 	ldfe	f7, [r0], #8
 80010a0:	ecf0 8102 	ldfp	f0, [r0], #8
 80010a4:	ecf0 9102 	ldfp	f1, [r0], #8
 80010a8:	ecf0 a102 	ldfp	f2, [r0], #8
 80010ac:	ecf0 b102 	ldfp	f3, [r0], #8
 80010b0:	ecf0 c102 	ldfp	f4, [r0], #8
 80010b4:	ecf0 d102 	ldfp	f5, [r0], #8
 80010b8:	ecf0 e102 	ldfp	f6, [r0], #8
 80010bc:	ecf0 f102 	ldfp	f7, [r0], #8
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__gnu_Unwind_Save_WMMXD>:
 80010c4:	ece0 0102 	stfe	f0, [r0], #8
 80010c8:	ece0 1102 	stfe	f1, [r0], #8
 80010cc:	ece0 2102 	stfe	f2, [r0], #8
 80010d0:	ece0 3102 	stfe	f3, [r0], #8
 80010d4:	ece0 4102 	stfe	f4, [r0], #8
 80010d8:	ece0 5102 	stfe	f5, [r0], #8
 80010dc:	ece0 6102 	stfe	f6, [r0], #8
 80010e0:	ece0 7102 	stfe	f7, [r0], #8
 80010e4:	ece0 8102 	stfp	f0, [r0], #8
 80010e8:	ece0 9102 	stfp	f1, [r0], #8
 80010ec:	ece0 a102 	stfp	f2, [r0], #8
 80010f0:	ece0 b102 	stfp	f3, [r0], #8
 80010f4:	ece0 c102 	stfp	f4, [r0], #8
 80010f8:	ece0 d102 	stfp	f5, [r0], #8
 80010fc:	ece0 e102 	stfp	f6, [r0], #8
 8001100:	ece0 f102 	stfp	f7, [r0], #8
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <__gnu_Unwind_Restore_WMMXC>:
 8001108:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800110c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001110:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001114:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop

0800111c <__gnu_Unwind_Save_WMMXC>:
 800111c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001120:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001124:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001128:	fca0 b101 	stc2	1, cr11, [r0], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <_Unwind_RaiseException>:
 8001130:	46ec      	mov	ip, sp
 8001132:	b500      	push	{lr}
 8001134:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001138:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001144:	a901      	add	r1, sp, #4
 8001146:	f7ff fbed 	bl	8000924 <__gnu_Unwind_RaiseException>
 800114a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800114e:	b012      	add	sp, #72	; 0x48
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <_Unwind_Resume>:
 8001154:	46ec      	mov	ip, sp
 8001156:	b500      	push	{lr}
 8001158:	e92d 5000 	stmdb	sp!, {ip, lr}
 800115c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001168:	a901      	add	r1, sp, #4
 800116a:	f7ff fc15 	bl	8000998 <__gnu_Unwind_Resume>
 800116e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001172:	b012      	add	sp, #72	; 0x48
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <_Unwind_Resume_or_Rethrow>:
 8001178:	46ec      	mov	ip, sp
 800117a:	b500      	push	{lr}
 800117c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001180:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	e92d 000c 	stmdb	sp!, {r2, r3}
 800118c:	a901      	add	r1, sp, #4
 800118e:	f7ff fc25 	bl	80009dc <__gnu_Unwind_Resume_or_Rethrow>
 8001192:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001196:	b012      	add	sp, #72	; 0x48
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <_Unwind_ForcedUnwind>:
 800119c:	46ec      	mov	ip, sp
 800119e:	b500      	push	{lr}
 80011a0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80011a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	e92d 000c 	stmdb	sp!, {r2, r3}
 80011b0:	ab01      	add	r3, sp, #4
 80011b2:	f7ff fbe7 	bl	8000984 <__gnu_Unwind_ForcedUnwind>
 80011b6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80011ba:	b012      	add	sp, #72	; 0x48
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <_Unwind_Backtrace>:
 80011c0:	46ec      	mov	ip, sp
 80011c2:	b500      	push	{lr}
 80011c4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80011c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80011d4:	aa01      	add	r2, sp, #4
 80011d6:	f7ff fc61 	bl	8000a9c <__gnu_Unwind_Backtrace>
 80011da:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80011de:	b012      	add	sp, #72	; 0x48
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop

080011e4 <next_unwind_byte>:
 80011e4:	7a02      	ldrb	r2, [r0, #8]
 80011e6:	b91a      	cbnz	r2, 80011f0 <next_unwind_byte+0xc>
 80011e8:	7a43      	ldrb	r3, [r0, #9]
 80011ea:	b943      	cbnz	r3, 80011fe <next_unwind_byte+0x1a>
 80011ec:	20b0      	movs	r0, #176	; 0xb0
 80011ee:	4770      	bx	lr
 80011f0:	6803      	ldr	r3, [r0, #0]
 80011f2:	3a01      	subs	r2, #1
 80011f4:	7202      	strb	r2, [r0, #8]
 80011f6:	021a      	lsls	r2, r3, #8
 80011f8:	6002      	str	r2, [r0, #0]
 80011fa:	0e18      	lsrs	r0, r3, #24
 80011fc:	4770      	bx	lr
 80011fe:	2103      	movs	r1, #3
 8001200:	6842      	ldr	r2, [r0, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	b410      	push	{r4}
 8001206:	7243      	strb	r3, [r0, #9]
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	1d14      	adds	r4, r2, #4
 800120c:	7201      	strb	r1, [r0, #8]
 800120e:	021a      	lsls	r2, r3, #8
 8001210:	6044      	str	r4, [r0, #4]
 8001212:	6002      	str	r2, [r0, #0]
 8001214:	bc10      	pop	{r4}
 8001216:	0e18      	lsrs	r0, r3, #24
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop

0800121c <_Unwind_GetGR.constprop.0>:
 800121c:	2300      	movs	r3, #0
 800121e:	b500      	push	{lr}
 8001220:	b085      	sub	sp, #20
 8001222:	aa03      	add	r2, sp, #12
 8001224:	9200      	str	r2, [sp, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	220c      	movs	r2, #12
 800122a:	f7ff fbe9 	bl	8000a00 <_Unwind_VRS_Get>
 800122e:	9803      	ldr	r0, [sp, #12]
 8001230:	b005      	add	sp, #20
 8001232:	f85d fb04 	ldr.w	pc, [sp], #4
 8001236:	bf00      	nop

08001238 <unwind_UCB_from_context>:
 8001238:	e7f0      	b.n	800121c <_Unwind_GetGR.constprop.0>
 800123a:	bf00      	nop

0800123c <__gnu_unwind_execute>:
 800123c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001240:	4606      	mov	r6, r0
 8001242:	460f      	mov	r7, r1
 8001244:	f04f 0800 	mov.w	r8, #0
 8001248:	b085      	sub	sp, #20
 800124a:	4638      	mov	r0, r7
 800124c:	f7ff ffca 	bl	80011e4 <next_unwind_byte>
 8001250:	28b0      	cmp	r0, #176	; 0xb0
 8001252:	4604      	mov	r4, r0
 8001254:	d023      	beq.n	800129e <__gnu_unwind_execute+0x62>
 8001256:	0605      	lsls	r5, r0, #24
 8001258:	d427      	bmi.n	80012aa <__gnu_unwind_execute+0x6e>
 800125a:	2300      	movs	r3, #0
 800125c:	f10d 090c 	add.w	r9, sp, #12
 8001260:	4619      	mov	r1, r3
 8001262:	0085      	lsls	r5, r0, #2
 8001264:	220d      	movs	r2, #13
 8001266:	f8cd 9000 	str.w	r9, [sp]
 800126a:	4630      	mov	r0, r6
 800126c:	f7ff fbc8 	bl	8000a00 <_Unwind_VRS_Get>
 8001270:	b2ed      	uxtb	r5, r5
 8001272:	9b03      	ldr	r3, [sp, #12]
 8001274:	0660      	lsls	r0, r4, #25
 8001276:	f105 0504 	add.w	r5, r5, #4
 800127a:	bf4c      	ite	mi
 800127c:	1b5d      	submi	r5, r3, r5
 800127e:	18ed      	addpl	r5, r5, r3
 8001280:	2300      	movs	r3, #0
 8001282:	220d      	movs	r2, #13
 8001284:	4619      	mov	r1, r3
 8001286:	f8cd 9000 	str.w	r9, [sp]
 800128a:	4630      	mov	r0, r6
 800128c:	9503      	str	r5, [sp, #12]
 800128e:	f7ff fbdd 	bl	8000a4c <_Unwind_VRS_Set>
 8001292:	4638      	mov	r0, r7
 8001294:	f7ff ffa6 	bl	80011e4 <next_unwind_byte>
 8001298:	28b0      	cmp	r0, #176	; 0xb0
 800129a:	4604      	mov	r4, r0
 800129c:	d1db      	bne.n	8001256 <__gnu_unwind_execute+0x1a>
 800129e:	f1b8 0f00 	cmp.w	r8, #0
 80012a2:	f000 8094 	beq.w	80013ce <__gnu_unwind_execute+0x192>
 80012a6:	2000      	movs	r0, #0
 80012a8:	e01c      	b.n	80012e4 <__gnu_unwind_execute+0xa8>
 80012aa:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80012ae:	2b80      	cmp	r3, #128	; 0x80
 80012b0:	d05c      	beq.n	800136c <__gnu_unwind_execute+0x130>
 80012b2:	2b90      	cmp	r3, #144	; 0x90
 80012b4:	d019      	beq.n	80012ea <__gnu_unwind_execute+0xae>
 80012b6:	2ba0      	cmp	r3, #160	; 0xa0
 80012b8:	d02c      	beq.n	8001314 <__gnu_unwind_execute+0xd8>
 80012ba:	2bb0      	cmp	r3, #176	; 0xb0
 80012bc:	d03e      	beq.n	800133c <__gnu_unwind_execute+0x100>
 80012be:	2bc0      	cmp	r3, #192	; 0xc0
 80012c0:	d06b      	beq.n	800139a <__gnu_unwind_execute+0x15e>
 80012c2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80012c6:	2bd0      	cmp	r3, #208	; 0xd0
 80012c8:	d10b      	bne.n	80012e2 <__gnu_unwind_execute+0xa6>
 80012ca:	f000 0207 	and.w	r2, r0, #7
 80012ce:	3201      	adds	r2, #1
 80012d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80012d4:	2305      	movs	r3, #5
 80012d6:	2101      	movs	r1, #1
 80012d8:	4630      	mov	r0, r6
 80012da:	f7ff fd87 	bl	8000dec <_Unwind_VRS_Pop>
 80012de:	2800      	cmp	r0, #0
 80012e0:	d0b3      	beq.n	800124a <__gnu_unwind_execute+0xe>
 80012e2:	2009      	movs	r0, #9
 80012e4:	b005      	add	sp, #20
 80012e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012ea:	f000 030d 	and.w	r3, r0, #13
 80012ee:	2b0d      	cmp	r3, #13
 80012f0:	d0f7      	beq.n	80012e2 <__gnu_unwind_execute+0xa6>
 80012f2:	2300      	movs	r3, #0
 80012f4:	ad03      	add	r5, sp, #12
 80012f6:	f000 020f 	and.w	r2, r0, #15
 80012fa:	4619      	mov	r1, r3
 80012fc:	9500      	str	r5, [sp, #0]
 80012fe:	4630      	mov	r0, r6
 8001300:	f7ff fb7e 	bl	8000a00 <_Unwind_VRS_Get>
 8001304:	2300      	movs	r3, #0
 8001306:	9500      	str	r5, [sp, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	220d      	movs	r2, #13
 800130c:	4630      	mov	r0, r6
 800130e:	f7ff fb9d 	bl	8000a4c <_Unwind_VRS_Set>
 8001312:	e79a      	b.n	800124a <__gnu_unwind_execute+0xe>
 8001314:	43c3      	mvns	r3, r0
 8001316:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	411a      	asrs	r2, r3
 8001320:	2300      	movs	r3, #0
 8001322:	0701      	lsls	r1, r0, #28
 8001324:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001328:	bf48      	it	mi
 800132a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800132e:	4619      	mov	r1, r3
 8001330:	4630      	mov	r0, r6
 8001332:	f7ff fd5b 	bl	8000dec <_Unwind_VRS_Pop>
 8001336:	2800      	cmp	r0, #0
 8001338:	d1d3      	bne.n	80012e2 <__gnu_unwind_execute+0xa6>
 800133a:	e786      	b.n	800124a <__gnu_unwind_execute+0xe>
 800133c:	28b1      	cmp	r0, #177	; 0xb1
 800133e:	d057      	beq.n	80013f0 <__gnu_unwind_execute+0x1b4>
 8001340:	28b2      	cmp	r0, #178	; 0xb2
 8001342:	d068      	beq.n	8001416 <__gnu_unwind_execute+0x1da>
 8001344:	28b3      	cmp	r0, #179	; 0xb3
 8001346:	f000 8095 	beq.w	8001474 <__gnu_unwind_execute+0x238>
 800134a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 800134e:	2bb4      	cmp	r3, #180	; 0xb4
 8001350:	d0c7      	beq.n	80012e2 <__gnu_unwind_execute+0xa6>
 8001352:	2301      	movs	r3, #1
 8001354:	f000 0207 	and.w	r2, r0, #7
 8001358:	441a      	add	r2, r3
 800135a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800135e:	4619      	mov	r1, r3
 8001360:	4630      	mov	r0, r6
 8001362:	f7ff fd43 	bl	8000dec <_Unwind_VRS_Pop>
 8001366:	2800      	cmp	r0, #0
 8001368:	d1bb      	bne.n	80012e2 <__gnu_unwind_execute+0xa6>
 800136a:	e76e      	b.n	800124a <__gnu_unwind_execute+0xe>
 800136c:	4638      	mov	r0, r7
 800136e:	f7ff ff39 	bl	80011e4 <next_unwind_byte>
 8001372:	0224      	lsls	r4, r4, #8
 8001374:	4304      	orrs	r4, r0
 8001376:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800137a:	d0b2      	beq.n	80012e2 <__gnu_unwind_execute+0xa6>
 800137c:	2300      	movs	r3, #0
 800137e:	0124      	lsls	r4, r4, #4
 8001380:	b2a2      	uxth	r2, r4
 8001382:	4619      	mov	r1, r3
 8001384:	4630      	mov	r0, r6
 8001386:	f7ff fd31 	bl	8000dec <_Unwind_VRS_Pop>
 800138a:	2800      	cmp	r0, #0
 800138c:	d1a9      	bne.n	80012e2 <__gnu_unwind_execute+0xa6>
 800138e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001392:	bf18      	it	ne
 8001394:	f04f 0801 	movne.w	r8, #1
 8001398:	e757      	b.n	800124a <__gnu_unwind_execute+0xe>
 800139a:	28c6      	cmp	r0, #198	; 0xc6
 800139c:	d07d      	beq.n	800149a <__gnu_unwind_execute+0x25e>
 800139e:	28c7      	cmp	r0, #199	; 0xc7
 80013a0:	f000 8086 	beq.w	80014b0 <__gnu_unwind_execute+0x274>
 80013a4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80013a8:	2bc0      	cmp	r3, #192	; 0xc0
 80013aa:	f000 8094 	beq.w	80014d6 <__gnu_unwind_execute+0x29a>
 80013ae:	28c8      	cmp	r0, #200	; 0xc8
 80013b0:	f000 809f 	beq.w	80014f2 <__gnu_unwind_execute+0x2b6>
 80013b4:	28c9      	cmp	r0, #201	; 0xc9
 80013b6:	d194      	bne.n	80012e2 <__gnu_unwind_execute+0xa6>
 80013b8:	4638      	mov	r0, r7
 80013ba:	f7ff ff13 	bl	80011e4 <next_unwind_byte>
 80013be:	0302      	lsls	r2, r0, #12
 80013c0:	f000 000f 	and.w	r0, r0, #15
 80013c4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80013c8:	3001      	adds	r0, #1
 80013ca:	4302      	orrs	r2, r0
 80013cc:	e782      	b.n	80012d4 <__gnu_unwind_execute+0x98>
 80013ce:	ac03      	add	r4, sp, #12
 80013d0:	4643      	mov	r3, r8
 80013d2:	220e      	movs	r2, #14
 80013d4:	4641      	mov	r1, r8
 80013d6:	9400      	str	r4, [sp, #0]
 80013d8:	4630      	mov	r0, r6
 80013da:	f7ff fb11 	bl	8000a00 <_Unwind_VRS_Get>
 80013de:	9400      	str	r4, [sp, #0]
 80013e0:	4630      	mov	r0, r6
 80013e2:	4643      	mov	r3, r8
 80013e4:	220f      	movs	r2, #15
 80013e6:	4641      	mov	r1, r8
 80013e8:	f7ff fb30 	bl	8000a4c <_Unwind_VRS_Set>
 80013ec:	4640      	mov	r0, r8
 80013ee:	e779      	b.n	80012e4 <__gnu_unwind_execute+0xa8>
 80013f0:	4638      	mov	r0, r7
 80013f2:	f7ff fef7 	bl	80011e4 <next_unwind_byte>
 80013f6:	2800      	cmp	r0, #0
 80013f8:	f43f af73 	beq.w	80012e2 <__gnu_unwind_execute+0xa6>
 80013fc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001400:	f47f af6f 	bne.w	80012e2 <__gnu_unwind_execute+0xa6>
 8001404:	4602      	mov	r2, r0
 8001406:	4619      	mov	r1, r3
 8001408:	4630      	mov	r0, r6
 800140a:	f7ff fcef 	bl	8000dec <_Unwind_VRS_Pop>
 800140e:	2800      	cmp	r0, #0
 8001410:	f47f af67 	bne.w	80012e2 <__gnu_unwind_execute+0xa6>
 8001414:	e719      	b.n	800124a <__gnu_unwind_execute+0xe>
 8001416:	2300      	movs	r3, #0
 8001418:	f10d 090c 	add.w	r9, sp, #12
 800141c:	220d      	movs	r2, #13
 800141e:	4619      	mov	r1, r3
 8001420:	f8cd 9000 	str.w	r9, [sp]
 8001424:	4630      	mov	r0, r6
 8001426:	f7ff faeb 	bl	8000a00 <_Unwind_VRS_Get>
 800142a:	4638      	mov	r0, r7
 800142c:	f7ff feda 	bl	80011e4 <next_unwind_byte>
 8001430:	0602      	lsls	r2, r0, #24
 8001432:	f04f 0402 	mov.w	r4, #2
 8001436:	d50c      	bpl.n	8001452 <__gnu_unwind_execute+0x216>
 8001438:	9b03      	ldr	r3, [sp, #12]
 800143a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800143e:	40a0      	lsls	r0, r4
 8001440:	4403      	add	r3, r0
 8001442:	4638      	mov	r0, r7
 8001444:	9303      	str	r3, [sp, #12]
 8001446:	f7ff fecd 	bl	80011e4 <next_unwind_byte>
 800144a:	0603      	lsls	r3, r0, #24
 800144c:	f104 0407 	add.w	r4, r4, #7
 8001450:	d4f2      	bmi.n	8001438 <__gnu_unwind_execute+0x1fc>
 8001452:	2300      	movs	r3, #0
 8001454:	9903      	ldr	r1, [sp, #12]
 8001456:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800145a:	40a2      	lsls	r2, r4
 800145c:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001460:	188c      	adds	r4, r1, r2
 8001462:	f8cd 9000 	str.w	r9, [sp]
 8001466:	4619      	mov	r1, r3
 8001468:	220d      	movs	r2, #13
 800146a:	4630      	mov	r0, r6
 800146c:	9403      	str	r4, [sp, #12]
 800146e:	f7ff faed 	bl	8000a4c <_Unwind_VRS_Set>
 8001472:	e6ea      	b.n	800124a <__gnu_unwind_execute+0xe>
 8001474:	4638      	mov	r0, r7
 8001476:	f7ff feb5 	bl	80011e4 <next_unwind_byte>
 800147a:	2301      	movs	r3, #1
 800147c:	0301      	lsls	r1, r0, #12
 800147e:	f000 000f 	and.w	r0, r0, #15
 8001482:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001486:	18c2      	adds	r2, r0, r3
 8001488:	430a      	orrs	r2, r1
 800148a:	4630      	mov	r0, r6
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fcad 	bl	8000dec <_Unwind_VRS_Pop>
 8001492:	2800      	cmp	r0, #0
 8001494:	f47f af25 	bne.w	80012e2 <__gnu_unwind_execute+0xa6>
 8001498:	e6d7      	b.n	800124a <__gnu_unwind_execute+0xe>
 800149a:	4638      	mov	r0, r7
 800149c:	f7ff fea2 	bl	80011e4 <next_unwind_byte>
 80014a0:	0301      	lsls	r1, r0, #12
 80014a2:	f000 000f 	and.w	r0, r0, #15
 80014a6:	2303      	movs	r3, #3
 80014a8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80014ac:	1c42      	adds	r2, r0, #1
 80014ae:	e7eb      	b.n	8001488 <__gnu_unwind_execute+0x24c>
 80014b0:	4638      	mov	r0, r7
 80014b2:	f7ff fe97 	bl	80011e4 <next_unwind_byte>
 80014b6:	2800      	cmp	r0, #0
 80014b8:	f43f af13 	beq.w	80012e2 <__gnu_unwind_execute+0xa6>
 80014bc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80014c0:	f47f af0f 	bne.w	80012e2 <__gnu_unwind_execute+0xa6>
 80014c4:	4602      	mov	r2, r0
 80014c6:	2104      	movs	r1, #4
 80014c8:	4630      	mov	r0, r6
 80014ca:	f7ff fc8f 	bl	8000dec <_Unwind_VRS_Pop>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	f47f af07 	bne.w	80012e2 <__gnu_unwind_execute+0xa6>
 80014d4:	e6b9      	b.n	800124a <__gnu_unwind_execute+0xe>
 80014d6:	2303      	movs	r3, #3
 80014d8:	f000 020f 	and.w	r2, r0, #15
 80014dc:	3201      	adds	r2, #1
 80014de:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80014e2:	4619      	mov	r1, r3
 80014e4:	4630      	mov	r0, r6
 80014e6:	f7ff fc81 	bl	8000dec <_Unwind_VRS_Pop>
 80014ea:	2800      	cmp	r0, #0
 80014ec:	f47f aef9 	bne.w	80012e2 <__gnu_unwind_execute+0xa6>
 80014f0:	e6ab      	b.n	800124a <__gnu_unwind_execute+0xe>
 80014f2:	4638      	mov	r0, r7
 80014f4:	f7ff fe76 	bl	80011e4 <next_unwind_byte>
 80014f8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80014fc:	f000 030f 	and.w	r3, r0, #15
 8001500:	3210      	adds	r2, #16
 8001502:	3301      	adds	r3, #1
 8001504:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001508:	e6e4      	b.n	80012d4 <__gnu_unwind_execute+0x98>
 800150a:	bf00      	nop

0800150c <__gnu_unwind_frame>:
 800150c:	b530      	push	{r4, r5, lr}
 800150e:	2403      	movs	r4, #3
 8001510:	460d      	mov	r5, r1
 8001512:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001514:	b085      	sub	sp, #20
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	f88d 400c 	strb.w	r4, [sp, #12]
 800151c:	79dc      	ldrb	r4, [r3, #7]
 800151e:	0212      	lsls	r2, r2, #8
 8001520:	3308      	adds	r3, #8
 8001522:	a901      	add	r1, sp, #4
 8001524:	4628      	mov	r0, r5
 8001526:	9201      	str	r2, [sp, #4]
 8001528:	f88d 400d 	strb.w	r4, [sp, #13]
 800152c:	9302      	str	r3, [sp, #8]
 800152e:	f7ff fe85 	bl	800123c <__gnu_unwind_execute>
 8001532:	b005      	add	sp, #20
 8001534:	bd30      	pop	{r4, r5, pc}
 8001536:	bf00      	nop

08001538 <_Unwind_GetRegionStart>:
 8001538:	b508      	push	{r3, lr}
 800153a:	f7ff fe7d 	bl	8001238 <unwind_UCB_from_context>
 800153e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001540:	bd08      	pop	{r3, pc}
 8001542:	bf00      	nop

08001544 <_Unwind_GetLanguageSpecificData>:
 8001544:	b508      	push	{r3, lr}
 8001546:	f7ff fe77 	bl	8001238 <unwind_UCB_from_context>
 800154a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800154c:	79c3      	ldrb	r3, [r0, #7]
 800154e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001552:	3008      	adds	r0, #8
 8001554:	bd08      	pop	{r3, pc}
 8001556:	bf00      	nop

08001558 <_Unwind_GetTextRelBase>:
 8001558:	b508      	push	{r3, lr}
 800155a:	f004 fd07 	bl	8005f6c <abort>
 800155e:	bf00      	nop

08001560 <_Unwind_GetDataRelBase>:
 8001560:	b508      	push	{r3, lr}
 8001562:	f7ff fff9 	bl	8001558 <_Unwind_GetTextRelBase>
 8001566:	bf00      	nop

08001568 <_ZN3CAN4initEP17CAN_HandleTypeDefh>:
		CanRxMsgTypeDef Can_re;
		CAN_HandleTypeDef* hcan_;
	}

	void init(CAN_HandleTypeDef* hcan, uint8_t slave_id)
	{
 8001568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		hcan_->pTxMsg = &Can_tx;
		hcan_->pRxMsg = &Can_re;
		//default IDE and RTR type,
		hcan_->pTxMsg->RTR = CAN_RTR_DATA;
		hcan_->pTxMsg->IDE = CAN_ID_STD;
		hcan_->pRxMsg->FIFONumber = CAN_FIFO1;
 800156c:	2501      	movs	r5, #1
	{
 800156e:	460e      	mov	r6, r1
		hcan_->pTxMsg->RTR = CAN_RTR_DATA;
 8001570:	2400      	movs	r4, #0

		/* broadcast message (SLAVE_ID = BROADCAST_ID) */
		sFilterConfig.FilterNumber = 0;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
		sFilterConfig.FilterIdHigh = CAN::BROADCAST_ID << 5;
 8001572:	f44f 77f0 	mov.w	r7, #480	; 0x1e0
		hcan_->pTxMsg = &Can_tx;
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <_ZN3CAN4initEP17CAN_HandleTypeDefh+0x64>)
		hcan_->pRxMsg = &Can_re;
 8001578:	4915      	ldr	r1, [pc, #84]	; (80015d0 <_ZN3CAN4initEP17CAN_HandleTypeDefh+0x68>)
	{
 800157a:	b08a      	sub	sp, #40	; 0x28
		hcan_ = hcan;
 800157c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80015d4 <_ZN3CAN4initEP17CAN_HandleTypeDefh+0x6c>
		hcan_->pTxMsg = &Can_tx;
 8001580:	6303      	str	r3, [r0, #48]	; 0x30
		hcan_->pRxMsg->FIFONumber = CAN_FIFO1;
 8001582:	620d      	str	r5, [r1, #32]
		hcan_->pRxMsg = &Can_re;
 8001584:	6341      	str	r1, [r0, #52]	; 0x34

		/* individual message (SLAVE_ID = CAN::SLAVE_ID) */
		sFilterConfig.FilterNumber = 1;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
		sFilterConfig.FilterIdHigh = (slave_id & ((1 << SLAVE_ID_LEN) - 1)) << 5;
 8001586:	0176      	lsls	r6, r6, #5
		HAL_CAN_ConfigFilter(hcan_, &sFilterConfig);
 8001588:	4669      	mov	r1, sp
		hcan_->pTxMsg->RTR = CAN_RTR_DATA;
 800158a:	60dc      	str	r4, [r3, #12]
		hcan_->pTxMsg->IDE = CAN_ID_STD;
 800158c:	609c      	str	r4, [r3, #8]
		hcan_ = hcan;
 800158e:	f8c8 0000 	str.w	r0, [r8]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001592:	9507      	str	r5, [sp, #28]
		sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001594:	9504      	str	r5, [sp, #16]
		sFilterConfig.FilterActivation = ENABLE;
 8001596:	9508      	str	r5, [sp, #32]
		sFilterConfig.FilterNumber = 0;
 8001598:	9405      	str	r4, [sp, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800159a:	9406      	str	r4, [sp, #24]
		sFilterConfig.FilterIdLow = 0x0000;
 800159c:	9401      	str	r4, [sp, #4]
		sFilterConfig.FilterMaskIdLow = 0x0000;
 800159e:	9403      	str	r4, [sp, #12]
		sFilterConfig.FilterIdHigh = CAN::BROADCAST_ID << 5;
 80015a0:	9700      	str	r7, [sp, #0]
		sFilterConfig.FilterMaskIdHigh = ((1 << SLAVE_ID_LEN) - 1) << 5;
 80015a2:	9702      	str	r7, [sp, #8]
		sFilterConfig.FilterIdHigh = (slave_id & ((1 << SLAVE_ID_LEN) - 1)) << 5;
 80015a4:	403e      	ands	r6, r7
		HAL_CAN_ConfigFilter(hcan_, &sFilterConfig);
 80015a6:	f002 f81d 	bl	80035e4 <HAL_CAN_ConfigFilter>
		sFilterConfig.FilterIdLow = 0x0000;
		sFilterConfig.FilterMaskIdHigh = ((1 << SLAVE_ID_LEN) - 1) << 5;
		sFilterConfig.FilterMaskIdLow = 0x0000;
		sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
		sFilterConfig.FilterActivation = ENABLE;
		HAL_CAN_ConfigFilter(hcan_, &sFilterConfig);
 80015aa:	4669      	mov	r1, sp
 80015ac:	f8d8 0000 	ldr.w	r0, [r8]
		sFilterConfig.FilterIdHigh = (slave_id & ((1 << SLAVE_ID_LEN) - 1)) << 5;
 80015b0:	9600      	str	r6, [sp, #0]
		sFilterConfig.FilterNumber = 1;
 80015b2:	9505      	str	r5, [sp, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015b4:	9406      	str	r4, [sp, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015b6:	9507      	str	r5, [sp, #28]
		sFilterConfig.FilterIdLow = 0x0000;
 80015b8:	9401      	str	r4, [sp, #4]
		sFilterConfig.FilterMaskIdHigh = ((1 << SLAVE_ID_LEN) - 1) << 5;
 80015ba:	9702      	str	r7, [sp, #8]
		sFilterConfig.FilterMaskIdLow = 0x0000;
 80015bc:	9403      	str	r4, [sp, #12]
		sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80015be:	9504      	str	r5, [sp, #16]
		sFilterConfig.FilterActivation = ENABLE;
 80015c0:	9508      	str	r5, [sp, #32]
		HAL_CAN_ConfigFilter(hcan_, &sFilterConfig);
 80015c2:	f002 f80f 	bl	80035e4 <HAL_CAN_ConfigFilter>

	}
 80015c6:	b00a      	add	sp, #40	; 0x28
 80015c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015cc:	200000ac 	.word	0x200000ac
 80015d0:	20000088 	.word	0x20000088
 80015d4:	20000084 	.word	0x20000084

080015d8 <_ZN3CAN15getHcanInstanceEv>:

	CAN_HandleTypeDef* getHcanInstance()
	{
		return hcan_;
 80015d8:	4b01      	ldr	r3, [pc, #4]	; (80015e0 <_ZN3CAN15getHcanInstanceEv+0x8>)
	}
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000084 	.word	0x20000084

080015e4 <_ZN3CAN10setMessageEhhhmPh>:

	void setMessage(uint8_t device_id, uint8_t message_id, uint8_t slave_id, uint32_t dlc, uint8_t* data)
	{
 80015e4:	b430      	push	{r4, r5}
		hcan_->pTxMsg->StdId = (((device_id & ((1 << DEVICE_ID_LEN) - 1))  << (MESSAGE_ID_LEN + SLAVE_ID_LEN))) | ((message_id & ((1 << MESSAGE_ID_LEN) - 1)) << SLAVE_ID_LEN) | (slave_id & ((1 << SLAVE_ID_LEN) - 1));
 80015e6:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <_ZN3CAN10setMessageEhhhmPh+0x2c>)
 80015e8:	0109      	lsls	r1, r1, #4
 80015ea:	6825      	ldr	r5, [r4, #0]
 80015ec:	b2c9      	uxtb	r1, r1
 80015ee:	0200      	lsls	r0, r0, #8
 80015f0:	f002 020f 	and.w	r2, r2, #15
 80015f4:	f400 64e0 	and.w	r4, r0, #1792	; 0x700
 80015f8:	430a      	orrs	r2, r1
 80015fa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80015fc:	4322      	orrs	r2, r4
 80015fe:	6002      	str	r2, [r0, #0]
	{
 8001600:	9902      	ldr	r1, [sp, #8]
		hcan_->pTxMsg->DLC = dlc;
 8001602:	6103      	str	r3, [r0, #16]
		memcpy(hcan_->pTxMsg->Data, data, sizeof(uint8_t) * dlc);
 8001604:	461a      	mov	r2, r3
	}
 8001606:	bc30      	pop	{r4, r5}
		memcpy(hcan_->pTxMsg->Data, data, sizeof(uint8_t) * dlc);
 8001608:	3014      	adds	r0, #20
 800160a:	f004 bc4d 	b.w	8005ea8 <memcpy>
 800160e:	bf00      	nop
 8001610:	20000084 	.word	0x20000084

08001614 <_ZN16CANDeviceManager4initEP17CAN_HandleTypeDefhP12GPIO_TypeDeft>:
		GPIO_TypeDef* m_GPIOx;
		uint16_t m_GPIO_Pin;
	}

	void init(CAN_HandleTypeDef* hcan, uint8_t slave_id, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
	{
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	461c      	mov	r4, r3
 8001618:	4615      	mov	r5, r2
		CAN::init(hcan, slave_id);
 800161a:	f7ff ffa5 	bl	8001568 <_ZN3CAN4initEP17CAN_HandleTypeDefh>
		m_GPIOx = GPIOx;
 800161e:	4b02      	ldr	r3, [pc, #8]	; (8001628 <_ZN16CANDeviceManager4initEP17CAN_HandleTypeDefhP12GPIO_TypeDeft+0x14>)
		m_GPIO_Pin = GPIO_Pin;
 8001620:	4902      	ldr	r1, [pc, #8]	; (800162c <_ZN16CANDeviceManager4initEP17CAN_HandleTypeDefhP12GPIO_TypeDeft+0x18>)
		m_GPIOx = GPIOx;
 8001622:	601d      	str	r5, [r3, #0]
		m_GPIO_Pin = GPIO_Pin;
 8001624:	800c      	strh	r4, [r1, #0]
 8001626:	bd38      	pop	{r3, r4, r5, pc}
 8001628:	200000f0 	.word	0x200000f0
 800162c:	200000c8 	.word	0x200000c8

08001630 <_ZN16CANDeviceManager9addDeviceEP9CANDevice>:
		return static_cast<int>((device_id << 3) | slave_id);
	}

	void addDevice(CANDevice* device)
	{
		can_device_list[device->getDeviceId()] = device;
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <_ZN16CANDeviceManager9addDeviceEP9CANDevice+0xc>)
 8001632:	7902      	ldrb	r2, [r0, #4]
 8001634:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200000cc 	.word	0x200000cc

08001640 <_ZN16CANDeviceManager4tickEi>:
	}

	void tick(int cycle /* ms */)
	{
		can_timeout_count++;
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <_ZN16CANDeviceManager4tickEi+0x38>)
 8001642:	6813      	ldr	r3, [r2, #0]
 8001644:	3301      	adds	r3, #1
		static int internal_count = 0;
		if (can_timeout_count <= CAN_MAX_TIMEOUT_COUNT) {
 8001646:	2b64      	cmp	r3, #100	; 0x64
		can_timeout_count++;
 8001648:	6013      	str	r3, [r2, #0]
		if (can_timeout_count <= CAN_MAX_TIMEOUT_COUNT) {
 800164a:	dc0b      	bgt.n	8001664 <_ZN16CANDeviceManager4tickEi+0x24>
			internal_count++;
			if (internal_count == (1000 / cycle) - 1) {
 800164c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001650:	fb93 f0f0 	sdiv	r0, r3, r0
			internal_count++;
 8001654:	4a09      	ldr	r2, [pc, #36]	; (800167c <_ZN16CANDeviceManager4tickEi+0x3c>)
			if (internal_count == (1000 / cycle) - 1) {
 8001656:	3801      	subs	r0, #1
			internal_count++;
 8001658:	6813      	ldr	r3, [r2, #0]
 800165a:	3301      	adds	r3, #1
			if (internal_count == (1000 / cycle) - 1) {
 800165c:	4283      	cmp	r3, r0
			internal_count++;
 800165e:	6013      	str	r3, [r2, #0]
			if (internal_count == (1000 / cycle) - 1) {
 8001660:	d001      	beq.n	8001666 <_ZN16CANDeviceManager4tickEi+0x26>
				internal_count = 0;
			}
			if (internal_count == 0) {
 8001662:	b113      	cbz	r3, 800166a <_ZN16CANDeviceManager4tickEi+0x2a>
 8001664:	4770      	bx	lr
				internal_count = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	6013      	str	r3, [r2, #0]
				HAL_GPIO_TogglePin(m_GPIOx, m_GPIO_Pin);
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <_ZN16CANDeviceManager4tickEi+0x40>)
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <_ZN16CANDeviceManager4tickEi+0x44>)
 800166e:	8811      	ldrh	r1, [r2, #0]
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	f002 bd7b 	b.w	800416c <HAL_GPIO_TogglePin>
 8001676:	bf00      	nop
 8001678:	200000ec 	.word	0x200000ec
 800167c:	200000f4 	.word	0x200000f4
 8001680:	200000c8 	.word	0x200000c8
 8001684:	200000f0 	.word	0x200000f0

08001688 <_ZN16CANDeviceManager10Receive_ITEv>:
			}
		}
	}

	void Receive_IT()
	{
 8001688:	b508      	push	{r3, lr}
		HAL_CAN_Transmit(getHcanInstance(), timeout);
	}

	inline void Receive_IT()
	{
		HAL_CAN_Receive_IT(getHcanInstance(), CAN_FIFO1);
 800168a:	f7ff ffa5 	bl	80015d8 <_ZN3CAN15getHcanInstanceEv>
		CAN::Receive_IT();
	}
 800168e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001692:	2101      	movs	r1, #1
 8001694:	f002 b958 	b.w	8003948 <HAL_CAN_Receive_IT>

08001698 <HAL_CAN_RxCpltCallback>:
	}
}

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{
	CANDeviceManager::can_timeout_count = 0;
 8001698:	2200      	movs	r2, #0
{
 800169a:	b530      	push	{r4, r5, lr}
 800169c:	4604      	mov	r4, r0
	CANDeviceManager::can_timeout_count = 0;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <HAL_CAN_RxCpltCallback+0x54>)
{
 80016a0:	b083      	sub	sp, #12
	CANDeviceManager::can_timeout_count = 0;
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	f7ff ff98 	bl	80015d8 <_ZN3CAN15getHcanInstanceEv>
 80016a8:	2101      	movs	r1, #1
 80016aa:	f002 f94d 	bl	8003948 <HAL_CAN_Receive_IT>
	}

	inline uint8_t getDeviceId(CAN_HandleTypeDef* hcan) {
		return static_cast<uint8_t>(((hcan->pRxMsg->StdId) >> (MESSAGE_ID_LEN + SLAVE_ID_LEN)) & ((1 << DEVICE_ID_LEN) - 1));
 80016ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
	CANDeviceManager::Receive_IT();
	uint8_t device_id = CAN::getDeviceId(hcan);
	if (device_id >= CANDeviceManager::can_device_list.size()) return;
	CANDeviceManager::can_device_list[device_id]->receiveDataCallback(CAN::getMessageId(hcan), CAN::getDlc(hcan), CAN::getData(hcan));
 80016b0:	480f      	ldr	r0, [pc, #60]	; (80016f0 <HAL_CAN_RxCpltCallback+0x58>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	f853 1b14 	ldr.w	r1, [r3], #20
 80016b8:	6912      	ldr	r2, [r2, #16]
 80016ba:	f3c1 2502 	ubfx	r5, r1, #8, #3
 80016be:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80016c2:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80016c6:	6805      	ldr	r5, [r0, #0]
 80016c8:	686d      	ldr	r5, [r5, #4]
 80016ca:	47a8      	blx	r5
	inline uint8_t getMessageId(CAN_HandleTypeDef* hcan) {
		return static_cast<uint8_t>(((hcan->pRxMsg->StdId) >> SLAVE_ID_LEN) & ((1 << MESSAGE_ID_LEN) - 1));
	}

	inline uint8_t getSlaveId(CAN_HandleTypeDef* hcan) {
		return static_cast<uint8_t>((hcan->pRxMsg->StdId) & ((1 << SLAVE_ID_LEN) - 1));
 80016cc:	6b64      	ldr	r4, [r4, #52]	; 0x34
 80016ce:	6820      	ldr	r0, [r4, #0]
	CANDeviceManager::userReceiveMessagesCallback(CAN::getSlaveId(hcan), CAN::getDeviceId(hcan), CAN::getMessageId(hcan), CAN::getDlc(hcan), CAN::getData(hcan));
 80016d0:	6923      	ldr	r3, [r4, #16]
	inline uint32_t getDlc(CAN_HandleTypeDef* hcan) {
		return hcan->pRxMsg->DLC;
	}

	inline uint8_t* getData(CAN_HandleTypeDef* hcan) {
		return hcan->pRxMsg->Data;
 80016d2:	3414      	adds	r4, #20
 80016d4:	f3c0 1203 	ubfx	r2, r0, #4, #4
 80016d8:	f3c0 2102 	ubfx	r1, r0, #8, #3
 80016dc:	9400      	str	r4, [sp, #0]
 80016de:	f000 000f 	and.w	r0, r0, #15
 80016e2:	f001 fc7f 	bl	8002fe4 <_ZN16CANDeviceManager27userReceiveMessagesCallbackEhhhmPh>
}
 80016e6:	b003      	add	sp, #12
 80016e8:	bd30      	pop	{r4, r5, pc}
 80016ea:	bf00      	nop
 80016ec:	200000ec 	.word	0x200000ec
 80016f0:	200000cc 	.word	0x200000cc

080016f4 <_ZN11Flashmemory4initEm>:
		unsigned int data_index = 0;
		uint32_t m_data_address;
	}

	void init(uint32_t data_address){
		m_data_address = data_address;
 80016f4:	4b01      	ldr	r3, [pc, #4]	; (80016fc <_ZN11Flashmemory4initEm+0x8>)
 80016f6:	6018      	str	r0, [r3, #0]
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200000fc 	.word	0x200000fc

08001700 <_ZN11Flashmemory8addValueEPvj>:
	}

	void addValue(void* ptr, size_t size){
 8001700:	b470      	push	{r4, r5, r6}
		Data tmp_data(ptr, size);
		data[data_index++] = tmp_data;
 8001702:	4c06      	ldr	r4, [pc, #24]	; (800171c <_ZN11Flashmemory8addValueEPvj+0x1c>)
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <_ZN11Flashmemory8addValueEPvj+0x20>)
 8001706:	6823      	ldr	r3, [r4, #0]
 8001708:	1c5e      	adds	r6, r3, #1
 800170a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800170e:	6026      	str	r6, [r4, #0]
 8001710:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
 8001714:	6069      	str	r1, [r5, #4]
	}
 8001716:	bc70      	pop	{r4, r5, r6}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200000f8 	.word	0x200000f8
 8001720:	20000100 	.word	0x20000100

08001724 <_ZN11Flashmemory4readEv>:

	void read(){
 8001724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_StatusTypeDef status = HAL_ERROR;
		status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001728:	f24c 3050 	movw	r0, #50000	; 0xc350
 800172c:	f002 fb36 	bl	8003d9c <FLASH_WaitForLastOperation>

		uint32_t data_address = m_data_address;
		if (status == HAL_OK){
 8001730:	b9a8      	cbnz	r0, 800175e <_ZN11Flashmemory4readEv+0x3a>
			for (unsigned int i = 0; i != data_index; i++){
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <_ZN11Flashmemory4readEv+0x48>)
 8001734:	681f      	ldr	r7, [r3, #0]
 8001736:	b197      	cbz	r7, 800175e <_ZN11Flashmemory4readEv+0x3a>
 8001738:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8001778 <_ZN11Flashmemory4readEv+0x54>
		uint32_t data_address = m_data_address;
 800173c:	4604      	mov	r4, r0
 800173e:	4645      	mov	r5, r8
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <_ZN11Flashmemory4readEv+0x4c>)
 8001742:	681e      	ldr	r6, [r3, #0]
				memcpy(data[i].ptr, reinterpret_cast<void*>(data_address), data[i].size);
 8001744:	686a      	ldr	r2, [r5, #4]
 8001746:	4631      	mov	r1, r6
 8001748:	f858 0034 	ldr.w	r0, [r8, r4, lsl #3]
 800174c:	f004 fbac 	bl	8005ea8 <memcpy>
			for (unsigned int i = 0; i != data_index; i++){
 8001750:	3401      	adds	r4, #1
				data_address += data[i].size;
 8001752:	686b      	ldr	r3, [r5, #4]
			for (unsigned int i = 0; i != data_index; i++){
 8001754:	42bc      	cmp	r4, r7
				data_address += data[i].size;
 8001756:	441e      	add	r6, r3
 8001758:	f105 0508 	add.w	r5, r5, #8
			for (unsigned int i = 0; i != data_index; i++){
 800175c:	d1f2      	bne.n	8001744 <_ZN11Flashmemory4readEv+0x20>
			}
		}

	    FLASH->CR &= (~FLASH_CR_PG);
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <_ZN11Flashmemory4readEv+0x50>)
 8001760:	6913      	ldr	r3, [r2, #16]
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6113      	str	r3, [r2, #16]
	}
 8001768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800176c:	200000f8 	.word	0x200000f8
 8001770:	200000fc 	.word	0x200000fc
 8001774:	40022000 	.word	0x40022000
 8001778:	20000100 	.word	0x20000100

0800177c <_ZN11Flashmemory5eraseEv>:

	void erase(){
 800177c:	b510      	push	{r4, lr}
 800177e:	b086      	sub	sp, #24
		HAL_StatusTypeDef r;

		r = HAL_FLASH_Unlock();
 8001780:	f002 faf0 	bl	8003d64 <HAL_FLASH_Unlock>
		if( r != HAL_OK ) return;
 8001784:	b108      	cbz	r0, 800178a <_ZN11Flashmemory5eraseEv+0xe>
		EraseInitStruct.NbPages = 1;

		r = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
		if ( r != HAL_OK ) return;
		r = HAL_FLASH_Lock();
	}
 8001786:	b006      	add	sp, #24
 8001788:	bd10      	pop	{r4, pc}
 800178a:	4603      	mov	r3, r0
		EraseInitStruct.NbPages = 1;
 800178c:	2201      	movs	r2, #1
		EraseInitStruct.PageAddress = m_data_address;
 800178e:	4807      	ldr	r0, [pc, #28]	; (80017ac <_ZN11Flashmemory5eraseEv+0x30>)
		r = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8001790:	a901      	add	r1, sp, #4
		EraseInitStruct.PageAddress = m_data_address;
 8001792:	6804      	ldr	r4, [r0, #0]
		r = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 8001794:	a802      	add	r0, sp, #8
		uint32_t PageError = 0;
 8001796:	9301      	str	r3, [sp, #4]
		EraseInitStruct.TypeErase = TYPEERASE_PAGES;
 8001798:	9302      	str	r3, [sp, #8]
		EraseInitStruct.PageAddress = m_data_address;
 800179a:	9404      	str	r4, [sp, #16]
		EraseInitStruct.NbPages = 1;
 800179c:	9205      	str	r2, [sp, #20]
		r = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 800179e:	f002 fb7d 	bl	8003e9c <HAL_FLASHEx_Erase>
		if ( r != HAL_OK ) return;
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d1ef      	bne.n	8001786 <_ZN11Flashmemory5eraseEv+0xa>
		r = HAL_FLASH_Lock();
 80017a6:	f002 faef 	bl	8003d88 <HAL_FLASH_Lock>
 80017aa:	e7ec      	b.n	8001786 <_ZN11Flashmemory5eraseEv+0xa>
 80017ac:	200000fc 	.word	0x200000fc

080017b0 <_ZN11Flashmemory5writeEv>:

	void write(){
 80017b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		HAL_StatusTypeDef r;

		r = HAL_FLASH_Unlock();
 80017b4:	f002 fad6 	bl	8003d64 <HAL_FLASH_Unlock>
		if( r != HAL_OK ) return;
 80017b8:	bb50      	cbnz	r0, 8001810 <_ZN11Flashmemory5writeEv+0x60>

		uint32_t data_address = m_data_address;
		for (unsigned int i = 0; i != data_index; i++){
 80017ba:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8001818 <_ZN11Flashmemory5writeEv+0x68>
		uint32_t data_address = m_data_address;
 80017be:	4a15      	ldr	r2, [pc, #84]	; (8001814 <_ZN11Flashmemory5writeEv+0x64>)
		for (unsigned int i = 0; i != data_index; i++){
 80017c0:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t data_address = m_data_address;
 80017c4:	6816      	ldr	r6, [r2, #0]
		for (unsigned int i = 0; i != data_index; i++){
 80017c6:	b1fb      	cbz	r3, 8001808 <_ZN11Flashmemory5writeEv+0x58>
 80017c8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800181c <_ZN11Flashmemory5writeEv+0x6c>
 80017cc:	4681      	mov	r9, r0
 80017ce:	4645      	mov	r5, r8
			for (unsigned int j = 0; j < data[i].size; j+=2) {
 80017d0:	686b      	ldr	r3, [r5, #4]
 80017d2:	b183      	cbz	r3, 80017f6 <_ZN11Flashmemory5writeEv+0x46>
 80017d4:	2400      	movs	r4, #0
 80017d6:	ea4f 07c9 	mov.w	r7, r9, lsl #3
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, data_address + j, *(static_cast<uint16_t*>(data[i].ptr) + j / 2));
 80017da:	f858 2007 	ldr.w	r2, [r8, r7]
 80017de:	f024 0301 	bic.w	r3, r4, #1
 80017e2:	5ad2      	ldrh	r2, [r2, r3]
 80017e4:	1931      	adds	r1, r6, r4
 80017e6:	2300      	movs	r3, #0
 80017e8:	2001      	movs	r0, #1
 80017ea:	f002 fb05 	bl	8003df8 <HAL_FLASH_Program>
			for (unsigned int j = 0; j < data[i].size; j+=2) {
 80017ee:	686b      	ldr	r3, [r5, #4]
 80017f0:	3402      	adds	r4, #2
 80017f2:	42a3      	cmp	r3, r4
 80017f4:	d8f1      	bhi.n	80017da <_ZN11Flashmemory5writeEv+0x2a>
		for (unsigned int i = 0; i != data_index; i++){
 80017f6:	f8da 2000 	ldr.w	r2, [sl]
 80017fa:	f109 0901 	add.w	r9, r9, #1
 80017fe:	454a      	cmp	r2, r9
			}
			data_address += data[i].size;
 8001800:	441e      	add	r6, r3
 8001802:	f105 0508 	add.w	r5, r5, #8
		for (unsigned int i = 0; i != data_index; i++){
 8001806:	d1e3      	bne.n	80017d0 <_ZN11Flashmemory5writeEv+0x20>
		}
		r = HAL_FLASH_Lock();
	}
 8001808:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		r = HAL_FLASH_Lock();
 800180c:	f002 babc 	b.w	8003d88 <HAL_FLASH_Lock>
 8001810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001814:	200000fc 	.word	0x200000fc
 8001818:	200000f8 	.word	0x200000f8
 800181c:	20000100 	.word	0x20000100

08001820 <_ZN3IMU19receiveDataCallbackEhmPh>:
	setMessage(CAN::MESSAGEID_SEND_MAG, m_slave_id, 6, reinterpret_cast<uint8_t*>(mag_.data()));
	sendMessage(1);
}

void IMU::receiveDataCallback(uint8_t message_id, uint32_t DLC, uint8_t* data)
{
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop

08001824 <_ZN3IMU8sendDataEv>:
	if (!(send_data_flag_ != 0)) return;
 8001824:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8001826:	b903      	cbnz	r3, 800182a <_ZN3IMU8sendDataEv+0x6>
 8001828:	4770      	bx	lr
{
 800182a:	b510      	push	{r4, lr}
 800182c:	4604      	mov	r4, r0
 800182e:	b082      	sub	sp, #8
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
 8001830:	f104 0312 	add.w	r3, r4, #18
public:
	CANDevice(){}
	CANDevice(uint8_t device_id, uint8_t slave_id):m_device_id(device_id), m_slave_id(slave_id){}
	uint8_t getDeviceId(){return m_device_id;}
	uint8_t getSlaveId(){return m_slave_id;}
	void setMessage(uint8_t message_id, uint8_t slave_id, uint32_t dlc, uint8_t* data){CAN::setMessage(m_device_id, message_id, slave_id, dlc, data);}
 8001834:	7942      	ldrb	r2, [r0, #5]
 8001836:	2100      	movs	r1, #0
 8001838:	7900      	ldrb	r0, [r0, #4]
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2306      	movs	r3, #6
 800183e:	f7ff fed1 	bl	80015e4 <_ZN3CAN10setMessageEhhhmPh>
		HAL_CAN_Transmit(getHcanInstance(), timeout);
 8001842:	f7ff fec9 	bl	80015d8 <_ZN3CAN15getHcanInstanceEv>
 8001846:	2101      	movs	r1, #1
 8001848:	f001 ffc0 	bl	80037cc <HAL_CAN_Transmit>
 800184c:	f104 030c 	add.w	r3, r4, #12
 8001850:	7962      	ldrb	r2, [r4, #5]
 8001852:	7920      	ldrb	r0, [r4, #4]
 8001854:	2101      	movs	r1, #1
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2306      	movs	r3, #6
 800185a:	f7ff fec3 	bl	80015e4 <_ZN3CAN10setMessageEhhhmPh>
 800185e:	f7ff febb 	bl	80015d8 <_ZN3CAN15getHcanInstanceEv>
 8001862:	2101      	movs	r1, #1
 8001864:	f001 ffb2 	bl	80037cc <HAL_CAN_Transmit>
 8001868:	3418      	adds	r4, #24
 800186a:	f814 2c13 	ldrb.w	r2, [r4, #-19]
 800186e:	f814 0c14 	ldrb.w	r0, [r4, #-20]
 8001872:	2306      	movs	r3, #6
 8001874:	2102      	movs	r1, #2
 8001876:	9400      	str	r4, [sp, #0]
 8001878:	f7ff feb4 	bl	80015e4 <_ZN3CAN10setMessageEhhhmPh>
 800187c:	f7ff feac 	bl	80015d8 <_ZN3CAN15getHcanInstanceEv>
 8001880:	2101      	movs	r1, #1
}
 8001882:	b002      	add	sp, #8
 8001884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001888:	f001 bfa0 	b.w	80037cc <HAL_CAN_Transmit>

0800188c <_ZN3IMU8mpuWriteEhh>:
{
 800188c:	b530      	push	{r4, r5, lr}
 800188e:	4605      	mov	r5, r0
  IMU_SPI_CS_L;
 8001890:	4c10      	ldr	r4, [pc, #64]	; (80018d4 <_ZN3IMU8mpuWriteEhh+0x48>)
{
 8001892:	b083      	sub	sp, #12
 8001894:	f88d 1007 	strb.w	r1, [sp, #7]
 8001898:	f88d 2006 	strb.w	r2, [sp, #6]
  IMU_SPI_CS_L;
 800189c:	4620      	mov	r0, r4
 800189e:	2200      	movs	r2, #0
 80018a0:	2140      	movs	r1, #64	; 0x40
 80018a2:	f002 fc5f 	bl	8004164 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi_, &address, 1, 1000);
 80018a6:	f10d 0107 	add.w	r1, sp, #7
 80018aa:	68a8      	ldr	r0, [r5, #8]
 80018ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b0:	2201      	movs	r2, #1
 80018b2:	f003 f8a3 	bl	80049fc <HAL_SPI_Transmit>
  HAL_SPI_Transmit(hspi_, &value, 1, 1000);
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	f10d 0106 	add.w	r1, sp, #6
 80018be:	68a8      	ldr	r0, [r5, #8]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f003 f89b 	bl	80049fc <HAL_SPI_Transmit>
  IMU_SPI_CS_H;
 80018c6:	4620      	mov	r0, r4
 80018c8:	2201      	movs	r2, #1
 80018ca:	2140      	movs	r1, #64	; 0x40
 80018cc:	f002 fc4a 	bl	8004164 <HAL_GPIO_WritePin>
}
 80018d0:	b003      	add	sp, #12
 80018d2:	bd30      	pop	{r4, r5, pc}
 80018d4:	40010c00 	.word	0x40010c00

080018d8 <_ZN3IMU8gyroInitEv>:
{
 80018d8:	b510      	push	{r4, lr}
 80018da:	4604      	mov	r4, r0
  HAL_Delay(100);
 80018dc:	2064      	movs	r0, #100	; 0x64
 80018de:	f001 fe73 	bl	80035c8 <HAL_Delay>
  HAL_Delay(10);
 80018e2:	200a      	movs	r0, #10
 80018e4:	f001 fe70 	bl	80035c8 <HAL_Delay>
  HAL_Delay(1); //very important!, some duration for process the setting
 80018e8:	2001      	movs	r0, #1
 80018ea:	f001 fe6d 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x6A, 0x10);             //disable i2c communication
 80018ee:	4620      	mov	r0, r4
 80018f0:	2210      	movs	r2, #16
 80018f2:	216a      	movs	r1, #106	; 0x6a
 80018f4:	f7ff ffca 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1); //very importnat! between gyro and acc
 80018f8:	2001      	movs	r0, #1
 80018fa:	f001 fe65 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x1A, GYRO_DLPF_CFG); //CONFIG        -- EXT_SYNC_SET 0 (disable input pin for data sync) ; default DLPF_CFG = 0 => ACC bandwidth = 260Hz  GYRO bandwidth = 256Hz)
 80018fe:	4620      	mov	r0, r4
 8001900:	2201      	movs	r2, #1
 8001902:	211a      	movs	r1, #26
 8001904:	f7ff ffc2 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1); //very importnat! between gyro and acc
 8001908:	2001      	movs	r0, #1
 800190a:	f001 fe5d 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x1B, 0x18);             //GYRO_CONFIG   -- FS_SEL = 3: Full scale set to 2000 deg/sec
 800190e:	4620      	mov	r0, r4
 8001910:	2218      	movs	r2, #24
 8001912:	211b      	movs	r1, #27
 8001914:	f7ff ffba 	bl	800188c <_ZN3IMU8mpuWriteEhh>
}
 8001918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(10); //very importnat! between gyro and acc
 800191c:	200a      	movs	r0, #10
 800191e:	f001 be53 	b.w	80035c8 <HAL_Delay>
 8001922:	bf00      	nop

08001924 <_ZN3IMU7accInitEv>:
void IMU::accInit (void) {
 8001924:	b510      	push	{r4, lr}
 8001926:	4604      	mov	r4, r0
  mpuWrite( 0x1C, 0x10); //ACCEL_CONFIG  -- AFS_SEL=2 (Full Scale = +/-8G)  ; ACCELL_HPF=0   //note something is wrong in the spec.
 8001928:	2210      	movs	r2, #16
 800192a:	211c      	movs	r1, #28
 800192c:	f7ff ffae 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 8001930:	2001      	movs	r0, #1
 8001932:	f001 fe49 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x1D, ACC_DLPF_CFG);
 8001936:	4620      	mov	r0, r4
 8001938:	2203      	movs	r2, #3
 800193a:	211d      	movs	r1, #29
 800193c:	f7ff ffa6 	bl	800188c <_ZN3IMU8mpuWriteEhh>
}
 8001940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(10);
 8001944:	200a      	movs	r0, #10
 8001946:	f001 be3f 	b.w	80035c8 <HAL_Delay>
 800194a:	bf00      	nop

0800194c <_ZN3IMU7magInitEv>:
{
 800194c:	b510      	push	{r4, lr}
 800194e:	4604      	mov	r4, r0
  HAL_Delay(10);
 8001950:	200a      	movs	r0, #10
 8001952:	f001 fe39 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x6A, 0x20); //USER_CTRL -- DMP_EN=0 ; FIFO_EN=0 ; I2C_MST_EN=1 (I2C master mode) ; I2C_IF_DIS=0 ; FIFO_RESET=0 ; I2C_MST_RESET=0 ; SIG_COND_RESET=0
 8001956:	4620      	mov	r0, r4
 8001958:	2220      	movs	r2, #32
 800195a:	216a      	movs	r1, #106	; 0x6a
 800195c:	f7ff ff96 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(10);
 8001960:	200a      	movs	r0, #10
 8001962:	f001 fe31 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x37, 0x00); //INT_PIN_CFG -- INT_LEVEL=0 ; INT_OPEN=0 ; LATCH_INT_EN=0 ; INT_RD_CLEAR=0 ; FSYNC_INT_LEVEL=0 ; FSYNC_INT_EN=0 ; I2C_BYPASS_EN=0 ; CLKOUT_EN=0
 8001966:	4620      	mov	r0, r4
 8001968:	2200      	movs	r2, #0
 800196a:	2137      	movs	r1, #55	; 0x37
 800196c:	f7ff ff8e 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 8001970:	2001      	movs	r0, #1
 8001972:	f001 fe29 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x24, 0x0D); //I2C_MST_CTRL -- MULT_MST_EN=0 ; WAIT_FOR_ES=0 ; SLV_3_FIFO_EN=0 ; I2C_MST_P_NSR=0 ; I2C_MST_CLK=13 (I2C slave speed bus = 400kHz)
 8001976:	4620      	mov	r0, r4
 8001978:	220d      	movs	r2, #13
 800197a:	2124      	movs	r1, #36	; 0x24
 800197c:	f7ff ff86 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f001 fe21 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x25, MAG_ADDRESS);
 8001986:	4620      	mov	r0, r4
 8001988:	220c      	movs	r2, #12
 800198a:	2125      	movs	r1, #37	; 0x25
 800198c:	f7ff ff7e 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f001 fe19 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x26, 0x0B);
 8001996:	4620      	mov	r0, r4
 8001998:	220b      	movs	r2, #11
 800199a:	2126      	movs	r1, #38	; 0x26
 800199c:	f7ff ff76 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 80019a0:	2001      	movs	r0, #1
 80019a2:	f001 fe11 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x63, 0x01);
 80019a6:	4620      	mov	r0, r4
 80019a8:	2201      	movs	r2, #1
 80019aa:	2163      	movs	r1, #99	; 0x63
 80019ac:	f7ff ff6e 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 80019b0:	2001      	movs	r0, #1
 80019b2:	f001 fe09 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x27, 0x81);
 80019b6:	4620      	mov	r0, r4
 80019b8:	2281      	movs	r2, #129	; 0x81
 80019ba:	2127      	movs	r1, #39	; 0x27
 80019bc:	f7ff ff66 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f001 fe01 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x26, 0x0A);
 80019c6:	4620      	mov	r0, r4
 80019c8:	220a      	movs	r2, #10
 80019ca:	2126      	movs	r1, #38	; 0x26
 80019cc:	f7ff ff5e 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f001 fdf9 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x63, 0x16);
 80019d6:	4620      	mov	r0, r4
 80019d8:	2216      	movs	r2, #22
 80019da:	2163      	movs	r1, #99	; 0x63
 80019dc:	f7ff ff56 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f001 fdf1 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x27, 0x81);
 80019e6:	4620      	mov	r0, r4
 80019e8:	2281      	movs	r2, #129	; 0x81
 80019ea:	2127      	movs	r1, #39	; 0x27
 80019ec:	f7ff ff4e 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f001 fde9 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x25, 0x80|MAG_ADDRESS);//I2C_SLV0_ADDR -- I2C_SLV4_RW=1 (read operation) ; I2C_SLV4_ADDR=MAG_ADDRESS
 80019f6:	4620      	mov	r0, r4
 80019f8:	228c      	movs	r2, #140	; 0x8c
 80019fa:	2125      	movs	r1, #37	; 0x25
 80019fc:	f7ff ff46 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f001 fde1 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x26, MAG_DATA_REGISTER);//I2C_SLV0_REG -- 6 data bytes of MAG are stored in 6 registers. First register address is MAG_DATA_REGISTER
 8001a06:	4620      	mov	r0, r4
 8001a08:	2203      	movs	r2, #3
 8001a0a:	2126      	movs	r1, #38	; 0x26
 8001a0c:	f7ff ff3e 	bl	800188c <_ZN3IMU8mpuWriteEhh>
  HAL_Delay(1);
 8001a10:	2001      	movs	r0, #1
 8001a12:	f001 fdd9 	bl	80035c8 <HAL_Delay>
  mpuWrite( 0x27, 0x87);
 8001a16:	4620      	mov	r0, r4
 8001a18:	2287      	movs	r2, #135	; 0x87
 8001a1a:	2127      	movs	r1, #39	; 0x27
 8001a1c:	f7ff ff36 	bl	800188c <_ZN3IMU8mpuWriteEhh>
}
 8001a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_Delay(1);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f001 bdcf 	b.w	80035c8 <HAL_Delay>
 8001a2a:	bf00      	nop

08001a2c <_ZN3IMU4initEP19__SPI_HandleTypeDef>:
{
 8001a2c:	b538      	push	{r3, r4, r5, lr}
 8001a2e:	4604      	mov	r4, r0
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
	   __niter > 0; --__niter, ++__first)
	*__first = __tmp;
 8001a30:	2300      	movs	r3, #0
 8001a32:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <_ZN3IMU4initEP19__SPI_HandleTypeDef+0x70>)
      dummy_[i] = 0;
 8001a34:	4618      	mov	r0, r3
 8001a36:	81a3      	strh	r3, [r4, #12]
 8001a38:	81e3      	strh	r3, [r4, #14]
 8001a3a:	8223      	strh	r3, [r4, #16]
 8001a3c:	8263      	strh	r3, [r4, #18]
 8001a3e:	82a3      	strh	r3, [r4, #20]
 8001a40:	82e3      	strh	r3, [r4, #22]
 8001a42:	8323      	strh	r3, [r4, #24]
 8001a44:	8363      	strh	r3, [r4, #26]
 8001a46:	83a3      	strh	r3, [r4, #28]
  ahb_tx_suspend_flag_ = false;
 8001a48:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 8001a4c:	f104 0525 	add.w	r5, r4, #37	; 0x25
 8001a50:	f104 031e 	add.w	r3, r4, #30
      dummy_[i] = 0;
 8001a54:	f803 0b01 	strb.w	r0, [r3], #1
  for(int i =0; i < SENSOR_DATA_LENGTH; i++)
 8001a58:	42ab      	cmp	r3, r5
      adc_[i] = 0;
 8001a5a:	f802 0f01 	strb.w	r0, [r2, #1]!
  for(int i =0; i < SENSOR_DATA_LENGTH; i++)
 8001a5e:	d1f9      	bne.n	8001a54 <_ZN3IMU4initEP19__SPI_HandleTypeDef+0x28>
  hspi_ = hspi;
 8001a60:	60a1      	str	r1, [r4, #8]
  gyroInit();
 8001a62:	4620      	mov	r0, r4
 8001a64:	f7ff ff38 	bl	80018d8 <_ZN3IMU8gyroInitEv>
  accInit();
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f7ff ff5b 	bl	8001924 <_ZN3IMU7accInitEv>
  magInit();
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f7ff ff6c 	bl	800194c <_ZN3IMU7magInitEv>
  hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8001a74:	68a3      	ldr	r3, [r4, #8]
  Flashmemory::addValue(&send_data_flag_, 2);
 8001a76:	f104 0028 	add.w	r0, r4, #40	; 0x28
  hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8001a7a:	681b      	ldr	r3, [r3, #0]
  Flashmemory::addValue(&send_data_flag_, 2);
 8001a7c:	2102      	movs	r1, #2
  hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8001a84:	601a      	str	r2, [r3, #0]
  hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	f042 0210 	orr.w	r2, r2, #16
 8001a8c:	601a      	str	r2, [r3, #0]
  Flashmemory::addValue(&send_data_flag_, 2);
 8001a8e:	f7ff fe37 	bl	8001700 <_ZN11Flashmemory8addValueEPvj>
}
 8001a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Flashmemory::read();
 8001a96:	f7ff be45 	b.w	8001724 <_ZN11Flashmemory4readEv>
 8001a9a:	bf00      	nop
 8001a9c:	200001ff 	.word	0x200001ff

08001aa0 <_ZN3IMU11pollingReadEv>:
  t_data[0] = GYRO_ADDRESS | 0x80;
 8001aa0:	23c3      	movs	r3, #195	; 0xc3
{
 8001aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa4:	4605      	mov	r5, r0
  t_data[0] = ACC_ADDRESS | 0x80;
 8001aa6:	27bb      	movs	r7, #187	; 0xbb
{
 8001aa8:	b083      	sub	sp, #12
  t_data[0] = GYRO_ADDRESS | 0x80;
 8001aaa:	ae02      	add	r6, sp, #8
  HAL_SPI_Receive(hspi_, adc_, 6, 1000);
 8001aac:	4c53      	ldr	r4, [pc, #332]	; (8001bfc <_ZN3IMU11pollingReadEv+0x15c>)
  t_data[0] = GYRO_ADDRESS | 0x80;
 8001aae:	f806 3d04 	strb.w	r3, [r6, #-4]!
  IMU_SPI_CS_L;
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2140      	movs	r1, #64	; 0x40
 8001ab6:	4852      	ldr	r0, [pc, #328]	; (8001c00 <_ZN3IMU11pollingReadEv+0x160>)
 8001ab8:	f002 fb54 	bl	8004164 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 8001abc:	4631      	mov	r1, r6
 8001abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	68a8      	ldr	r0, [r5, #8]
 8001ac6:	f002 ff99 	bl	80049fc <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi_, adc_, 6, 1000);
 8001aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ace:	4621      	mov	r1, r4
 8001ad0:	2206      	movs	r2, #6
 8001ad2:	68a8      	ldr	r0, [r5, #8]
 8001ad4:	f003 f9dc 	bl	8004e90 <HAL_SPI_Receive>
  IMU_SPI_CS_H;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	2140      	movs	r1, #64	; 0x40
 8001adc:	4848      	ldr	r0, [pc, #288]	; (8001c00 <_ZN3IMU11pollingReadEv+0x160>)
 8001ade:	f002 fb41 	bl	8004164 <HAL_GPIO_WritePin>
  gyro_[0] = (int16_t)(adc_[0] << 8 | adc_[1]);
 8001ae2:	7820      	ldrb	r0, [r4, #0]
  gyro_[1] = (int16_t)(adc_[2] << 8 | adc_[3]);
 8001ae4:	78a3      	ldrb	r3, [r4, #2]
  gyro_[0] = (int16_t)(adc_[0] << 8 | adc_[1]);
 8001ae6:	7861      	ldrb	r1, [r4, #1]
  gyro_[1] = (int16_t)(adc_[2] << 8 | adc_[3]);
 8001ae8:	78e2      	ldrb	r2, [r4, #3]
  gyro_[0] = (int16_t)(adc_[0] << 8 | adc_[1]);
 8001aea:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  gyro_[1] = (int16_t)(adc_[2] << 8 | adc_[3]);
 8001aee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  gyro_[2] = (int16_t)(adc_[4] << 8 | adc_[5]);
 8001af2:	7920      	ldrb	r0, [r4, #4]
 8001af4:	7963      	ldrb	r3, [r4, #5]
  gyro_[0] = (int16_t)(adc_[0] << 8 | adc_[1]);
 8001af6:	8269      	strh	r1, [r5, #18]
  gyro_[2] = (int16_t)(adc_[4] << 8 | adc_[5]);
 8001af8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  gyro_[1] = (int16_t)(adc_[2] << 8 | adc_[3]);
 8001afc:	82aa      	strh	r2, [r5, #20]
  gyro_[2] = (int16_t)(adc_[4] << 8 | adc_[5]);
 8001afe:	82eb      	strh	r3, [r5, #22]
  IMU_SPI_CS_L;
 8001b00:	2200      	movs	r2, #0
 8001b02:	2140      	movs	r1, #64	; 0x40
 8001b04:	483e      	ldr	r0, [pc, #248]	; (8001c00 <_ZN3IMU11pollingReadEv+0x160>)
  t_data[0] = ACC_ADDRESS | 0x80;
 8001b06:	f88d 7004 	strb.w	r7, [sp, #4]
  IMU_SPI_CS_L;
 8001b0a:	f002 fb2b 	bl	8004164 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 8001b0e:	4631      	mov	r1, r6
 8001b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b14:	2201      	movs	r2, #1
 8001b16:	68a8      	ldr	r0, [r5, #8]
 8001b18:	f002 ff70 	bl	80049fc <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi_, adc_, 6, 1000);
 8001b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b20:	4621      	mov	r1, r4
 8001b22:	2206      	movs	r2, #6
 8001b24:	68a8      	ldr	r0, [r5, #8]
 8001b26:	f003 f9b3 	bl	8004e90 <HAL_SPI_Receive>
  IMU_SPI_CS_H;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2140      	movs	r1, #64	; 0x40
 8001b2e:	4834      	ldr	r0, [pc, #208]	; (8001c00 <_ZN3IMU11pollingReadEv+0x160>)
 8001b30:	f002 fb18 	bl	8004164 <HAL_GPIO_WritePin>
  acc_[0] = (int16_t)(adc_[0] << 8 | adc_[1]);
 8001b34:	7820      	ldrb	r0, [r4, #0]
 8001b36:	7863      	ldrb	r3, [r4, #1]
  acc_[1] = (int16_t)(adc_[2] << 8 | adc_[3]);
 8001b38:	78a2      	ldrb	r2, [r4, #2]
  if(i == MAG_PRESCALER)
 8001b3a:	4f32      	ldr	r7, [pc, #200]	; (8001c04 <_ZN3IMU11pollingReadEv+0x164>)
  acc_[1] = (int16_t)(adc_[2] << 8 | adc_[3]);
 8001b3c:	78e1      	ldrb	r1, [r4, #3]
  acc_[0] = (int16_t)(adc_[0] << 8 | adc_[1]);
 8001b3e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  acc_[1] = (int16_t)(adc_[2] << 8 | adc_[3]);
 8001b42:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
  acc_[2] = (int16_t)(adc_[4] << 8 | adc_[5]);
 8001b46:	7920      	ldrb	r0, [r4, #4]
 8001b48:	7962      	ldrb	r2, [r4, #5]
  acc_[0] = (int16_t)(adc_[0] << 8 | adc_[1]);
 8001b4a:	81ab      	strh	r3, [r5, #12]
  if(i == MAG_PRESCALER)
 8001b4c:	683b      	ldr	r3, [r7, #0]
  acc_[2] = (int16_t)(adc_[4] << 8 | adc_[5]);
 8001b4e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  if(i == MAG_PRESCALER)
 8001b52:	2b04      	cmp	r3, #4
  acc_[1] = (int16_t)(adc_[2] << 8 | adc_[3]);
 8001b54:	81e9      	strh	r1, [r5, #14]
  acc_[2] = (int16_t)(adc_[4] << 8 | adc_[5]);
 8001b56:	822a      	strh	r2, [r5, #16]
  if(i == MAG_PRESCALER)
 8001b58:	d006      	beq.n	8001b68 <_ZN3IMU11pollingReadEv+0xc8>
  else i++;
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	603b      	str	r3, [r7, #0]
  update_ = true;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
}
 8001b64:	b003      	add	sp, #12
 8001b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
      t_data[0] = MAG_SPI_ADDRESS | 0x80;
 8001b68:	f04f 0ec9 	mov.w	lr, #201	; 0xc9
      hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8001b6c:	68ab      	ldr	r3, [r5, #8]
      IMU_SPI_CS_L;
 8001b6e:	2200      	movs	r2, #0
      hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8001b70:	681b      	ldr	r3, [r3, #0]
      IMU_SPI_CS_L;
 8001b72:	4823      	ldr	r0, [pc, #140]	; (8001c00 <_ZN3IMU11pollingReadEv+0x160>)
      hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8001b74:	6819      	ldr	r1, [r3, #0]
 8001b76:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8001b7a:	6019      	str	r1, [r3, #0]
      hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_64); //128 = 0.8Mhz
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	f041 0128 	orr.w	r1, r1, #40	; 0x28
 8001b82:	6019      	str	r1, [r3, #0]
      IMU_SPI_CS_L;
 8001b84:	2140      	movs	r1, #64	; 0x40
      t_data[0] = MAG_SPI_ADDRESS | 0x80;
 8001b86:	f88d e004 	strb.w	lr, [sp, #4]
      IMU_SPI_CS_L;
 8001b8a:	f002 faeb 	bl	8004164 <HAL_GPIO_WritePin>
      HAL_SPI_Transmit(hspi_, t_data, 1, 1000);
 8001b8e:	4631      	mov	r1, r6
 8001b90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b94:	2201      	movs	r2, #1
 8001b96:	68a8      	ldr	r0, [r5, #8]
 8001b98:	f002 ff30 	bl	80049fc <HAL_SPI_Transmit>
      HAL_SPI_Receive(hspi_, adc_, 7, 1000);
 8001b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba0:	2207      	movs	r2, #7
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	68a8      	ldr	r0, [r5, #8]
 8001ba6:	f003 f973 	bl	8004e90 <HAL_SPI_Receive>
      IMU_SPI_CS_H;
 8001baa:	2201      	movs	r2, #1
 8001bac:	2140      	movs	r1, #64	; 0x40
 8001bae:	4814      	ldr	r0, [pc, #80]	; (8001c00 <_ZN3IMU11pollingReadEv+0x160>)
 8001bb0:	f002 fad8 	bl	8004164 <HAL_GPIO_WritePin>
      hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8001bb4:	68aa      	ldr	r2, [r5, #8]
  if(i == MAG_PRESCALER) i = 0;
 8001bb6:	683b      	ldr	r3, [r7, #0]
      hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8001bb8:	6812      	ldr	r2, [r2, #0]
  if(i == MAG_PRESCALER) i = 0;
 8001bba:	2b04      	cmp	r3, #4
      hspi_->Instance->CR1 &= (uint32_t)(~SPI_BAUDRATEPRESCALER_256); //reset
 8001bbc:	6811      	ldr	r1, [r2, #0]
 8001bbe:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8001bc2:	6011      	str	r1, [r2, #0]
      hspi_->Instance->CR1 |= (uint32_t)(SPI_BAUDRATEPRESCALER_8); //8 = 13.5Mhz
 8001bc4:	6811      	ldr	r1, [r2, #0]
 8001bc6:	f041 0110 	orr.w	r1, r1, #16
 8001bca:	6011      	str	r1, [r2, #0]
      mag_[0] = (int16_t)(adc_[1] << 8 | adc_[0]);
 8001bcc:	7862      	ldrb	r2, [r4, #1]
 8001bce:	7820      	ldrb	r0, [r4, #0]
      mag_[1] = (int16_t)(adc_[3] << 8 | adc_[2]);
 8001bd0:	f894 e003 	ldrb.w	lr, [r4, #3]
      mag_[0] = (int16_t)(adc_[1] << 8 | adc_[0]);
 8001bd4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
      mag_[1] = (int16_t)(adc_[3] << 8 | adc_[2]);
 8001bd8:	78a1      	ldrb	r1, [r4, #2]
      mag_[2] = (int16_t)(adc_[5] << 8 | adc_[4]);
 8001bda:	7966      	ldrb	r6, [r4, #5]
 8001bdc:	7922      	ldrb	r2, [r4, #4]
      mag_[1] = (int16_t)(adc_[3] << 8 | adc_[2]);
 8001bde:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
      mag_[2] = (int16_t)(adc_[5] << 8 | adc_[4]);
 8001be2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
      mag_[0] = (int16_t)(adc_[1] << 8 | adc_[0]);
 8001be6:	8328      	strh	r0, [r5, #24]
      mag_[1] = (int16_t)(adc_[3] << 8 | adc_[2]);
 8001be8:	8369      	strh	r1, [r5, #26]
      mag_[2] = (int16_t)(adc_[5] << 8 | adc_[4]);
 8001bea:	83aa      	strh	r2, [r5, #28]
  if(i == MAG_PRESCALER) i = 0;
 8001bec:	d1b5      	bne.n	8001b5a <_ZN3IMU11pollingReadEv+0xba>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	603b      	str	r3, [r7, #0]
  update_ = true;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
}
 8001bf8:	b003      	add	sp, #12
 8001bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfc:	20000200 	.word	0x20000200
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	20000208 	.word	0x20000208

08001c08 <_ZN3IMU6updateEv>:
  pollingRead(); //read from SPI
 8001c08:	f7ff bf4a 	b.w	8001aa0 <_ZN3IMU11pollingReadEv>

08001c0c <_ZN11Initializer8sendDataEv>:

#include "initializer.h"


void Initializer::sendData()
{
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop

08001c10 <_ZN11Initializer19receiveDataCallbackEhmPh>:
	return;
}

void Initializer::receiveDataCallback(uint8_t message_id, uint32_t DLC, uint8_t* data)
{
 8001c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (message_id) {
 8001c14:	2901      	cmp	r1, #1
{
 8001c16:	b084      	sub	sp, #16
 8001c18:	460c      	mov	r4, r1
 8001c1a:	4605      	mov	r5, r0
	switch (message_id) {
 8001c1c:	d02f      	beq.n	8001c7e <_ZN11Initializer19receiveDataCallbackEhmPh+0x6e>
 8001c1e:	d31f      	bcc.n	8001c60 <_ZN11Initializer19receiveDataCallbackEhmPh+0x50>
 8001c20:	2902      	cmp	r1, #2
 8001c22:	d11a      	bne.n	8001c5a <_ZN11Initializer19receiveDataCallbackEhmPh+0x4a>
			sendMessage(1);
		}
	}
	break;
	case CAN::MESSAGEID_RECEIVE_BOARD_CONFIG_REQUEST:
		switch (data[0]) {
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	2a06      	cmp	r2, #6
 8001c28:	d817      	bhi.n	8001c5a <_ZN11Initializer19receiveDataCallbackEhmPh+0x4a>
 8001c2a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001c2e:	00a8      	.short	0x00a8
 8001c30:	00b800b0 	.word	0x00b800b0
 8001c34:	00e500c5 	.word	0x00e500c5
 8001c38:	000700f9 	.word	0x000700f9
			Flashmemory::write();
			break;
		}
		case CAN::BOARD_CONFIG_SET_SERVO_CURRENT_LIMIT:
		{
			uint8_t servo_index = data[1];
 8001c3c:	7859      	ldrb	r1, [r3, #1]
			ServoData& s = servo_.servo_handler_.getServo()[servo_index];
 8001c3e:	68c0      	ldr	r0, [r0, #12]
			s.current_limit_ = ((data[3] << 8) & 0xFF00) | (data[2] & 0xFF);
 8001c40:	78dc      	ldrb	r4, [r3, #3]
 8001c42:	789a      	ldrb	r2, [r3, #2]
 8001c44:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001c48:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8001c4c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			servo_.servo_handler_.setCurrentLimit(servo_index);
 8001c50:	3008      	adds	r0, #8
			s.current_limit_ = ((data[3] << 8) & 0xFF00) | (data[2] & 0xFF);
 8001c52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			servo_.servo_handler_.setCurrentLimit(servo_index);
 8001c56:	f000 fa0d 	bl	8002074 <_ZN15DynamixelSerial15setCurrentLimitEh>
		}
		break;
	default:
		break;
	}
}
 8001c5a:	b004      	add	sp, #16
 8001c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c60:	2300      	movs	r3, #0
 8001c62:	7942      	ldrb	r2, [r0, #5]
 8001c64:	4619      	mov	r1, r3
 8001c66:	7900      	ldrb	r0, [r0, #4]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	f7ff fcbb 	bl	80015e4 <_ZN3CAN10setMessageEhhhmPh>
 8001c6e:	f7ff fcb3 	bl	80015d8 <_ZN3CAN15getHcanInstanceEv>
 8001c72:	2101      	movs	r1, #1
 8001c74:	f001 fdaa 	bl	80037cc <HAL_CAN_Transmit>
 8001c78:	b004      	add	sp, #16
 8001c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data[1] = imu_.send_data_flag_ ? 1 : 0;
 8001c7e:	6903      	ldr	r3, [r0, #16]
		data[0] = servo_.servo_handler_.getServoNum();
 8001c80:	68c6      	ldr	r6, [r0, #12]
		data[1] = imu_.send_data_flag_ ? 1 : 0;
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		data[0] = servo_.servo_handler_.getServoNum();
 8001c84:	6b76      	ldr	r6, [r6, #52]	; 0x34
		data[1] = imu_.send_data_flag_ ? 1 : 0;
 8001c86:	3300      	adds	r3, #0
 8001c88:	bf18      	it	ne
 8001c8a:	2301      	movne	r3, #1
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	7942      	ldrb	r2, [r0, #5]
 8001c90:	f88d 3009 	strb.w	r3, [sp, #9]
 8001c94:	7900      	ldrb	r0, [r0, #4]
 8001c96:	2302      	movs	r3, #2
 8001c98:	9700      	str	r7, [sp, #0]
		data[0] = servo_.servo_handler_.getServoNum();
 8001c9a:	f88d 6008 	strb.w	r6, [sp, #8]
 8001c9e:	f7ff fca1 	bl	80015e4 <_ZN3CAN10setMessageEhhhmPh>
 8001ca2:	f7ff fc99 	bl	80015d8 <_ZN3CAN15getHcanInstanceEv>
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	f001 fd90 	bl	80037cc <HAL_CAN_Transmit>
		for (unsigned int i = 0; i < servo_.servo_handler_.getServoNum(); i++) {
 8001cac:	68ec      	ldr	r4, [r5, #12]
 8001cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0d2      	beq.n	8001c5a <_ZN11Initializer19receiveDataCallbackEhmPh+0x4a>
 8001cb4:	2600      	movs	r6, #0
			data[1] = s.id_;
 8001cb6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001cba:	eb04 1403 	add.w	r4, r4, r3, lsl #4
			data[2] = s.p_gain_ & 0xFF;
 8001cbe:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
			data[4] = s.i_gain_ & 0xFF;
 8001cc2:	f8b4 e058 	ldrh.w	lr, [r4, #88]	; 0x58
			data[6] = s.d_gain_ & 0xFF;
 8001cc6:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
			data[2] = s.p_gain_ & 0xFF;
 8001cca:	f88d 300a 	strb.w	r3, [sp, #10]
			data[3] = (s.p_gain_ >> 8) & 0xFF;
 8001cce:	0a1b      	lsrs	r3, r3, #8
			data[1] = s.id_;
 8001cd0:	f894 c038 	ldrb.w	ip, [r4, #56]	; 0x38
			data[3] = (s.p_gain_ >> 8) & 0xFF;
 8001cd4:	f88d 300b 	strb.w	r3, [sp, #11]
			data[5] = (s.i_gain_ >> 8) & 0xFF;
 8001cd8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8001cdc:	796a      	ldrb	r2, [r5, #5]
			data[0] = i;
 8001cde:	fa5f f886 	uxtb.w	r8, r6
 8001ce2:	7928      	ldrb	r0, [r5, #4]
			data[4] = s.i_gain_ & 0xFF;
 8001ce4:	f88d e00c 	strb.w	lr, [sp, #12]
			data[5] = (s.i_gain_ >> 8) & 0xFF;
 8001ce8:	f88d 300d 	strb.w	r3, [sp, #13]
			data[7] = (s.d_gain_ >> 8) & 0xFF;
 8001cec:	ea4f 2e11 	mov.w	lr, r1, lsr #8
 8001cf0:	2308      	movs	r3, #8
			data[6] = s.d_gain_ & 0xFF;
 8001cf2:	f88d 100e 	strb.w	r1, [sp, #14]
 8001cf6:	9700      	str	r7, [sp, #0]
 8001cf8:	2102      	movs	r1, #2
			data[7] = (s.d_gain_ >> 8) & 0xFF;
 8001cfa:	f88d e00f 	strb.w	lr, [sp, #15]
			data[1] = s.id_;
 8001cfe:	f88d c009 	strb.w	ip, [sp, #9]
			data[0] = i;
 8001d02:	f88d 8008 	strb.w	r8, [sp, #8]
 8001d06:	f7ff fc6d 	bl	80015e4 <_ZN3CAN10setMessageEhhhmPh>
 8001d0a:	f7ff fc65 	bl	80015d8 <_ZN3CAN15getHcanInstanceEv>
 8001d0e:	2101      	movs	r1, #1
 8001d10:	f001 fd5c 	bl	80037cc <HAL_CAN_Transmit>
			data[7] = (s.send_data_flag_ ? 1 : 0);
 8001d14:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
			data[1] = s.present_position_ & 0xFF;
 8001d18:	f8d4 e048 	ldr.w	lr, [r4, #72]	; 0x48
			data[7] = (s.send_data_flag_ ? 1 : 0);
 8001d1c:	3300      	adds	r3, #0
 8001d1e:	bf18      	it	ne
 8001d20:	2301      	movne	r3, #1
			data[3] = s.profile_velocity_ & 0xFF;
 8001d22:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
			data[5] = s.current_limit_ & 0xFF;
 8001d26:	f8b4 405e 	ldrh.w	r4, [r4, #94]	; 0x5e
			data[4] = (s.profile_velocity_ >> 8) & 0xFF;
 8001d2a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 8001d2e:	796a      	ldrb	r2, [r5, #5]
 8001d30:	7928      	ldrb	r0, [r5, #4]
			data[0] = i;
 8001d32:	f88d 8008 	strb.w	r8, [sp, #8]
			data[7] = (s.send_data_flag_ ? 1 : 0);
 8001d36:	f88d 300f 	strb.w	r3, [sp, #15]
			data[2] = (s.present_position_ >> 8) & 0xFF;
 8001d3a:	ea4f 282e 	mov.w	r8, lr, asr #8
 8001d3e:	2308      	movs	r3, #8
			data[1] = s.present_position_ & 0xFF;
 8001d40:	f88d e009 	strb.w	lr, [sp, #9]
			data[3] = s.profile_velocity_ & 0xFF;
 8001d44:	f88d 100b 	strb.w	r1, [sp, #11]
			data[6] = (s.current_limit_ >> 8) & 0xFF;
 8001d48:	ea4f 2e14 	mov.w	lr, r4, lsr #8
 8001d4c:	2103      	movs	r1, #3
 8001d4e:	9700      	str	r7, [sp, #0]
			data[4] = (s.profile_velocity_ >> 8) & 0xFF;
 8001d50:	f88d c00c 	strb.w	ip, [sp, #12]
			data[6] = (s.current_limit_ >> 8) & 0xFF;
 8001d54:	f88d e00e 	strb.w	lr, [sp, #14]
			data[5] = s.current_limit_ & 0xFF;
 8001d58:	f88d 400d 	strb.w	r4, [sp, #13]
			data[2] = (s.present_position_ >> 8) & 0xFF;
 8001d5c:	f88d 800a 	strb.w	r8, [sp, #10]
 8001d60:	f7ff fc40 	bl	80015e4 <_ZN3CAN10setMessageEhhhmPh>
 8001d64:	f7ff fc38 	bl	80015d8 <_ZN3CAN15getHcanInstanceEv>
 8001d68:	2101      	movs	r1, #1
 8001d6a:	f001 fd2f 	bl	80037cc <HAL_CAN_Transmit>
		for (unsigned int i = 0; i < servo_.servo_handler_.getServoNum(); i++) {
 8001d6e:	68ec      	ldr	r4, [r5, #12]
 8001d70:	3601      	adds	r6, #1
 8001d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d74:	429e      	cmp	r6, r3
 8001d76:	d39e      	bcc.n	8001cb6 <_ZN11Initializer19receiveDataCallbackEhmPh+0xa6>
}
 8001d78:	b004      	add	sp, #16
 8001d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			slave_id_ = data[1];
 8001d7e:	6882      	ldr	r2, [r0, #8]
 8001d80:	785b      	ldrb	r3, [r3, #1]
 8001d82:	8013      	strh	r3, [r2, #0]
			Flashmemory::erase();
 8001d84:	f7ff fcfa 	bl	800177c <_ZN11Flashmemory5eraseEv>
			Flashmemory::write();
 8001d88:	f7ff fd12 	bl	80017b0 <_ZN11Flashmemory5writeEv>
			break;
 8001d8c:	e765      	b.n	8001c5a <_ZN11Initializer19receiveDataCallbackEhmPh+0x4a>
			imu_.send_data_flag_ = data[1];
 8001d8e:	6902      	ldr	r2, [r0, #16]
 8001d90:	785b      	ldrb	r3, [r3, #1]
 8001d92:	8513      	strh	r3, [r2, #40]	; 0x28
			Flashmemory::erase();
 8001d94:	f7ff fcf2 	bl	800177c <_ZN11Flashmemory5eraseEv>
			Flashmemory::write();
 8001d98:	f7ff fd0a 	bl	80017b0 <_ZN11Flashmemory5writeEv>
			break;
 8001d9c:	e75d      	b.n	8001c5a <_ZN11Initializer19receiveDataCallbackEhmPh+0x4a>
			uint8_t servo_index = data[1];
 8001d9e:	7859      	ldrb	r1, [r3, #1]
			ServoData& s = servo_.servo_handler_.getServo()[servo_index];
 8001da0:	68c0      	ldr	r0, [r0, #12]
			int32_t offset_value = ((data[5] << 24) & 0xFF000000) | ((data[4] << 16) & 0xFF0000) | ((data[3] << 8) & 0xFF00) | ((data[2] << 0) & 0xFF);
 8001da2:	f8d3 2002 	ldr.w	r2, [r3, #2]
			s.offset_value_ = offset_value;
 8001da6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001daa:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
			servo_.servo_handler_.setHomingOffset(servo_index);
 8001db0:	3008      	adds	r0, #8
 8001db2:	f000 f90b 	bl	8001fcc <_ZN15DynamixelSerial15setHomingOffsetEh>
			break;
 8001db6:	e750      	b.n	8001c5a <_ZN11Initializer19receiveDataCallbackEhmPh+0x4a>
			uint8_t servo_index = data[1];
 8001db8:	7859      	ldrb	r1, [r3, #1]
			s.p_gain_ = ((data[3] << 8) & 0xFF00) | (data[2] & 0xFF);
 8001dba:	78dd      	ldrb	r5, [r3, #3]
			ServoData& s = servo_.servo_handler_.getServo()[servo_index];
 8001dbc:	68c0      	ldr	r0, [r0, #12]
			s.p_gain_ = ((data[3] << 8) & 0xFF00) | (data[2] & 0xFF);
 8001dbe:	789c      	ldrb	r4, [r3, #2]
 8001dc0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8001dc4:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8001dc8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8001dcc:	f8a2 4056 	strh.w	r4, [r2, #86]	; 0x56
			s.i_gain_ = ((data[5] << 8) & 0xFF00) | (data[4] & 0xFF);
 8001dd0:	795d      	ldrb	r5, [r3, #5]
 8001dd2:	791c      	ldrb	r4, [r3, #4]
			servo_.servo_handler_.setPositionGain(servo_index);
 8001dd4:	3008      	adds	r0, #8
			s.i_gain_ = ((data[5] << 8) & 0xFF00) | (data[4] & 0xFF);
 8001dd6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8001dda:	f8a2 4058 	strh.w	r4, [r2, #88]	; 0x58
			s.d_gain_ = ((data[7] << 8) & 0xFF00) | (data[6] & 0xFF);
 8001dde:	79dc      	ldrb	r4, [r3, #7]
 8001de0:	799b      	ldrb	r3, [r3, #6]
 8001de2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8001de6:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
			servo_.servo_handler_.setPositionGain(servo_index);
 8001dea:	f000 f90b 	bl	8002004 <_ZN15DynamixelSerial15setPositionGainEh>
			Flashmemory::erase();
 8001dee:	f7ff fcc5 	bl	800177c <_ZN11Flashmemory5eraseEv>
			Flashmemory::write();
 8001df2:	f7ff fcdd 	bl	80017b0 <_ZN11Flashmemory5writeEv>
			break;
 8001df6:	e730      	b.n	8001c5a <_ZN11Initializer19receiveDataCallbackEhmPh+0x4a>
			uint8_t servo_index = data[1];
 8001df8:	7859      	ldrb	r1, [r3, #1]
			ServoData& s = servo_.servo_handler_.getServo()[servo_index];
 8001dfa:	68c0      	ldr	r0, [r0, #12]
			s.profile_velocity_ = ((data[3] << 8) & 0xFF00) | (data[2] & 0xFF);
 8001dfc:	78dc      	ldrb	r4, [r3, #3]
 8001dfe:	789a      	ldrb	r2, [r3, #2]
 8001e00:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001e04:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8001e08:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			servo_.servo_handler_.setProfileVelocity(servo_index);
 8001e0c:	3008      	adds	r0, #8
			s.profile_velocity_ = ((data[3] << 8) & 0xFF00) | (data[2] & 0xFF);
 8001e0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			servo_.servo_handler_.setProfileVelocity(servo_index);
 8001e12:	f000 f913 	bl	800203c <_ZN15DynamixelSerial18setProfileVelocityEh>
			Flashmemory::erase();
 8001e16:	f7ff fcb1 	bl	800177c <_ZN11Flashmemory5eraseEv>
			Flashmemory::write();
 8001e1a:	f7ff fcc9 	bl	80017b0 <_ZN11Flashmemory5writeEv>
			break;
 8001e1e:	e71c      	b.n	8001c5a <_ZN11Initializer19receiveDataCallbackEhmPh+0x4a>
			ServoData& s = servo_.servo_handler_.getServo()[servo_index];
 8001e20:	785a      	ldrb	r2, [r3, #1]
			s.send_data_flag_ = data[2];
 8001e22:	68c1      	ldr	r1, [r0, #12]
 8001e24:	789b      	ldrb	r3, [r3, #2]
 8001e26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e2a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8001e2e:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
			Flashmemory::erase();
 8001e32:	f7ff fca3 	bl	800177c <_ZN11Flashmemory5eraseEv>
			Flashmemory::write();
 8001e36:	f7ff fcbb 	bl	80017b0 <_ZN11Flashmemory5writeEv>
			break;
 8001e3a:	e70e      	b.n	8001c5a <_ZN11Initializer19receiveDataCallbackEhmPh+0x4a>

08001e3c <_ZN5Motor8sendDataEv>:
  pwm_htim_ = htim;
  HAL_TIM_PWM_Start(pwm_htim_,TIM_CHANNEL_1);
}

void Motor::sendData()
{
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop

08001e40 <_ZN5Motor19receiveDataCallbackEhmPh>:
	return;
}

void Motor::receiveDataCallback(uint8_t message_id, uint32_t DLC, uint8_t* data)
{
 8001e40:	b510      	push	{r4, lr}
 8001e42:	4604      	mov	r4, r0
			return ((data[7] << 4) & 0x3F0) | ((data[6] >> 4) & 0x0F);
		default:
			return 0;
		}
	};
	if (message_id == CAN::MESSAGEID_RECEIVE_PWM_0_5 && 1 <= m_slave_id && m_slave_id <= 6) {
 8001e44:	bb19      	cbnz	r1, 8001e8e <_ZN5Motor19receiveDataCallbackEhmPh+0x4e>
 8001e46:	7942      	ldrb	r2, [r0, #5]
 8001e48:	1e51      	subs	r1, r2, #1
 8001e4a:	2905      	cmp	r1, #5
 8001e4c:	d81e      	bhi.n	8001e8c <_ZN5Motor19receiveDataCallbackEhmPh+0x4c>
		switch (index)
 8001e4e:	3a02      	subs	r2, #2
 8001e50:	2a04      	cmp	r2, #4
 8001e52:	d862      	bhi.n	8001f1a <_ZN5Motor19receiveDataCallbackEhmPh+0xda>
 8001e54:	e8df f002 	tbb	[pc, r2]
 8001e58:	324a5159 	.word	0x324a5159
 8001e5c:	86          	.byte	0x86
 8001e5d:	00          	.byte	0x00
			return ((data[6] << 6) & 0x3C0) | ((data[5] >> 2) & 0x3F);
 8001e5e:	7998      	ldrb	r0, [r3, #6]
 8001e60:	795b      	ldrb	r3, [r3, #5]
 8001e62:	0180      	lsls	r0, r0, #6
 8001e64:	f400 7070 	and.w	r0, r0, #960	; 0x3c0
 8001e68:	ea40 0093 	orr.w	r0, r0, r3, lsr #2
	}	
}

void Motor::setPwm(uint16_t pwm)
{
	pwm_htim_->Instance->CCR1 = (uint32_t)((pwm + 1000.0f) / 2000.0f *  MAX_PWM);
 8001e6c:	68a3      	ldr	r3, [r4, #8]
 8001e6e:	681c      	ldr	r4, [r3, #0]
 8001e70:	f7fe fa30 	bl	80002d4 <__aeabi_i2f>
 8001e74:	4941      	ldr	r1, [pc, #260]	; (8001f7c <_ZN5Motor19receiveDataCallbackEhmPh+0x13c>)
 8001e76:	f7fe f979 	bl	800016c <__addsf3>
 8001e7a:	4941      	ldr	r1, [pc, #260]	; (8001f80 <_ZN5Motor19receiveDataCallbackEhmPh+0x140>)
 8001e7c:	f7fe fb32 	bl	80004e4 <__aeabi_fdiv>
 8001e80:	4940      	ldr	r1, [pc, #256]	; (8001f84 <_ZN5Motor19receiveDataCallbackEhmPh+0x144>)
 8001e82:	f7fe fa7b 	bl	800037c <__aeabi_fmul>
 8001e86:	f7fe fbc9 	bl	800061c <__aeabi_f2uiz>
 8001e8a:	6360      	str	r0, [r4, #52]	; 0x34
 8001e8c:	bd10      	pop	{r4, pc}
	} else if (message_id == CAN::MESSAGEID_RECEIVE_PWM_6_11 && 7 <= m_slave_id && m_slave_id <= 12) {
 8001e8e:	2901      	cmp	r1, #1
 8001e90:	d1fc      	bne.n	8001e8c <_ZN5Motor19receiveDataCallbackEhmPh+0x4c>
 8001e92:	7942      	ldrb	r2, [r0, #5]
 8001e94:	1fd1      	subs	r1, r2, #7
 8001e96:	2905      	cmp	r1, #5
 8001e98:	d8f8      	bhi.n	8001e8c <_ZN5Motor19receiveDataCallbackEhmPh+0x4c>
		switch (index)
 8001e9a:	3a08      	subs	r2, #8
 8001e9c:	2a04      	cmp	r2, #4
 8001e9e:	d85a      	bhi.n	8001f56 <_ZN5Motor19receiveDataCallbackEhmPh+0x116>
 8001ea0:	a101      	add	r1, pc, #4	; (adr r1, 8001ea8 <_ZN5Motor19receiveDataCallbackEhmPh+0x68>)
 8001ea2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001ea6:	bf00      	nop
 8001ea8:	08001f47 	.word	0x08001f47
 8001eac:	08001f37 	.word	0x08001f37
 8001eb0:	08001f29 	.word	0x08001f29
 8001eb4:	08001e5f 	.word	0x08001e5f
 8001eb8:	08001f6b 	.word	0x08001f6b
			return ((data[6] << 6) & 0x3C0) | ((data[5] >> 2) & 0x3F);
 8001ebc:	799a      	ldrb	r2, [r3, #6]
 8001ebe:	7958      	ldrb	r0, [r3, #5]
 8001ec0:	0193      	lsls	r3, r2, #6
 8001ec2:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8001ec6:	ea43 0090 	orr.w	r0, r3, r0, lsr #2
 8001eca:	f7fe fa03 	bl	80002d4 <__aeabi_i2f>
 8001ece:	492b      	ldr	r1, [pc, #172]	; (8001f7c <_ZN5Motor19receiveDataCallbackEhmPh+0x13c>)
 8001ed0:	f7fe f94c 	bl	800016c <__addsf3>
 8001ed4:	492a      	ldr	r1, [pc, #168]	; (8001f80 <_ZN5Motor19receiveDataCallbackEhmPh+0x140>)
 8001ed6:	f7fe fb05 	bl	80004e4 <__aeabi_fdiv>
 8001eda:	492a      	ldr	r1, [pc, #168]	; (8001f84 <_ZN5Motor19receiveDataCallbackEhmPh+0x144>)
 8001edc:	f7fe fa4e 	bl	800037c <__aeabi_fmul>
 8001ee0:	f7fe fb9c 	bl	800061c <__aeabi_f2uiz>
	pwm_htim_->Instance->CCR1 = (uint32_t)((pwm + 1000.0f) / 2000.0f *  MAX_PWM);
 8001ee4:	68a3      	ldr	r3, [r4, #8]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6358      	str	r0, [r3, #52]	; 0x34
 8001eea:	bd10      	pop	{r4, pc}
			return ((data[5] << 8) & 0x300) | (data[4] & 0xFF);
 8001eec:	795a      	ldrb	r2, [r3, #5]
 8001eee:	7918      	ldrb	r0, [r3, #4]
 8001ef0:	0213      	lsls	r3, r2, #8
 8001ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef6:	4318      	orrs	r0, r3
 8001ef8:	e7e7      	b.n	8001eca <_ZN5Motor19receiveDataCallbackEhmPh+0x8a>
			return ((data[3] << 4) & 0x3F0) | ((data[2] >> 4) & 0x0F);
 8001efa:	78da      	ldrb	r2, [r3, #3]
 8001efc:	7898      	ldrb	r0, [r3, #2]
			return ((data[7] << 4) & 0x3F0) | ((data[6] >> 4) & 0x0F);
 8001efe:	0113      	lsls	r3, r2, #4
 8001f00:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
 8001f04:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
 8001f08:	e7df      	b.n	8001eca <_ZN5Motor19receiveDataCallbackEhmPh+0x8a>
			return ((data[2] << 6) & 0x3C0) | ((data[1] >> 2) & 0x3F);
 8001f0a:	789a      	ldrb	r2, [r3, #2]
 8001f0c:	7858      	ldrb	r0, [r3, #1]
 8001f0e:	0193      	lsls	r3, r2, #6
 8001f10:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8001f14:	ea43 0090 	orr.w	r0, r3, r0, lsr #2
 8001f18:	e7d7      	b.n	8001eca <_ZN5Motor19receiveDataCallbackEhmPh+0x8a>
			return ((data[1] << 8) & 0x300) | (data[0] & 0xFF);
 8001f1a:	785a      	ldrb	r2, [r3, #1]
 8001f1c:	7818      	ldrb	r0, [r3, #0]
 8001f1e:	0213      	lsls	r3, r2, #8
 8001f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f24:	4318      	orrs	r0, r3
 8001f26:	e7d0      	b.n	8001eca <_ZN5Motor19receiveDataCallbackEhmPh+0x8a>
			return ((data[5] << 8) & 0x300) | (data[4] & 0xFF);
 8001f28:	795a      	ldrb	r2, [r3, #5]
 8001f2a:	7918      	ldrb	r0, [r3, #4]
 8001f2c:	0213      	lsls	r3, r2, #8
 8001f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f32:	4318      	orrs	r0, r3
 8001f34:	e79a      	b.n	8001e6c <_ZN5Motor19receiveDataCallbackEhmPh+0x2c>
			return ((data[3] << 4) & 0x3F0) | ((data[2] >> 4) & 0x0F);
 8001f36:	78d8      	ldrb	r0, [r3, #3]
 8001f38:	789b      	ldrb	r3, [r3, #2]
 8001f3a:	0100      	lsls	r0, r0, #4
 8001f3c:	f400 707c 	and.w	r0, r0, #1008	; 0x3f0
 8001f40:	ea40 1013 	orr.w	r0, r0, r3, lsr #4
 8001f44:	e792      	b.n	8001e6c <_ZN5Motor19receiveDataCallbackEhmPh+0x2c>
			return ((data[2] << 6) & 0x3C0) | ((data[1] >> 2) & 0x3F);
 8001f46:	7898      	ldrb	r0, [r3, #2]
 8001f48:	785b      	ldrb	r3, [r3, #1]
 8001f4a:	0180      	lsls	r0, r0, #6
 8001f4c:	f400 7070 	and.w	r0, r0, #960	; 0x3c0
 8001f50:	ea40 0093 	orr.w	r0, r0, r3, lsr #2
 8001f54:	e78a      	b.n	8001e6c <_ZN5Motor19receiveDataCallbackEhmPh+0x2c>
			return ((data[1] << 8) & 0x300) | (data[0] & 0xFF);
 8001f56:	785a      	ldrb	r2, [r3, #1]
 8001f58:	7818      	ldrb	r0, [r3, #0]
 8001f5a:	0213      	lsls	r3, r2, #8
 8001f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f60:	4318      	orrs	r0, r3
 8001f62:	e783      	b.n	8001e6c <_ZN5Motor19receiveDataCallbackEhmPh+0x2c>
			return ((data[7] << 4) & 0x3F0) | ((data[6] >> 4) & 0x0F);
 8001f64:	79da      	ldrb	r2, [r3, #7]
 8001f66:	7998      	ldrb	r0, [r3, #6]
 8001f68:	e7c9      	b.n	8001efe <_ZN5Motor19receiveDataCallbackEhmPh+0xbe>
 8001f6a:	79d8      	ldrb	r0, [r3, #7]
 8001f6c:	799b      	ldrb	r3, [r3, #6]
 8001f6e:	0100      	lsls	r0, r0, #4
 8001f70:	f400 707c 	and.w	r0, r0, #1008	; 0x3f0
 8001f74:	ea40 1013 	orr.w	r0, r0, r3, lsr #4
 8001f78:	e778      	b.n	8001e6c <_ZN5Motor19receiveDataCallbackEhmPh+0x2c>
 8001f7a:	bf00      	nop
 8001f7c:	447a0000 	.word	0x447a0000
 8001f80:	44fa0000 	.word	0x44fa0000
 8001f84:	470ca000 	.word	0x470ca000

08001f88 <_ZN5Motor4initEP17TIM_HandleTypeDef>:
{
 8001f88:	460b      	mov	r3, r1
  HAL_TIM_PWM_Start(pwm_htim_,TIM_CHANNEL_1);
 8001f8a:	2100      	movs	r1, #0
  pwm_htim_ = htim;
 8001f8c:	6083      	str	r3, [r0, #8]
  HAL_TIM_PWM_Start(pwm_htim_,TIM_CHANNEL_1);
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 b94e 	b.w	8005230 <HAL_TIM_PWM_Start>

08001f94 <_ZN15DynamixelSerial9setTorqueEh>:
  }

  bool push(T new_value)
  {
    // the pop process should have higher priority than the push process
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 8001f94:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28
{
	cmdReboot(BROADCAST_ID);
}

void DynamixelSerial::setTorque(uint8_t servo_index)
{
 8001f98:	b470      	push	{r4, r5, r6}
 8001f9a:	f9b0 5026 	ldrsh.w	r5, [r0, #38]	; 0x26
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	4295      	cmp	r5, r2
 8001fa2:	d00e      	beq.n	8001fc2 <_ZN15DynamixelSerial9setTorqueEh+0x2e>
 8001fa4:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001fa6:	1e66      	subs	r6, r4, #1
 8001fa8:	42b3      	cmp	r3, r6
 8001faa:	d00c      	beq.n	8001fc6 <_ZN15DynamixelSerial9setTorqueEh+0x32>
      operator=(typename conditional<
		__and_<is_copy_assignable<_T1>,
		       is_copy_assignable<_T2>>::value,
		const pair&, const __nonesuch&>::type __p)
      {
	first = __p.first;
 8001fac:	2506      	movs	r5, #6

    buf_[byte_to_add_] = new_value;

    byte_to_add_++;
 8001fae:	b212      	sxth	r2, r2
 8001fb0:	eb00 0343 	add.w	r3, r0, r3, lsl #1

    if (byte_to_add_ == buffer_length_)
 8001fb4:	4294      	cmp	r4, r2
	second = __p.second;
 8001fb6:	71d9      	strb	r1, [r3, #7]
	first = __p.first;
 8001fb8:	719d      	strb	r5, [r3, #6]
      {
        byte_to_add_ = 0;
 8001fba:	bf0a      	itet	eq
 8001fbc:	2300      	moveq	r3, #0
    byte_to_add_++;
 8001fbe:	8502      	strhne	r2, [r0, #40]	; 0x28
        byte_to_add_ = 0;
 8001fc0:	8503      	strheq	r3, [r0, #40]	; 0x28
	instruction_buffer_.push(std::make_pair(INST_SET_TORQUE, servo_index));
}
 8001fc2:	bc70      	pop	{r4, r5, r6}
 8001fc4:	4770      	bx	lr
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 8001fc6:	2d00      	cmp	r5, #0
 8001fc8:	d1f0      	bne.n	8001fac <_ZN15DynamixelSerial9setTorqueEh+0x18>
 8001fca:	e7fa      	b.n	8001fc2 <_ZN15DynamixelSerial9setTorqueEh+0x2e>

08001fcc <_ZN15DynamixelSerial15setHomingOffsetEh>:
 8001fcc:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28

void DynamixelSerial::setHomingOffset(uint8_t servo_index)
{
 8001fd0:	b470      	push	{r4, r5, r6}
 8001fd2:	f9b0 5026 	ldrsh.w	r5, [r0, #38]	; 0x26
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	4295      	cmp	r5, r2
 8001fda:	d00e      	beq.n	8001ffa <_ZN15DynamixelSerial15setHomingOffsetEh+0x2e>
 8001fdc:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001fde:	1e66      	subs	r6, r4, #1
 8001fe0:	42b3      	cmp	r3, r6
 8001fe2:	d00c      	beq.n	8001ffe <_ZN15DynamixelSerial15setHomingOffsetEh+0x32>
 8001fe4:	2508      	movs	r5, #8
    byte_to_add_++;
 8001fe6:	b212      	sxth	r2, r2
 8001fe8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    if (byte_to_add_ == buffer_length_)
 8001fec:	4294      	cmp	r4, r2
	second = __p.second;
 8001fee:	71d9      	strb	r1, [r3, #7]
	first = __p.first;
 8001ff0:	719d      	strb	r5, [r3, #6]
        byte_to_add_ = 0;
 8001ff2:	bf0a      	itet	eq
 8001ff4:	2300      	moveq	r3, #0
    byte_to_add_++;
 8001ff6:	8502      	strhne	r2, [r0, #40]	; 0x28
        byte_to_add_ = 0;
 8001ff8:	8503      	strheq	r3, [r0, #40]	; 0x28
	instruction_buffer_.push(std::make_pair(INST_SET_HOMING_OFFSET, servo_index));
}
 8001ffa:	bc70      	pop	{r4, r5, r6}
 8001ffc:	4770      	bx	lr
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 8001ffe:	2d00      	cmp	r5, #0
 8002000:	d1f0      	bne.n	8001fe4 <_ZN15DynamixelSerial15setHomingOffsetEh+0x18>
 8002002:	e7fa      	b.n	8001ffa <_ZN15DynamixelSerial15setHomingOffsetEh+0x2e>

08002004 <_ZN15DynamixelSerial15setPositionGainEh>:
 8002004:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28

void DynamixelSerial::setPositionGain(uint8_t servo_index)
{
 8002008:	b470      	push	{r4, r5, r6}
 800200a:	f9b0 5026 	ldrsh.w	r5, [r0, #38]	; 0x26
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	4295      	cmp	r5, r2
 8002012:	d00e      	beq.n	8002032 <_ZN15DynamixelSerial15setPositionGainEh+0x2e>
 8002014:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002016:	1e66      	subs	r6, r4, #1
 8002018:	42b3      	cmp	r3, r6
 800201a:	d00c      	beq.n	8002036 <_ZN15DynamixelSerial15setPositionGainEh+0x32>
 800201c:	250b      	movs	r5, #11
    byte_to_add_++;
 800201e:	b212      	sxth	r2, r2
 8002020:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    if (byte_to_add_ == buffer_length_)
 8002024:	4294      	cmp	r4, r2
	second = __p.second;
 8002026:	71d9      	strb	r1, [r3, #7]
	first = __p.first;
 8002028:	719d      	strb	r5, [r3, #6]
        byte_to_add_ = 0;
 800202a:	bf0a      	itet	eq
 800202c:	2300      	moveq	r3, #0
    byte_to_add_++;
 800202e:	8502      	strhne	r2, [r0, #40]	; 0x28
        byte_to_add_ = 0;
 8002030:	8503      	strheq	r3, [r0, #40]	; 0x28
	instruction_buffer_.push(std::make_pair(INST_SET_POSITION_GAIN, servo_index));
}
 8002032:	bc70      	pop	{r4, r5, r6}
 8002034:	4770      	bx	lr
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 8002036:	2d00      	cmp	r5, #0
 8002038:	d1f0      	bne.n	800201c <_ZN15DynamixelSerial15setPositionGainEh+0x18>
 800203a:	e7fa      	b.n	8002032 <_ZN15DynamixelSerial15setPositionGainEh+0x2e>

0800203c <_ZN15DynamixelSerial18setProfileVelocityEh>:
 800203c:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28

void DynamixelSerial::setProfileVelocity(uint8_t servo_index)
{
 8002040:	b470      	push	{r4, r5, r6}
 8002042:	f9b0 5026 	ldrsh.w	r5, [r0, #38]	; 0x26
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	4295      	cmp	r5, r2
 800204a:	d00e      	beq.n	800206a <_ZN15DynamixelSerial18setProfileVelocityEh+0x2e>
 800204c:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800204e:	1e66      	subs	r6, r4, #1
 8002050:	42b3      	cmp	r3, r6
 8002052:	d00c      	beq.n	800206e <_ZN15DynamixelSerial18setProfileVelocityEh+0x32>
 8002054:	250d      	movs	r5, #13
    byte_to_add_++;
 8002056:	b212      	sxth	r2, r2
 8002058:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    if (byte_to_add_ == buffer_length_)
 800205c:	4294      	cmp	r4, r2
	second = __p.second;
 800205e:	71d9      	strb	r1, [r3, #7]
	first = __p.first;
 8002060:	719d      	strb	r5, [r3, #6]
        byte_to_add_ = 0;
 8002062:	bf0a      	itet	eq
 8002064:	2300      	moveq	r3, #0
    byte_to_add_++;
 8002066:	8502      	strhne	r2, [r0, #40]	; 0x28
        byte_to_add_ = 0;
 8002068:	8503      	strheq	r3, [r0, #40]	; 0x28
	instruction_buffer_.push(std::make_pair(INST_SET_PROFILE_VELOCITY, servo_index));
}
 800206a:	bc70      	pop	{r4, r5, r6}
 800206c:	4770      	bx	lr
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 800206e:	2d00      	cmp	r5, #0
 8002070:	d1f0      	bne.n	8002054 <_ZN15DynamixelSerial18setProfileVelocityEh+0x18>
 8002072:	e7fa      	b.n	800206a <_ZN15DynamixelSerial18setProfileVelocityEh+0x2e>

08002074 <_ZN15DynamixelSerial15setCurrentLimitEh>:
 8002074:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	; 0x28

void DynamixelSerial::setCurrentLimit(uint8_t servo_index)
{
 8002078:	b470      	push	{r4, r5, r6}
 800207a:	f9b0 5026 	ldrsh.w	r5, [r0, #38]	; 0x26
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	4295      	cmp	r5, r2
 8002082:	d00e      	beq.n	80020a2 <_ZN15DynamixelSerial15setCurrentLimitEh+0x2e>
 8002084:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8002086:	1e66      	subs	r6, r4, #1
 8002088:	42b3      	cmp	r3, r6
 800208a:	d00c      	beq.n	80020a6 <_ZN15DynamixelSerial15setCurrentLimitEh+0x32>
 800208c:	2507      	movs	r5, #7
    byte_to_add_++;
 800208e:	b212      	sxth	r2, r2
 8002090:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    if (byte_to_add_ == buffer_length_)
 8002094:	4294      	cmp	r4, r2
	second = __p.second;
 8002096:	71d9      	strb	r1, [r3, #7]
	first = __p.first;
 8002098:	719d      	strb	r5, [r3, #6]
        byte_to_add_ = 0;
 800209a:	bf0a      	itet	eq
 800209c:	2300      	moveq	r3, #0
    byte_to_add_++;
 800209e:	8502      	strhne	r2, [r0, #40]	; 0x28
        byte_to_add_ = 0;
 80020a0:	8503      	strheq	r3, [r0, #40]	; 0x28
	instruction_buffer_.push(std::make_pair(INST_SET_CURRENT_LIMIT, servo_index));
}
 80020a2:	bc70      	pop	{r4, r5, r6}
 80020a4:	4770      	bx	lr
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	d1f0      	bne.n	800208c <_ZN15DynamixelSerial15setCurrentLimitEh+0x18>
 80020aa:	e7fa      	b.n	80020a2 <_ZN15DynamixelSerial15setCurrentLimitEh+0x2e>

080020ac <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh>:
    	}
    }
}

void DynamixelSerial::transmitInstructionPacket(uint8_t id, uint16_t len, uint8_t instruction, uint8_t* parameters) /* Transmit instruction packet to Dynamixel */
{
 80020ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t transmit_data[INSTRUCTION_PACKET_SIZE];
  /* headers */
  transmit_data[0] = HEADER0;
 80020ae:	26ff      	movs	r6, #255	; 0xff
  transmit_data[1] = HEADER1;
  transmit_data[2] = HEADER2;
 80020b0:	27fd      	movs	r7, #253	; 0xfd
  transmit_data[3] = HEADER3;
 80020b2:	2400      	movs	r4, #0
{
 80020b4:	b091      	sub	sp, #68	; 0x44
  /* servo id */
  transmit_data[4] = id;
  /* instruction len */
  transmit_data[5] = len & 0xFF; //LEN_L
  transmit_data[6] = (len >> 8) & 0xFF; //LEN_H
 80020b6:	ea4f 2e12 	mov.w	lr, r2, lsr #8
  transmit_data[7] = instruction;
  /* parameters */
  //process for exception
  int header_match_count = 0;
  int transmit_data_index = 8;
  for (int i = 0; i < len - 3; i++) {
 80020ba:	2a03      	cmp	r2, #3
  transmit_data[7] = instruction;
 80020bc:	f88d 3007 	strb.w	r3, [sp, #7]
  transmit_data[5] = len & 0xFF; //LEN_L
 80020c0:	f88d 2005 	strb.w	r2, [sp, #5]
{
 80020c4:	4605      	mov	r5, r0
  transmit_data[4] = id;
 80020c6:	f88d 1004 	strb.w	r1, [sp, #4]
  transmit_data[6] = (len >> 8) & 0xFF; //LEN_H
 80020ca:	f88d e006 	strb.w	lr, [sp, #6]
  transmit_data[0] = HEADER0;
 80020ce:	f88d 6000 	strb.w	r6, [sp]
  transmit_data[1] = HEADER1;
 80020d2:	f88d 6001 	strb.w	r6, [sp, #1]
  transmit_data[2] = HEADER2;
 80020d6:	f88d 7002 	strb.w	r7, [sp, #2]
  transmit_data[3] = HEADER3;
 80020da:	f88d 4003 	strb.w	r4, [sp, #3]
{
 80020de:	9b16      	ldr	r3, [sp, #88]	; 0x58
  for (int i = 0; i < len - 3; i++) {
 80020e0:	dd6d      	ble.n	80021be <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x112>
 80020e2:	3a04      	subs	r2, #4
 80020e4:	4620      	mov	r0, r4
 80020e6:	2108      	movs	r1, #8
 80020e8:	189c      	adds	r4, r3, r2
 80020ea:	3b01      	subs	r3, #1
 80020ec:	e009      	b.n	8002102 <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x56>
	uint8_t tx_data = parameters[i];
	if (header_match_count == 0) {
 		if (tx_data == HEADER0) header_match_count++;
 80020ee:	f1a2 00ff 	sub.w	r0, r2, #255	; 0xff
 80020f2:	fab0 f080 	clz	r0, r0
 		else header_match_count = 0;
 		transmit_data[transmit_data_index] = tx_data;
 80020f6:	f806 2c40 	strb.w	r2, [r6, #-64]
 		if (tx_data == HEADER0) header_match_count++;
 80020fa:	0940      	lsrs	r0, r0, #5
 		transmit_data_index++;
 80020fc:	3101      	adds	r1, #1
  for (int i = 0; i < len - 3; i++) {
 80020fe:	429c      	cmp	r4, r3
 8002100:	d015      	beq.n	800212e <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x82>
 		transmit_data[transmit_data_index] = tx_data;
 8002102:	aa10      	add	r2, sp, #64	; 0x40
 8002104:	1856      	adds	r6, r2, r1
	uint8_t tx_data = parameters[i];
 8002106:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	if (header_match_count == 0) {
 800210a:	2800      	cmp	r0, #0
 800210c:	d0ef      	beq.n	80020ee <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x42>
 	} else if (header_match_count == 1) {
 800210e:	2801      	cmp	r0, #1
 8002110:	d043      	beq.n	800219a <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0xee>
 		if (tx_data == HEADER1) header_match_count++;
 		else header_match_count = 0;
 		transmit_data[transmit_data_index] = tx_data;
 		transmit_data_index++;
 	} else if (header_match_count == 2) {
 8002112:	2802      	cmp	r0, #2
 8002114:	d1f3      	bne.n	80020fe <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x52>
 		if (tx_data == HEADER2) {
 8002116:	2afd      	cmp	r2, #253	; 0xfd
 8002118:	d049      	beq.n	80021ae <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x102>
 			transmit_data_index++;
 			transmit_data[transmit_data_index] = EXCEPTION_ADDITIONAL_BYTE;
 			transmit_data_index++;
 		} else {
 			header_match_count = 0;
 			transmit_data[transmit_data_index] = tx_data;
 800211a:	ae10      	add	r6, sp, #64	; 0x40
 800211c:	440e      	add	r6, r1
  for (int i = 0; i < len - 3; i++) {
 800211e:	429c      	cmp	r4, r3
 			header_match_count = 0;
 8002120:	f04f 0000 	mov.w	r0, #0
 			transmit_data[transmit_data_index] = tx_data;
 8002124:	f806 2c40 	strb.w	r2, [r6, #-64]
 			transmit_data_index++;
 8002128:	f101 0101 	add.w	r1, r1, #1
  for (int i = 0; i < len - 3; i++) {
 800212c:	d1e9      	bne.n	8002102 <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x56>
 800212e:	4b27      	ldr	r3, [pc, #156]	; (80021cc <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x120>)
 8002130:	f89d 2000 	ldrb.w	r2, [sp]
 8002134:	1c8c      	adds	r4, r1, #2
 8002136:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800213a:	b2a4      	uxth	r4, r4
 800213c:	f101 0e01 	add.w	lr, r1, #1
 8002140:	1e4f      	subs	r7, r1, #1
 8002142:	466e      	mov	r6, sp
  int transmit_data_index = 8;
 8002144:	2000      	movs	r0, #0
 8002146:	f8df c084 	ldr.w	ip, [pc, #132]	; 80021cc <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x120>
 800214a:	446f      	add	r7, sp
 800214c:	e005      	b.n	800215a <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0xae>
 800214e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8002152:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8002156:	f83c 3012 	ldrh.w	r3, [ip, r2, lsl #1]

uint16_t DynamixelSerial::calcCRC16(uint16_t crc_accum, uint8_t *data_blk_ptr, int data_blk_size)
{
	for(int j = 0; j < data_blk_size; j++) {
		int i = ((int)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 800215a:	ea83 2300 	eor.w	r3, r3, r0, lsl #8
 800215e:	b21b      	sxth	r3, r3
	for(int j = 0; j < data_blk_size; j++) {
 8002160:	42b7      	cmp	r7, r6
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8002162:	b298      	uxth	r0, r3
	for(int j = 0; j < data_blk_size; j++) {
 8002164:	d1f3      	bne.n	800214e <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0xa2>
  transmit_data[transmit_data_index] = chksum & 0xFF; //CRC_L
 8002166:	aa10      	add	r2, sp, #64	; 0x40
 8002168:	4411      	add	r1, r2
  transmit_data[transmit_data_index] = (chksum >> 8) & 0xFF; //CRC_H
 800216a:	4496      	add	lr, r2
  transmit_data[transmit_data_index] = chksum & 0xFF; //CRC_L
 800216c:	f801 3c40 	strb.w	r3, [r1, #-64]
  transmit_data[transmit_data_index] = (chksum >> 8) & 0xFF; //CRC_H
 8002170:	0a06      	lsrs	r6, r0, #8
  WE;
 8002172:	2201      	movs	r2, #1
 8002174:	2140      	movs	r1, #64	; 0x40
 8002176:	4816      	ldr	r0, [pc, #88]	; (80021d0 <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x124>)
  transmit_data[transmit_data_index] = (chksum >> 8) & 0xFF; //CRC_H
 8002178:	f80e 6c40 	strb.w	r6, [lr, #-64]
  WE;
 800217c:	f001 fff2 	bl	8004164 <HAL_GPIO_WritePin>
  HAL_UART_Transmit(huart_, transmit_data, transmit_data_index, 1); //timeout: 100[ms]
 8002180:	4622      	mov	r2, r4
 8002182:	4669      	mov	r1, sp
 8002184:	2301      	movs	r3, #1
 8002186:	6828      	ldr	r0, [r5, #0]
 8002188:	f003 fba2 	bl	80058d0 <HAL_UART_Transmit>
  RE;
 800218c:	2200      	movs	r2, #0
 800218e:	2140      	movs	r1, #64	; 0x40
 8002190:	480f      	ldr	r0, [pc, #60]	; (80021d0 <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x124>)
 8002192:	f001 ffe7 	bl	8004164 <HAL_GPIO_WritePin>
}
 8002196:	b011      	add	sp, #68	; 0x44
 8002198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 		transmit_data[transmit_data_index] = tx_data;
 800219a:	a810      	add	r0, sp, #64	; 0x40
 800219c:	1846      	adds	r6, r0, r1
 		if (tx_data == HEADER1) header_match_count++;
 800219e:	2aff      	cmp	r2, #255	; 0xff
 80021a0:	bf14      	ite	ne
 80021a2:	2000      	movne	r0, #0
 80021a4:	2002      	moveq	r0, #2
 		transmit_data[transmit_data_index] = tx_data;
 80021a6:	f806 2c40 	strb.w	r2, [r6, #-64]
 		transmit_data_index++;
 80021aa:	3101      	adds	r1, #1
 80021ac:	e7a7      	b.n	80020fe <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x52>
 			transmit_data[transmit_data_index] = tx_data;
 80021ae:	ae10      	add	r6, sp, #64	; 0x40
 80021b0:	440e      	add	r6, r1
 80021b2:	f806 2c40 	strb.w	r2, [r6, #-64]
 			transmit_data[transmit_data_index] = EXCEPTION_ADDITIONAL_BYTE;
 80021b6:	f806 2c3f 	strb.w	r2, [r6, #-63]
 			transmit_data_index++;
 80021ba:	3102      	adds	r1, #2
 80021bc:	e79f      	b.n	80020fe <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x52>
  for (int i = 0; i < len - 3; i++) {
 80021be:	f240 2302 	movw	r3, #514	; 0x202
 80021c2:	240a      	movs	r4, #10
 80021c4:	f04f 0e09 	mov.w	lr, #9
  int transmit_data_index = 8;
 80021c8:	2108      	movs	r1, #8
 80021ca:	e7b9      	b.n	8002140 <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh+0x94>
 80021cc:	080060d8 	.word	0x080060d8
 80021d0:	40010800 	.word	0x40010800

080021d4 <_ZN15DynamixelSerial16readStatusPacketEv>:
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80021d4:	2301      	movs	r3, #1
{
 80021d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021da:	b0a2      	sub	sp, #136	; 0x88
 80021dc:	4604      	mov	r4, r0
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80021de:	461a      	mov	r2, r3
 80021e0:	6800      	ldr	r0, [r0, #0]
 80021e2:	f10d 0107 	add.w	r1, sp, #7
 80021e6:	f003 fbcf 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 80021ea:	2803      	cmp	r0, #3
 80021ec:	d00c      	beq.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
			if (rx_data == HEADER0) {
 80021ee:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80021f2:	2dff      	cmp	r5, #255	; 0xff
 80021f4:	d00d      	beq.n	8002212 <_ZN15DynamixelSerial16readStatusPacketEv+0x3e>
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80021f6:	2301      	movs	r3, #1
 80021f8:	f10d 0107 	add.w	r1, sp, #7
 80021fc:	461a      	mov	r2, r3
 80021fe:	6820      	ldr	r0, [r4, #0]
 8002200:	f003 fbc2 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 8002204:	2803      	cmp	r0, #3
 8002206:	d1f2      	bne.n	80021ee <_ZN15DynamixelSerial16readStatusPacketEv+0x1a>
		return -1;
 8002208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800220c:	b022      	add	sp, #136	; 0x88
 800220e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 8002212:	2301      	movs	r3, #1
 8002214:	f10d 0107 	add.w	r1, sp, #7
 8002218:	461a      	mov	r2, r3
 800221a:	6820      	ldr	r0, [r4, #0]
			receive_data[loop_count] = rx_data;
 800221c:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 8002220:	f003 fbb2 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 8002224:	2803      	cmp	r0, #3
 8002226:	d0ef      	beq.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
			if (rx_data == HEADER1) {
 8002228:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800222c:	2dff      	cmp	r5, #255	; 0xff
 800222e:	d1eb      	bne.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 8002230:	2301      	movs	r3, #1
 8002232:	f10d 0107 	add.w	r1, sp, #7
 8002236:	461a      	mov	r2, r3
 8002238:	6820      	ldr	r0, [r4, #0]
			receive_data[loop_count] = rx_data;
 800223a:	f88d 5049 	strb.w	r5, [sp, #73]	; 0x49
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 800223e:	f003 fba3 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 8002242:	2803      	cmp	r0, #3
 8002244:	d0e0      	beq.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
			if (rx_data == HEADER2) {
 8002246:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800224a:	2dfd      	cmp	r5, #253	; 0xfd
 800224c:	d1dc      	bne.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 800224e:	2301      	movs	r3, #1
 8002250:	f10d 0107 	add.w	r1, sp, #7
 8002254:	461a      	mov	r2, r3
 8002256:	6820      	ldr	r0, [r4, #0]
			receive_data[loop_count] = rx_data;
 8002258:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 800225c:	f003 fb94 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 8002260:	2803      	cmp	r0, #3
 8002262:	d0d1      	beq.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
			if (rx_data == HEADER3) {
 8002264:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002268:	2d00      	cmp	r5, #0
 800226a:	d1cd      	bne.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 800226c:	2301      	movs	r3, #1
 800226e:	f10d 0107 	add.w	r1, sp, #7
 8002272:	461a      	mov	r2, r3
 8002274:	6820      	ldr	r0, [r4, #0]
			receive_data[loop_count] = rx_data;
 8002276:	f88d 504b 	strb.w	r5, [sp, #75]	; 0x4b
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 800227a:	f003 fb85 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 800227e:	2803      	cmp	r0, #3
 8002280:	d0c2      	beq.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 8002282:	2301      	movs	r3, #1
			servo_id = rx_data;
 8002284:	f89d 5007 	ldrb.w	r5, [sp, #7]
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 8002288:	461a      	mov	r2, r3
 800228a:	f10d 0107 	add.w	r1, sp, #7
 800228e:	6820      	ldr	r0, [r4, #0]
			receive_data[loop_count] = rx_data;
 8002290:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 8002294:	f003 fb78 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 8002298:	2803      	cmp	r0, #3
 800229a:	d0b5      	beq.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 800229c:	2301      	movs	r3, #1
			parameter_len = rx_data;
 800229e:	f89d 7007 	ldrb.w	r7, [sp, #7]
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80022a2:	f10d 0107 	add.w	r1, sp, #7
 80022a6:	461a      	mov	r2, r3
 80022a8:	6820      	ldr	r0, [r4, #0]
			receive_data[loop_count] = rx_data;
 80022aa:	f88d 704d 	strb.w	r7, [sp, #77]	; 0x4d
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80022ae:	f003 fb6b 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 80022b2:	2803      	cmp	r0, #3
 80022b4:	d0a8      	beq.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80022b6:	2301      	movs	r3, #1
			parameter_len |= ((rx_data << 8) & 0xFF00);
 80022b8:	f89d e007 	ldrb.w	lr, [sp, #7]
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80022bc:	461a      	mov	r2, r3
 80022be:	f10d 0107 	add.w	r1, sp, #7
 80022c2:	6820      	ldr	r0, [r4, #0]
			parameter_len |= ((rx_data << 8) & 0xFF00);
 80022c4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			receive_data[loop_count] = rx_data;
 80022c8:	f88d e04e 	strb.w	lr, [sp, #78]	; 0x4e
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80022cc:	f003 fb5c 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 80022d0:	2803      	cmp	r0, #3
 80022d2:	d099      	beq.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
			if (rx_data == STATUS_PACKET_INSTRUCTION) {
 80022d4:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80022d8:	2e55      	cmp	r6, #85	; 0x55
 80022da:	d195      	bne.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80022dc:	2301      	movs	r3, #1
 80022de:	f10d 0107 	add.w	r1, sp, #7
 80022e2:	461a      	mov	r2, r3
 80022e4:	6820      	ldr	r0, [r4, #0]
			receive_data[loop_count] = rx_data;
 80022e6:	f88d 604f 	strb.w	r6, [sp, #79]	; 0x4f
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80022ea:	f003 fb4d 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 80022ee:	2803      	cmp	r0, #3
 80022f0:	d08a      	beq.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
			if ((rx_data & 0x7F) == ERROR_NO_ERROR) {
 80022f2:	f89d 6007 	ldrb.w	r6, [sp, #7]
 80022f6:	f016 087f 	ands.w	r8, r6, #127	; 0x7f
 80022fa:	d185      	bne.n	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80022fc:	2301      	movs	r3, #1
 80022fe:	f10d 0107 	add.w	r1, sp, #7
 8002302:	461a      	mov	r2, r3
 8002304:	6820      	ldr	r0, [r4, #0]
			receive_data[loop_count] = rx_data;
 8002306:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 800230a:	f003 fb3d 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 800230e:	2803      	cmp	r0, #3
			loop_count++;
 8002310:	f04f 0909 	mov.w	r9, #9
		if(receive_status == HAL_TIMEOUT) return -1;
 8002314:	f43f af78 	beq.w	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
 8002318:	3704      	adds	r7, #4
 800231a:	4646      	mov	r6, r8
 800231c:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8002320:	e01a      	b.n	8002358 <_ZN15DynamixelSerial16readStatusPacketEv+0x184>
				if (rx_data == HEADER0) header_match_count++;
 8002322:	f1ae 06ff 	sub.w	r6, lr, #255	; 0xff
 8002326:	fab6 f686 	clz	r6, r6
				parameters[parameter_index] = rx_data;
 800232a:	ab22      	add	r3, sp, #136	; 0x88
 800232c:	4443      	add	r3, r8
 800232e:	f803 ec80 	strb.w	lr, [r3, #-128]
				parameter_index++;
 8002332:	f108 0801 	add.w	r8, r8, #1
				if (rx_data == HEADER0) header_match_count++;
 8002336:	0976      	lsrs	r6, r6, #5
			if (parameter_loop_count == parameter_len - 4) {
 8002338:	454f      	cmp	r7, r9
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 800233a:	f04f 0301 	mov.w	r3, #1
			if (parameter_loop_count == parameter_len - 4) {
 800233e:	d033      	beq.n	80023a8 <_ZN15DynamixelSerial16readStatusPacketEv+0x1d4>
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 8002340:	f10d 0107 	add.w	r1, sp, #7
 8002344:	461a      	mov	r2, r3
 8002346:	6820      	ldr	r0, [r4, #0]
			receive_data[loop_count] = rx_data;
 8002348:	f80a ef01 	strb.w	lr, [sl, #1]!
			loop_count++;
 800234c:	4499      	add	r9, r3
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 800234e:	f003 fb1b 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 8002352:	2803      	cmp	r0, #3
 8002354:	f43f af58 	beq.w	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
				if (rx_data == HEADER0) header_match_count++;
 8002358:	f89d e007 	ldrb.w	lr, [sp, #7]
			if (header_match_count == 0) {
 800235c:	2e00      	cmp	r6, #0
 800235e:	d0e0      	beq.n	8002322 <_ZN15DynamixelSerial16readStatusPacketEv+0x14e>
			} else if (header_match_count == 1) {
 8002360:	2e01      	cmp	r6, #1
 8002362:	d009      	beq.n	8002378 <_ZN15DynamixelSerial16readStatusPacketEv+0x1a4>
			} else if (header_match_count == 2) {
 8002364:	2e02      	cmp	r6, #2
 8002366:	d013      	beq.n	8002390 <_ZN15DynamixelSerial16readStatusPacketEv+0x1bc>
			} else if (header_match_count == 3) {
 8002368:	2e03      	cmp	r6, #3
 800236a:	d1e5      	bne.n	8002338 <_ZN15DynamixelSerial16readStatusPacketEv+0x164>
				if (rx_data == EXCEPTION_ADDITIONAL_BYTE) {
 800236c:	f1be 0ffd 	cmp.w	lr, #253	; 0xfd
 8002370:	f47f af4a 	bne.w	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
					header_match_count = 0;
 8002374:	2600      	movs	r6, #0
 8002376:	e7df      	b.n	8002338 <_ZN15DynamixelSerial16readStatusPacketEv+0x164>
				parameters[parameter_index] = rx_data;
 8002378:	ab22      	add	r3, sp, #136	; 0x88
 800237a:	4443      	add	r3, r8
				if (rx_data == HEADER1) header_match_count++;
 800237c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				parameters[parameter_index] = rx_data;
 8002380:	f803 ec80 	strb.w	lr, [r3, #-128]
				parameter_index++;
 8002384:	f108 0801 	add.w	r8, r8, #1
				if (rx_data == HEADER1) header_match_count++;
 8002388:	bf14      	ite	ne
 800238a:	2600      	movne	r6, #0
 800238c:	2602      	moveq	r6, #2
 800238e:	e7d3      	b.n	8002338 <_ZN15DynamixelSerial16readStatusPacketEv+0x164>
				parameters[parameter_index] = rx_data;
 8002390:	ab22      	add	r3, sp, #136	; 0x88
 8002392:	4443      	add	r3, r8
				if (rx_data == HEADER2) header_match_count++;
 8002394:	f1be 0ffd 	cmp.w	lr, #253	; 0xfd
				parameters[parameter_index] = rx_data;
 8002398:	f803 ec80 	strb.w	lr, [r3, #-128]
				parameter_index++;
 800239c:	f108 0801 	add.w	r8, r8, #1
				if (rx_data == HEADER2) header_match_count++;
 80023a0:	bf14      	ite	ne
 80023a2:	2600      	movne	r6, #0
 80023a4:	2603      	moveq	r6, #3
 80023a6:	e7c7      	b.n	8002338 <_ZN15DynamixelSerial16readStatusPacketEv+0x164>
			receive_data[loop_count] = rx_data;
 80023a8:	aa22      	add	r2, sp, #136	; 0x88
 80023aa:	19d0      	adds	r0, r2, r7
 80023ac:	f800 ec40 	strb.w	lr, [r0, #-64]
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80023b0:	461a      	mov	r2, r3
 80023b2:	f10d 0107 	add.w	r1, sp, #7
 80023b6:	6820      	ldr	r0, [r4, #0]
			loop_count++;
 80023b8:	eb07 0803 	add.w	r8, r7, r3
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80023bc:	f003 fae4 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 80023c0:	2803      	cmp	r0, #3
 80023c2:	f43f af21 	beq.w	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80023c6:	2301      	movs	r3, #1
 80023c8:	f10d 0107 	add.w	r1, sp, #7
 80023cc:	461a      	mov	r2, r3
 80023ce:	6820      	ldr	r0, [r4, #0]
			checksum = rx_data;
 80023d0:	f89d 6007 	ldrb.w	r6, [sp, #7]
		HAL_StatusTypeDef receive_status = HAL_UART_Receive(huart_, &rx_data, 1, 1);
 80023d4:	f003 fad8 	bl	8005988 <HAL_UART_Receive>
		if(receive_status == HAL_TIMEOUT) return -1;
 80023d8:	2803      	cmp	r0, #3
 80023da:	f43f af15 	beq.w	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
			checksum |= ((rx_data << 8) & 0xFF00);
 80023de:	f89d 7007 	ldrb.w	r7, [sp, #7]
 80023e2:	ea46 2707 	orr.w	r7, r6, r7, lsl #8
	for(int j = 0; j < data_blk_size; j++) {
 80023e6:	f1b8 0f00 	cmp.w	r8, #0
 80023ea:	f000 80d2 	beq.w	8002592 <_ZN15DynamixelSerial16readStatusPacketEv+0x3be>
 80023ee:	2300      	movs	r3, #0
 80023f0:	a912      	add	r1, sp, #72	; 0x48
 80023f2:	4e7b      	ldr	r6, [pc, #492]	; (80025e0 <_ZN15DynamixelSerial16readStatusPacketEv+0x40c>)
 80023f4:	eb01 0008 	add.w	r0, r1, r8
		int i = ((int)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 80023f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80023fc:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8002400:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
	for(int j = 0; j < data_blk_size; j++) {
 8002404:	4281      	cmp	r1, r0
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8002406:	ea82 2303 	eor.w	r3, r2, r3, lsl #8
 800240a:	b29b      	uxth	r3, r3
	for(int j = 0; j < data_blk_size; j++) {
 800240c:	d1f4      	bne.n	80023f8 <_ZN15DynamixelSerial16readStatusPacketEv+0x224>
			if (checksum == calcCRC16(0, receive_data, loop_count)) read_end_flag = true;
 800240e:	429f      	cmp	r7, r3
 8002410:	f47f aefa 	bne.w	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
 8002414:	f104 0330 	add.w	r3, r4, #48	; 0x30
      { return iterator(data() + _Nm); }
 8002418:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
	      _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
	__trip_count = (__last - __first) >> 2;
 800241c:	1afa      	subs	r2, r7, r3
 800241e:	4871      	ldr	r0, [pc, #452]	; (80025e4 <_ZN15DynamixelSerial16readStatusPacketEv+0x410>)
 8002420:	1112      	asrs	r2, r2, #4
 8002422:	fb00 f002 	mul.w	r0, r0, r2
 8002426:	1082      	asrs	r2, r0, #2

      for (; __trip_count > 0; --__trip_count)
 8002428:	2a00      	cmp	r2, #0
 800242a:	f340 80d0 	ble.w	80025ce <_ZN15DynamixelSerial16readStatusPacketEv+0x3fa>
	{
	  if (__pred(__first))
 800242e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002432:	42a9      	cmp	r1, r5
 8002434:	f000 80c9 	beq.w	80025ca <_ZN15DynamixelSerial16readStatusPacketEv+0x3f6>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8002438:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 800243c:	42a9      	cmp	r1, r5
	  ++__first;
 800243e:	bf08      	it	eq
 8002440:	f104 0160 	addeq.w	r1, r4, #96	; 0x60
	  if (__pred(__first))
 8002444:	d035      	beq.n	80024b2 <_ZN15DynamixelSerial16readStatusPacketEv+0x2de>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8002446:	f894 1090 	ldrb.w	r1, [r4, #144]	; 0x90
 800244a:	42a9      	cmp	r1, r5
	  ++__first;
 800244c:	bf08      	it	eq
 800244e:	f104 0190 	addeq.w	r1, r4, #144	; 0x90
	  if (__pred(__first))
 8002452:	d02e      	beq.n	80024b2 <_ZN15DynamixelSerial16readStatusPacketEv+0x2de>
	    return __first;
	  ++__first;

	  if (__pred(__first))
 8002454:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
 8002458:	42a9      	cmp	r1, r5
 800245a:	f000 80ba 	beq.w	80025d2 <_ZN15DynamixelSerial16readStatusPacketEv+0x3fe>
 800245e:	4639      	mov	r1, r7
 8002460:	e014      	b.n	800248c <_ZN15DynamixelSerial16readStatusPacketEv+0x2b8>
	  if (__pred(__first))
 8002462:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
 8002466:	42a8      	cmp	r0, r5
 8002468:	d023      	beq.n	80024b2 <_ZN15DynamixelSerial16readStatusPacketEv+0x2de>
	  if (__pred(__first))
 800246a:	f893 00f0 	ldrb.w	r0, [r3, #240]	; 0xf0
 800246e:	42a8      	cmp	r0, r5
 8002470:	f000 8091 	beq.w	8002596 <_ZN15DynamixelSerial16readStatusPacketEv+0x3c2>
	  if (__pred(__first))
 8002474:	f893 0120 	ldrb.w	r0, [r3, #288]	; 0x120
 8002478:	42a8      	cmp	r0, r5
 800247a:	f000 8092 	beq.w	80025a2 <_ZN15DynamixelSerial16readStatusPacketEv+0x3ce>
	  if (__pred(__first))
 800247e:	f893 0150 	ldrb.w	r0, [r3, #336]	; 0x150
 8002482:	42a8      	cmp	r0, r5
 8002484:	f000 808a 	beq.w	800259c <_ZN15DynamixelSerial16readStatusPacketEv+0x3c8>
 8002488:	460b      	mov	r3, r1
 800248a:	4631      	mov	r1, r6
      for (; __trip_count > 0; --__trip_count)
 800248c:	3a01      	subs	r2, #1
 800248e:	f503 76c0 	add.w	r6, r3, #384	; 0x180
 8002492:	d1e6      	bne.n	8002462 <_ZN15DynamixelSerial16readStatusPacketEv+0x28e>
 8002494:	1a7b      	subs	r3, r7, r1
 8002496:	4853      	ldr	r0, [pc, #332]	; (80025e4 <_ZN15DynamixelSerial16readStatusPacketEv+0x410>)
 8002498:	111b      	asrs	r3, r3, #4
 800249a:	fb00 f003 	mul.w	r0, r0, r3
	    return __first;
	  ++__first;
	}

      switch (__last - __first)
 800249e:	2802      	cmp	r0, #2
 80024a0:	f000 8089 	beq.w	80025b6 <_ZN15DynamixelSerial16readStatusPacketEv+0x3e2>
 80024a4:	2803      	cmp	r0, #3
 80024a6:	f000 8081 	beq.w	80025ac <_ZN15DynamixelSerial16readStatusPacketEv+0x3d8>
 80024aa:	2801      	cmp	r0, #1
 80024ac:	f000 8088 	beq.w	80025c0 <_ZN15DynamixelSerial16readStatusPacketEv+0x3ec>
	  if (__pred(__first))
	    return __first;
	  ++__first;
	case 0:
	default:
	  return __last;
 80024b0:	4639      	mov	r1, r7
	switch (status_packet_instruction_) {
 80024b2:	7923      	ldrb	r3, [r4, #4]
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	f63f aea7 	bhi.w	8002208 <_ZN15DynamixelSerial16readStatusPacketEv+0x34>
 80024ba:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <_ZN15DynamixelSerial16readStatusPacketEv+0x2ec>)
 80024bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c0:	0800257d 	.word	0x0800257d
 80024c4:	08002209 	.word	0x08002209
 80024c8:	08002557 	.word	0x08002557
 80024cc:	08002541 	.word	0x08002541
 80024d0:	08002533 	.word	0x08002533
 80024d4:	08002525 	.word	0x08002525
 80024d8:	08002209 	.word	0x08002209
 80024dc:	08002209 	.word	0x08002209
 80024e0:	08002209 	.word	0x08002209
 80024e4:	08002519 	.word	0x08002519
 80024e8:	0800250b 	.word	0x0800250b
 80024ec:	08002209 	.word	0x08002209
 80024f0:	080024f5 	.word	0x080024f5
		if (s != servo_.end()) {
 80024f4:	428f      	cmp	r7, r1
 80024f6:	d057      	beq.n	80025a8 <_ZN15DynamixelSerial16readStatusPacketEv+0x3d4>
			s->current_limit_ = ((parameters[1] << 8) & 0xFF00) | (parameters[0] & 0xFF);
 80024f8:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80024fc:	f89d 3008 	ldrb.w	r3, [sp, #8]
		return 0;
 8002500:	2000      	movs	r0, #0
			s->current_limit_ = ((parameters[1] << 8) & 0xFF00) | (parameters[0] & 0xFF);
 8002502:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002506:	84cb      	strh	r3, [r1, #38]	; 0x26
 8002508:	e680      	b.n	800220c <_ZN15DynamixelSerial16readStatusPacketEv+0x38>
		if (s != servo_.end()) {
 800250a:	428f      	cmp	r7, r1
 800250c:	d04c      	beq.n	80025a8 <_ZN15DynamixelSerial16readStatusPacketEv+0x3d4>
			s->hardware_error_status_ = ((parameters[3] << 24) & 0xFF000000) | ((parameters[2] << 16) & 0xFF0000) | ((parameters[1] << 8) & 0xFF00) | (parameters[0] & 0xFF);
 800250e:	f89d 3008 	ldrb.w	r3, [sp, #8]
		return 0;
 8002512:	2000      	movs	r0, #0
			s->hardware_error_status_ = ((parameters[3] << 24) & 0xFF000000) | ((parameters[2] << 16) & 0xFF0000) | ((parameters[1] << 8) & 0xFF00) | (parameters[0] & 0xFF);
 8002514:	774b      	strb	r3, [r1, #29]
 8002516:	e679      	b.n	800220c <_ZN15DynamixelSerial16readStatusPacketEv+0x38>
		if (s != servo_.end()) {
 8002518:	428f      	cmp	r7, r1
 800251a:	d045      	beq.n	80025a8 <_ZN15DynamixelSerial16readStatusPacketEv+0x3d4>
			s->homing_offset_ = ((parameters[3] << 24) & 0xFF000000) | ((parameters[2] << 16) & 0xFF0000) | ((parameters[1] << 8) & 0xFF00) | (parameters[0] & 0xFF);
 800251c:	9b02      	ldr	r3, [sp, #8]
		return 0;
 800251e:	2000      	movs	r0, #0
			s->homing_offset_ = ((parameters[3] << 24) & 0xFF000000) | ((parameters[2] << 16) & 0xFF0000) | ((parameters[1] << 8) & 0xFF00) | (parameters[0] & 0xFF);
 8002520:	604b      	str	r3, [r1, #4]
 8002522:	e673      	b.n	800220c <_ZN15DynamixelSerial16readStatusPacketEv+0x38>
		if (s != servo_.end()) {
 8002524:	428f      	cmp	r7, r1
 8002526:	d03f      	beq.n	80025a8 <_ZN15DynamixelSerial16readStatusPacketEv+0x3d4>
			s->moving_ = parameters[0];
 8002528:	f89d 3008 	ldrb.w	r3, [sp, #8]
		return 0;
 800252c:	2000      	movs	r0, #0
			s->moving_ = parameters[0];
 800252e:	770b      	strb	r3, [r1, #28]
 8002530:	e66c      	b.n	800220c <_ZN15DynamixelSerial16readStatusPacketEv+0x38>
		if (s != servo_.end()) {
 8002532:	428f      	cmp	r7, r1
 8002534:	d038      	beq.n	80025a8 <_ZN15DynamixelSerial16readStatusPacketEv+0x3d4>
			s->present_temp_ = parameters[0];
 8002536:	f89d 3008 	ldrb.w	r3, [sp, #8]
		return 0;
 800253a:	2000      	movs	r0, #0
			s->present_temp_ = parameters[0];
 800253c:	760b      	strb	r3, [r1, #24]
 800253e:	e665      	b.n	800220c <_ZN15DynamixelSerial16readStatusPacketEv+0x38>
		if (s != servo_.end()) {
 8002540:	428f      	cmp	r7, r1
 8002542:	d031      	beq.n	80025a8 <_ZN15DynamixelSerial16readStatusPacketEv+0x3d4>
			s->present_current_ = ((parameters[1] << 8) & 0xFF00) | (parameters[0] & 0xFF);
 8002544:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8002548:	f89d 3008 	ldrb.w	r3, [sp, #8]
		return 0;
 800254c:	2000      	movs	r0, #0
			s->present_current_ = ((parameters[1] << 8) & 0xFF00) | (parameters[0] & 0xFF);
 800254e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002552:	834b      	strh	r3, [r1, #26]
 8002554:	e65a      	b.n	800220c <_ZN15DynamixelSerial16readStatusPacketEv+0x38>
		if (s != servo_.end()) {
 8002556:	428f      	cmp	r7, r1
		int32_t present_position = ((parameters[3] << 24) & 0xFF000000) | ((parameters[2] << 16) & 0xFF0000) | ((parameters[1] << 8) & 0xFF00) | (parameters[0] & 0xFF);
 8002558:	9b02      	ldr	r3, [sp, #8]
		if (s != servo_.end()) {
 800255a:	d025      	beq.n	80025a8 <_ZN15DynamixelSerial16readStatusPacketEv+0x3d4>
			if (s->first_get_pos_flag_) {
 800255c:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
			s->present_position_ = present_position;
 8002560:	610b      	str	r3, [r1, #16]
			if (s->first_get_pos_flag_) {
 8002562:	b30a      	cbz	r2, 80025a8 <_ZN15DynamixelSerial16readStatusPacketEv+0x3d4>
				if (present_position < 0) {
 8002564:	2b00      	cmp	r3, #0
 8002566:	db37      	blt.n	80025d8 <_ZN15DynamixelSerial16readStatusPacketEv+0x404>
				} else if (present_position > 4095) {
 8002568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
					s->overflow_offset_value_ = 0;
 800256c:	bfb4      	ite	lt
 800256e:	2300      	movlt	r3, #0
					s->overflow_offset_value_ = -4096;
 8002570:	4b1d      	ldrge	r3, [pc, #116]	; (80025e8 <_ZN15DynamixelSerial16readStatusPacketEv+0x414>)
					s->overflow_offset_value_ = 0;
 8002572:	614b      	str	r3, [r1, #20]
				s->first_get_pos_flag_ = false;
 8002574:	2000      	movs	r0, #0
 8002576:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
 800257a:	e647      	b.n	800220c <_ZN15DynamixelSerial16readStatusPacketEv+0x38>
		servo_[servo_num_++].id_ = servo_id;
 800257c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	    return 0;
 800257e:	2000      	movs	r0, #0
		servo_[servo_num_++].id_ = servo_id;
 8002580:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002584:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8002588:	3301      	adds	r3, #1
 800258a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800258c:	f882 5030 	strb.w	r5, [r2, #48]	; 0x30
	    return 0;
 8002590:	e63c      	b.n	800220c <_ZN15DynamixelSerial16readStatusPacketEv+0x38>
	for(int j = 0; j < data_blk_size; j++) {
 8002592:	4643      	mov	r3, r8
 8002594:	e73b      	b.n	800240e <_ZN15DynamixelSerial16readStatusPacketEv+0x23a>
	  ++__first;
 8002596:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800259a:	e78a      	b.n	80024b2 <_ZN15DynamixelSerial16readStatusPacketEv+0x2de>
	  ++__first;
 800259c:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 80025a0:	e787      	b.n	80024b2 <_ZN15DynamixelSerial16readStatusPacketEv+0x2de>
	  ++__first;
 80025a2:	f503 7190 	add.w	r1, r3, #288	; 0x120
 80025a6:	e784      	b.n	80024b2 <_ZN15DynamixelSerial16readStatusPacketEv+0x2de>
	    return 0;
 80025a8:	2000      	movs	r0, #0
 80025aa:	e62f      	b.n	800220c <_ZN15DynamixelSerial16readStatusPacketEv+0x38>
	  if (__pred(__first))
 80025ac:	780b      	ldrb	r3, [r1, #0]
 80025ae:	42ab      	cmp	r3, r5
 80025b0:	f43f af7f 	beq.w	80024b2 <_ZN15DynamixelSerial16readStatusPacketEv+0x2de>
	  ++__first;
 80025b4:	3130      	adds	r1, #48	; 0x30
	  if (__pred(__first))
 80025b6:	780b      	ldrb	r3, [r1, #0]
 80025b8:	42ab      	cmp	r3, r5
 80025ba:	f43f af7a 	beq.w	80024b2 <_ZN15DynamixelSerial16readStatusPacketEv+0x2de>
	  ++__first;
 80025be:	3130      	adds	r1, #48	; 0x30
	  if (__pred(__first))
 80025c0:	780b      	ldrb	r3, [r1, #0]
	  return __last;
 80025c2:	42ab      	cmp	r3, r5
 80025c4:	bf18      	it	ne
 80025c6:	4639      	movne	r1, r7
 80025c8:	e773      	b.n	80024b2 <_ZN15DynamixelSerial16readStatusPacketEv+0x2de>
	  if (__pred(__first))
 80025ca:	4619      	mov	r1, r3
 80025cc:	e771      	b.n	80024b2 <_ZN15DynamixelSerial16readStatusPacketEv+0x2de>
      for (; __trip_count > 0; --__trip_count)
 80025ce:	4619      	mov	r1, r3
 80025d0:	e765      	b.n	800249e <_ZN15DynamixelSerial16readStatusPacketEv+0x2ca>
	  ++__first;
 80025d2:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 80025d6:	e76c      	b.n	80024b2 <_ZN15DynamixelSerial16readStatusPacketEv+0x2de>
					s->overflow_offset_value_ = 4096;
 80025d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025dc:	614b      	str	r3, [r1, #20]
 80025de:	e7c9      	b.n	8002574 <_ZN15DynamixelSerial16readStatusPacketEv+0x3a0>
 80025e0:	080060d8 	.word	0x080060d8
 80025e4:	aaaaaaab 	.word	0xaaaaaaab
 80025e8:	fffff000 	.word	0xfffff000

080025ec <_ZN15DynamixelSerial4pingEv>:
{
 80025ec:	b530      	push	{r4, r5, lr}
  transmitInstructionPacket(id, PING_LEN, COMMAND_PING, nullptr);
 80025ee:	2500      	movs	r5, #0
{
 80025f0:	4604      	mov	r4, r0
 80025f2:	b083      	sub	sp, #12
  transmitInstructionPacket(id, PING_LEN, COMMAND_PING, nullptr);
 80025f4:	9500      	str	r5, [sp, #0]
 80025f6:	2301      	movs	r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	21fe      	movs	r1, #254	; 0xfe
 80025fc:	f7ff fd56 	bl	80020ac <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh>
	status_packet_instruction_ = INST_PING;
 8002600:	7125      	strb	r5, [r4, #4]
		int ping_result = readStatusPacket();
 8002602:	4620      	mov	r0, r4
 8002604:	f7ff fde6 	bl	80021d4 <_ZN15DynamixelSerial16readStatusPacketEv>
		if (ping_result == -1) return;
 8002608:	3001      	adds	r0, #1
 800260a:	d1fa      	bne.n	8002602 <_ZN15DynamixelSerial4pingEv+0x16>
}
 800260c:	b003      	add	sp, #12
 800260e:	bd30      	pop	{r4, r5, pc}

08002610 <_ZN15DynamixelSerial8cmdWriteEhtPhi>:
{
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	b092      	sub	sp, #72	; 0x48
 8002614:	9e16      	ldr	r6, [sp, #88]	; 0x58
	parameters[1] = (address >> 8) & 0xFF;
 8002616:	0a14      	lsrs	r4, r2, #8
	for (int i = 0; i < param_len; i++) {
 8002618:	2e00      	cmp	r6, #0
	parameters[0] = address & 0xFF;
 800261a:	f88d 2008 	strb.w	r2, [sp, #8]
	parameters[1] = (address >> 8) & 0xFF;
 800261e:	f88d 4009 	strb.w	r4, [sp, #9]
	for (int i = 0; i < param_len; i++) {
 8002622:	dd0a      	ble.n	800263a <_ZN15DynamixelSerial8cmdWriteEhtPhi+0x2a>
 8002624:	1e75      	subs	r5, r6, #1
 8002626:	441d      	add	r5, r3
 8002628:	f10d 0209 	add.w	r2, sp, #9
 800262c:	3b01      	subs	r3, #1
		parameters[i + 2] = param[i];
 800262e:	f813 4f01 	ldrb.w	r4, [r3, #1]!
	for (int i = 0; i < param_len; i++) {
 8002632:	42ab      	cmp	r3, r5
		parameters[i + 2] = param[i];
 8002634:	f802 4f01 	strb.w	r4, [r2, #1]!
	for (int i = 0; i < param_len; i++) {
 8002638:	d1f9      	bne.n	800262e <_ZN15DynamixelSerial8cmdWriteEhtPhi+0x1e>
	transmitInstructionPacket(id, param_len + 5, COMMAND_WRITE, parameters);
 800263a:	ab02      	add	r3, sp, #8
 800263c:	1d72      	adds	r2, r6, #5
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	b292      	uxth	r2, r2
 8002642:	2303      	movs	r3, #3
 8002644:	f7ff fd32 	bl	80020ac <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh>
}
 8002648:	b012      	add	sp, #72	; 0x48
 800264a:	bd70      	pop	{r4, r5, r6, pc}

0800264c <_ZN15DynamixelSerial11cmdSyncReadEtt>:
{
 800264c:	b530      	push	{r4, r5, lr}
	for (unsigned int i = 0; i < servo_num_; i++) {
 800264e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
{
 8002650:	b093      	sub	sp, #76	; 0x4c
	parameters[1] = (address >> 8) & 0xFF;
 8002652:	0a0d      	lsrs	r5, r1, #8
	parameters[3] = (byte_size >> 8) & 0xFF;
 8002654:	0a13      	lsrs	r3, r2, #8
	parameters[0] = address & 0xFF;
 8002656:	f88d 1008 	strb.w	r1, [sp, #8]
	parameters[1] = (address >> 8) & 0xFF;
 800265a:	f88d 5009 	strb.w	r5, [sp, #9]
	parameters[2] = byte_size & 0xFF;
 800265e:	f88d 200a 	strb.w	r2, [sp, #10]
	parameters[3] = (byte_size >> 8) & 0xFF;
 8002662:	f88d 300b 	strb.w	r3, [sp, #11]
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002666:	b1ac      	cbz	r4, 8002694 <_ZN15DynamixelSerial11cmdSyncReadEtt+0x48>
 8002668:	4603      	mov	r3, r0
 800266a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800266e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8002672:	aa03      	add	r2, sp, #12
		parameters[param_idx++] = servo_[i].id_;
 8002674:	f813 1f30 	ldrb.w	r1, [r3, #48]!
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002678:	42ab      	cmp	r3, r5
		parameters[param_idx++] = servo_[i].id_;
 800267a:	f802 1b01 	strb.w	r1, [r2], #1
	for (unsigned int i = 0; i < servo_num_; i++) {
 800267e:	d1f9      	bne.n	8002674 <_ZN15DynamixelSerial11cmdSyncReadEtt+0x28>
 8002680:	1de2      	adds	r2, r4, #7
 8002682:	b292      	uxth	r2, r2
	transmitInstructionPacket(BROADCAST_ID, param_idx + 3, COMMAND_SYNC_READ, parameters);
 8002684:	ab02      	add	r3, sp, #8
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	21fe      	movs	r1, #254	; 0xfe
 800268a:	2382      	movs	r3, #130	; 0x82
 800268c:	f7ff fd0e 	bl	80020ac <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh>
}
 8002690:	b013      	add	sp, #76	; 0x4c
 8002692:	bd30      	pop	{r4, r5, pc}
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002694:	2207      	movs	r2, #7
 8002696:	e7f5      	b.n	8002684 <_ZN15DynamixelSerial11cmdSyncReadEtt+0x38>

08002698 <_ZN15DynamixelSerial12cmdSyncWriteEtPhi>:
{
 8002698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (unsigned int i = 0; i < servo_num_; i++) {
 800269c:	f8d0 a02c 	ldr.w	sl, [r0, #44]	; 0x2c
{
 80026a0:	b093      	sub	sp, #76	; 0x4c
	parameters[1] = (address >> 8) & 0xFF;
 80026a2:	0a0d      	lsrs	r5, r1, #8
	parameters[3] = (param_len >> 8) & 0xFF;
 80026a4:	121c      	asrs	r4, r3, #8
	parameters[0] = address & 0xFF;
 80026a6:	f88d 1008 	strb.w	r1, [sp, #8]
	parameters[1] = (address >> 8) & 0xFF;
 80026aa:	f88d 5009 	strb.w	r5, [sp, #9]
	parameters[2] = param_len & 0xFF;
 80026ae:	f88d 300a 	strb.w	r3, [sp, #10]
	parameters[3] = (param_len >> 8) & 0xFF;
 80026b2:	f88d 400b 	strb.w	r4, [sp, #11]
	for (unsigned int i = 0; i < servo_num_; i++) {
 80026b6:	f1ba 0f00 	cmp.w	sl, #0
 80026ba:	d032      	beq.n	8002722 <_ZN15DynamixelSerial12cmdSyncWriteEtPhi+0x8a>
 80026bc:	f04f 0e00 	mov.w	lr, #0
 80026c0:	4684      	mov	ip, r0
 80026c2:	4677      	mov	r7, lr
 80026c4:	2404      	movs	r4, #4
 80026c6:	f10d 0908 	add.w	r9, sp, #8
 80026ca:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
		parameters[all_param_idx++] = servo_[i].id_;
 80026ce:	f89c 5030 	ldrb.w	r5, [ip, #48]	; 0x30
 80026d2:	a912      	add	r1, sp, #72	; 0x48
 80026d4:	4421      	add	r1, r4
		for (int j = 0; j < param_len; j++) {
 80026d6:	2b00      	cmp	r3, #0
		parameters[all_param_idx++] = servo_[i].id_;
 80026d8:	f801 5c40 	strb.w	r5, [r1, #-64]
 80026dc:	f104 0801 	add.w	r8, r4, #1
		for (int j = 0; j < param_len; j++) {
 80026e0:	dd23      	ble.n	800272a <_ZN15DynamixelSerial12cmdSyncWriteEtPhi+0x92>
 80026e2:	1e79      	subs	r1, r7, #1
 80026e4:	eb0b 0607 	add.w	r6, fp, r7
 80026e8:	444c      	add	r4, r9
 80026ea:	4411      	add	r1, r2
 80026ec:	4416      	add	r6, r2
			parameters[all_param_idx++] = param[param_idx++];
 80026ee:	f811 5f01 	ldrb.w	r5, [r1, #1]!
		for (int j = 0; j < param_len; j++) {
 80026f2:	42b1      	cmp	r1, r6
			parameters[all_param_idx++] = param[param_idx++];
 80026f4:	f804 5f01 	strb.w	r5, [r4, #1]!
		for (int j = 0; j < param_len; j++) {
 80026f8:	d1f9      	bne.n	80026ee <_ZN15DynamixelSerial12cmdSyncWriteEtPhi+0x56>
 80026fa:	eb08 0403 	add.w	r4, r8, r3
 80026fe:	441f      	add	r7, r3
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002700:	f10e 0e01 	add.w	lr, lr, #1
 8002704:	45d6      	cmp	lr, sl
 8002706:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
 800270a:	d1e0      	bne.n	80026ce <_ZN15DynamixelSerial12cmdSyncWriteEtPhi+0x36>
 800270c:	3403      	adds	r4, #3
 800270e:	b2a2      	uxth	r2, r4
	transmitInstructionPacket(BROADCAST_ID, all_param_idx + 3, COMMAND_SYNC_WRITE, parameters);
 8002710:	f8cd 9000 	str.w	r9, [sp]
 8002714:	2383      	movs	r3, #131	; 0x83
 8002716:	21fe      	movs	r1, #254	; 0xfe
 8002718:	f7ff fcc8 	bl	80020ac <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh>
}
 800271c:	b013      	add	sp, #76	; 0x4c
 800271e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002722:	2207      	movs	r2, #7
 8002724:	f10d 0908 	add.w	r9, sp, #8
 8002728:	e7f2      	b.n	8002710 <_ZN15DynamixelSerial12cmdSyncWriteEtPhi+0x78>
		parameters[all_param_idx++] = servo_[i].id_;
 800272a:	4644      	mov	r4, r8
 800272c:	e7e8      	b.n	8002700 <_ZN15DynamixelSerial12cmdSyncWriteEtPhi+0x68>
 800272e:	bf00      	nop

08002730 <_ZN15DynamixelSerial6updateEv>:
{
 8002730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002732:	b093      	sub	sp, #76	; 0x4c
 8002734:	4604      	mov	r4, r0
	uint32_t current_time = HAL_GetTick();
 8002736:	f000 ff41 	bl	80035bc <HAL_GetTick>
    	if((current_time + SET_POS_OFFSET) % SET_POS_DU == 0) {
 800273a:	4bb5      	ldr	r3, [pc, #724]	; (8002a10 <_ZN15DynamixelSerial6updateEv+0x2e0>)
 800273c:	1c82      	adds	r2, r0, #2
 800273e:	fba3 1302 	umull	r1, r3, r3, r2
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002748:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800274c:	f000 80dc 	beq.w	8002908 <_ZN15DynamixelSerial6updateEv+0x1d8>
 8002750:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
 8002754:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
    	if ((current_time + GET_POS_OFFSET) % GET_POS_DU == 0) {
 8002758:	4aad      	ldr	r2, [pc, #692]	; (8002a10 <_ZN15DynamixelSerial6updateEv+0x2e0>)
 800275a:	fba2 5200 	umull	r5, r2, r2, r0
 800275e:	0912      	lsrs	r2, r2, #4
 8002760:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002764:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8002768:	d116      	bne.n	8002798 <_ZN15DynamixelSerial6updateEv+0x68>
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	4291      	cmp	r1, r2
 800276e:	d013      	beq.n	8002798 <_ZN15DynamixelSerial6updateEv+0x68>
 8002770:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
 8002772:	1e6e      	subs	r6, r5, #1
 8002774:	42b3      	cmp	r3, r6
 8002776:	f000 811b 	beq.w	80029b0 <_ZN15DynamixelSerial6updateEv+0x280>
	second = __p.second;
 800277a:	2700      	movs	r7, #0
 800277c:	eb04 0643 	add.w	r6, r4, r3, lsl #1
    byte_to_add_++;
 8002780:	b213      	sxth	r3, r2
    if (byte_to_add_ == buffer_length_)
 8002782:	429d      	cmp	r5, r3
	first = __p.first;
 8002784:	f04f 0e02 	mov.w	lr, #2
        byte_to_add_ = 0;
 8002788:	bf08      	it	eq
 800278a:	463b      	moveq	r3, r7
 800278c:	f886 e006 	strb.w	lr, [r6, #6]
	second = __p.second;
 8002790:	71f7      	strb	r7, [r6, #7]
    byte_to_add_++;
 8002792:	bf14      	ite	ne
 8002794:	8523      	strhne	r3, [r4, #40]	; 0x28
        byte_to_add_ = 0;
 8002796:	8527      	strheq	r7, [r4, #40]	; 0x28
    	if ((current_time + GET_LOAD_OFFSET)% GET_LOAD_DU == 0) {
 8002798:	26c8      	movs	r6, #200	; 0xc8
 800279a:	4a9e      	ldr	r2, [pc, #632]	; (8002a14 <_ZN15DynamixelSerial6updateEv+0x2e4>)
 800279c:	f100 0514 	add.w	r5, r0, #20
 80027a0:	fba2 7205 	umull	r7, r2, r2, r5
 80027a4:	0992      	lsrs	r2, r2, #6
 80027a6:	fb06 5212 	mls	r2, r6, r2, r5
 80027aa:	b9ba      	cbnz	r2, 80027dc <_ZN15DynamixelSerial6updateEv+0xac>
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	4291      	cmp	r1, r2
 80027b0:	f000 80c5 	beq.w	800293e <_ZN15DynamixelSerial6updateEv+0x20e>
 80027b4:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
 80027b6:	1e6e      	subs	r6, r5, #1
 80027b8:	42b3      	cmp	r3, r6
 80027ba:	f000 80fd 	beq.w	80029b8 <_ZN15DynamixelSerial6updateEv+0x288>
 80027be:	2700      	movs	r7, #0
 80027c0:	eb04 0643 	add.w	r6, r4, r3, lsl #1
    byte_to_add_++;
 80027c4:	b213      	sxth	r3, r2
    if (byte_to_add_ == buffer_length_)
 80027c6:	429d      	cmp	r5, r3
	first = __p.first;
 80027c8:	f04f 0e03 	mov.w	lr, #3
        byte_to_add_ = 0;
 80027cc:	bf08      	it	eq
 80027ce:	463b      	moveq	r3, r7
 80027d0:	f886 e006 	strb.w	lr, [r6, #6]
	second = __p.second;
 80027d4:	71f7      	strb	r7, [r6, #7]
    byte_to_add_++;
 80027d6:	bf14      	ite	ne
 80027d8:	8523      	strhne	r3, [r4, #40]	; 0x28
        byte_to_add_ = 0;
 80027da:	8527      	strheq	r7, [r4, #40]	; 0x28
    	if ((current_time + GET_TEMP_OFFSET)% GET_TEMP_DU == 0) {
 80027dc:	26c8      	movs	r6, #200	; 0xc8
 80027de:	4a8d      	ldr	r2, [pc, #564]	; (8002a14 <_ZN15DynamixelSerial6updateEv+0x2e4>)
 80027e0:	f100 0528 	add.w	r5, r0, #40	; 0x28
 80027e4:	fba2 7205 	umull	r7, r2, r2, r5
 80027e8:	0992      	lsrs	r2, r2, #6
 80027ea:	fb06 5212 	mls	r2, r6, r2, r5
 80027ee:	b9ba      	cbnz	r2, 8002820 <_ZN15DynamixelSerial6updateEv+0xf0>
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	4291      	cmp	r1, r2
 80027f4:	f000 80a3 	beq.w	800293e <_ZN15DynamixelSerial6updateEv+0x20e>
 80027f8:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
 80027fa:	1e6e      	subs	r6, r5, #1
 80027fc:	42b3      	cmp	r3, r6
 80027fe:	f000 80cb 	beq.w	8002998 <_ZN15DynamixelSerial6updateEv+0x268>
 8002802:	2700      	movs	r7, #0
 8002804:	eb04 0643 	add.w	r6, r4, r3, lsl #1
    byte_to_add_++;
 8002808:	b213      	sxth	r3, r2
    if (byte_to_add_ == buffer_length_)
 800280a:	429d      	cmp	r5, r3
	first = __p.first;
 800280c:	f04f 0e04 	mov.w	lr, #4
        byte_to_add_ = 0;
 8002810:	bf08      	it	eq
 8002812:	463b      	moveq	r3, r7
 8002814:	f886 e006 	strb.w	lr, [r6, #6]
	second = __p.second;
 8002818:	71f7      	strb	r7, [r6, #7]
    byte_to_add_++;
 800281a:	bf14      	ite	ne
 800281c:	8523      	strhne	r3, [r4, #40]	; 0x28
        byte_to_add_ = 0;
 800281e:	8527      	strheq	r7, [r4, #40]	; 0x28
    	if ((current_time + GET_MOVE_OFFSET)% GET_MOVE_DU == 0) {
 8002820:	26c8      	movs	r6, #200	; 0xc8
 8002822:	4a7c      	ldr	r2, [pc, #496]	; (8002a14 <_ZN15DynamixelSerial6updateEv+0x2e4>)
 8002824:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 8002828:	fba2 7205 	umull	r7, r2, r2, r5
 800282c:	0992      	lsrs	r2, r2, #6
 800282e:	fb06 5212 	mls	r2, r6, r2, r5
 8002832:	b9b2      	cbnz	r2, 8002862 <_ZN15DynamixelSerial6updateEv+0x132>
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	4291      	cmp	r1, r2
 8002838:	d032      	beq.n	80028a0 <_ZN15DynamixelSerial6updateEv+0x170>
 800283a:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
 800283c:	1e6e      	subs	r6, r5, #1
 800283e:	42b3      	cmp	r3, r6
 8002840:	f000 80be 	beq.w	80029c0 <_ZN15DynamixelSerial6updateEv+0x290>
 8002844:	2700      	movs	r7, #0
 8002846:	eb04 0643 	add.w	r6, r4, r3, lsl #1
    byte_to_add_++;
 800284a:	b213      	sxth	r3, r2
    if (byte_to_add_ == buffer_length_)
 800284c:	429d      	cmp	r5, r3
	first = __p.first;
 800284e:	f04f 0e05 	mov.w	lr, #5
        byte_to_add_ = 0;
 8002852:	bf08      	it	eq
 8002854:	463b      	moveq	r3, r7
 8002856:	f886 e006 	strb.w	lr, [r6, #6]
	second = __p.second;
 800285a:	71f7      	strb	r7, [r6, #7]
    byte_to_add_++;
 800285c:	bf14      	ite	ne
 800285e:	8523      	strhne	r3, [r4, #40]	; 0x28
        byte_to_add_ = 0;
 8002860:	8527      	strheq	r7, [r4, #40]	; 0x28
    	if ((current_time + GET_HARDWARE_ERROR_STATUS_OFFSET)% GET_HARDWARE_ERROR_STATUS_DU == 0) {
 8002862:	25c8      	movs	r5, #200	; 0xc8
 8002864:	4a6b      	ldr	r2, [pc, #428]	; (8002a14 <_ZN15DynamixelSerial6updateEv+0x2e4>)
 8002866:	3050      	adds	r0, #80	; 0x50
 8002868:	fba2 6200 	umull	r6, r2, r2, r0
 800286c:	0992      	lsrs	r2, r2, #6
 800286e:	fb05 0012 	mls	r0, r5, r2, r0
 8002872:	b9a8      	cbnz	r0, 80028a0 <_ZN15DynamixelSerial6updateEv+0x170>
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	4291      	cmp	r1, r2
 8002878:	d012      	beq.n	80028a0 <_ZN15DynamixelSerial6updateEv+0x170>
 800287a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800287c:	1e45      	subs	r5, r0, #1
 800287e:	42ab      	cmp	r3, r5
 8002880:	f000 808e 	beq.w	80029a0 <_ZN15DynamixelSerial6updateEv+0x270>
 8002884:	2600      	movs	r6, #0
 8002886:	eb04 0543 	add.w	r5, r4, r3, lsl #1
    byte_to_add_++;
 800288a:	b213      	sxth	r3, r2
    if (byte_to_add_ == buffer_length_)
 800288c:	4298      	cmp	r0, r3
	first = __p.first;
 800288e:	f04f 070a 	mov.w	r7, #10
        byte_to_add_ = 0;
 8002892:	bf08      	it	eq
 8002894:	4633      	moveq	r3, r6
 8002896:	71af      	strb	r7, [r5, #6]
	second = __p.second;
 8002898:	71ee      	strb	r6, [r5, #7]
    byte_to_add_++;
 800289a:	bf14      	ite	ne
 800289c:	8523      	strhne	r3, [r4, #40]	; 0x28
        byte_to_add_ = 0;
 800289e:	8526      	strheq	r6, [r4, #40]	; 0x28
    if (byte_in_progress_ != byte_to_add_)
 80028a0:	428b      	cmp	r3, r1
 80028a2:	d02f      	beq.n	8002904 <_ZN15DynamixelSerial6updateEv+0x1d4>
        byte_in_progress_++;
 80028a4:	1c4a      	adds	r2, r1, #1
        if (byte_in_progress_ == buffer_length_)
 80028a6:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        byte_in_progress_++;
 80028a8:	b212      	sxth	r2, r2
 80028aa:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (byte_in_progress_ == buffer_length_)
 80028ae:	4282      	cmp	r2, r0
	first = __p.first;
 80028b0:	798b      	ldrb	r3, [r1, #6]
	second = __p.second;
 80028b2:	79c9      	ldrb	r1, [r1, #7]
        byte_in_progress_++;
 80028b4:	84e2      	strh	r2, [r4, #38]	; 0x26
        if (byte_in_progress_ == buffer_length_)
 80028b6:	d04e      	beq.n	8002956 <_ZN15DynamixelSerial6updateEv+0x226>
    	switch (instruction.first) {
 80028b8:	3b01      	subs	r3, #1
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d822      	bhi.n	8002904 <_ZN15DynamixelSerial6updateEv+0x1d4>
 80028be:	e8df f013 	tbh	[pc, r3, lsl #1]
 80028c2:	004d      	.short	0x004d
 80028c4:	0097009f 	.word	0x0097009f
 80028c8:	01230083 	.word	0x01230083
 80028cc:	000d0111 	.word	0x000d0111
 80028d0:	002100f1 	.word	0x002100f1
 80028d4:	00c500e9 	.word	0x00c500e9
 80028d8:	00ab0021 	.word	0x00ab0021
	cmdWrite(servo_[servo_index].id_, CTRL_CURRENT_LIMIT, parameters, CURRENT_LIMIT_BYTE_LEN);
 80028dc:	2202      	movs	r2, #2
	uint16_t current_limit = servo_[servo_index].current_limit_;
 80028de:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80028e2:	eb04 1301 	add.w	r3, r4, r1, lsl #4
 80028e6:	f8b3 5056 	ldrh.w	r5, [r3, #86]	; 0x56
	cmdWrite(servo_[servo_index].id_, CTRL_CURRENT_LIMIT, parameters, CURRENT_LIMIT_BYTE_LEN);
 80028ea:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80028ee:	4620      	mov	r0, r4
 80028f0:	9200      	str	r2, [sp, #0]
	parameters[1] = (uint8_t)((current_limit >> 8) & 0xFF);
 80028f2:	0a2c      	lsrs	r4, r5, #8
	cmdWrite(servo_[servo_index].id_, CTRL_CURRENT_LIMIT, parameters, CURRENT_LIMIT_BYTE_LEN);
 80028f4:	ab02      	add	r3, sp, #8
 80028f6:	2226      	movs	r2, #38	; 0x26
	parameters[0] = (uint8_t)(current_limit & 0xFF);
 80028f8:	f88d 5008 	strb.w	r5, [sp, #8]
	parameters[1] = (uint8_t)((current_limit >> 8) & 0xFF);
 80028fc:	f88d 4009 	strb.w	r4, [sp, #9]
	cmdWrite(servo_[servo_index].id_, CTRL_CURRENT_LIMIT, parameters, CURRENT_LIMIT_BYTE_LEN);
 8002900:	f7ff fe86 	bl	8002610 <_ZN15DynamixelSerial8cmdWriteEhtPhi>
}
 8002904:	b013      	add	sp, #76	; 0x4c
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 8002908:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800290c:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	4291      	cmp	r1, r2
 8002914:	f43f af20 	beq.w	8002758 <_ZN15DynamixelSerial6updateEv+0x28>
 8002918:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
 800291a:	1e6e      	subs	r6, r5, #1
 800291c:	42b3      	cmp	r3, r6
 800291e:	d043      	beq.n	80029a8 <_ZN15DynamixelSerial6updateEv+0x278>
 8002920:	2700      	movs	r7, #0
	first = __p.first;
 8002922:	f04f 0e01 	mov.w	lr, #1
 8002926:	eb04 0643 	add.w	r6, r4, r3, lsl #1
    byte_to_add_++;
 800292a:	b213      	sxth	r3, r2
    if (byte_to_add_ == buffer_length_)
 800292c:	429d      	cmp	r5, r3
 800292e:	f886 e006 	strb.w	lr, [r6, #6]
	second = __p.second;
 8002932:	71f7      	strb	r7, [r6, #7]
        byte_to_add_ = 0;
 8002934:	bf0a      	itet	eq
 8002936:	463b      	moveq	r3, r7
    byte_to_add_++;
 8002938:	8523      	strhne	r3, [r4, #40]	; 0x28
        byte_to_add_ = 0;
 800293a:	8527      	strheq	r7, [r4, #40]	; 0x28
 800293c:	e70c      	b.n	8002758 <_ZN15DynamixelSerial6updateEv+0x28>
    	if ((current_time + GET_MOVE_OFFSET)% GET_MOVE_DU == 0) {
 800293e:	26c8      	movs	r6, #200	; 0xc8
 8002940:	4a34      	ldr	r2, [pc, #208]	; (8002a14 <_ZN15DynamixelSerial6updateEv+0x2e4>)
 8002942:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 8002946:	fba2 7205 	umull	r7, r2, r2, r5
 800294a:	0992      	lsrs	r2, r2, #6
 800294c:	fb06 5212 	mls	r2, r6, r2, r5
 8002950:	2a00      	cmp	r2, #0
 8002952:	d186      	bne.n	8002862 <_ZN15DynamixelSerial6updateEv+0x132>
 8002954:	e7a4      	b.n	80028a0 <_ZN15DynamixelSerial6updateEv+0x170>
          byte_in_progress_ = 0;
 8002956:	2200      	movs	r2, #0
 8002958:	84e2      	strh	r2, [r4, #38]	; 0x26
 800295a:	e7ad      	b.n	80028b8 <_ZN15DynamixelSerial6updateEv+0x188>
	for (unsigned int i = 0; i < servo_num_; i++) {
 800295c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800295e:	aa02      	add	r2, sp, #8
 8002960:	b1a5      	cbz	r5, 800298c <_ZN15DynamixelSerial6updateEv+0x25c>
 8002962:	4613      	mov	r3, r2
 8002964:	4620      	mov	r0, r4
 8002966:	eb02 0585 	add.w	r5, r2, r5, lsl #2
		parameters[i * 4 + 0] = (uint8_t)((int32_t)(servo_[i].goal_position_) & 0xFF);
 800296a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800296c:	3304      	adds	r3, #4
 800296e:	f803 1c04 	strb.w	r1, [r3, #-4]
		parameters[i * 4 + 1] = (uint8_t)(((int32_t)(servo_[i].goal_position_) >> 8) & 0xFF);
 8002972:	120f      	asrs	r7, r1, #8
		parameters[i * 4 + 2] = (uint8_t)(((int32_t)(servo_[i].goal_position_) >> 16) & 0xFF);
 8002974:	140e      	asrs	r6, r1, #16
		parameters[i * 4 + 3] = (uint8_t)(((int32_t)(servo_[i].goal_position_) >> 24) & 0xFF);
 8002976:	1609      	asrs	r1, r1, #24
		parameters[i * 4 + 1] = (uint8_t)(((int32_t)(servo_[i].goal_position_) >> 8) & 0xFF);
 8002978:	f803 7c03 	strb.w	r7, [r3, #-3]
		parameters[i * 4 + 2] = (uint8_t)(((int32_t)(servo_[i].goal_position_) >> 16) & 0xFF);
 800297c:	f803 6c02 	strb.w	r6, [r3, #-2]
		parameters[i * 4 + 3] = (uint8_t)(((int32_t)(servo_[i].goal_position_) >> 24) & 0xFF);
 8002980:	f803 1c01 	strb.w	r1, [r3, #-1]
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002984:	42ab      	cmp	r3, r5
 8002986:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800298a:	d1ee      	bne.n	800296a <_ZN15DynamixelSerial6updateEv+0x23a>
	cmdSyncWrite(CTRL_GOAL_POSITION, parameters, GOAL_POSITION_BYTE_LEN);
 800298c:	4620      	mov	r0, r4
 800298e:	2304      	movs	r3, #4
 8002990:	2174      	movs	r1, #116	; 0x74
 8002992:	f7ff fe81 	bl	8002698 <_ZN15DynamixelSerial12cmdSyncWriteEtPhi>
 8002996:	e7b5      	b.n	8002904 <_ZN15DynamixelSerial6updateEv+0x1d4>
    if ((byte_in_progress_ == (byte_to_add_ + 1)) || ( (byte_to_add_ == (buffer_length_ - 1) )&& (byte_in_progress_ == 0)) ) return false;
 8002998:	2900      	cmp	r1, #0
 800299a:	f43f af41 	beq.w	8002820 <_ZN15DynamixelSerial6updateEv+0xf0>
 800299e:	e730      	b.n	8002802 <_ZN15DynamixelSerial6updateEv+0xd2>
 80029a0:	2900      	cmp	r1, #0
 80029a2:	f43f af7d 	beq.w	80028a0 <_ZN15DynamixelSerial6updateEv+0x170>
 80029a6:	e76d      	b.n	8002884 <_ZN15DynamixelSerial6updateEv+0x154>
 80029a8:	2900      	cmp	r1, #0
 80029aa:	f43f aed5 	beq.w	8002758 <_ZN15DynamixelSerial6updateEv+0x28>
 80029ae:	e7b7      	b.n	8002920 <_ZN15DynamixelSerial6updateEv+0x1f0>
 80029b0:	2900      	cmp	r1, #0
 80029b2:	f43f aef1 	beq.w	8002798 <_ZN15DynamixelSerial6updateEv+0x68>
 80029b6:	e6e0      	b.n	800277a <_ZN15DynamixelSerial6updateEv+0x4a>
 80029b8:	2900      	cmp	r1, #0
 80029ba:	f43f af0f 	beq.w	80027dc <_ZN15DynamixelSerial6updateEv+0xac>
 80029be:	e6fe      	b.n	80027be <_ZN15DynamixelSerial6updateEv+0x8e>
 80029c0:	2900      	cmp	r1, #0
 80029c2:	f43f af4e 	beq.w	8002862 <_ZN15DynamixelSerial6updateEv+0x132>
 80029c6:	e73d      	b.n	8002844 <_ZN15DynamixelSerial6updateEv+0x114>
	cmdSyncRead(CTRL_PRESENT_TEMPERATURE, PRESENT_TEMPERATURE_BYTE_LEN);
 80029c8:	2201      	movs	r2, #1
 80029ca:	2192      	movs	r1, #146	; 0x92
 80029cc:	4620      	mov	r0, r4
 80029ce:	f7ff fe3d 	bl	800264c <_ZN15DynamixelSerial11cmdSyncReadEtt>
    		status_packet_instruction_ = instruction.first;
 80029d2:	2304      	movs	r3, #4
 80029d4:	7123      	strb	r3, [r4, #4]
    	for (unsigned int i = 0; i < servo_num_; i++) {
 80029d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d093      	beq.n	8002904 <_ZN15DynamixelSerial6updateEv+0x1d4>
 80029dc:	2500      	movs	r5, #0
    		readStatusPacket();
 80029de:	4620      	mov	r0, r4
 80029e0:	f7ff fbf8 	bl	80021d4 <_ZN15DynamixelSerial16readStatusPacketEv>
    	for (unsigned int i = 0; i < servo_num_; i++) {
 80029e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029e6:	3501      	adds	r5, #1
 80029e8:	42ab      	cmp	r3, r5
 80029ea:	d8f8      	bhi.n	80029de <_ZN15DynamixelSerial6updateEv+0x2ae>
}
 80029ec:	b013      	add	sp, #76	; 0x4c
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cmdSyncRead(CTRL_PRESENT_CURRENT, PRESENT_CURRENT_BYTE_LEN);
 80029f0:	2202      	movs	r2, #2
 80029f2:	217e      	movs	r1, #126	; 0x7e
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff fe29 	bl	800264c <_ZN15DynamixelSerial11cmdSyncReadEtt>
    		status_packet_instruction_ = instruction.first;
 80029fa:	2303      	movs	r3, #3
 80029fc:	7123      	strb	r3, [r4, #4]
    		break;
 80029fe:	e7ea      	b.n	80029d6 <_ZN15DynamixelSerial6updateEv+0x2a6>
	cmdSyncRead(CTRL_PRESENT_POSITION, PRESENT_POSITION_BYTE_LEN);
 8002a00:	2204      	movs	r2, #4
 8002a02:	2184      	movs	r1, #132	; 0x84
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7ff fe21 	bl	800264c <_ZN15DynamixelSerial11cmdSyncReadEtt>
    		status_packet_instruction_ = instruction.first;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	7123      	strb	r3, [r4, #4]
    		break;
 8002a0e:	e7e2      	b.n	80029d6 <_ZN15DynamixelSerial6updateEv+0x2a6>
 8002a10:	cccccccd 	.word	0xcccccccd
 8002a14:	51eb851f 	.word	0x51eb851f
	cmdWrite(servo_[servo_index].id_, CTRL_PROFILE_VELOCITY, parameters, PROFILE_VELOCITY_BYTE_LEN);
 8002a18:	2204      	movs	r2, #4
	parameters[2] = (uint8_t)((vel >> 16) & 0xFF);
 8002a1a:	2500      	movs	r5, #0
	uint16_t vel = servo_[servo_index].profile_velocity_;
 8002a1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002a20:	eb04 1301 	add.w	r3, r4, r1, lsl #4
 8002a24:	f8b3 6054 	ldrh.w	r6, [r3, #84]	; 0x54
	cmdWrite(servo_[servo_index].id_, CTRL_PROFILE_VELOCITY, parameters, PROFILE_VELOCITY_BYTE_LEN);
 8002a28:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	9200      	str	r2, [sp, #0]
	parameters[1] = (uint8_t)((vel >> 8) & 0xFF);
 8002a30:	0a34      	lsrs	r4, r6, #8
	cmdWrite(servo_[servo_index].id_, CTRL_PROFILE_VELOCITY, parameters, PROFILE_VELOCITY_BYTE_LEN);
 8002a32:	ab02      	add	r3, sp, #8
 8002a34:	2270      	movs	r2, #112	; 0x70
	parameters[0] = (uint8_t)(vel & 0xFF);
 8002a36:	f88d 6008 	strb.w	r6, [sp, #8]
	parameters[1] = (uint8_t)((vel >> 8) & 0xFF);
 8002a3a:	f88d 4009 	strb.w	r4, [sp, #9]
	parameters[2] = (uint8_t)((vel >> 16) & 0xFF);
 8002a3e:	f88d 500a 	strb.w	r5, [sp, #10]
	parameters[3] = (uint8_t)((vel >> 24) & 0xFF);
 8002a42:	f88d 500b 	strb.w	r5, [sp, #11]
	cmdWrite(servo_[servo_index].id_, CTRL_PROFILE_VELOCITY, parameters, PROFILE_VELOCITY_BYTE_LEN);
 8002a46:	f7ff fde3 	bl	8002610 <_ZN15DynamixelSerial8cmdWriteEhtPhi>
 8002a4a:	e75b      	b.n	8002904 <_ZN15DynamixelSerial6updateEv+0x1d4>
	cmdWrite(servo_[servo_index].id_, CTRL_POSITION_D_GAIN, parameters, POSITION_GAINS_BYTE_LEN);
 8002a4c:	2706      	movs	r7, #6
	parameters[0] = servo_[servo_index].d_gain_ & 0xFF;
 8002a4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002a52:	eb04 1301 	add.w	r3, r4, r1, lsl #4
 8002a56:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
	parameters[2] = servo_[servo_index].i_gain_ & 0xFF;
 8002a5a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
	parameters[4] = servo_[servo_index].p_gain_ & 0xFF;
 8002a5e:	f8b3 504e 	ldrh.w	r5, [r3, #78]	; 0x4e
	cmdWrite(servo_[servo_index].id_, CTRL_POSITION_D_GAIN, parameters, POSITION_GAINS_BYTE_LEN);
 8002a62:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
	parameters[1] = (servo_[servo_index].d_gain_ >> 8) & 0xFF;
 8002a66:	ea4f 2e22 	mov.w	lr, r2, asr #8
	cmdWrite(servo_[servo_index].id_, CTRL_POSITION_D_GAIN, parameters, POSITION_GAINS_BYTE_LEN);
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	9700      	str	r7, [sp, #0]
	parameters[5] = (servo_[servo_index].p_gain_ >> 8) & 0xFF;
 8002a6e:	122c      	asrs	r4, r5, #8
	parameters[3] = (servo_[servo_index].i_gain_ >> 8) & 0xFF;
 8002a70:	1237      	asrs	r7, r6, #8
	parameters[0] = servo_[servo_index].d_gain_ & 0xFF;
 8002a72:	f88d 2008 	strb.w	r2, [sp, #8]
	cmdWrite(servo_[servo_index].id_, CTRL_POSITION_D_GAIN, parameters, POSITION_GAINS_BYTE_LEN);
 8002a76:	ab02      	add	r3, sp, #8
 8002a78:	2250      	movs	r2, #80	; 0x50
	parameters[1] = (servo_[servo_index].d_gain_ >> 8) & 0xFF;
 8002a7a:	f88d e009 	strb.w	lr, [sp, #9]
	parameters[2] = servo_[servo_index].i_gain_ & 0xFF;
 8002a7e:	f88d 600a 	strb.w	r6, [sp, #10]
	parameters[3] = (servo_[servo_index].i_gain_ >> 8) & 0xFF;
 8002a82:	f88d 700b 	strb.w	r7, [sp, #11]
	parameters[4] = servo_[servo_index].p_gain_ & 0xFF;
 8002a86:	f88d 500c 	strb.w	r5, [sp, #12]
	parameters[5] = (servo_[servo_index].p_gain_ >> 8) & 0xFF;
 8002a8a:	f88d 400d 	strb.w	r4, [sp, #13]
	cmdWrite(servo_[servo_index].id_, CTRL_POSITION_D_GAIN, parameters, POSITION_GAINS_BYTE_LEN);
 8002a8e:	f7ff fdbf 	bl	8002610 <_ZN15DynamixelSerial8cmdWriteEhtPhi>
 8002a92:	e737      	b.n	8002904 <_ZN15DynamixelSerial6updateEv+0x1d4>
	cmdSyncRead(CTRL_HARDWARE_ERROR_STATUS, HARDWARE_ERROR_STATUS_BYTE_LEN);
 8002a94:	2201      	movs	r2, #1
 8002a96:	2146      	movs	r1, #70	; 0x46
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f7ff fdd7 	bl	800264c <_ZN15DynamixelSerial11cmdSyncReadEtt>
    		status_packet_instruction_ = instruction.first;
 8002a9e:	230a      	movs	r3, #10
 8002aa0:	7123      	strb	r3, [r4, #4]
    		break;
 8002aa2:	e798      	b.n	80029d6 <_ZN15DynamixelSerial6updateEv+0x2a6>
	cmdWrite(servo_[servo_index].id_, CTRL_HOMING_OFFSET, parameters, HOMING_OFFSET_BYTE_LEN);
 8002aa4:	f04f 0e04 	mov.w	lr, #4
 8002aa8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002aac:	eb04 1301 	add.w	r3, r4, r1, lsl #4
	uint16_t current_limit_;
	uint16_t send_data_flag_;
	bool led_;
	bool torque_enable_;
	bool first_get_pos_flag_;
	int32_t getNewHomingOffset() {return offset_value_ + homing_offset_ - present_position_;}
 8002ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab4:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8002ab6:	440a      	add	r2, r1
 8002ab8:	1b55      	subs	r5, r2, r5
 8002aba:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8002abe:	4620      	mov	r0, r4
	parameters[1] = (uint8_t)((homing_offset >> 8) & 0xFF);
 8002ac0:	122f      	asrs	r7, r5, #8
	parameters[2] = (uint8_t)((homing_offset >> 16) & 0xFF);
 8002ac2:	142e      	asrs	r6, r5, #16
	parameters[3] = (uint8_t)((homing_offset >> 24) & 0xFF);
 8002ac4:	0e2c      	lsrs	r4, r5, #24
	cmdWrite(servo_[servo_index].id_, CTRL_HOMING_OFFSET, parameters, HOMING_OFFSET_BYTE_LEN);
 8002ac6:	f8cd e000 	str.w	lr, [sp]
 8002aca:	ab02      	add	r3, sp, #8
 8002acc:	2214      	movs	r2, #20
	parameters[0] = (uint8_t)(homing_offset & 0xFF);
 8002ace:	f88d 5008 	strb.w	r5, [sp, #8]
	parameters[1] = (uint8_t)((homing_offset >> 8) & 0xFF);
 8002ad2:	f88d 7009 	strb.w	r7, [sp, #9]
	parameters[2] = (uint8_t)((homing_offset >> 16) & 0xFF);
 8002ad6:	f88d 600a 	strb.w	r6, [sp, #10]
	parameters[3] = (uint8_t)((homing_offset >> 24) & 0xFF);
 8002ada:	f88d 400b 	strb.w	r4, [sp, #11]
	cmdWrite(servo_[servo_index].id_, CTRL_HOMING_OFFSET, parameters, HOMING_OFFSET_BYTE_LEN);
 8002ade:	f7ff fd97 	bl	8002610 <_ZN15DynamixelSerial8cmdWriteEhtPhi>
 8002ae2:	e70f      	b.n	8002904 <_ZN15DynamixelSerial6updateEv+0x1d4>
	cmdWrite(servo_[servo_index].id_, CTRL_TORQUE_ENABLE, &parameter, TORQUE_ENABLE_BYTE_LEN);
 8002ae4:	2501      	movs	r5, #1
	uint8_t	parameter = (uint8_t)((servo_[servo_index].torque_enable_) ? 1 : 0);
 8002ae6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002aea:	eb04 1201 	add.w	r2, r4, r1, lsl #4
 8002aee:	f892 005b 	ldrb.w	r0, [r2, #91]	; 0x5b
 8002af2:	ab12      	add	r3, sp, #72	; 0x48
	cmdWrite(servo_[servo_index].id_, CTRL_TORQUE_ENABLE, &parameter, TORQUE_ENABLE_BYTE_LEN);
 8002af4:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
	uint8_t	parameter = (uint8_t)((servo_[servo_index].torque_enable_) ? 1 : 0);
 8002af8:	f803 0d40 	strb.w	r0, [r3, #-64]!
	cmdWrite(servo_[servo_index].id_, CTRL_TORQUE_ENABLE, &parameter, TORQUE_ENABLE_BYTE_LEN);
 8002afc:	2240      	movs	r2, #64	; 0x40
 8002afe:	4620      	mov	r0, r4
 8002b00:	9500      	str	r5, [sp, #0]
 8002b02:	f7ff fd85 	bl	8002610 <_ZN15DynamixelSerial8cmdWriteEhtPhi>
 8002b06:	e6fd      	b.n	8002904 <_ZN15DynamixelSerial6updateEv+0x1d4>
	cmdSyncRead(CTRL_MOVING, MOVING_BYTE_LEN);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	217a      	movs	r1, #122	; 0x7a
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7ff fd9d 	bl	800264c <_ZN15DynamixelSerial11cmdSyncReadEtt>
    		status_packet_instruction_ = instruction.first;
 8002b12:	2305      	movs	r3, #5
 8002b14:	7123      	strb	r3, [r4, #4]
    		break;
 8002b16:	e75e      	b.n	80029d6 <_ZN15DynamixelSerial6updateEv+0x2a6>

08002b18 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef>:
{
 8002b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	servo_num_ = 0;
 8002b1c:	2300      	movs	r3, #0
{
 8002b1e:	4604      	mov	r4, r0
	*__first = __value;
 8002b20:	2501      	movs	r5, #1
 8002b22:	20ff      	movs	r0, #255	; 0xff
 8002b24:	461a      	mov	r2, r3
	huart_ = huart;
 8002b26:	6021      	str	r1, [r4, #0]
	servo_num_ = 0;
 8002b28:	62e3      	str	r3, [r4, #44]	; 0x2c
{
 8002b2a:	b092      	sub	sp, #72	; 0x48
 8002b2c:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 8002b30:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8002b34:	7018      	strb	r0, [r3, #0]
 8002b36:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8002b3a:	f883 502c 	strb.w	r5, [r3, #44]	; 0x2c
      for (; __first != __last; ++__first)
 8002b3e:	3330      	adds	r3, #48	; 0x30
 8002b40:	4299      	cmp	r1, r3
 8002b42:	d1f7      	bne.n	8002b34 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0x1c>
	transmitInstructionPacket(id, REBOOT_LEN, COMMAND_REBOOT, nullptr);
 8002b44:	2308      	movs	r3, #8
 8002b46:	21fe      	movs	r1, #254	; 0xfe
 8002b48:	9200      	str	r2, [sp, #0]
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f7ff faad 	bl	80020ac <_ZN15DynamixelSerial25transmitInstructionPacketEhthPh>
	uint8_t param = set;
 8002b52:	ae12      	add	r6, sp, #72	; 0x48
	ping();
 8002b54:	4620      	mov	r0, r4
 8002b56:	f7ff fd49 	bl	80025ec <_ZN15DynamixelSerial4pingEv>
	uint8_t param = set;
 8002b5a:	f806 5d40 	strb.w	r5, [r6, #-64]!
	cmdWrite(id, CTRL_STATUS_RETURN_LEVEL, &param, STATUS_RETURN_LEVEL_BYTE_LEN);
 8002b5e:	4620      	mov	r0, r4
 8002b60:	9500      	str	r5, [sp, #0]
 8002b62:	4633      	mov	r3, r6
 8002b64:	2244      	movs	r2, #68	; 0x44
 8002b66:	21fe      	movs	r1, #254	; 0xfe
 8002b68:	f7ff fd52 	bl	8002610 <_ZN15DynamixelSerial8cmdWriteEhtPhi>
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002b6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002b6e:	b1b0      	cbz	r0, 8002b9e <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0x86>
 8002b70:	4622      	mov	r2, r4
 8002b72:	4621      	mov	r1, r4
 8002b74:	2300      	movs	r3, #0
		servo_[i].led_ = true;
 8002b76:	2501      	movs	r5, #1
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002b78:	3301      	adds	r3, #1
 8002b7a:	4283      	cmp	r3, r0
		servo_[i].led_ = true;
 8002b7c:	f881 505a 	strb.w	r5, [r1, #90]	; 0x5a
 8002b80:	f101 0130 	add.w	r1, r1, #48	; 0x30
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002b84:	d1f8      	bne.n	8002b78 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0x60>
 8002b86:	4631      	mov	r1, r6
 8002b88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002b8c:	eb04 1303 	add.w	r3, r4, r3, lsl #4
		parameters[i] = (uint8_t)((servo_[i].led_) ? 1 : 0);
 8002b90:	f892 005a 	ldrb.w	r0, [r2, #90]	; 0x5a
 8002b94:	3230      	adds	r2, #48	; 0x30
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002b96:	4293      	cmp	r3, r2
		parameters[i] = (uint8_t)((servo_[i].led_) ? 1 : 0);
 8002b98:	f801 0b01 	strb.w	r0, [r1], #1
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002b9c:	d1f8      	bne.n	8002b90 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0x78>
	cmdSyncWrite(CTRL_LED, parameters, LED_BYTE_LEN);
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	4632      	mov	r2, r6
 8002ba2:	2141      	movs	r1, #65	; 0x41
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f7ff fd77 	bl	8002698 <_ZN15DynamixelSerial12cmdSyncWriteEtPhi>
	HAL_Delay(1000);
 8002baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002bae:	f000 fd0b 	bl	80035c8 <HAL_Delay>
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002bb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002bb4:	b1b0      	cbz	r0, 8002be4 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0xcc>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	4622      	mov	r2, r4
		servo_[i].led_ = false;
 8002bba:	461d      	mov	r5, r3
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	4283      	cmp	r3, r0
		servo_[i].led_ = false;
 8002bc2:	f881 505a 	strb.w	r5, [r1, #90]	; 0x5a
 8002bc6:	f101 0130 	add.w	r1, r1, #48	; 0x30
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002bca:	d1f8      	bne.n	8002bbe <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0xa6>
 8002bcc:	4631      	mov	r1, r6
 8002bce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002bd2:	eb04 1303 	add.w	r3, r4, r3, lsl #4
		parameters[i] = (uint8_t)((servo_[i].led_) ? 1 : 0);
 8002bd6:	f892 005a 	ldrb.w	r0, [r2, #90]	; 0x5a
 8002bda:	3230      	adds	r2, #48	; 0x30
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002bdc:	4293      	cmp	r3, r2
		parameters[i] = (uint8_t)((servo_[i].led_) ? 1 : 0);
 8002bde:	f801 0b01 	strb.w	r0, [r1], #1
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002be2:	d1f8      	bne.n	8002bd6 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0xbe>
	cmdSyncWrite(CTRL_LED, parameters, LED_BYTE_LEN);
 8002be4:	2301      	movs	r3, #1
 8002be6:	4632      	mov	r2, r6
 8002be8:	2141      	movs	r1, #65	; 0x41
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7ff fd54 	bl	8002698 <_ZN15DynamixelSerial12cmdSyncWriteEtPhi>
	cmdSyncRead(CTRL_HOMING_OFFSET, HOMING_OFFSET_BYTE_LEN);
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	2114      	movs	r1, #20
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f7ff fd29 	bl	800264c <_ZN15DynamixelSerial11cmdSyncReadEtt>
	status_packet_instruction_ = INST_GET_HOMING_OFFSET;
 8002bfa:	2209      	movs	r2, #9
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002bfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	status_packet_instruction_ = INST_GET_HOMING_OFFSET;
 8002bfe:	7122      	strb	r2, [r4, #4]
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002c00:	b13b      	cbz	r3, 8002c12 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0xfa>
 8002c02:	2500      	movs	r5, #0
		readStatusPacket();
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff fae5 	bl	80021d4 <_ZN15DynamixelSerial16readStatusPacketEv>
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c0c:	3501      	adds	r5, #1
 8002c0e:	42ab      	cmp	r3, r5
 8002c10:	d8f8      	bhi.n	8002c04 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0xec>
	cmdSyncRead(CTRL_CURRENT_LIMIT, CURRENT_LIMIT_BYTE_LEN);
 8002c12:	2202      	movs	r2, #2
 8002c14:	2126      	movs	r1, #38	; 0x26
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff fd18 	bl	800264c <_ZN15DynamixelSerial11cmdSyncReadEtt>
	status_packet_instruction_ = INST_GET_CURRENT_LIMIT;
 8002c1c:	220c      	movs	r2, #12
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002c1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	status_packet_instruction_ = INST_GET_CURRENT_LIMIT;
 8002c20:	7122      	strb	r2, [r4, #4]
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002c22:	b13b      	cbz	r3, 8002c34 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0x11c>
 8002c24:	2500      	movs	r5, #0
		readStatusPacket();
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7ff fad4 	bl	80021d4 <_ZN15DynamixelSerial16readStatusPacketEv>
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002c2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c2e:	3501      	adds	r5, #1
 8002c30:	42ab      	cmp	r3, r5
 8002c32:	d8f8      	bhi.n	8002c26 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0x10e>
 8002c34:	f104 054e 	add.w	r5, r4, #78	; 0x4e
 8002c38:	f504 7787 	add.w	r7, r4, #270	; 0x10e
		Flashmemory::addValue(&(servo_[i].p_gain_), 2);
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	2102      	movs	r1, #2
 8002c40:	f7fe fd5e 	bl	8001700 <_ZN11Flashmemory8addValueEPvj>
		Flashmemory::addValue(&(servo_[i].i_gain_), 2);
 8002c44:	2102      	movs	r1, #2
 8002c46:	1868      	adds	r0, r5, r1
 8002c48:	f7fe fd5a 	bl	8001700 <_ZN11Flashmemory8addValueEPvj>
		Flashmemory::addValue(&(servo_[i].d_gain_), 2);
 8002c4c:	1d28      	adds	r0, r5, #4
 8002c4e:	2102      	movs	r1, #2
 8002c50:	f7fe fd56 	bl	8001700 <_ZN11Flashmemory8addValueEPvj>
		Flashmemory::addValue(&(servo_[i].profile_velocity_), 2);
 8002c54:	1da8      	adds	r0, r5, #6
 8002c56:	2102      	movs	r1, #2
 8002c58:	f7fe fd52 	bl	8001700 <_ZN11Flashmemory8addValueEPvj>
		Flashmemory::addValue(&(servo_[i].send_data_flag_), 2);
 8002c5c:	f105 000a 	add.w	r0, r5, #10
 8002c60:	2102      	movs	r1, #2
 8002c62:	3530      	adds	r5, #48	; 0x30
 8002c64:	f7fe fd4c 	bl	8001700 <_ZN11Flashmemory8addValueEPvj>
	for (int i = 0; i < MAX_SERVO_NUM; i++) {
 8002c68:	42bd      	cmp	r5, r7
 8002c6a:	d1e7      	bne.n	8002c3c <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0x124>
	Flashmemory::read();
 8002c6c:	f7fe fd5a 	bl	8001724 <_ZN11Flashmemory4readEv>
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002c70:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002c72:	b1ff      	cbz	r7, 8002cb4 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0x19c>
 8002c74:	4622      	mov	r2, r4
 8002c76:	4633      	mov	r3, r6
 8002c78:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8002c7c:	eb04 1707 	add.w	r7, r4, r7, lsl #4
		parameters[i * 6 + 0] = servo_[i].d_gain_ & 0xFF;
 8002c80:	f8b2 5052 	ldrh.w	r5, [r2, #82]	; 0x52
		parameters[i * 6 + 2] = servo_[i].i_gain_ & 0xFF;
 8002c84:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
		parameters[i * 6 + 4] = servo_[i].p_gain_ & 0xFF;
 8002c88:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e
 8002c8c:	3230      	adds	r2, #48	; 0x30
		parameters[i * 6 + 1] = (servo_[i].d_gain_ >> 8) & 0xFF;
 8002c8e:	ea4f 2825 	mov.w	r8, r5, asr #8
		parameters[i * 6 + 3] = (servo_[i].i_gain_ >> 8) & 0xFF;
 8002c92:	ea4f 2c20 	mov.w	ip, r0, asr #8
		parameters[i * 6 + 5] = (servo_[i].p_gain_ >> 8) & 0xFF;
 8002c96:	ea4f 2e21 	mov.w	lr, r1, asr #8
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002c9a:	4297      	cmp	r7, r2
		parameters[i * 6 + 0] = servo_[i].d_gain_ & 0xFF;
 8002c9c:	701d      	strb	r5, [r3, #0]
		parameters[i * 6 + 1] = (servo_[i].d_gain_ >> 8) & 0xFF;
 8002c9e:	f883 8001 	strb.w	r8, [r3, #1]
		parameters[i * 6 + 2] = servo_[i].i_gain_ & 0xFF;
 8002ca2:	7098      	strb	r0, [r3, #2]
		parameters[i * 6 + 3] = (servo_[i].i_gain_ >> 8) & 0xFF;
 8002ca4:	f883 c003 	strb.w	ip, [r3, #3]
		parameters[i * 6 + 4] = servo_[i].p_gain_ & 0xFF;
 8002ca8:	7119      	strb	r1, [r3, #4]
		parameters[i * 6 + 5] = (servo_[i].p_gain_ >> 8) & 0xFF;
 8002caa:	f883 e005 	strb.w	lr, [r3, #5]
 8002cae:	f103 0306 	add.w	r3, r3, #6
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002cb2:	d1e5      	bne.n	8002c80 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0x168>
	cmdSyncWrite(CTRL_POSITION_D_GAIN, parameters, POSITION_GAINS_BYTE_LEN);
 8002cb4:	2306      	movs	r3, #6
 8002cb6:	4632      	mov	r2, r6
 8002cb8:	2150      	movs	r1, #80	; 0x50
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff fcec 	bl	8002698 <_ZN15DynamixelSerial12cmdSyncWriteEtPhi>
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002cc0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002cc2:	b187      	cbz	r7, 8002ce6 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0x1ce>
 8002cc4:	4622      	mov	r2, r4
 8002cc6:	4633      	mov	r3, r6
		parameters[i * 4 + 2] = (uint8_t)(((int32_t)(servo_[i].profile_velocity_) >> 16) & 0xFF);
 8002cc8:	2000      	movs	r0, #0
 8002cca:	eb06 0787 	add.w	r7, r6, r7, lsl #2
		parameters[i * 4 + 0] = (uint8_t)((int32_t)(servo_[i].profile_velocity_) & 0xFF);
 8002cce:	f8b2 1054 	ldrh.w	r1, [r2, #84]	; 0x54
		parameters[i * 4 + 2] = (uint8_t)(((int32_t)(servo_[i].profile_velocity_) >> 16) & 0xFF);
 8002cd2:	7098      	strb	r0, [r3, #2]
		parameters[i * 4 + 1] = (uint8_t)(((int32_t)(servo_[i].profile_velocity_) >> 8) & 0xFF);
 8002cd4:	120d      	asrs	r5, r1, #8
		parameters[i * 4 + 3] = (uint8_t)(((int32_t)(servo_[i].profile_velocity_) >> 24) & 0xFF);
 8002cd6:	70d8      	strb	r0, [r3, #3]
		parameters[i * 4 + 0] = (uint8_t)((int32_t)(servo_[i].profile_velocity_) & 0xFF);
 8002cd8:	7019      	strb	r1, [r3, #0]
		parameters[i * 4 + 1] = (uint8_t)(((int32_t)(servo_[i].profile_velocity_) >> 8) & 0xFF);
 8002cda:	705d      	strb	r5, [r3, #1]
 8002cdc:	3304      	adds	r3, #4
	for (unsigned int i = 0; i < servo_num_; i++) {
 8002cde:	429f      	cmp	r7, r3
 8002ce0:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8002ce4:	d1f3      	bne.n	8002cce <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef+0x1b6>
	cmdSyncWrite(CTRL_PROFILE_VELOCITY, parameters, PROFILE_VELOCITY_BYTE_LEN);
 8002ce6:	4632      	mov	r2, r6
 8002ce8:	4620      	mov	r0, r4
 8002cea:	2304      	movs	r3, #4
 8002cec:	2170      	movs	r1, #112	; 0x70
 8002cee:	f7ff fcd3 	bl	8002698 <_ZN15DynamixelSerial12cmdSyncWriteEtPhi>
}
 8002cf2:	b012      	add	sp, #72	; 0x48
 8002cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002cf8 <_ZN5Servo8sendDataEv>:
	servo_handler_.update();
}

void Servo::sendData()
{
	for (unsigned int i = 0; i < servo_handler_.getServoNum(); i++) {
 8002cf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d046      	beq.n	8002d8c <_ZN5Servo8sendDataEv+0x94>
{
 8002cfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (unsigned int i = 0; i < servo_handler_.getServoNum(); i++) {
 8002d02:	2500      	movs	r5, #0
 8002d04:	4607      	mov	r7, r0
 8002d06:	4604      	mov	r4, r0
		const ServoData& s = servo_handler_.getServo()[i];
		if (s.send_data_flag_ != 0) {
			CANServoData data(std::min(std::max((int)(s.present_position_ + s.overflow_offset_value_), 0), 4095),
 8002d08:	46a9      	mov	r9, r5
{
 8002d0a:	b089      	sub	sp, #36	; 0x24
							  s.present_temp_,
							  s.moving_,
							  s.present_current_,
							  s.hardware_error_status_);
			setMessage(CAN::MESSAGEID_SEND_SERVO_LIST[i], m_slave_id, 8, reinterpret_cast<uint8_t*>(&data));
 8002d0c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002d90 <_ZN5Servo8sendDataEv+0x98>
 8002d10:	ae06      	add	r6, sp, #24
		if (s.send_data_flag_ != 0) {
 8002d12:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8002d16:	b372      	cbz	r2, 8002d76 <_ZN5Servo8sendDataEv+0x7e>
			CANServoData data(std::min(std::max((int)(s.present_position_ + s.overflow_offset_value_), 0), 4095),
 8002d18:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002d1a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002d1c:	f8cd 9010 	str.w	r9, [sp, #16]
 8002d20:	4413      	add	r3, r2
      if (__a < __b)
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	9303      	str	r3, [sp, #12]
 8002d26:	db2e      	blt.n	8002d86 <_ZN5Servo8sendDataEv+0x8e>
 8002d28:	f640 72ff 	movw	r2, #4095	; 0xfff
      if (__b < __a)
 8002d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d30:	9205      	str	r2, [sp, #20]
 8002d32:	db29      	blt.n	8002d88 <_ZN5Servo8sendDataEv+0x90>
 8002d34:	4613      	mov	r3, r2
							  s.moving_,
 8002d36:	f894 e054 	ldrb.w	lr, [r4, #84]	; 0x54
		uint8_t temperature;
		uint8_t moving;
		int16_t current;
		uint8_t error;
		CANServoData(uint16_t angle, uint8_t temperature, uint8_t moving, int16_t current, uint8_t error)
		:angle(angle), temperature(temperature), moving(moving), current(current), error(error){}
 8002d3a:	f8ad 3018 	strh.w	r3, [sp, #24]
							  s.present_current_,
 8002d3e:	f9b4 3052 	ldrsh.w	r3, [r4, #82]	; 0x52
							  s.present_temp_,
 8002d42:	f894 c050 	ldrb.w	ip, [r4, #80]	; 0x50
 8002d46:	f88d e01b 	strb.w	lr, [sp, #27]
							  s.hardware_error_status_);
 8002d4a:	f894 e055 	ldrb.w	lr, [r4, #85]	; 0x55
 8002d4e:	797a      	ldrb	r2, [r7, #5]
 8002d50:	f815 1008 	ldrb.w	r1, [r5, r8]
 8002d54:	7938      	ldrb	r0, [r7, #4]
 8002d56:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002d5a:	9600      	str	r6, [sp, #0]
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	f88d c01a 	strb.w	ip, [sp, #26]
 8002d62:	f88d e01e 	strb.w	lr, [sp, #30]
 8002d66:	f7fe fc3d 	bl	80015e4 <_ZN3CAN10setMessageEhhhmPh>
 8002d6a:	f7fe fc35 	bl	80015d8 <_ZN3CAN15getHcanInstanceEv>
 8002d6e:	2101      	movs	r1, #1
 8002d70:	f000 fd2c 	bl	80037cc <HAL_CAN_Transmit>
 8002d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	for (unsigned int i = 0; i < servo_handler_.getServoNum(); i++) {
 8002d76:	3501      	adds	r5, #1
 8002d78:	429d      	cmp	r5, r3
 8002d7a:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8002d7e:	d3c8      	bcc.n	8002d12 <_ZN5Servo8sendDataEv+0x1a>
			sendMessage(1);
		}
	}
}
 8002d80:	b009      	add	sp, #36	; 0x24
 8002d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__a < __b)
 8002d86:	2300      	movs	r3, #0
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	e7d4      	b.n	8002d36 <_ZN5Servo8sendDataEv+0x3e>
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	080062d8 	.word	0x080062d8

08002d94 <_ZN5Servo19receiveDataCallbackEhmPh>:

void Servo::receiveDataCallback(uint8_t message_id, uint32_t DLC, uint8_t* data)
{
	switch (message_id) {
 8002d94:	bb49      	cbnz	r1, 8002dea <_ZN5Servo19receiveDataCallbackEhmPh+0x56>
{
 8002d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d9a:	4680      	mov	r8, r0
		case CAN::MESSAGEID_RECEIVE_SERVO_ANGLE:
		{
			for (unsigned int i = 0; i < servo_handler_.getServoNum(); i++) {
 8002d9c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002d9e:	b310      	cbz	r0, 8002de6 <_ZN5Servo19receiveDataCallbackEhmPh+0x52>
 8002da0:	461c      	mov	r4, r3
 8002da2:	460f      	mov	r7, r1
 8002da4:	4645      	mov	r5, r8
				ServoData& s = servo_handler_.getServo()[i];
				s.goal_position_ = (((data[i * 2 + 1]  & 0x0F ) << 8) | data[i * 2]) - s.overflow_offset_value_;
				bool torque_enable = (((data[i * 2 + 1] >> 7) & 0x01) != 0) ? true : false;
				if (s.torque_enable_ != torque_enable) {
					s.torque_enable_ = torque_enable;
					servo_handler_.setTorque(i);
 8002da6:	f108 0608 	add.w	r6, r8, #8
				s.goal_position_ = (((data[i * 2 + 1]  & 0x0F ) << 8) | data[i * 2]) - s.overflow_offset_value_;
 8002daa:	7862      	ldrb	r2, [r4, #1]
 8002dac:	7821      	ldrb	r1, [r4, #0]
 8002dae:	0212      	lsls	r2, r2, #8
 8002db0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002db2:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8002db6:	430a      	orrs	r2, r1
 8002db8:	1ad2      	subs	r2, r2, r3
 8002dba:	646a      	str	r2, [r5, #68]	; 0x44
				bool torque_enable = (((data[i * 2 + 1] >> 7) & 0x01) != 0) ? true : false;
 8002dbc:	7863      	ldrb	r3, [r4, #1]
				if (s.torque_enable_ != torque_enable) {
 8002dbe:	f895 2063 	ldrb.w	r2, [r5, #99]	; 0x63
				bool torque_enable = (((data[i * 2 + 1] >> 7) & 0x01) != 0) ? true : false;
 8002dc2:	09db      	lsrs	r3, r3, #7
				if (s.torque_enable_ != torque_enable) {
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	f104 0402 	add.w	r4, r4, #2
 8002dca:	d007      	beq.n	8002ddc <_ZN5Servo19receiveDataCallbackEhmPh+0x48>
					servo_handler_.setTorque(i);
 8002dcc:	4630      	mov	r0, r6
					s.torque_enable_ = torque_enable;
 8002dce:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63
					servo_handler_.setTorque(i);
 8002dd2:	b2f9      	uxtb	r1, r7
 8002dd4:	f7ff f8de 	bl	8001f94 <_ZN15DynamixelSerial9setTorqueEh>
 8002dd8:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
			for (unsigned int i = 0; i < servo_handler_.getServoNum(); i++) {
 8002ddc:	3701      	adds	r7, #1
 8002dde:	42b8      	cmp	r0, r7
 8002de0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002de4:	d8e1      	bhi.n	8002daa <_ZN5Servo19receiveDataCallbackEhmPh+0x16>
 8002de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dea:	4770      	bx	lr

08002dec <_ZN5Servo4initEP18UART_HandleTypeDef>:
	servo_handler_.init(huart);
 8002dec:	3008      	adds	r0, #8
 8002dee:	f7ff be93 	b.w	8002b18 <_ZN15DynamixelSerial4initEP18UART_HandleTypeDef>
 8002df2:	bf00      	nop

08002df4 <_ZN5Servo6updateEv>:
	servo_handler_.update();
 8002df4:	3008      	adds	r0, #8
 8002df6:	f7ff bc9b 	b.w	8002730 <_ZN15DynamixelSerial6updateEv>
 8002dfa:	bf00      	nop

08002dfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002dfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002dfe:	e003      	b.n	8002e08 <LoopCopyDataInit>

08002e00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e06:	3104      	adds	r1, #4

08002e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e08:	480a      	ldr	r0, [pc, #40]	; (8002e34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e10:	d3f6      	bcc.n	8002e00 <CopyDataInit>
  ldr r2, =_sbss
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e14:	e002      	b.n	8002e1c <LoopFillZerobss>

08002e16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e18:	f842 3b04 	str.w	r3, [r2], #4

08002e1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002e1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002e20:	d3f9      	bcc.n	8002e16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e22:	f000 fb75 	bl	8003510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e26:	f003 f813 	bl	8005e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e2a:	f000 f923 	bl	8003074 <main>
  bx lr
 8002e2e:	4770      	bx	lr
  ldr r3, =_sidata
 8002e30:	080067a8 	.word	0x080067a8
  ldr r0, =_sdata
 8002e34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e38:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8002e3c:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8002e40:	2000035c 	.word	0x2000035c

08002e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e44:	e7fe      	b.n	8002e44 <ADC1_2_IRQHandler>
	...

08002e48 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8002e48:	b570      	push	{r4, r5, r6, lr}

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 4;
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002e4a:	2200      	movs	r2, #0
  hcan.Init.Prescaler = 4;
 8002e4c:	2604      	movs	r6, #4
  hcan.Init.SJW = CAN_SJW_1TQ;
  hcan.Init.BS1 = CAN_BS1_4TQ;
 8002e4e:	f44f 3440 	mov.w	r4, #196608	; 0x30000
  hcan.Init.BS2 = CAN_BS2_4TQ;
 8002e52:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
  hcan.Instance = CAN1;
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <MX_CAN_Init+0x3c>)
 8002e58:	4d0b      	ldr	r5, [pc, #44]	; (8002e88 <MX_CAN_Init+0x40>)
  hcan.Init.ABOM = DISABLE;
  hcan.Init.AWUM = DISABLE;
  hcan.Init.NART = DISABLE;
  hcan.Init.RFLM = DISABLE;
  hcan.Init.TXFP = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002e5a:	4618      	mov	r0, r3
  hcan.Instance = CAN1;
 8002e5c:	e883 0060 	stmia.w	r3, {r5, r6}
  hcan.Init.BS1 = CAN_BS1_4TQ;
 8002e60:	611c      	str	r4, [r3, #16]
  hcan.Init.BS2 = CAN_BS2_4TQ;
 8002e62:	6159      	str	r1, [r3, #20]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002e64:	609a      	str	r2, [r3, #8]
  hcan.Init.SJW = CAN_SJW_1TQ;
 8002e66:	60da      	str	r2, [r3, #12]
  hcan.Init.TTCM = DISABLE;
 8002e68:	619a      	str	r2, [r3, #24]
  hcan.Init.ABOM = DISABLE;
 8002e6a:	61da      	str	r2, [r3, #28]
  hcan.Init.AWUM = DISABLE;
 8002e6c:	621a      	str	r2, [r3, #32]
  hcan.Init.NART = DISABLE;
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002e74:	f000 fc26 	bl	80036c4 <HAL_CAN_Init>
 8002e78:	b900      	cbnz	r0, 8002e7c <MX_CAN_Init+0x34>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
  {
    Error_Handler();
  }

}
 8002e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8002e80:	f000 b9ac 	b.w	80031dc <Error_Handler>
 8002e84:	2000020c 	.word	0x2000020c
 8002e88:	40006400 	.word	0x40006400

08002e8c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN1)
 8002e8c:	6802      	ldr	r2, [r0, #0]
 8002e8e:	4b17      	ldr	r3, [pc, #92]	; (8002eec <HAL_CAN_MspInit+0x60>)
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d000      	beq.n	8002e96 <HAL_CAN_MspInit+0xa>
 8002e94:	4770      	bx	lr
{
 8002e96:	b530      	push	{r4, r5, lr}
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e98:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e9a:	f44f 6500 	mov.w	r5, #2048	; 0x800
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002e9e:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8002ea2:	69da      	ldr	r2, [r3, #28]
{
 8002ea4:	b087      	sub	sp, #28
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002ea6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002eaa:	61da      	str	r2, [r3, #28]
 8002eac:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eae:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb4:	480e      	ldr	r0, [pc, #56]	; (8002ef0 <HAL_CAN_MspInit+0x64>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002eb6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002eb8:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eba:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	9404      	str	r4, [sp, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ebe:	f44f 5580 	mov.w	r5, #4096	; 0x1000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec2:	f001 f84f 	bl	8003f64 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ec6:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eca:	a902      	add	r1, sp, #8
 8002ecc:	4808      	ldr	r0, [pc, #32]	; (8002ef0 <HAL_CAN_MspInit+0x64>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ece:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed0:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002ed2:	9502      	str	r5, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed4:	f001 f846 	bl	8003f64 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002ed8:	4622      	mov	r2, r4
 8002eda:	4621      	mov	r1, r4
 8002edc:	2015      	movs	r0, #21
 8002ede:	f000 feaf 	bl	8003c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002ee2:	2015      	movs	r0, #21
 8002ee4:	f000 fee2 	bl	8003cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8002ee8:	b007      	add	sp, #28
 8002eea:	bd30      	pop	{r4, r5, pc}
 8002eec:	40006400 	.word	0x40006400
 8002ef0:	40010800 	.word	0x40010800

08002ef4 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <MX_GPIO_Init+0xb0>)
{
 8002ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	699a      	ldr	r2, [r3, #24]
{
 8002efc:	b088      	sub	sp, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efe:	f042 0210 	orr.w	r2, r2, #16
 8002f02:	619a      	str	r2, [r3, #24]
 8002f04:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f06:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002fb0 <MX_GPIO_Init+0xbc>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f0a:	f002 0210 	and.w	r2, r2, #16
 8002f0e:	9200      	str	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f10:	6999      	ldr	r1, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS485EN_Pin|TEST_Pin, GPIO_PIN_RESET);
 8002f12:	4f25      	ldr	r7, [pc, #148]	; (8002fa8 <MX_GPIO_Init+0xb4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f14:	f041 0120 	orr.w	r1, r1, #32
 8002f18:	6199      	str	r1, [r3, #24]
 8002f1a:	699c      	ldr	r4, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f1c:	4640      	mov	r0, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f1e:	f004 0420 	and.w	r4, r4, #32
 8002f22:	9401      	str	r4, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f24:	699c      	ldr	r4, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8002f26:	4e21      	ldr	r6, [pc, #132]	; (8002fac <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f28:	f044 0404 	orr.w	r4, r4, #4
 8002f2c:	619c      	str	r4, [r3, #24]
 8002f2e:	699c      	ldr	r4, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f30:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	f004 0404 	and.w	r4, r4, #4
 8002f36:	9402      	str	r4, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f38:	699c      	ldr	r4, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3e:	f044 0408 	orr.w	r4, r4, #8
 8002f42:	619c      	str	r4, [r3, #24]
 8002f44:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f46:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002f4e:	f001 f909 	bl	8004164 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, RS485EN_Pin|TEST_Pin, GPIO_PIN_RESET);
 8002f52:	4638      	mov	r0, r7
 8002f54:	2200      	movs	r2, #0
 8002f56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002f5a:	f001 f903 	bl	8004164 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(IMUCS_GPIO_Port, IMUCS_Pin, GPIO_PIN_RESET);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4630      	mov	r0, r6
 8002f62:	2140      	movs	r1, #64	; 0x40
 8002f64:	f001 f8fe 	bl	8004164 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f68:	2402      	movs	r4, #2
  GPIO_InitStruct.Pin = LED_Pin;
 8002f6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f6e:	4640      	mov	r0, r8
 8002f70:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = LED_Pin;
 8002f72:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f74:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002f78:	f000 fff4 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RS485EN_Pin|TEST_Pin;
 8002f7c:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f80:	4638      	mov	r0, r7
 8002f82:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = RS485EN_Pin|TEST_Pin;
 8002f84:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f86:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f88:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8a:	f000 ffeb 	bl	8003f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8002f8e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8002f90:	a904      	add	r1, sp, #16
 8002f92:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f94:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f96:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = IMUCS_Pin;
 8002f98:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(IMUCS_GPIO_Port, &GPIO_InitStruct);
 8002f9a:	f000 ffe3 	bl	8003f64 <HAL_GPIO_Init>

}
 8002f9e:	b008      	add	sp, #32
 8002fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40010800 	.word	0x40010800
 8002fac:	40010c00 	.word	0x40010c00
 8002fb0:	40011000 	.word	0x40011000

08002fb4 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
// main subrutine for update enach instance
void HAL_SYSTICK_Callback(void)
{
 8002fb4:	b508      	push	{r3, lr}
  if (!start_process_flag_) return;
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_SYSTICK_Callback+0x24>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b903      	cbnz	r3, 8002fbe <HAL_SYSTICK_Callback+0xa>
 8002fbc:	bd08      	pop	{r3, pc}
  CANDeviceManager::tick(1);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f7fe fb3e 	bl	8001640 <_ZN16CANDeviceManager4tickEi>
  p_imu_->update();
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_SYSTICK_Callback+0x28>)
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	f7fe fe1e 	bl	8001c08 <_ZN3IMU6updateEv>
  p_servo_->update();
 8002fcc:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <HAL_SYSTICK_Callback+0x2c>)
 8002fce:	6818      	ldr	r0, [r3, #0]
}
 8002fd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  p_servo_->update();
 8002fd4:	f7ff bf0e 	b.w	8002df4 <_ZN5Servo6updateEv>
 8002fd8:	2000024d 	.word	0x2000024d
 8002fdc:	20000250 	.word	0x20000250
 8002fe0:	20000254 	.word	0x20000254

08002fe4 <_ZN16CANDeviceManager27userReceiveMessagesCallbackEhhhmPh>:
/* USER CODE BEGIN 0 */


void CANDeviceManager::userReceiveMessagesCallback(uint8_t slave_id, uint8_t device_id, uint8_t message_id, uint32_t DLC, uint8_t* data)
{
	if (device_id == CAN::DEVICEID_SERVO && message_id == CAN::MESSAGEID_RECEIVE_SERVO_ANGLE) {
 8002fe4:	2902      	cmp	r1, #2
 8002fe6:	d000      	beq.n	8002fea <_ZN16CANDeviceManager27userReceiveMessagesCallbackEhhhmPh+0x6>
 8002fe8:	4770      	bx	lr
 8002fea:	2a00      	cmp	r2, #0
 8002fec:	d1fc      	bne.n	8002fe8 <_ZN16CANDeviceManager27userReceiveMessagesCallbackEhhhmPh+0x4>
		receive_flag_ = true;
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4b01      	ldr	r3, [pc, #4]	; (8002ff8 <_ZN16CANDeviceManager27userReceiveMessagesCallbackEhhhmPh+0x14>)
 8002ff2:	701a      	strb	r2, [r3, #0]
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000024c 	.word	0x2000024c

08002ffc <_Z18SystemClock_Configv>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002ffc:	b570      	push	{r4, r5, r6, lr}

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003002:	2609      	movs	r6, #9
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003004:	2500      	movs	r5, #0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003006:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003008:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800300a:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
{
 800300e:	b090      	sub	sp, #64	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003010:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003012:	9606      	str	r6, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003014:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003016:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003018:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800301a:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800301c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800301e:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003020:	f001 f8a8 	bl	8004174 <HAL_RCC_OscConfig>
 8003024:	b100      	cbz	r0, 8003028 <_Z18SystemClock_Configv+0x2c>
 8003026:	e7fe      	b.n	8003026 <_Z18SystemClock_Configv+0x2a>
 8003028:	4603      	mov	r3, r0

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800302a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800302e:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003030:	4621      	mov	r1, r4
 8003032:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003034:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003036:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003038:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800303a:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800303c:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800303e:	f001 fb8f 	bl	8004760 <HAL_RCC_ClockConfig>
 8003042:	4604      	mov	r4, r0
 8003044:	b100      	cbz	r0, 8003048 <_Z18SystemClock_Configv+0x4c>
 8003046:	e7fe      	b.n	8003046 <_Z18SystemClock_Configv+0x4a>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003048:	f001 fc40 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <_Z18SystemClock_Configv+0x74>)
 800304e:	fba3 3000 	umull	r3, r0, r3, r0
 8003052:	0980      	lsrs	r0, r0, #6
 8003054:	f000 fe36 	bl	8003cc4 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003058:	2004      	movs	r0, #4
 800305a:	f000 fe4b 	bl	8003cf4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800305e:	4622      	mov	r2, r4
 8003060:	4621      	mov	r1, r4
 8003062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003066:	f000 fdeb 	bl	8003c40 <HAL_NVIC_SetPriority>
}
 800306a:	b010      	add	sp, #64	; 0x40
 800306c:	bd70      	pop	{r4, r5, r6, pc}
 800306e:	bf00      	nop
 8003070:	10624dd3 	.word	0x10624dd3

08003074 <main>:
{
 8003074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003078:	b0d3      	sub	sp, #332	; 0x14c
  HAL_Init();
 800307a:	f000 fa85 	bl	8003588 <HAL_Init>
  Flashmemory::addValue(&slave_id, 2);
 800307e:	f10d 0802 	add.w	r8, sp, #2
  SystemClock_Config();
 8003082:	f7ff ffbb 	bl	8002ffc <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8003086:	f7ff ff35 	bl	8002ef4 <MX_GPIO_Init>
  MX_CAN_Init();
 800308a:	f7ff fedd 	bl	8002e48 <MX_CAN_Init>
  MX_SPI1_Init();
 800308e:	f000 f8a7 	bl	80031e0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003092:	f000 f967 	bl	8003364 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8003096:	f000 f9e9 	bl	800346c <MX_USART2_UART_Init>
  Flashmemory::init(FLASH_BASE + FLASH_PAGE_SIZE * 63); //64th page
 800309a:	4842      	ldr	r0, [pc, #264]	; (80031a4 <main+0x130>)
 800309c:	f7fe fb2a 	bl	80016f4 <_ZN11Flashmemory4initEm>
  Flashmemory::addValue(&slave_id, 2);
 80030a0:	4640      	mov	r0, r8
 80030a2:	2102      	movs	r1, #2
 80030a4:	f7fe fb2c 	bl	8001700 <_ZN11Flashmemory8addValueEPvj>
  Flashmemory::read();
 80030a8:	f7fe fb3c 	bl	8001724 <_ZN11Flashmemory4readEv>
  if (slave_id == 0 || slave_id > 14) {
 80030ac:	f8b8 4000 	ldrh.w	r4, [r8]
 80030b0:	1e63      	subs	r3, r4, #1
 80030b2:	2b0d      	cmp	r3, #13
 80030b4:	d86b      	bhi.n	800318e <main+0x11a>
	CANDevice(uint8_t device_id, uint8_t slave_id):m_device_id(device_id), m_slave_id(slave_id){}
 80030b6:	2600      	movs	r6, #0
 80030b8:	f04f 0901 	mov.w	r9, #1
 80030bc:	2702      	movs	r7, #2
private:
	  TIM_HandleTypeDef* pwm_htim_;
	  void setPwm(uint16_t pwm);
public:
	Motor(){}
	Motor(uint8_t slave_id):CANDevice(CAN::DEVICEID_MOTOR, slave_id){}
 80030be:	4d3a      	ldr	r5, [pc, #232]	; (80031a8 <main+0x134>)

class IMU : public CANDevice {
public:

  IMU(){}
  IMU(uint8_t slave_id):CANDevice(CAN::DEVICEID_IMU, slave_id){}
 80030c0:	4a3a      	ldr	r2, [pc, #232]	; (80031ac <main+0x138>)
  IMU imu(slave_id); p_imu_= &imu;
 80030c2:	483b      	ldr	r0, [pc, #236]	; (80031b0 <main+0x13c>)
  Motor motor(slave_id);
 80030c4:	b2e4      	uxtb	r4, r4
 80030c6:	9501      	str	r5, [sp, #4]
	Servo(uint8_t slave_id):CANDevice(CAN::DEVICEID_SERVO, slave_id){}
 80030c8:	4b3a      	ldr	r3, [pc, #232]	; (80031b4 <main+0x140>)
 80030ca:	ad09      	add	r5, sp, #36	; 0x24
  {
 80030cc:	4631      	mov	r1, r6
 80030ce:	716c      	strb	r4, [r5, #5]
 80030d0:	602a      	str	r2, [r5, #0]
  IMU imu(slave_id); p_imu_= &imu;
 80030d2:	6005      	str	r5, [r0, #0]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
 80030da:	f885 9004 	strb.w	r9, [r5, #4]
 80030de:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
 80030e2:	f88d 4009 	strb.w	r4, [sp, #9]
 80030e6:	f88d 6008 	strb.w	r6, [sp, #8]
 80030ea:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
 80030ee:	9314      	str	r3, [sp, #80]	; 0x50
 80030f0:	f002 fee5 	bl	8005ebe <memset>
 80030f4:	f04f 0e07 	mov.w	lr, #7
    buffer_length_ = (uint16_t)SIZE;
 80030f8:	2310      	movs	r3, #16
private:
	uint16_t& slave_id_;
	Servo& servo_;
	IMU& imu_;
public:
	Initializer(uint16_t& slave_id, Servo& servo, IMU& imu):CANDevice(CAN::DEVICEID_INITIALIZER, slave_id), slave_id_(slave_id), servo_(servo), imu_(imu){}
 80030fa:	492f      	ldr	r1, [pc, #188]	; (80031b8 <main+0x144>)
  Servo servo(slave_id); p_servo_ = &servo;
 80030fc:	4a2f      	ldr	r2, [pc, #188]	; (80031bc <main+0x148>)
    byte_in_progress_ = 0;
 80030fe:	f8ad 607e 	strh.w	r6, [sp, #126]	; 0x7e
    byte_to_add_ = 0;
 8003102:	f8ad 6080 	strh.w	r6, [sp, #128]	; 0x80
  motor.init(&htim1);
 8003106:	a801      	add	r0, sp, #4
 8003108:	9104      	str	r1, [sp, #16]
    	receive_flag_ = false;
 800310a:	4637      	mov	r7, r6
  motor.init(&htim1);
 800310c:	492c      	ldr	r1, [pc, #176]	; (80031c0 <main+0x14c>)
  Servo servo(slave_id); p_servo_ = &servo;
 800310e:	ae14      	add	r6, sp, #80	; 0x50
 8003110:	f88d e014 	strb.w	lr, [sp, #20]
 8003114:	6016      	str	r6, [r2, #0]
    buffer_length_ = (uint16_t)SIZE;
 8003116:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
 800311a:	f88d 4015 	strb.w	r4, [sp, #21]
 800311e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003122:	9508      	str	r5, [sp, #32]
 8003124:	9607      	str	r6, [sp, #28]
  motor.init(&htim1);
 8003126:	f7fe ff2f 	bl	8001f88 <_ZN5Motor4initEP17TIM_HandleTypeDef>
  HAL_Delay(300); //wait servo init
 800312a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800312e:	f000 fa4b 	bl	80035c8 <HAL_Delay>
  servo.init(&huart2);
 8003132:	4630      	mov	r0, r6
 8003134:	4923      	ldr	r1, [pc, #140]	; (80031c4 <main+0x150>)
 8003136:	f7ff fe59 	bl	8002dec <_ZN5Servo4initEP18UART_HandleTypeDef>
  imu.init(&hspi1);
 800313a:	4628      	mov	r0, r5
 800313c:	4922      	ldr	r1, [pc, #136]	; (80031c8 <main+0x154>)
 800313e:	f7fe fc75 	bl	8001a2c <_ZN3IMU4initEP19__SPI_HandleTypeDef>
  CANDeviceManager::init(&hcan, slave_id, GPIOC, GPIO_PIN_13);
 8003142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003146:	f898 1000 	ldrb.w	r1, [r8]
 800314a:	4a20      	ldr	r2, [pc, #128]	; (80031cc <main+0x158>)
 800314c:	4820      	ldr	r0, [pc, #128]	; (80031d0 <main+0x15c>)
 800314e:	f7fe fa61 	bl	8001614 <_ZN16CANDeviceManager4initEP17CAN_HandleTypeDefhP12GPIO_TypeDeft>
  CANDeviceManager::addDevice(&motor);
 8003152:	a801      	add	r0, sp, #4
 8003154:	f7fe fa6c 	bl	8001630 <_ZN16CANDeviceManager9addDeviceEP9CANDevice>
  CANDeviceManager::addDevice(&imu);
 8003158:	4628      	mov	r0, r5
 800315a:	f7fe fa69 	bl	8001630 <_ZN16CANDeviceManager9addDeviceEP9CANDevice>
  CANDeviceManager::addDevice(&servo);
 800315e:	4630      	mov	r0, r6
 8003160:	f7fe fa66 	bl	8001630 <_ZN16CANDeviceManager9addDeviceEP9CANDevice>
  CANDeviceManager::addDevice(&initializer);
 8003164:	a804      	add	r0, sp, #16
 8003166:	f7fe fa63 	bl	8001630 <_ZN16CANDeviceManager9addDeviceEP9CANDevice>
  start_process_flag_ = true;
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <main+0x160>)
 800316c:	4c1a      	ldr	r4, [pc, #104]	; (80031d8 <main+0x164>)
 800316e:	f883 9000 	strb.w	r9, [r3]
 8003172:	e001      	b.n	8003178 <main+0x104>
    CANDeviceManager::Receive_IT();
 8003174:	f7fe fa88 	bl	8001688 <_ZN16CANDeviceManager10Receive_ITEv>
    if (receive_flag_)
 8003178:	7823      	ldrb	r3, [r4, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0fa      	beq.n	8003174 <main+0x100>
    	servo.sendData();
 800317e:	4630      	mov	r0, r6
    	receive_flag_ = false;
 8003180:	7027      	strb	r7, [r4, #0]
    	servo.sendData();
 8003182:	f7ff fdb9 	bl	8002cf8 <_ZN5Servo8sendDataEv>
    	imu.sendData();
 8003186:	4628      	mov	r0, r5
 8003188:	f7fe fb4c 	bl	8001824 <_ZN3IMU8sendDataEv>
 800318c:	e7f2      	b.n	8003174 <main+0x100>
	  slave_id = 1;
 800318e:	2301      	movs	r3, #1
 8003190:	f8a8 3000 	strh.w	r3, [r8]
	  Flashmemory::erase();
 8003194:	f7fe faf2 	bl	800177c <_ZN11Flashmemory5eraseEv>
	  Flashmemory::write();
 8003198:	f7fe fb0a 	bl	80017b0 <_ZN11Flashmemory5writeEv>
}
 800319c:	2000      	movs	r0, #0
 800319e:	b053      	add	sp, #332	; 0x14c
 80031a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031a4:	0800fc00 	.word	0x0800fc00
 80031a8:	080060d0 	.word	0x080060d0
 80031ac:	08006080 	.word	0x08006080
 80031b0:	20000250 	.word	0x20000250
 80031b4:	080062f8 	.word	0x080062f8
 80031b8:	080060ac 	.word	0x080060ac
 80031bc:	20000254 	.word	0x20000254
 80031c0:	200002b0 	.word	0x200002b0
 80031c4:	200002ec 	.word	0x200002ec
 80031c8:	20000258 	.word	0x20000258
 80031cc:	40011000 	.word	0x40011000
 80031d0:	2000020c 	.word	0x2000020c
 80031d4:	2000024d 	.word	0x2000024d
 80031d8:	2000024c 	.word	0x2000024c

080031dc <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80031dc:	e7fe      	b.n	80031dc <Error_Handler>
 80031de:	bf00      	nop

080031e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031e2:	2200      	movs	r2, #0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031e4:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031e8:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80031ec:	2410      	movs	r4, #16
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 80031ee:	210a      	movs	r1, #10
  hspi1.Instance = SPI1;
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <MX_SPI1_Init+0x40>)
 80031f2:	4e0c      	ldr	r6, [pc, #48]	; (8003224 <MX_SPI1_Init+0x44>)
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031f4:	4618      	mov	r0, r3
  hspi1.Instance = SPI1;
 80031f6:	e883 00c0 	stmia.w	r3, {r6, r7}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031fa:	619d      	str	r5, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80031fc:	61dc      	str	r4, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 80031fe:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003200:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003202:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003204:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003206:	615a      	str	r2, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003208:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800320a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800320c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800320e:	f001 ff4d 	bl	80050ac <HAL_SPI_Init>
 8003212:	b900      	cbnz	r0, 8003216 <MX_SPI1_Init+0x36>
 8003214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    Error_Handler();
  }

}
 8003216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Error_Handler();
 800321a:	f7ff bfdf 	b.w	80031dc <Error_Handler>
 800321e:	bf00      	nop
 8003220:	20000258 	.word	0x20000258
 8003224:	40013000 	.word	0x40013000

08003228 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8003228:	6802      	ldr	r2, [r0, #0]
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_SPI_MspInit+0x58>)
 800322c:	429a      	cmp	r2, r3
 800322e:	d000      	beq.n	8003232 <HAL_SPI_MspInit+0xa>
 8003230:	4770      	bx	lr
{
 8003232:	b570      	push	{r4, r5, r6, lr}
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003234:	2628      	movs	r6, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003238:	2403      	movs	r4, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800323a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800323e:	699a      	ldr	r2, [r3, #24]
{
 8003240:	b086      	sub	sp, #24
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003242:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003246:	619a      	str	r2, [r3, #24]
 8003248:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324a:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800324c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003250:	480c      	ldr	r0, [pc, #48]	; (8003284 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003252:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003254:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003256:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003258:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325a:	f000 fe83 	bl	8003f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800325e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003260:	2210      	movs	r2, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003262:	a902      	add	r1, sp, #8
 8003264:	4807      	ldr	r0, [pc, #28]	; (8003284 <HAL_SPI_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003266:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003268:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800326c:	f000 fe7a 	bl	8003f64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003270:	4a05      	ldr	r2, [pc, #20]	; (8003288 <HAL_SPI_MspInit+0x60>)
 8003272:	6853      	ldr	r3, [r2, #4]
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800327a:	b006      	add	sp, #24
 800327c:	bd70      	pop	{r4, r5, r6, pc}
 800327e:	bf00      	nop
 8003280:	40013000 	.word	0x40013000
 8003284:	40010c00 	.word	0x40010c00
 8003288:	40010000 	.word	0x40010000

0800328c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800328c:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_MspInit+0x84>)
{
 800328e:	b500      	push	{lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003290:	699a      	ldr	r2, [r3, #24]
{
 8003292:	b083      	sub	sp, #12
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003294:	f042 0201 	orr.w	r2, r2, #1
 8003298:	619a      	str	r2, [r3, #24]
 800329a:	699b      	ldr	r3, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329c:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a4:	f000 fcba 	bl	8003c1c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80032a8:	2200      	movs	r2, #0
 80032aa:	f06f 000b 	mvn.w	r0, #11
 80032ae:	4611      	mov	r1, r2
 80032b0:	f000 fcc6 	bl	8003c40 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80032b4:	2200      	movs	r2, #0
 80032b6:	f06f 000a 	mvn.w	r0, #10
 80032ba:	4611      	mov	r1, r2
 80032bc:	f000 fcc0 	bl	8003c40 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	f06f 0009 	mvn.w	r0, #9
 80032c6:	4611      	mov	r1, r2
 80032c8:	f000 fcba 	bl	8003c40 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80032cc:	2200      	movs	r2, #0
 80032ce:	f06f 0004 	mvn.w	r0, #4
 80032d2:	4611      	mov	r1, r2
 80032d4:	f000 fcb4 	bl	8003c40 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80032d8:	2200      	movs	r2, #0
 80032da:	f06f 0003 	mvn.w	r0, #3
 80032de:	4611      	mov	r1, r2
 80032e0:	f000 fcae 	bl	8003c40 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80032e4:	2200      	movs	r2, #0
 80032e6:	f06f 0001 	mvn.w	r0, #1
 80032ea:	4611      	mov	r1, r2
 80032ec:	f000 fca8 	bl	8003c40 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032f6:	4611      	mov	r1, r2
 80032f8:	f000 fca2 	bl	8003c40 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032fc:	4a05      	ldr	r2, [pc, #20]	; (8003314 <HAL_MspInit+0x88>)
 80032fe:	6853      	ldr	r3, [r2, #4]
 8003300:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003304:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003308:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330a:	b003      	add	sp, #12
 800330c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003310:	40021000 	.word	0x40021000
 8003314:	40010000 	.word	0x40010000

08003318 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003318:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800331a:	f000 f947 	bl	80035ac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800331e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003322:	f000 bcf3 	b.w	8003d0c <HAL_SYSTICK_IRQHandler>
 8003326:	bf00      	nop

08003328 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <CAN1_RX1_IRQHandler+0x8>)
 800332a:	f000 bbb5 	b.w	8003a98 <HAL_CAN_IRQHandler>
 800332e:	bf00      	nop
 8003330:	2000020c 	.word	0x2000020c

08003334 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003334:	4801      	ldr	r0, [pc, #4]	; (800333c <USART2_IRQHandler+0x8>)
 8003336:	f002 bb93 	b.w	8005a60 <HAL_UART_IRQHandler>
 800333a:	bf00      	nop
 800333c:	200002ec 	.word	0x200002ec

08003340 <HAL_TIM_MspPostInit.part.0>:
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003340:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003342:	f44f 7280 	mov.w	r2, #256	; 0x100
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
 8003346:	b500      	push	{lr}
 8003348:	b085      	sub	sp, #20
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334a:	4669      	mov	r1, sp
 800334c:	4804      	ldr	r0, [pc, #16]	; (8003360 <HAL_TIM_MspPostInit.part.0+0x20>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334e:	e88d 000c 	stmia.w	sp, {r2, r3}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003354:	f000 fe06 	bl	8003f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003358:	b005      	add	sp, #20
 800335a:	f85d fb04 	ldr.w	pc, [sp], #4
 800335e:	bf00      	nop
 8003360:	40010800 	.word	0x40010800

08003364 <MX_TIM1_Init>:
{
 8003364:	b570      	push	{r4, r5, r6, lr}
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003366:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 1;
 8003368:	2601      	movs	r6, #1
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800336a:	2120      	movs	r1, #32
  htim1.Init.Period = 36000;
 800336c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
  htim1.Instance = TIM1;
 8003370:	4c32      	ldr	r4, [pc, #200]	; (800343c <MX_TIM1_Init+0xd8>)
 8003372:	4d33      	ldr	r5, [pc, #204]	; (8003440 <MX_TIM1_Init+0xdc>)
{
 8003374:	b094      	sub	sp, #80	; 0x50
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003376:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 8003378:	e884 0060 	stmia.w	r4, {r5, r6}
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800337c:	60a1      	str	r1, [r4, #8]
  htim1.Init.Period = 36000;
 800337e:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003380:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8003382:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003384:	f002 f86e 	bl	8005464 <HAL_TIM_Base_Init>
 8003388:	2800      	cmp	r0, #0
 800338a:	d13d      	bne.n	8003408 <MX_TIM1_Init+0xa4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800338c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003390:	a914      	add	r1, sp, #80	; 0x50
 8003392:	f841 3d48 	str.w	r3, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003396:	4829      	ldr	r0, [pc, #164]	; (800343c <MX_TIM1_Init+0xd8>)
 8003398:	f001 ff66 	bl	8005268 <HAL_TIM_ConfigClockSource>
 800339c:	2800      	cmp	r0, #0
 800339e:	d149      	bne.n	8003434 <MX_TIM1_Init+0xd0>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033a0:	4826      	ldr	r0, [pc, #152]	; (800343c <MX_TIM1_Init+0xd8>)
 80033a2:	f002 f87b 	bl	800549c <HAL_TIM_PWM_Init>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d141      	bne.n	800342e <MX_TIM1_Init+0xca>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033aa:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033ac:	4669      	mov	r1, sp
 80033ae:	4823      	ldr	r0, [pc, #140]	; (800343c <MX_TIM1_Init+0xd8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033b0:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b2:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033b4:	f002 f94a 	bl	800564c <HAL_TIMEx_MasterConfigSynchronization>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d135      	bne.n	8003428 <MX_TIM1_Init+0xc4>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033bc:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033c2:	a906      	add	r1, sp, #24
 80033c4:	481d      	ldr	r0, [pc, #116]	; (800343c <MX_TIM1_Init+0xd8>)
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033c6:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033c8:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033ca:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033cc:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033ce:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033d0:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033d2:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033d4:	f002 f916 	bl	8005604 <HAL_TIMEx_ConfigBreakDeadTime>
 80033d8:	bb18      	cbnz	r0, 8003422 <MX_TIM1_Init+0xbe>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033da:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033dc:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 18000;
 80033de:	f244 6550 	movw	r5, #18000	; 0x4650
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033e2:	461a      	mov	r2, r3
 80033e4:	a90d      	add	r1, sp, #52	; 0x34
 80033e6:	4815      	ldr	r0, [pc, #84]	; (800343c <MX_TIM1_Init+0xd8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033e8:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033ea:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ec:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033ee:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033f0:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033f2:	960d      	str	r6, [sp, #52]	; 0x34
  sConfigOC.Pulse = 18000;
 80033f4:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033f6:	f002 f89b 	bl	8005530 <HAL_TIM_PWM_ConfigChannel>
 80033fa:	b940      	cbnz	r0, 800340e <MX_TIM1_Init+0xaa>
  if(timHandle->Instance==TIM1)
 80033fc:	6822      	ldr	r2, [r4, #0]
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <MX_TIM1_Init+0xdc>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d00a      	beq.n	800341a <MX_TIM1_Init+0xb6>
}
 8003404:	b014      	add	sp, #80	; 0x50
 8003406:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8003408:	f7ff fee8 	bl	80031dc <Error_Handler>
 800340c:	e7be      	b.n	800338c <MX_TIM1_Init+0x28>
    Error_Handler();
 800340e:	f7ff fee5 	bl	80031dc <Error_Handler>
  if(timHandle->Instance==TIM1)
 8003412:	6822      	ldr	r2, [r4, #0]
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <MX_TIM1_Init+0xdc>)
 8003416:	429a      	cmp	r2, r3
 8003418:	d1f4      	bne.n	8003404 <MX_TIM1_Init+0xa0>
 800341a:	f7ff ff91 	bl	8003340 <HAL_TIM_MspPostInit.part.0>
}
 800341e:	b014      	add	sp, #80	; 0x50
 8003420:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8003422:	f7ff fedb 	bl	80031dc <Error_Handler>
 8003426:	e7d8      	b.n	80033da <MX_TIM1_Init+0x76>
    Error_Handler();
 8003428:	f7ff fed8 	bl	80031dc <Error_Handler>
 800342c:	e7c6      	b.n	80033bc <MX_TIM1_Init+0x58>
    Error_Handler();
 800342e:	f7ff fed5 	bl	80031dc <Error_Handler>
 8003432:	e7ba      	b.n	80033aa <MX_TIM1_Init+0x46>
    Error_Handler();
 8003434:	f7ff fed2 	bl	80031dc <Error_Handler>
 8003438:	e7b2      	b.n	80033a0 <MX_TIM1_Init+0x3c>
 800343a:	bf00      	nop
 800343c:	200002b0 	.word	0x200002b0
 8003440:	40012c00 	.word	0x40012c00

08003444 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 8003444:	6802      	ldr	r2, [r0, #0]
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_TIM_Base_MspInit+0x24>)
 8003448:	429a      	cmp	r2, r3
 800344a:	d000      	beq.n	800344e <HAL_TIM_Base_MspInit+0xa>
}
 800344c:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 800344e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8003452:	699a      	ldr	r2, [r3, #24]
{
 8003454:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800345a:	619a      	str	r2, [r3, #24]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003462:	9301      	str	r3, [sp, #4]
}
 8003464:	b002      	add	sp, #8
 8003466:	4770      	bx	lr
 8003468:	40012c00 	.word	0x40012c00

0800346c <MX_USART2_UART_Init>:
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 1000000;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800346c:	2200      	movs	r2, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800346e:	210c      	movs	r1, #12
{
 8003470:	b538      	push	{r3, r4, r5, lr}
  huart2.Instance = USART2;
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <MX_USART2_UART_Init+0x30>)
 8003474:	4d0a      	ldr	r5, [pc, #40]	; (80034a0 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 1000000;
 8003476:	4c0b      	ldr	r4, [pc, #44]	; (80034a4 <MX_USART2_UART_Init+0x38>)
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003478:	4618      	mov	r0, r3
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800347a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800347c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800347e:	611a      	str	r2, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003480:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003482:	61da      	str	r2, [r3, #28]
  huart2.Instance = USART2;
 8003484:	601d      	str	r5, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8003486:	605c      	str	r4, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003488:	6159      	str	r1, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800348a:	f002 f9f3 	bl	8005874 <HAL_UART_Init>
 800348e:	b900      	cbnz	r0, 8003492 <MX_USART2_UART_Init+0x26>
 8003490:	bd38      	pop	{r3, r4, r5, pc}
  {
    Error_Handler();
  }

}
 8003492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8003496:	f7ff bea1 	b.w	80031dc <Error_Handler>
 800349a:	bf00      	nop
 800349c:	200002ec 	.word	0x200002ec
 80034a0:	40004400 	.word	0x40004400
 80034a4:	000f4240 	.word	0x000f4240

080034a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80034a8:	6802      	ldr	r2, [r0, #0]
 80034aa:	4b17      	ldr	r3, [pc, #92]	; (8003508 <HAL_UART_MspInit+0x60>)
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d000      	beq.n	80034b2 <HAL_UART_MspInit+0xa>
 80034b0:	4770      	bx	lr
{
 80034b2:	b570      	push	{r4, r5, r6, lr}
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034b4:	2604      	movs	r6, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b8:	2403      	movs	r4, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ba:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80034be:	69da      	ldr	r2, [r3, #28]
{
 80034c0:	b086      	sub	sp, #24
    __HAL_RCC_USART2_CLK_ENABLE();
 80034c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034c6:	61da      	str	r2, [r3, #28]
 80034c8:	69db      	ldr	r3, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d0:	480e      	ldr	r0, [pc, #56]	; (800350c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80034d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034d4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034d6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034da:	f000 fd43 	bl	8003f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034de:	2208      	movs	r2, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034e0:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034e2:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	eb0d 0102 	add.w	r1, sp, r2
 80034e8:	4808      	ldr	r0, [pc, #32]	; (800350c <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034ec:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ee:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f0:	f000 fd38 	bl	8003f64 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034f4:	4622      	mov	r2, r4
 80034f6:	4621      	mov	r1, r4
 80034f8:	2026      	movs	r0, #38	; 0x26
 80034fa:	f000 fba1 	bl	8003c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034fe:	2026      	movs	r0, #38	; 0x26
 8003500:	f000 fbd4 	bl	8003cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003504:	b006      	add	sp, #24
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	40004400 	.word	0x40004400
 800350c:	40010800 	.word	0x40010800

08003510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003510:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003512:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003516:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= (uint32_t)0x00000001;
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <SystemInit+0x44>)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800351c:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <SystemInit+0x48>)
  RCC->CR |= (uint32_t)0x00000001;
 800351e:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003520:	480e      	ldr	r0, [pc, #56]	; (800355c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001;
 8003522:	f041 0101 	orr.w	r1, r1, #1
 8003526:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	400a      	ands	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003534:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003538:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003540:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003548:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000;
 800354a:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800354c:	6084      	str	r4, [r0, #8]
#endif 
}
 800354e:	bc30      	pop	{r4, r5}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	f8ff0000 	.word	0xf8ff0000
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003560:	b510      	push	{r4, lr}
 8003562:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003564:	f001 f9b2 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 8003568:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_InitTick+0x24>)
 800356a:	fba3 3000 	umull	r3, r0, r3, r0
 800356e:	0980      	lsrs	r0, r0, #6
 8003570:	f000 fba8 	bl	8003cc4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8003574:	4621      	mov	r1, r4
 8003576:	2200      	movs	r2, #0
 8003578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800357c:	f000 fb60 	bl	8003c40 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8003580:	2000      	movs	r0, #0
 8003582:	bd10      	pop	{r4, pc}
 8003584:	10624dd3 	.word	0x10624dd3

08003588 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003588:	4a07      	ldr	r2, [pc, #28]	; (80035a8 <HAL_Init+0x20>)
{
 800358a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800358c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800358e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003590:	f043 0310 	orr.w	r3, r3, #16
 8003594:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003596:	f000 fb41 	bl	8003c1c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800359a:	2000      	movs	r0, #0
 800359c:	f7ff ffe0 	bl	8003560 <HAL_InitTick>
  HAL_MspInit();
 80035a0:	f7ff fe74 	bl	800328c <HAL_MspInit>
}
 80035a4:	2000      	movs	r0, #0
 80035a6:	bd08      	pop	{r3, pc}
 80035a8:	40022000 	.word	0x40022000

080035ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80035ac:	4a02      	ldr	r2, [pc, #8]	; (80035b8 <HAL_IncTick+0xc>)
 80035ae:	6813      	ldr	r3, [r2, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	2000032c 	.word	0x2000032c

080035bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80035bc:	4b01      	ldr	r3, [pc, #4]	; (80035c4 <HAL_GetTick+0x8>)
 80035be:	6818      	ldr	r0, [r3, #0]
}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	2000032c 	.word	0x2000032c

080035c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80035c8:	b510      	push	{r4, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80035ce:	f7ff fff5 	bl	80035bc <HAL_GetTick>
 80035d2:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80035d4:	f7ff fff2 	bl	80035bc <HAL_GetTick>
 80035d8:	9b01      	ldr	r3, [sp, #4]
 80035da:	1b00      	subs	r0, r0, r4
 80035dc:	4298      	cmp	r0, r3
 80035de:	d3f9      	bcc.n	80035d4 <HAL_Delay+0xc>
  {
  }
}
 80035e0:	b002      	add	sp, #8
 80035e2:	bd10      	pop	{r4, pc}

080035e4 <HAL_CAN_ConfigFilter>:
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 80035e4:	2201      	movs	r2, #1
{
 80035e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 80035e8:	694c      	ldr	r4, [r1, #20]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 80035ea:	6803      	ldr	r3, [r0, #0]
  filternbrbitpos = ((uint32_t)1) << sFilterConfig->FilterNumber;
 80035ec:	fa02 f004 	lsl.w	r0, r2, r4
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8)   );
  
  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80035f0:	43c6      	mvns	r6, r0
  MODIFY_REG(hcan->Instance->FMR                         ,
 80035f2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80035f6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80035f8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80035fc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003600:	f042 0201 	orr.w	r2, r2, #1
 8003604:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8003608:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
  
  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800360c:	69ca      	ldr	r2, [r1, #28]
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 800360e:	4035      	ands	r5, r6
 8003610:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003614:	2a00      	cmp	r2, #0
 8003616:	d13d      	bne.n	8003694 <HAL_CAN_ConfigFilter+0xb0>
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 8003618:	68ca      	ldr	r2, [r1, #12]
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 800361a:	888d      	ldrh	r5, [r1, #4]
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800361c:	f8d3 720c 	ldr.w	r7, [r3, #524]	; 0x20c

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8003620:	f8d1 e008 	ldr.w	lr, [r1, #8]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16) |
 8003624:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh);
 8003628:	880a      	ldrh	r2, [r1, #0]
 800362a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800362e:	4037      	ands	r7, r6
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 8003630:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8003634:	f8c3 720c 	str.w	r7, [r3, #524]	; 0x20c
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8003638:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800363c:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003640:	698a      	ldr	r2, [r1, #24]
 8003642:	bb0a      	cbnz	r2, 8003688 <HAL_CAN_ConfigFilter+0xa4>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8003644:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003648:	4032      	ands	r2, r6
 800364a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800364e:	690a      	ldr	r2, [r1, #16]
 8003650:	b9a2      	cbnz	r2, 800367c <HAL_CAN_ConfigFilter+0x98>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8003652:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003656:	4032      	ands	r2, r6
 8003658:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 800365c:	6a0a      	ldr	r2, [r1, #32]
 800365e:	2a01      	cmp	r2, #1
 8003660:	d104      	bne.n	800366c <HAL_CAN_ConfigFilter+0x88>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8003662:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003666:	4310      	orrs	r0, r2
 8003668:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 800366c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
 8003670:	2000      	movs	r0, #0
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800367a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 800367c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003680:	4302      	orrs	r2, r0
 8003682:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003686:	e7e9      	b.n	800365c <HAL_CAN_ConfigFilter+0x78>
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8003688:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800368c:	4302      	orrs	r2, r0
 800368e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003692:	e7dc      	b.n	800364e <HAL_CAN_ConfigFilter+0x6a>
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003694:	2a01      	cmp	r2, #1
 8003696:	d1d3      	bne.n	8003640 <HAL_CAN_ConfigFilter+0x5c>
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8003698:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterIdLow);
 800369c:	888d      	ldrh	r5, [r1, #4]
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800369e:	ea40 0e02 	orr.w	lr, r0, r2
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 80036a2:	680a      	ldr	r2, [r1, #0]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80036a4:	688f      	ldr	r7, [r1, #8]
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterIdHigh) << 16) |
 80036a6:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
        (0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80036aa:	898a      	ldrh	r2, [r1, #12]
 80036ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
       ((0x0000FFFF & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16) |
 80036b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80036b4:	f8c3 e20c 	str.w	lr, [r3, #524]	; 0x20c
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80036b8:	f8c4 5240 	str.w	r5, [r4, #576]	; 0x240
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80036bc:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
 80036c0:	e7be      	b.n	8003640 <HAL_CAN_ConfigFilter+0x5c>
 80036c2:	bf00      	nop

080036c4 <HAL_CAN_Init>:
  if(hcan == NULL)
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d07f      	beq.n	80037c8 <HAL_CAN_Init+0x104>
{
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hcan->State == HAL_CAN_STATE_RESET)
 80036ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80036ce:	4605      	mov	r5, r0
 80036d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d072      	beq.n	80037be <HAL_CAN_Init+0xfa>
  hcan->State = HAL_CAN_STATE_BUSY;
 80036d8:	2202      	movs	r2, #2
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036da:	682b      	ldr	r3, [r5, #0]
  hcan->State = HAL_CAN_STATE_BUSY;
 80036dc:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	f022 0202 	bic.w	r2, r2, #2
 80036e6:	601a      	str	r2, [r3, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();   
 80036f0:	f7ff ff64 	bl	80035bc <HAL_GetTick>
 80036f4:	4606      	mov	r6, r0
 80036f6:	e004      	b.n	8003702 <HAL_CAN_Init+0x3e>
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80036f8:	f7ff ff60 	bl	80035bc <HAL_GetTick>
 80036fc:	1b80      	subs	r0, r0, r6
 80036fe:	280a      	cmp	r0, #10
 8003700:	d852      	bhi.n	80037a8 <HAL_CAN_Init+0xe4>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8003702:	682a      	ldr	r2, [r5, #0]
 8003704:	6854      	ldr	r4, [r2, #4]
 8003706:	f014 0401 	ands.w	r4, r4, #1
 800370a:	d0f5      	beq.n	80036f8 <HAL_CAN_Init+0x34>
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800370c:	6853      	ldr	r3, [r2, #4]
 800370e:	07d9      	lsls	r1, r3, #31
 8003710:	d550      	bpl.n	80037b4 <HAL_CAN_Init+0xf0>
    if (hcan->Init.TTCM == ENABLE)
 8003712:	69a9      	ldr	r1, [r5, #24]
    if (hcan->Init.ABOM == ENABLE)
 8003714:	69eb      	ldr	r3, [r5, #28]
      SET_BIT(tmp_mcr, CAN_MCR_TTCM);
 8003716:	2901      	cmp	r1, #1
 8003718:	bf0c      	ite	eq
 800371a:	2780      	moveq	r7, #128	; 0x80
 800371c:	2700      	movne	r7, #0
    if (hcan->Init.ABOM == ENABLE)
 800371e:	2b01      	cmp	r3, #1
    if (hcan->Init.AWUM == ENABLE)
 8003720:	6a2b      	ldr	r3, [r5, #32]
      SET_BIT(tmp_mcr, CAN_MCR_ABOM);
 8003722:	bf08      	it	eq
 8003724:	f047 0740 	orreq.w	r7, r7, #64	; 0x40
    if (hcan->Init.AWUM == ENABLE)
 8003728:	2b01      	cmp	r3, #1
    if (hcan->Init.NART == ENABLE)
 800372a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      SET_BIT(tmp_mcr, CAN_MCR_AWUM);
 800372c:	bf08      	it	eq
 800372e:	f047 0720 	orreq.w	r7, r7, #32
    if (hcan->Init.NART == ENABLE)
 8003732:	2b01      	cmp	r3, #1
    if (hcan->Init.RFLM == ENABLE)
 8003734:	6aab      	ldr	r3, [r5, #40]	; 0x28
      SET_BIT(tmp_mcr, CAN_MCR_NART);
 8003736:	bf08      	it	eq
 8003738:	f047 0710 	orreq.w	r7, r7, #16
    if (hcan->Init.RFLM == ENABLE)
 800373c:	2b01      	cmp	r3, #1
    if (hcan->Init.TXFP == ENABLE)
 800373e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003740:	68e9      	ldr	r1, [r5, #12]
      SET_BIT(tmp_mcr, CAN_MCR_RFLM);
 8003742:	bf08      	it	eq
 8003744:	f047 0708 	orreq.w	r7, r7, #8
    if (hcan->Init.TXFP == ENABLE)
 8003748:	2b01      	cmp	r3, #1
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800374a:	68ab      	ldr	r3, [r5, #8]
 800374c:	692e      	ldr	r6, [r5, #16]
 800374e:	696c      	ldr	r4, [r5, #20]
 8003750:	6868      	ldr	r0, [r5, #4]
 8003752:	ea43 0301 	orr.w	r3, r3, r1
    MODIFY_REG(hcan->Instance->MCR,
 8003756:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003758:	ea43 0306 	orr.w	r3, r3, r6
      SET_BIT(tmp_mcr, CAN_MCR_TXFP);
 800375c:	bf08      	it	eq
 800375e:	f047 0704 	orreq.w	r7, r7, #4
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003762:	3801      	subs	r0, #1
 8003764:	4323      	orrs	r3, r4
    MODIFY_REG(hcan->Instance->MCR,
 8003766:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800376a:	4303      	orrs	r3, r0
    MODIFY_REG(hcan->Instance->MCR,
 800376c:	4339      	orrs	r1, r7
 800376e:	6011      	str	r1, [r2, #0]
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003770:	61d3      	str	r3, [r2, #28]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003772:	6813      	ldr	r3, [r2, #0]
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();   
 800377a:	f7ff ff1f 	bl	80035bc <HAL_GetTick>
 800377e:	4606      	mov	r6, r0
 8003780:	e004      	b.n	800378c <HAL_CAN_Init+0xc8>
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8003782:	f7ff ff1b 	bl	80035bc <HAL_GetTick>
 8003786:	1b80      	subs	r0, r0, r6
 8003788:	280a      	cmp	r0, #10
 800378a:	d80d      	bhi.n	80037a8 <HAL_CAN_Init+0xe4>
    while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800378c:	682a      	ldr	r2, [r5, #0]
 800378e:	6854      	ldr	r4, [r2, #4]
 8003790:	f014 0401 	ands.w	r4, r4, #1
 8003794:	d0f5      	beq.n	8003782 <HAL_CAN_Init+0xbe>
    if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8003796:	6853      	ldr	r3, [r2, #4]
 8003798:	07db      	lsls	r3, r3, #31
 800379a:	d50b      	bpl.n	80037b4 <HAL_CAN_Init+0xf0>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800379c:	2000      	movs	r0, #0
    hcan->State = HAL_CAN_STATE_READY;
 800379e:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037a0:	63e8      	str	r0, [r5, #60]	; 0x3c
    hcan->State = HAL_CAN_STATE_READY;
 80037a2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    return HAL_OK;
 80037a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 80037a8:	2003      	movs	r0, #3
        __HAL_UNLOCK(hcan);
 80037aa:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
        hcan->State= HAL_CAN_STATE_TIMEOUT;
 80037ae:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
        return HAL_TIMEOUT;
 80037b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcan->State = HAL_CAN_STATE_ERROR;
 80037b4:	2304      	movs	r3, #4
    return HAL_ERROR;
 80037b6:	2001      	movs	r0, #1
    hcan->State = HAL_CAN_STATE_ERROR;
 80037b8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
 80037bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcan->Lock = HAL_UNLOCKED;
 80037be:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_CAN_MspInit(hcan);
 80037c2:	f7ff fb63 	bl	8002e8c <HAL_CAN_MspInit>
 80037c6:	e787      	b.n	80036d8 <HAL_CAN_Init+0x14>
     return HAL_ERROR;
 80037c8:	2001      	movs	r0, #1
 80037ca:	4770      	bx	lr

080037cc <HAL_CAN_Transmit>:
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));
  
  /* Process locked */
  __HAL_LOCK(hcan);
 80037cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	f000 8091 	beq.w	80038f8 <HAL_CAN_Transmit+0x12c>
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
 80037d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hcan);
 80037da:	2201      	movs	r2, #1
  if(hcan->State == HAL_CAN_STATE_BUSY_RX) 
 80037dc:	2b22      	cmp	r3, #34	; 0x22
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 80037de:	bf0c      	ite	eq
 80037e0:	2332      	moveq	r3, #50	; 0x32
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 80037e2:	2312      	movne	r3, #18
{
 80037e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  }
  
  /* Select one empty transmit mailbox */
  if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 80037e8:	f8d0 e000 	ldr.w	lr, [r0]
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 80037ec:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 80037f0:	f8de 3008 	ldr.w	r3, [lr, #8]
{
 80037f4:	b082      	sub	sp, #8
  if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 80037f6:	015c      	lsls	r4, r3, #5
  __HAL_LOCK(hcan);
 80037f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 80037fc:	d554      	bpl.n	80038a8 <HAL_CAN_Transmit+0xdc>
  {
    transmitmailbox = 0;
 80037fe:	2400      	movs	r4, #0
 8003800:	0127      	lsls	r7, r4, #4
 8003802:	eb0e 0307 	add.w	r3, lr, r7

  if (transmitmailbox != CAN_TXSTATUS_NOMAILBOX)
  {
    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8003806:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8003808:	f8d3 6180 	ldr.w	r6, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800380c:	6895      	ldr	r5, [r2, #8]
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800380e:	f006 0601 	and.w	r6, r6, #1
 8003812:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8003816:	2d00      	cmp	r5, #0
 8003818:	d170      	bne.n	80038fc <HAL_CAN_Transmit+0x130>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 800381a:	68d5      	ldr	r5, [r2, #12]
 800381c:	6816      	ldr	r6, [r2, #0]
                                                           hcan->pTxMsg->RTR);
 800381e:	f8d3 c180 	ldr.w	ip, [r3, #384]	; 0x180
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 8003822:	ea45 5646 	orr.w	r6, r5, r6, lsl #21
                                                           hcan->pTxMsg->RTR);
 8003826:	ea46 060c 	orr.w	r6, r6, ip
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_BIT_POSITION) |
 800382a:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
 800382e:	460d      	mov	r5, r1
 8003830:	4606      	mov	r6, r0
                                                           hcan->pTxMsg->IDE |
                                                           hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8003832:	6911      	ldr	r1, [r2, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8003834:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8003838:	f001 010f 	and.w	r1, r1, #15
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 800383c:	f020 000f 	bic.w	r0, r0, #15
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8003840:	6111      	str	r1, [r2, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8003842:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8003846:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_BIT_POSITION) | 
 800384a:	4477      	add	r7, lr
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 800384c:	4301      	orrs	r1, r0
 800384e:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_BIT_POSITION) | 
 8003852:	6951      	ldr	r1, [r2, #20]
  
    /* Get timeout */
    tickstart = HAL_GetTick();   
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8003854:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003940 <HAL_CAN_Transmit+0x174>
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_BIT_POSITION) | 
 8003858:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_BIT_POSITION) | 
 800385c:	6992      	ldr	r2, [r2, #24]
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800385e:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8003944 <HAL_CAN_Transmit+0x178>
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_BIT_POSITION) | 
 8003862:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003866:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800386a:	4f34      	ldr	r7, [pc, #208]	; (800393c <HAL_CAN_Transmit+0x170>)
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    tickstart = HAL_GetTick();   
 8003874:	f7ff fea2 	bl	80035bc <HAL_GetTick>
 8003878:	4682      	mov	sl, r0
 800387a:	6832      	ldr	r2, [r6, #0]
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800387c:	6893      	ldr	r3, [r2, #8]
 800387e:	b9f4      	cbnz	r4, 80038be <HAL_CAN_Transmit+0xf2>
 8003880:	ea37 0303 	bics.w	r3, r7, r3
 8003884:	bf14      	ite	ne
 8003886:	2301      	movne	r3, #1
 8003888:	2300      	moveq	r3, #0
 800388a:	b30b      	cbz	r3, 80038d0 <HAL_CAN_Transmit+0x104>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800388c:	1c6b      	adds	r3, r5, #1
 800388e:	d0f5      	beq.n	800387c <HAL_CAN_Transmit+0xb0>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003890:	2d00      	cmp	r5, #0
 8003892:	d14c      	bne.n	800392e <HAL_CAN_Transmit+0x162>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 8003894:	2303      	movs	r3, #3
          
          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 8003896:	2200      	movs	r2, #0
          
          return HAL_TIMEOUT;
 8003898:	4618      	mov	r0, r3
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 800389a:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
          __HAL_UNLOCK(hcan);
 800389e:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    __HAL_UNLOCK(hcan);

    /* Return function status */
    return HAL_ERROR;
  }
}
 80038a2:	b002      	add	sp, #8
 80038a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 80038a8:	f8de 3008 	ldr.w	r3, [lr, #8]
 80038ac:	011a      	lsls	r2, r3, #4
 80038ae:	d433      	bmi.n	8003918 <HAL_CAN_Transmit+0x14c>
  else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME2))
 80038b0:	f8de 3008 	ldr.w	r3, [lr, #8]
 80038b4:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80038b8:	d030      	beq.n	800391c <HAL_CAN_Transmit+0x150>
    transmitmailbox = 2;
 80038ba:	2402      	movs	r4, #2
 80038bc:	e7a0      	b.n	8003800 <HAL_CAN_Transmit+0x34>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80038be:	2c01      	cmp	r4, #1
 80038c0:	d014      	beq.n	80038ec <HAL_CAN_Transmit+0x120>
 80038c2:	ea38 0303 	bics.w	r3, r8, r3
 80038c6:	bf14      	ite	ne
 80038c8:	2301      	movne	r3, #1
 80038ca:	2300      	moveq	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1dd      	bne.n	800388c <HAL_CAN_Transmit+0xc0>
    if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 80038d0:	f896 3039 	ldrb.w	r3, [r6, #57]	; 0x39
    __HAL_UNLOCK(hcan);
 80038d4:	2000      	movs	r0, #0
    if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 80038d6:	2b32      	cmp	r3, #50	; 0x32
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 80038d8:	bf0c      	ite	eq
 80038da:	2322      	moveq	r3, #34	; 0x22
      hcan->State = HAL_CAN_STATE_READY;
 80038dc:	2301      	movne	r3, #1
    __HAL_UNLOCK(hcan);
 80038de:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
      hcan->State = HAL_CAN_STATE_READY;
 80038e2:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
}
 80038e6:	b002      	add	sp, #8
 80038e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 80038ec:	ea39 0303 	bics.w	r3, r9, r3
 80038f0:	bf14      	ite	ne
 80038f2:	2301      	movne	r3, #1
 80038f4:	2300      	moveq	r3, #0
 80038f6:	e7c8      	b.n	800388a <HAL_CAN_Transmit+0xbe>
  __HAL_LOCK(hcan);
 80038f8:	2002      	movs	r0, #2
 80038fa:	4770      	bx	lr
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 80038fc:	6856      	ldr	r6, [r2, #4]
                                                           hcan->pTxMsg->RTR);
 80038fe:	f8d3 c180 	ldr.w	ip, [r3, #384]	; 0x180
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 8003902:	9601      	str	r6, [sp, #4]
                                                           hcan->pTxMsg->IDE |
 8003904:	68d6      	ldr	r6, [r2, #12]
 8003906:	4335      	orrs	r5, r6
 8003908:	9e01      	ldr	r6, [sp, #4]
 800390a:	ea45 06c6 	orr.w	r6, r5, r6, lsl #3
                                                           hcan->pTxMsg->RTR);
 800390e:	ea46 060c 	orr.w	r6, r6, ip
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_BIT_POSITION) |
 8003912:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
 8003916:	e78a      	b.n	800382e <HAL_CAN_Transmit+0x62>
    transmitmailbox = 1;
 8003918:	2401      	movs	r4, #1
 800391a:	e771      	b.n	8003800 <HAL_CAN_Transmit+0x34>
    hcan->State = HAL_CAN_STATE_ERROR; 
 800391c:	2204      	movs	r2, #4
    __HAL_UNLOCK(hcan);
 800391e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    hcan->State = HAL_CAN_STATE_ERROR; 
 8003922:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    return HAL_ERROR;
 8003926:	2001      	movs	r0, #1
}
 8003928:	b002      	add	sp, #8
 800392a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800392e:	f7ff fe45 	bl	80035bc <HAL_GetTick>
 8003932:	eba0 000a 	sub.w	r0, r0, sl
 8003936:	4285      	cmp	r5, r0
 8003938:	d3ac      	bcc.n	8003894 <HAL_CAN_Transmit+0xc8>
 800393a:	e79e      	b.n	800387a <HAL_CAN_Transmit+0xae>
 800393c:	04000003 	.word	0x04000003
 8003940:	10030000 	.word	0x10030000
 8003944:	08000300 	.word	0x08000300

08003948 <HAL_CAN_Receive_IT>:
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  if((hcan->State == HAL_CAN_STATE_READY) || (hcan->State == HAL_CAN_STATE_BUSY_TX))
 8003948:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800394c:	2b01      	cmp	r3, #1
 800394e:	d005      	beq.n	800395c <HAL_CAN_Receive_IT+0x14>
 8003950:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003954:	2b12      	cmp	r3, #18
 8003956:	d001      	beq.n	800395c <HAL_CAN_Receive_IT+0x14>
    }
    
  }
  else
  {
    return HAL_BUSY;
 8003958:	2002      	movs	r0, #2
 800395a:	4770      	bx	lr
    __HAL_LOCK(hcan);
 800395c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003960:	2b01      	cmp	r3, #1
 8003962:	d0f9      	beq.n	8003958 <HAL_CAN_Receive_IT+0x10>
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 8003964:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8003968:	b410      	push	{r4}
    if(hcan->State == HAL_CAN_STATE_BUSY_TX) 
 800396a:	2b12      	cmp	r3, #18
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 800396c:	bf0c      	ite	eq
 800396e:	2332      	moveq	r3, #50	; 0x32
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 8003970:	2322      	movne	r3, #34	; 0x22
 8003972:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003976:	2300      	movs	r3, #0
    __HAL_LOCK(hcan);
 8003978:	2201      	movs	r2, #1
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800397a:	6804      	ldr	r4, [r0, #0]
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800397c:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_LOCK(hcan);
 800397e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8003982:	6962      	ldr	r2, [r4, #20]
 8003984:	f442 420f 	orr.w	r2, r2, #36608	; 0x8f00
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	6162      	str	r2, [r4, #20]
    __HAL_UNLOCK(hcan);
 800398e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    if(FIFONumber == CAN_FIFO0)
 8003992:	b131      	cbz	r1, 80039a2 <HAL_CAN_Receive_IT+0x5a>
  }
  
  /* Return function status */
  return HAL_OK;
 8003994:	4618      	mov	r0, r3
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP1);
 8003996:	6962      	ldr	r2, [r4, #20]
 8003998:	f042 0210 	orr.w	r2, r2, #16
 800399c:	6162      	str	r2, [r4, #20]
}
 800399e:	bc10      	pop	{r4}
 80039a0:	4770      	bx	lr
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 80039a2:	6963      	ldr	r3, [r4, #20]
  return HAL_OK;
 80039a4:	4608      	mov	r0, r1
      __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FMP0);
 80039a6:	f043 0302 	orr.w	r3, r3, #2
 80039aa:	6163      	str	r3, [r4, #20]
 80039ac:	e7f7      	b.n	800399e <HAL_CAN_Receive_IT+0x56>
 80039ae:	bf00      	nop

080039b0 <HAL_CAN_TxCpltCallback>:
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop

080039b4 <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Get the Id */
  hcan->pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80039b6:	6804      	ldr	r4, [r0, #0]
 80039b8:	010a      	lsls	r2, r1, #4
 80039ba:	18a5      	adds	r5, r4, r2
 80039bc:	f8d5 61b0 	ldr.w	r6, [r5, #432]	; 0x1b0
 80039c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80039c2:	f006 0604 	and.w	r6, r6, #4
 80039c6:	609e      	str	r6, [r3, #8]
  if (hcan->pRxMsg->IDE == CAN_ID_STD)
 80039c8:	2e00      	cmp	r6, #0
 80039ca:	d14b      	bne.n	8003a64 <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0xb0>
  {
    hcan->pRxMsg->StdId = (uint32_t)0x000007FF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21);
 80039cc:	f8d5 61b0 	ldr.w	r6, [r5, #432]	; 0x1b0
 80039d0:	0d76      	lsrs	r6, r6, #21
 80039d2:	601e      	str	r6, [r3, #0]
  /* Get the DLC */
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
  /* Get the FMI */
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
  /* Get the data field */
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 80039d4:	4422      	add	r2, r4
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80039d6:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 80039da:	f8d5 c1b4 	ldr.w	ip, [r5, #436]	; 0x1b4
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80039de:	f8d5 61b4 	ldr.w	r6, [r5, #436]	; 0x1b4
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 80039e2:	f8d2 51b8 	ldr.w	r5, [r2, #440]	; 0x1b8
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80039e6:	f007 0e02 	and.w	lr, r7, #2
  hcan->pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 80039ea:	751d      	strb	r5, [r3, #20]
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
 80039ec:	f8d2 71b8 	ldr.w	r7, [r2, #440]	; 0x1b8
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 80039f0:	f00c 050f 	and.w	r5, ip, #15
  hcan->pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8);
 80039f4:	0a3f      	lsrs	r7, r7, #8
 80039f6:	755f      	strb	r7, [r3, #21]
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
 80039f8:	f8d2 71b8 	ldr.w	r7, [r2, #440]	; 0x1b8
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80039fc:	f3c6 2607 	ubfx	r6, r6, #8, #8
  hcan->pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8003a00:	0c3f      	lsrs	r7, r7, #16
 8003a02:	759f      	strb	r7, [r3, #22]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8003a04:	f8d2 71b8 	ldr.w	r7, [r2, #440]	; 0x1b8
  hcan->pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8003a08:	f8c3 e00c 	str.w	lr, [r3, #12]
  hcan->pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8003a0c:	0e3f      	lsrs	r7, r7, #24
 8003a0e:	75df      	strb	r7, [r3, #23]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8003a10:	f8d2 71bc 	ldr.w	r7, [r2, #444]	; 0x1bc
  hcan->pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8003a14:	611d      	str	r5, [r3, #16]
  hcan->pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8003a16:	761f      	strb	r7, [r3, #24]
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8003a18:	f8d2 51bc 	ldr.w	r5, [r2, #444]	; 0x1bc
  hcan->pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8003a1c:	61de      	str	r6, [r3, #28]
  hcan->pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8003a1e:	0a2d      	lsrs	r5, r5, #8
 8003a20:	765d      	strb	r5, [r3, #25]
  hcan->pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8003a22:	f8d2 51bc 	ldr.w	r5, [r2, #444]	; 0x1bc
 8003a26:	0c2d      	lsrs	r5, r5, #16
 8003a28:	769d      	strb	r5, [r3, #26]
  hcan->pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8003a2a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003a2e:	0e12      	lsrs	r2, r2, #24
 8003a30:	76da      	strb	r2, [r3, #27]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8003a32:	b9e1      	cbnz	r1, 8003a6e <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0xba>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8003a34:	68e3      	ldr	r3, [r4, #12]
 8003a36:	f043 0320 	orr.w	r3, r3, #32
 8003a3a:	60e3      	str	r3, [r4, #12]
    
    /* Disable FIFO 0 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP0);
 8003a3c:	6963      	ldr	r3, [r4, #20]
 8003a3e:	f023 0302 	bic.w	r3, r3, #2
 8003a42:	6163      	str	r3, [r4, #20]
    
    /* Disable FIFO 1 message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 8003a44:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003a48:	2b22      	cmp	r3, #34	; 0x22
 8003a4a:	d01c      	beq.n	8003a86 <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0xd2>
                               CAN_IT_BOF |
                               CAN_IT_LEC |
                               CAN_IT_ERR  );
  }
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8003a4c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003a50:	2b32      	cmp	r3, #50	; 0x32
  {
    /* Disable CAN state */
    hcan->State = HAL_CAN_STATE_BUSY_TX;
 8003a52:	bf0c      	ite	eq
 8003a54:	2312      	moveq	r3, #18
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8003a56:	2301      	movne	r3, #1
 8003a58:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8003a5c:	f7fd fe1c 	bl	8001698 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 8003a60:	2000      	movs	r0, #0
 8003a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcan->pRxMsg->ExtId = (uint32_t)0x1FFFFFFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3);
 8003a64:	f8d5 61b0 	ldr.w	r6, [r5, #432]	; 0x1b0
 8003a68:	08f6      	lsrs	r6, r6, #3
 8003a6a:	605e      	str	r6, [r3, #4]
 8003a6c:	e7b2      	b.n	80039d4 <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0x20>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8003a6e:	6923      	ldr	r3, [r4, #16]
 8003a70:	f043 0320 	orr.w	r3, r3, #32
 8003a74:	6123      	str	r3, [r4, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FMP1);
 8003a76:	6963      	ldr	r3, [r4, #20]
 8003a78:	f023 0310 	bic.w	r3, r3, #16
 8003a7c:	6163      	str	r3, [r4, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 8003a7e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003a82:	2b22      	cmp	r3, #34	; 0x22
 8003a84:	d1e2      	bne.n	8003a4c <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0x98>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8003a86:	6802      	ldr	r2, [r0, #0]
 8003a88:	6953      	ldr	r3, [r2, #20]
 8003a8a:	f423 430f 	bic.w	r3, r3, #36608	; 0x8f00
 8003a8e:	6153      	str	r3, [r2, #20]
 8003a90:	e7dc      	b.n	8003a4c <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh+0x98>
 8003a92:	bf00      	nop

08003a94 <HAL_CAN_ErrorCallback>:
{
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <HAL_CAN_IRQHandler>:
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8003a98:	6803      	ldr	r3, [r0, #0]
{
 8003a9a:	b510      	push	{r4, lr}
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8003a9c:	695a      	ldr	r2, [r3, #20]
{
 8003a9e:	4604      	mov	r4, r0
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8003aa0:	07d2      	lsls	r2, r2, #31
 8003aa2:	d50b      	bpl.n	8003abc <HAL_CAN_IRQHandler+0x24>
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8003aa4:	6899      	ldr	r1, [r3, #8]
 8003aa6:	4a5a      	ldr	r2, [pc, #360]	; (8003c10 <HAL_CAN_IRQHandler+0x178>)
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8003aa8:	438a      	bics	r2, r1
 8003aaa:	d079      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x108>
 8003aac:	6899      	ldr	r1, [r3, #8]
 8003aae:	4a59      	ldr	r2, [pc, #356]	; (8003c14 <HAL_CAN_IRQHandler+0x17c>)
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 8003ab0:	438a      	bics	r2, r1
 8003ab2:	d075      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x108>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 8003ab4:	6899      	ldr	r1, [r3, #8]
 8003ab6:	4a58      	ldr	r2, [pc, #352]	; (8003c18 <HAL_CAN_IRQHandler+0x180>)
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 8003ab8:	438a      	bics	r2, r1
 8003aba:	d071      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x108>
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	0790      	lsls	r0, r2, #30
 8003ac0:	d502      	bpl.n	8003ac8 <HAL_CAN_IRQHandler+0x30>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0))
 8003ac2:	68da      	ldr	r2, [r3, #12]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8003ac4:	0791      	lsls	r1, r2, #30
 8003ac6:	d128      	bne.n	8003b1a <HAL_CAN_IRQHandler+0x82>
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	06d2      	lsls	r2, r2, #27
 8003acc:	d502      	bpl.n	8003ad4 <HAL_CAN_IRQHandler+0x3c>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0))
 8003ace:	691a      	ldr	r2, [r3, #16]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8003ad0:	0790      	lsls	r0, r2, #30
 8003ad2:	d11c      	bne.n	8003b0e <HAL_CAN_IRQHandler+0x76>
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8003ad4:	699a      	ldr	r2, [r3, #24]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8003ad6:	07d1      	lsls	r1, r2, #31
 8003ad8:	d502      	bpl.n	8003ae0 <HAL_CAN_IRQHandler+0x48>
 8003ada:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8003adc:	05d2      	lsls	r2, r2, #23
 8003ade:	d42a      	bmi.n	8003b36 <HAL_CAN_IRQHandler+0x9e>
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8003ae0:	699a      	ldr	r2, [r3, #24]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8003ae2:	0791      	lsls	r1, r2, #30
 8003ae4:	d502      	bpl.n	8003aec <HAL_CAN_IRQHandler+0x54>
 8003ae6:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8003ae8:	0592      	lsls	r2, r2, #22
 8003aea:	d41c      	bmi.n	8003b26 <HAL_CAN_IRQHandler+0x8e>
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8003aec:	699a      	ldr	r2, [r3, #24]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8003aee:	0751      	lsls	r1, r2, #29
 8003af0:	d502      	bpl.n	8003af8 <HAL_CAN_IRQHandler+0x60>
 8003af2:	695a      	ldr	r2, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8003af4:	0552      	lsls	r2, r2, #21
 8003af6:	d44b      	bmi.n	8003b90 <HAL_CAN_IRQHandler+0xf8>
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8003af8:	699a      	ldr	r2, [r3, #24]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8003afa:	f012 0f70 	tst.w	r2, #112	; 0x70
 8003afe:	d002      	beq.n	8003b06 <HAL_CAN_IRQHandler+0x6e>
 8003b00:	695a      	ldr	r2, [r3, #20]
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 8003b02:	0511      	lsls	r1, r2, #20
 8003b04:	d41f      	bmi.n	8003b46 <HAL_CAN_IRQHandler+0xae>
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8003b06:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b08:	2a00      	cmp	r2, #0
 8003b0a:	d136      	bne.n	8003b7a <HAL_CAN_IRQHandler+0xe2>
 8003b0c:	bd10      	pop	{r4, pc}
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8003b0e:	2101      	movs	r1, #1
 8003b10:	4620      	mov	r0, r4
 8003b12:	f7ff ff4f 	bl	80039b4 <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh>
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	e7dc      	b.n	8003ad4 <HAL_CAN_IRQHandler+0x3c>
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff ff49 	bl	80039b4 <_ZL14CAN_Receive_ITP17CAN_HandleTypeDefh>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	e7d0      	b.n	8003ac8 <HAL_CAN_IRQHandler+0x30>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8003b26:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8003b28:	0410      	lsls	r0, r2, #16
 8003b2a:	d5df      	bpl.n	8003aec <HAL_CAN_IRQHandler+0x54>
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8003b2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b2e:	f042 0202 	orr.w	r2, r2, #2
 8003b32:	63e2      	str	r2, [r4, #60]	; 0x3c
 8003b34:	e7da      	b.n	8003aec <HAL_CAN_IRQHandler+0x54>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8003b36:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8003b38:	0410      	lsls	r0, r2, #16
 8003b3a:	d5d1      	bpl.n	8003ae0 <HAL_CAN_IRQHandler+0x48>
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8003b3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	63e2      	str	r2, [r4, #60]	; 0x3c
 8003b44:	e7cc      	b.n	8003ae0 <HAL_CAN_IRQHandler+0x48>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8003b46:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8003b48:	0412      	lsls	r2, r2, #16
 8003b4a:	d5dc      	bpl.n	8003b06 <HAL_CAN_IRQHandler+0x6e>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003b52:	2a30      	cmp	r2, #48	; 0x30
 8003b54:	d051      	beq.n	8003bfa <HAL_CAN_IRQHandler+0x162>
 8003b56:	d93d      	bls.n	8003bd4 <HAL_CAN_IRQHandler+0x13c>
 8003b58:	2a50      	cmp	r2, #80	; 0x50
 8003b5a:	d036      	beq.n	8003bca <HAL_CAN_IRQHandler+0x132>
 8003b5c:	2a60      	cmp	r2, #96	; 0x60
 8003b5e:	d042      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x14e>
 8003b60:	2a40      	cmp	r2, #64	; 0x40
 8003b62:	d103      	bne.n	8003b6c <HAL_CAN_IRQHandler+0xd4>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8003b64:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6a:	63e2      	str	r2, [r4, #60]	; 0x3c
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b72:	619a      	str	r2, [r3, #24]
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8003b74:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b76:	2a00      	cmp	r2, #0
 8003b78:	d0c8      	beq.n	8003b0c <HAL_CAN_IRQHandler+0x74>
    hcan->State = HAL_CAN_STATE_READY;
 8003b7a:	2101      	movs	r1, #1
    hcan->Instance->MSR |= CAN_MSR_ERRI; 
 8003b7c:	685a      	ldr	r2, [r3, #4]
    HAL_CAN_ErrorCallback(hcan);
 8003b7e:	4620      	mov	r0, r4
    hcan->Instance->MSR |= CAN_MSR_ERRI; 
 8003b80:	f042 0204 	orr.w	r2, r2, #4
 8003b84:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 8003b86:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
    HAL_CAN_ErrorCallback(hcan);
 8003b8a:	f7ff ff83 	bl	8003a94 <HAL_CAN_ErrorCallback>
}
 8003b8e:	bd10      	pop	{r4, pc}
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8003b90:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 8003b92:	0410      	lsls	r0, r2, #16
 8003b94:	d5b0      	bpl.n	8003af8 <HAL_CAN_IRQHandler+0x60>
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8003b96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003b98:	f042 0204 	orr.w	r2, r2, #4
 8003b9c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8003b9e:	e7ab      	b.n	8003af8 <HAL_CAN_IRQHandler+0x60>
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8003ba8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003bac:	2a12      	cmp	r2, #18
 8003bae:	d029      	beq.n	8003c04 <HAL_CAN_IRQHandler+0x16c>
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8003bb0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  HAL_CAN_TxCpltCallback(hcan);
 8003bb4:	4620      	mov	r0, r4
  if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 8003bb6:	2b32      	cmp	r3, #50	; 0x32
    hcan->State = HAL_CAN_STATE_BUSY_RX;
 8003bb8:	bf0c      	ite	eq
 8003bba:	2322      	moveq	r3, #34	; 0x22
    hcan->State = HAL_CAN_STATE_READY;
 8003bbc:	2301      	movne	r3, #1
 8003bbe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_CAN_TxCpltCallback(hcan);
 8003bc2:	f7ff fef5 	bl	80039b0 <HAL_CAN_TxCpltCallback>
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	e778      	b.n	8003abc <HAL_CAN_IRQHandler+0x24>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8003bca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003bcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bd0:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
 8003bd2:	e7cb      	b.n	8003b6c <HAL_CAN_IRQHandler+0xd4>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8003bd4:	2a10      	cmp	r2, #16
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_CAN_IRQHandler+0x158>
 8003bd8:	2a20      	cmp	r2, #32
 8003bda:	d1c7      	bne.n	8003b6c <HAL_CAN_IRQHandler+0xd4>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8003bdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003bde:	f042 0210 	orr.w	r2, r2, #16
 8003be2:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
 8003be4:	e7c2      	b.n	8003b6c <HAL_CAN_IRQHandler+0xd4>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8003be6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003be8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bec:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
 8003bee:	e7bd      	b.n	8003b6c <HAL_CAN_IRQHandler+0xd4>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8003bf0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003bf2:	f042 0208 	orr.w	r2, r2, #8
 8003bf6:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
 8003bf8:	e7b8      	b.n	8003b6c <HAL_CAN_IRQHandler+0xd4>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8003bfa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003bfc:	f042 0220 	orr.w	r2, r2, #32
 8003c00:	63e2      	str	r2, [r4, #60]	; 0x3c
          break;
 8003c02:	e7b3      	b.n	8003b6c <HAL_CAN_IRQHandler+0xd4>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8003c0a:	615a      	str	r2, [r3, #20]
 8003c0c:	e7d0      	b.n	8003bb0 <HAL_CAN_IRQHandler+0x118>
 8003c0e:	bf00      	nop
 8003c10:	04000003 	.word	0x04000003
 8003c14:	08000300 	.word	0x08000300
 8003c18:	10030000 	.word	0x10030000

08003c1c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c20:	4a06      	ldr	r2, [pc, #24]	; (8003c3c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003c22:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c24:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003c26:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c2a:	400b      	ands	r3, r1
 8003c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003c34:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003c36:	60d3      	str	r3, [r2, #12]
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c40:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c42:	b470      	push	{r4, r5, r6}
 8003c44:	68dc      	ldr	r4, [r3, #12]
 8003c46:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c4a:	f1c4 0607 	rsb	r6, r4, #7
 8003c4e:	2e04      	cmp	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c50:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c54:	bf28      	it	cs
 8003c56:	2604      	movcs	r6, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c58:	2b06      	cmp	r3, #6
 8003c5a:	d917      	bls.n	8003c8c <HAL_NVIC_SetPriority+0x4c>
 8003c5c:	2501      	movs	r5, #1
 8003c5e:	3c03      	subs	r4, #3
 8003c60:	40a5      	lsls	r5, r4
 8003c62:	3d01      	subs	r5, #1
 8003c64:	402a      	ands	r2, r5

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c66:	2301      	movs	r3, #1
 8003c68:	40b3      	lsls	r3, r6
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	4019      	ands	r1, r3
 8003c6e:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) < 0)
 8003c70:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
 8003c72:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) < 0)
 8003c76:	db0c      	blt.n	8003c92 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c78:	0109      	lsls	r1, r1, #4
 8003c7a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003c7e:	b2c9      	uxtb	r1, r1
 8003c80:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003c84:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003c88:	bc70      	pop	{r4, r5, r6}
 8003c8a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	4614      	mov	r4, r2
 8003c90:	e7e9      	b.n	8003c66 <HAL_NVIC_SetPriority+0x26>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_NVIC_SetPriority+0x68>)
 8003c94:	f000 000f 	and.w	r0, r0, #15
 8003c98:	0109      	lsls	r1, r1, #4
 8003c9a:	b2c9      	uxtb	r1, r1
 8003c9c:	4403      	add	r3, r0
 8003c9e:	7619      	strb	r1, [r3, #24]
 8003ca0:	bc70      	pop	{r4, r5, r6}
 8003ca2:	4770      	bx	lr
 8003ca4:	e000ed00 	.word	0xe000ed00
 8003ca8:	e000ecfc 	.word	0xe000ecfc

08003cac <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003cac:	2301      	movs	r3, #1
 8003cae:	f000 011f 	and.w	r1, r0, #31
 8003cb2:	4a03      	ldr	r2, [pc, #12]	; (8003cc0 <HAL_NVIC_EnableIRQ+0x14>)
 8003cb4:	0940      	lsrs	r0, r0, #5
 8003cb6:	408b      	lsls	r3, r1
 8003cb8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	e000e100 	.word	0xe000e100

08003cc4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc4:	3801      	subs	r0, #1
 8003cc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003cca:	d20d      	bcs.n	8003ce8 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ccc:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cd0:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cd2:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cd4:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd6:	4c06      	ldr	r4, [pc, #24]	; (8003cf0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cd8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cda:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cde:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8003ce0:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce4:	6019      	str	r1, [r3, #0]
 8003ce6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003ce8:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8003cea:	4770      	bx	lr
 8003cec:	e000e010 	.word	0xe000e010
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003cf6:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003cf8:	6813      	ldr	r3, [r2, #0]
 8003cfa:	bf0c      	ite	eq
 8003cfc:	f043 0304 	orreq.w	r3, r3, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003d00:	f023 0304 	bicne.w	r3, r3, #4
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4770      	bx	lr
 8003d08:	e000e010 	.word	0xe000e010

08003d0c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003d0c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003d0e:	f7ff f951 	bl	8002fb4 <HAL_SYSTICK_Callback>
 8003d12:	bd08      	pop	{r3, pc}

08003d14 <_ZL18FLASH_SetErrorCodev>:
static void FLASH_SetErrorCode(void)
{ 
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003d14:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <_ZL18FLASH_SetErrorCodev+0x48>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	06d8      	lsls	r0, r3, #27
 8003d1a:	d504      	bpl.n	8003d26 <_ZL18FLASH_SetErrorCodev+0x12>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003d1c:	4a10      	ldr	r2, [pc, #64]	; (8003d60 <_ZL18FLASH_SetErrorCodev+0x4c>)
 8003d1e:	69d3      	ldr	r3, [r2, #28]
 8003d20:	f043 0302 	orr.w	r3, r3, #2
 8003d24:	61d3      	str	r3, [r2, #28]
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <_ZL18FLASH_SetErrorCodev+0x48>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	0759      	lsls	r1, r3, #29
 8003d2c:	d504      	bpl.n	8003d38 <_ZL18FLASH_SetErrorCodev+0x24>
#endif /* FLASH_BANK2_END */
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003d2e:	4a0c      	ldr	r2, [pc, #48]	; (8003d60 <_ZL18FLASH_SetErrorCodev+0x4c>)
 8003d30:	69d3      	ldr	r3, [r2, #28]
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	61d3      	str	r3, [r2, #28]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <_ZL18FLASH_SetErrorCodev+0x48>)
 8003d3a:	69da      	ldr	r2, [r3, #28]
 8003d3c:	07d2      	lsls	r2, r2, #31
 8003d3e:	d508      	bpl.n	8003d52 <_ZL18FLASH_SetErrorCodev+0x3e>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003d40:	4907      	ldr	r1, [pc, #28]	; (8003d60 <_ZL18FLASH_SetErrorCodev+0x4c>)
 8003d42:	69ca      	ldr	r2, [r1, #28]
 8003d44:	f042 0204 	orr.w	r2, r2, #4
 8003d48:	61ca      	str	r2, [r1, #28]
     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	61da      	str	r2, [r3, #28]

  /* Clear FLASH error pending bits */
#if defined(FLASH_BANK2_END)
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2);
#else
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8003d52:	2214      	movs	r2, #20
 8003d54:	4b01      	ldr	r3, [pc, #4]	; (8003d5c <_ZL18FLASH_SetErrorCodev+0x48>)
 8003d56:	60da      	str	r2, [r3, #12]
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40022000 	.word	0x40022000
 8003d60:	20000330 	.word	0x20000330

08003d64 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_FLASH_Unlock+0x18>)
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	0612      	lsls	r2, r2, #24
 8003d6a:	d505      	bpl.n	8003d78 <HAL_FLASH_Unlock+0x14>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003d6c:	4904      	ldr	r1, [pc, #16]	; (8003d80 <HAL_FLASH_Unlock+0x1c>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003d6e:	4a05      	ldr	r2, [pc, #20]	; (8003d84 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003d70:	6059      	str	r1, [r3, #4]
  return HAL_OK; 
 8003d72:	2000      	movs	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003d74:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8003d76:	4770      	bx	lr
    return HAL_ERROR;
 8003d78:	2001      	movs	r0, #1
}
 8003d7a:	4770      	bx	lr
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	45670123 	.word	0x45670123
 8003d84:	cdef89ab 	.word	0xcdef89ab

08003d88 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003d88:	4a03      	ldr	r2, [pc, #12]	; (8003d98 <HAL_FLASH_Lock+0x10>)
}
 8003d8a:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003d8c:	6913      	ldr	r3, [r2, #16]
 8003d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d92:	6113      	str	r3, [r2, #16]
}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40022000 	.word	0x40022000

08003d9c <FLASH_WaitForLastOperation>:
{
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003da0:	f7ff fc0c 	bl	80035bc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003da4:	4c13      	ldr	r4, [pc, #76]	; (8003df4 <FLASH_WaitForLastOperation+0x58>)
  uint32_t tickstart = HAL_GetTick();
 8003da6:	4606      	mov	r6, r0
 8003da8:	e001      	b.n	8003dae <FLASH_WaitForLastOperation+0x12>
    if (Timeout != HAL_MAX_DELAY)
 8003daa:	1c6b      	adds	r3, r5, #1
 8003dac:	d10f      	bne.n	8003dce <FLASH_WaitForLastOperation+0x32>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003dae:	68e3      	ldr	r3, [r4, #12]
 8003db0:	07da      	lsls	r2, r3, #31
 8003db2:	d4fa      	bmi.n	8003daa <FLASH_WaitForLastOperation+0xe>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003db4:	68e3      	ldr	r3, [r4, #12]
 8003db6:	0698      	lsls	r0, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003db8:	bf44      	itt	mi
 8003dba:	2320      	movmi	r3, #32
 8003dbc:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <FLASH_WaitForLastOperation+0x58>)
 8003dc0:	68da      	ldr	r2, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003dc2:	06d1      	lsls	r1, r2, #27
 8003dc4:	d506      	bpl.n	8003dd4 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8003dc6:	f7ff ffa5 	bl	8003d14 <_ZL18FLASH_SetErrorCodev>
    return HAL_ERROR;
 8003dca:	2001      	movs	r0, #1
}
 8003dcc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003dce:	b94d      	cbnz	r5, 8003de4 <FLASH_WaitForLastOperation+0x48>
        return HAL_TIMEOUT;
 8003dd0:	2003      	movs	r0, #3
 8003dd2:	bd70      	pop	{r4, r5, r6, pc}
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003dd4:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003dd6:	07d2      	lsls	r2, r2, #31
 8003dd8:	d4f5      	bmi.n	8003dc6 <FLASH_WaitForLastOperation+0x2a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003dda:	68d8      	ldr	r0, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003ddc:	f010 0004 	ands.w	r0, r0, #4
 8003de0:	d1f1      	bne.n	8003dc6 <FLASH_WaitForLastOperation+0x2a>
}
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003de4:	f7ff fbea 	bl	80035bc <HAL_GetTick>
 8003de8:	1b80      	subs	r0, r0, r6
 8003dea:	4285      	cmp	r5, r0
 8003dec:	d2df      	bcs.n	8003dae <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 8003dee:	2003      	movs	r0, #3
 8003df0:	bd70      	pop	{r4, r5, r6, pc}
 8003df2:	bf00      	nop
 8003df4:	40022000 	.word	0x40022000

08003df8 <HAL_FLASH_Program>:
{
 8003df8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8003dfc:	4e25      	ldr	r6, [pc, #148]	; (8003e94 <HAL_FLASH_Program+0x9c>)
 8003dfe:	7e34      	ldrb	r4, [r6, #24]
 8003e00:	2c01      	cmp	r4, #1
 8003e02:	d102      	bne.n	8003e0a <HAL_FLASH_Program+0x12>
 8003e04:	2002      	movs	r0, #2
 8003e06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0a:	461d      	mov	r5, r3
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	4607      	mov	r7, r0
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e14:	4691      	mov	r9, r2
 8003e16:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8003e18:	7633      	strb	r3, [r6, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e1a:	f7ff ffbf 	bl	8003d9c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8003e1e:	bba0      	cbnz	r0, 8003e8a <HAL_FLASH_Program+0x92>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e20:	2f01      	cmp	r7, #1
 8003e22:	d003      	beq.n	8003e2c <HAL_FLASH_Program+0x34>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e24:	2f02      	cmp	r7, #2
 8003e26:	bf14      	ite	ne
 8003e28:	2704      	movne	r7, #4
 8003e2a:	2702      	moveq	r7, #2
{
 8003e2c:	2100      	movs	r1, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003e2e:	f8df a068 	ldr.w	sl, [pc, #104]	; 8003e98 <HAL_FLASH_Program+0xa0>
{
 8003e32:	468b      	mov	fp, r1
 8003e34:	e002      	b.n	8003e3c <HAL_FLASH_Program+0x44>
    for (index = 0; index < nbiterations; index++)
 8003e36:	455f      	cmp	r7, fp
 8003e38:	4659      	mov	r1, fp
 8003e3a:	dd26      	ble.n	8003e8a <HAL_FLASH_Program+0x92>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e3c:	2200      	movs	r2, #0
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8003e3e:	010b      	lsls	r3, r1, #4
 8003e40:	f1c3 0420 	rsb	r4, r3, #32
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e44:	61f2      	str	r2, [r6, #28]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8003e46:	fa05 f404 	lsl.w	r4, r5, r4
 8003e4a:	fa29 f003 	lsr.w	r0, r9, r3
 8003e4e:	3b20      	subs	r3, #32
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003e50:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8003e54:	4320      	orrs	r0, r4
 8003e56:	fa25 f303 	lsr.w	r3, r5, r3
 8003e5a:	4318      	orrs	r0, r3
 8003e5c:	b284      	uxth	r4, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003e5e:	f042 0301 	orr.w	r3, r2, #1
 8003e62:	f8ca 3010 	str.w	r3, [sl, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e66:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8003e6a:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e6e:	f7ff ff95 	bl	8003d9c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003e72:	f8da 3010 	ldr.w	r3, [sl, #16]
    for (index = 0; index < nbiterations; index++)
 8003e76:	f10b 0b01 	add.w	fp, fp, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
    for (index = 0; index < nbiterations; index++)
 8003e7e:	fa5f fb8b 	uxtb.w	fp, fp
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003e82:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d0d5      	beq.n	8003e36 <HAL_FLASH_Program+0x3e>
  __HAL_UNLOCK(&pFlash);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	7633      	strb	r3, [r6, #24]
  return status;
 8003e8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e92:	bf00      	nop
 8003e94:	20000330 	.word	0x20000330
 8003e98:	40022000 	.word	0x40022000

08003e9c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003ea0:	4e2e      	ldr	r6, [pc, #184]	; (8003f5c <HAL_FLASHEx_Erase+0xc0>)
 8003ea2:	7e33      	ldrb	r3, [r6, #24]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d043      	beq.n	8003f30 <HAL_FLASHEx_Erase+0x94>
 8003ea8:	2201      	movs	r2, #1

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003eaa:	6803      	ldr	r3, [r0, #0]
 8003eac:	4681      	mov	r9, r0
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8003eb2:	7632      	strb	r2, [r6, #24]
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003eb4:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003eb8:	d032      	beq.n	8003f20 <HAL_FLASHEx_Erase+0x84>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003eba:	f7ff ff6f 	bl	8003d9c <FLASH_WaitForLastOperation>
 8003ebe:	bb90      	cbnz	r0, 8003f26 <HAL_FLASHEx_Erase+0x8a>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFF;
 8003ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ec4:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003ec8:	f8d9 5008 	ldr.w	r5, [r9, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003ecc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003ed0:	eb05 2383 	add.w	r3, r5, r3, lsl #10
 8003ed4:	429d      	cmp	r5, r3
 8003ed6:	d226      	bcs.n	8003f26 <HAL_FLASHEx_Erase+0x8a>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ed8:	4607      	mov	r7, r0
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003eda:	4c21      	ldr	r4, [pc, #132]	; (8003f60 <HAL_FLASHEx_Erase+0xc4>)
 8003edc:	e009      	b.n	8003ef2 <HAL_FLASHEx_Erase+0x56>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003ede:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8003ee2:	f8d9 3008 	ldr.w	r3, [r9, #8]
            address += FLASH_PAGE_SIZE)
 8003ee6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003eea:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8003eee:	42ab      	cmp	r3, r5
 8003ef0:	d91a      	bls.n	8003f28 <HAL_FLASHEx_Erase+0x8c>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ef2:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003ef4:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ef6:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003efa:	f043 0302 	orr.w	r3, r3, #2
 8003efe:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003f00:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f02:	6923      	ldr	r3, [r4, #16]
 8003f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f08:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f0a:	f7ff ff47 	bl	8003d9c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003f0e:	6923      	ldr	r3, [r4, #16]
 8003f10:	f023 0302 	bic.w	r3, r3, #2
 8003f14:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d0e1      	beq.n	8003ede <HAL_FLASHEx_Erase+0x42>
            *PageError = address;
 8003f1a:	f8c8 5000 	str.w	r5, [r8]
            break;
 8003f1e:	e003      	b.n	8003f28 <HAL_FLASHEx_Erase+0x8c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003f20:	f7ff ff3c 	bl	8003d9c <FLASH_WaitForLastOperation>
 8003f24:	b138      	cbz	r0, 8003f36 <HAL_FLASHEx_Erase+0x9a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f26:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8003f28:	2300      	movs	r3, #0
 8003f2a:	7633      	strb	r3, [r6, #24]
  return status;
 8003f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 8003f30:	2002      	movs	r0, #2
}
 8003f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003f36:	4c0a      	ldr	r4, [pc, #40]	; (8003f60 <HAL_FLASHEx_Erase+0xc4>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f38:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003f3a:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f3c:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003f40:	f043 0304 	orr.w	r3, r3, #4
 8003f44:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f46:	6923      	ldr	r3, [r4, #16]
 8003f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4c:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f4e:	f7ff ff25 	bl	8003d9c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003f52:	6923      	ldr	r3, [r4, #16]
 8003f54:	f023 0304 	bic.w	r3, r3, #4
 8003f58:	6123      	str	r3, [r4, #16]
 8003f5a:	e7e5      	b.n	8003f28 <HAL_FLASHEx_Erase+0x8c>
 8003f5c:	20000330 	.word	0x20000330
 8003f60:	40022000 	.word	0x40022000

08003f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8003f68:	f04f 0800 	mov.w	r8, #0
{
 8003f6c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003f6e:	4643      	mov	r3, r8
{
 8003f70:	f06f 061f 	mvn.w	r6, #31
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f74:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 8004154 <HAL_GPIO_Init+0x1f0>
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003f78:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 8004158 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8003f7c:	4f6f      	ldr	r7, [pc, #444]	; (800413c <HAL_GPIO_Init+0x1d8>)
      switch (GPIO_Init->Mode)
 8003f7e:	9000      	str	r0, [sp, #0]
 8003f80:	e005      	b.n	8003f8e <HAL_GPIO_Init+0x2a>
  for (position = 0; position < GPIO_NUMBER; position++)
 8003f82:	3301      	adds	r3, #1
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	f106 0604 	add.w	r6, r6, #4
 8003f8a:	f000 8089 	beq.w	80040a0 <HAL_GPIO_Init+0x13c>
    ioposition = ((uint32_t)0x01) << position;
 8003f8e:	2201      	movs	r2, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f90:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8003f92:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f94:	4014      	ands	r4, r2
    if (iocurrent == ioposition)
 8003f96:	42a2      	cmp	r2, r4
 8003f98:	d1f3      	bne.n	8003f82 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8003f9a:	684d      	ldr	r5, [r1, #4]
 8003f9c:	2d12      	cmp	r5, #18
 8003f9e:	f000 80a3 	beq.w	80040e8 <HAL_GPIO_Init+0x184>
 8003fa2:	f200 808c 	bhi.w	80040be <HAL_GPIO_Init+0x15a>
 8003fa6:	2d02      	cmp	r5, #2
 8003fa8:	f000 80a5 	beq.w	80040f6 <HAL_GPIO_Init+0x192>
 8003fac:	f240 8081 	bls.w	80040b2 <HAL_GPIO_Init+0x14e>
 8003fb0:	2d03      	cmp	r5, #3
 8003fb2:	f000 809d 	beq.w	80040f0 <HAL_GPIO_Init+0x18c>
 8003fb6:	2d11      	cmp	r5, #17
 8003fb8:	d102      	bne.n	8003fc0 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fba:	68ca      	ldr	r2, [r1, #12]
 8003fbc:	f102 0804 	add.w	r8, r2, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fc0:	2cff      	cmp	r4, #255	; 0xff
 8003fc2:	d870      	bhi.n	80040a6 <HAL_GPIO_Init+0x142>
 8003fc4:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8003fc6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fca:	4691      	mov	r9, r2
 8003fcc:	6812      	ldr	r2, [r2, #0]
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8003fce:	250f      	movs	r5, #15
 8003fd0:	fa05 fb0a 	lsl.w	fp, r5, sl
 8003fd4:	ea22 020b 	bic.w	r2, r2, fp
 8003fd8:	fa08 fa0a 	lsl.w	sl, r8, sl
 8003fdc:	ea42 020a 	orr.w	r2, r2, sl
 8003fe0:	f8c9 2000 	str.w	r2, [r9]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003fe4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003fe8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003fec:	d0c9      	beq.n	8003f82 <HAL_GPIO_Init+0x1e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fee:	f8de 9018 	ldr.w	r9, [lr, #24]
 8003ff2:	f023 0203 	bic.w	r2, r3, #3
 8003ff6:	f049 0901 	orr.w	r9, r9, #1
 8003ffa:	f8ce 9018 	str.w	r9, [lr, #24]
 8003ffe:	f8de 9018 	ldr.w	r9, [lr, #24]
 8004002:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004006:	f009 0901 	and.w	r9, r9, #1
 800400a:	f8cd 900c 	str.w	r9, [sp, #12]
 800400e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004012:	f003 0903 	and.w	r9, r3, #3
        temp = AFIO->EXTICR[position >> 2];
 8004016:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800401a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800401e:	fa05 f509 	lsl.w	r5, r5, r9
 8004022:	ea2b 0005 	bic.w	r0, fp, r5
 8004026:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004028:	9800      	ldr	r0, [sp, #0]
 800402a:	4560      	cmp	r0, ip
 800402c:	d079      	beq.n	8004122 <HAL_GPIO_Init+0x1be>
 800402e:	4d44      	ldr	r5, [pc, #272]	; (8004140 <HAL_GPIO_Init+0x1dc>)
 8004030:	42a8      	cmp	r0, r5
 8004032:	d079      	beq.n	8004128 <HAL_GPIO_Init+0x1c4>
 8004034:	4d43      	ldr	r5, [pc, #268]	; (8004144 <HAL_GPIO_Init+0x1e0>)
 8004036:	9800      	ldr	r0, [sp, #0]
 8004038:	42a8      	cmp	r0, r5
 800403a:	d07a      	beq.n	8004132 <HAL_GPIO_Init+0x1ce>
 800403c:	4d42      	ldr	r5, [pc, #264]	; (8004148 <HAL_GPIO_Init+0x1e4>)
 800403e:	9800      	ldr	r0, [sp, #0]
 8004040:	42a8      	cmp	r0, r5
 8004042:	bf0c      	ite	eq
 8004044:	f04f 0b03 	moveq.w	fp, #3
 8004048:	f04f 0b04 	movne.w	fp, #4
 800404c:	fa0b f909 	lsl.w	r9, fp, r9
 8004050:	9801      	ldr	r0, [sp, #4]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004052:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004056:	ea40 0509 	orr.w	r5, r0, r9
        AFIO->EXTICR[position >> 2] = temp;
 800405a:	6095      	str	r5, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent); 
 800405c:	683a      	ldr	r2, [r7, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800405e:	f103 0301 	add.w	r3, r3, #1
          SET_BIT(EXTI->IMR, iocurrent); 
 8004062:	bf14      	ite	ne
 8004064:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8004066:	43a2      	biceq	r2, r4
 8004068:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent); 
 800406a:	687a      	ldr	r2, [r7, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800406c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8004070:	bf14      	ite	ne
 8004072:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8004074:	43a2      	biceq	r2, r4
 8004076:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent); 
 8004078:	68ba      	ldr	r2, [r7, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800407a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 800407e:	bf14      	ite	ne
 8004080:	4322      	orrne	r2, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8004082:	43a2      	biceq	r2, r4
 8004084:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->FTSR, iocurrent); 
 8004086:	68fa      	ldr	r2, [r7, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004088:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 800408c:	bf14      	ite	ne
 800408e:	4314      	orrne	r4, r2
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8004090:	ea22 0404 	biceq.w	r4, r2, r4
  for (position = 0; position < GPIO_NUMBER; position++)
 8004094:	2b10      	cmp	r3, #16
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8004096:	60fc      	str	r4, [r7, #12]
 8004098:	f106 0604 	add.w	r6, r6, #4
  for (position = 0; position < GPIO_NUMBER; position++)
 800409c:	f47f af77 	bne.w	8003f8e <HAL_GPIO_Init+0x2a>
        }
      }
    }
  }
}
 80040a0:	b005      	add	sp, #20
 80040a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040a6:	9800      	ldr	r0, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80040a8:	46b2      	mov	sl, r6
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040aa:	6842      	ldr	r2, [r0, #4]
 80040ac:	f100 0904 	add.w	r9, r0, #4
 80040b0:	e78d      	b.n	8003fce <HAL_GPIO_Init+0x6a>
      switch (GPIO_Init->Mode)
 80040b2:	b1a5      	cbz	r5, 80040de <HAL_GPIO_Init+0x17a>
 80040b4:	2d01      	cmp	r5, #1
 80040b6:	d183      	bne.n	8003fc0 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80040b8:	f8d1 800c 	ldr.w	r8, [r1, #12]
          break;
 80040bc:	e780      	b.n	8003fc0 <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 80040be:	4823      	ldr	r0, [pc, #140]	; (800414c <HAL_GPIO_Init+0x1e8>)
 80040c0:	4285      	cmp	r5, r0
 80040c2:	d00c      	beq.n	80040de <HAL_GPIO_Init+0x17a>
 80040c4:	d91b      	bls.n	80040fe <HAL_GPIO_Init+0x19a>
 80040c6:	4822      	ldr	r0, [pc, #136]	; (8004150 <HAL_GPIO_Init+0x1ec>)
 80040c8:	4285      	cmp	r5, r0
 80040ca:	d008      	beq.n	80040de <HAL_GPIO_Init+0x17a>
 80040cc:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80040d0:	4285      	cmp	r5, r0
 80040d2:	d004      	beq.n	80040de <HAL_GPIO_Init+0x17a>
 80040d4:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800415c <HAL_GPIO_Init+0x1f8>
 80040d8:	454d      	cmp	r5, r9
 80040da:	f47f af71 	bne.w	8003fc0 <HAL_GPIO_Init+0x5c>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80040de:	688d      	ldr	r5, [r1, #8]
 80040e0:	b9bd      	cbnz	r5, 8004112 <HAL_GPIO_Init+0x1ae>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80040e2:	f04f 0804 	mov.w	r8, #4
 80040e6:	e76b      	b.n	8003fc0 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80040e8:	68ca      	ldr	r2, [r1, #12]
 80040ea:	f102 080c 	add.w	r8, r2, #12
          break;
 80040ee:	e767      	b.n	8003fc0 <HAL_GPIO_Init+0x5c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040f0:	f04f 0800 	mov.w	r8, #0
 80040f4:	e764      	b.n	8003fc0 <HAL_GPIO_Init+0x5c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80040f6:	68ca      	ldr	r2, [r1, #12]
 80040f8:	f102 0808 	add.w	r8, r2, #8
          break;
 80040fc:	e760      	b.n	8003fc0 <HAL_GPIO_Init+0x5c>
      switch (GPIO_Init->Mode)
 80040fe:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8004160 <HAL_GPIO_Init+0x1fc>
 8004102:	454d      	cmp	r5, r9
 8004104:	d0eb      	beq.n	80040de <HAL_GPIO_Init+0x17a>
 8004106:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800410a:	454d      	cmp	r5, r9
 800410c:	f47f af58 	bne.w	8003fc0 <HAL_GPIO_Init+0x5c>
 8004110:	e7e5      	b.n	80040de <HAL_GPIO_Init+0x17a>
            GPIOx->BSRR = ioposition;
 8004112:	9800      	ldr	r0, [sp, #0]
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8004114:	2d01      	cmp	r5, #1
            GPIOx->BSRR = ioposition;
 8004116:	bf0c      	ite	eq
 8004118:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 800411a:	6142      	strne	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800411c:	f04f 0808 	mov.w	r8, #8
 8004120:	e74e      	b.n	8003fc0 <HAL_GPIO_Init+0x5c>
 8004122:	f04f 0900 	mov.w	r9, #0
 8004126:	e793      	b.n	8004050 <HAL_GPIO_Init+0xec>
 8004128:	f04f 0b01 	mov.w	fp, #1
 800412c:	fa0b f909 	lsl.w	r9, fp, r9
 8004130:	e78e      	b.n	8004050 <HAL_GPIO_Init+0xec>
 8004132:	f04f 0b02 	mov.w	fp, #2
 8004136:	fa0b f909 	lsl.w	r9, fp, r9
 800413a:	e789      	b.n	8004050 <HAL_GPIO_Init+0xec>
 800413c:	40010400 	.word	0x40010400
 8004140:	40010c00 	.word	0x40010c00
 8004144:	40011000 	.word	0x40011000
 8004148:	40011400 	.word	0x40011400
 800414c:	10210000 	.word	0x10210000
 8004150:	10310000 	.word	0x10310000
 8004154:	40021000 	.word	0x40021000
 8004158:	40010800 	.word	0x40010800
 800415c:	10220000 	.word	0x10220000
 8004160:	10110000 	.word	0x10110000

08004164 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004164:	b902      	cbnz	r2, 8004168 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004166:	0409      	lsls	r1, r1, #16
 8004168:	6101      	str	r1, [r0, #16]
 800416a:	4770      	bx	lr

0800416c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800416c:	68c3      	ldr	r3, [r0, #12]
 800416e:	4059      	eors	r1, r3
 8004170:	60c1      	str	r1, [r0, #12]
 8004172:	4770      	bx	lr

08004174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004178:	6803      	ldr	r3, [r0, #0]
{
 800417a:	b082      	sub	sp, #8
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417c:	07d9      	lsls	r1, r3, #31
{
 800417e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004180:	d53c      	bpl.n	80041fc <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004182:	49c4      	ldr	r1, [pc, #784]	; (8004494 <HAL_RCC_OscConfig+0x320>)
 8004184:	684a      	ldr	r2, [r1, #4]
 8004186:	f002 020c 	and.w	r2, r2, #12
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800418a:	2a04      	cmp	r2, #4
 800418c:	f000 810a 	beq.w	80043a4 <HAL_RCC_OscConfig+0x230>
 8004190:	684a      	ldr	r2, [r1, #4]
 8004192:	f002 020c 	and.w	r2, r2, #12
 8004196:	2a08      	cmp	r2, #8
 8004198:	f000 8100 	beq.w	800439c <HAL_RCC_OscConfig+0x228>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a2:	f000 81e5 	beq.w	8004570 <HAL_RCC_OscConfig+0x3fc>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 813a 	beq.w	8004420 <HAL_RCC_OscConfig+0x2ac>
 80041ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b0:	f000 8272 	beq.w	8004698 <HAL_RCC_OscConfig+0x524>
 80041b4:	4bb7      	ldr	r3, [pc, #732]	; (8004494 <HAL_RCC_OscConfig+0x320>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041c4:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c6:	f7ff f9f9 	bl	80035bc <HAL_GetTick>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 80041ce:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d0:	4db0      	ldr	r5, [pc, #704]	; (8004494 <HAL_RCC_OscConfig+0x320>)
 80041d2:	e005      	b.n	80041e0 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d4:	f7ff f9f2 	bl	80035bc <HAL_GetTick>
 80041d8:	1b80      	subs	r0, r0, r6
 80041da:	2864      	cmp	r0, #100	; 0x64
 80041dc:	f200 819f 	bhi.w	800451e <HAL_RCC_OscConfig+0x3aa>
 80041e0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e4:	682a      	ldr	r2, [r5, #0]
 80041e6:	fa97 f3a7 	rbit	r3, r7
 80041ea:	fab3 f383 	clz	r3, r3
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	fa22 f303 	lsr.w	r3, r2, r3
 80041f6:	07db      	lsls	r3, r3, #31
 80041f8:	d5ec      	bpl.n	80041d4 <HAL_RCC_OscConfig+0x60>
 80041fa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fc:	0799      	lsls	r1, r3, #30
 80041fe:	d540      	bpl.n	8004282 <HAL_RCC_OscConfig+0x10e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004200:	4aa4      	ldr	r2, [pc, #656]	; (8004494 <HAL_RCC_OscConfig+0x320>)
 8004202:	6851      	ldr	r1, [r2, #4]
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004204:	f011 0f0c 	tst.w	r1, #12
 8004208:	f000 80a5 	beq.w	8004356 <HAL_RCC_OscConfig+0x1e2>
 800420c:	6851      	ldr	r1, [r2, #4]
 800420e:	f001 010c 	and.w	r1, r1, #12
 8004212:	2908      	cmp	r1, #8
 8004214:	f000 809b 	beq.w	800434e <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004218:	6922      	ldr	r2, [r4, #16]
 800421a:	2a00      	cmp	r2, #0
 800421c:	f000 8183 	beq.w	8004526 <HAL_RCC_OscConfig+0x3b2>
 8004220:	2201      	movs	r2, #1
 8004222:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004230:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004234:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004236:	f7ff f9c1 	bl	80035bc <HAL_GetTick>
 800423a:	2702      	movs	r7, #2
 800423c:	4606      	mov	r6, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423e:	4d95      	ldr	r5, [pc, #596]	; (8004494 <HAL_RCC_OscConfig+0x320>)
 8004240:	e005      	b.n	800424e <HAL_RCC_OscConfig+0xda>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004242:	f7ff f9bb 	bl	80035bc <HAL_GetTick>
 8004246:	1b80      	subs	r0, r0, r6
 8004248:	2802      	cmp	r0, #2
 800424a:	f200 8168 	bhi.w	800451e <HAL_RCC_OscConfig+0x3aa>
 800424e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004252:	682a      	ldr	r2, [r5, #0]
 8004254:	fa97 f3a7 	rbit	r3, r7
 8004258:	fab3 f383 	clz	r3, r3
 800425c:	f003 031f 	and.w	r3, r3, #31
 8004260:	fa22 f303 	lsr.w	r3, r2, r3
 8004264:	07db      	lsls	r3, r3, #31
 8004266:	d5ec      	bpl.n	8004242 <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004268:	6829      	ldr	r1, [r5, #0]
 800426a:	23f8      	movs	r3, #248	; 0xf8
 800426c:	fa93 f3a3 	rbit	r3, r3
 8004270:	fab3 f283 	clz	r2, r3
 8004274:	6963      	ldr	r3, [r4, #20]
 8004276:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 800427a:	4093      	lsls	r3, r2
 800427c:	430b      	orrs	r3, r1
 800427e:	602b      	str	r3, [r5, #0]
 8004280:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004282:	0719      	lsls	r1, r3, #28
 8004284:	d438      	bmi.n	80042f8 <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004286:	075d      	lsls	r5, r3, #29
 8004288:	f100 80f0 	bmi.w	800446c <HAL_RCC_OscConfig+0x2f8>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800428c:	69e3      	ldr	r3, [r4, #28]
 800428e:	b37b      	cbz	r3, 80042f0 <HAL_RCC_OscConfig+0x17c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004290:	4d80      	ldr	r5, [pc, #512]	; (8004494 <HAL_RCC_OscConfig+0x320>)
 8004292:	686a      	ldr	r2, [r5, #4]
 8004294:	f002 020c 	and.w	r2, r2, #12
 8004298:	2a08      	cmp	r2, #8
 800429a:	f000 8098 	beq.w	80043ce <HAL_RCC_OscConfig+0x25a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429e:	2b02      	cmp	r3, #2
 80042a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042a4:	f000 8170 	beq.w	8004588 <HAL_RCC_OscConfig+0x414>
 80042a8:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ac:	fab3 f383 	clz	r3, r3
 80042b0:	2200      	movs	r2, #0
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80042b8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80042bc:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042be:	f7ff f97d 	bl	80035bc <HAL_GetTick>
 80042c2:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80042c6:	4606      	mov	r6, r0
 80042c8:	e005      	b.n	80042d6 <HAL_RCC_OscConfig+0x162>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ca:	f7ff f977 	bl	80035bc <HAL_GetTick>
 80042ce:	1b80      	subs	r0, r0, r6
 80042d0:	2802      	cmp	r0, #2
 80042d2:	f200 8124 	bhi.w	800451e <HAL_RCC_OscConfig+0x3aa>
 80042d6:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042da:	682a      	ldr	r2, [r5, #0]
 80042dc:	fa94 f3a4 	rbit	r3, r4
 80042e0:	fab3 f383 	clz	r3, r3
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ec:	07d8      	lsls	r0, r3, #31
 80042ee:	d4ec      	bmi.n	80042ca <HAL_RCC_OscConfig+0x156>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80042f0:	2000      	movs	r0, #0
}
 80042f2:	b002      	add	sp, #8
 80042f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042f8:	69a2      	ldr	r2, [r4, #24]
 80042fa:	2a00      	cmp	r2, #0
 80042fc:	d06b      	beq.n	80043d6 <HAL_RCC_OscConfig+0x262>
 80042fe:	2201      	movs	r2, #1
 8004300:	fa92 f3a2 	rbit	r3, r2
      __HAL_RCC_LSI_ENABLE();
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	4963      	ldr	r1, [pc, #396]	; (8004498 <HAL_RCC_OscConfig+0x324>)
 800430a:	2702      	movs	r7, #2
 800430c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 8004310:	f7ff f954 	bl	80035bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004314:	4d5f      	ldr	r5, [pc, #380]	; (8004494 <HAL_RCC_OscConfig+0x320>)
      tickstart = HAL_GetTick();
 8004316:	4606      	mov	r6, r0
 8004318:	e005      	b.n	8004326 <HAL_RCC_OscConfig+0x1b2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800431a:	f7ff f94f 	bl	80035bc <HAL_GetTick>
 800431e:	1b80      	subs	r0, r0, r6
 8004320:	2802      	cmp	r0, #2
 8004322:	f200 80fc 	bhi.w	800451e <HAL_RCC_OscConfig+0x3aa>
 8004326:	fa97 f3a7 	rbit	r3, r7
 800432a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004330:	fa97 f3a7 	rbit	r3, r7
 8004334:	fab3 f383 	clz	r3, r3
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
 8004340:	07da      	lsls	r2, r3, #31
 8004342:	d5ea      	bpl.n	800431a <HAL_RCC_OscConfig+0x1a6>
      HAL_Delay(1);
 8004344:	2001      	movs	r0, #1
 8004346:	f7ff f93f 	bl	80035c8 <HAL_Delay>
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	e79b      	b.n	8004286 <HAL_RCC_OscConfig+0x112>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800434e:	6852      	ldr	r2, [r2, #4]
 8004350:	03d2      	lsls	r2, r2, #15
 8004352:	f53f af61 	bmi.w	8004218 <HAL_RCC_OscConfig+0xa4>
 8004356:	2202      	movs	r2, #2
 8004358:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435c:	494d      	ldr	r1, [pc, #308]	; (8004494 <HAL_RCC_OscConfig+0x320>)
 800435e:	6809      	ldr	r1, [r1, #0]
 8004360:	fa92 f2a2 	rbit	r2, r2
 8004364:	fab2 f282 	clz	r2, r2
 8004368:	f002 021f 	and.w	r2, r2, #31
 800436c:	fa21 f202 	lsr.w	r2, r1, r2
 8004370:	07d2      	lsls	r2, r2, #31
 8004372:	d502      	bpl.n	800437a <HAL_RCC_OscConfig+0x206>
 8004374:	6922      	ldr	r2, [r4, #16]
 8004376:	2a01      	cmp	r2, #1
 8004378:	d129      	bne.n	80043ce <HAL_RCC_OscConfig+0x25a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437a:	4d46      	ldr	r5, [pc, #280]	; (8004494 <HAL_RCC_OscConfig+0x320>)
 800437c:	22f8      	movs	r2, #248	; 0xf8
 800437e:	6828      	ldr	r0, [r5, #0]
 8004380:	fa92 f2a2 	rbit	r2, r2
 8004384:	fab2 f182 	clz	r1, r2
 8004388:	6962      	ldr	r2, [r4, #20]
 800438a:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 800438e:	408a      	lsls	r2, r1
 8004390:	4302      	orrs	r2, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004392:	0719      	lsls	r1, r3, #28
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004394:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004396:	f57f af76 	bpl.w	8004286 <HAL_RCC_OscConfig+0x112>
 800439a:	e7ad      	b.n	80042f8 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800439c:	684a      	ldr	r2, [r1, #4]
 800439e:	03d2      	lsls	r2, r2, #15
 80043a0:	f57f aefc 	bpl.w	800419c <HAL_RCC_OscConfig+0x28>
 80043a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043a8:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ac:	4939      	ldr	r1, [pc, #228]	; (8004494 <HAL_RCC_OscConfig+0x320>)
 80043ae:	6809      	ldr	r1, [r1, #0]
 80043b0:	fa92 f2a2 	rbit	r2, r2
 80043b4:	fab2 f282 	clz	r2, r2
 80043b8:	f002 021f 	and.w	r2, r2, #31
 80043bc:	fa21 f202 	lsr.w	r2, r1, r2
 80043c0:	07d1      	lsls	r1, r2, #31
 80043c2:	f57f af1b 	bpl.w	80041fc <HAL_RCC_OscConfig+0x88>
 80043c6:	6862      	ldr	r2, [r4, #4]
 80043c8:	2a00      	cmp	r2, #0
 80043ca:	f47f af17 	bne.w	80041fc <HAL_RCC_OscConfig+0x88>
        return HAL_ERROR;
 80043ce:	2001      	movs	r0, #1
}
 80043d0:	b002      	add	sp, #8
 80043d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d6:	2301      	movs	r3, #1
 80043d8:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 80043dc:	fab3 f383 	clz	r3, r3
 80043e0:	492d      	ldr	r1, [pc, #180]	; (8004498 <HAL_RCC_OscConfig+0x324>)
 80043e2:	2702      	movs	r7, #2
 80043e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 80043e8:	f7ff f8e8 	bl	80035bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	4d29      	ldr	r5, [pc, #164]	; (8004494 <HAL_RCC_OscConfig+0x320>)
      tickstart = HAL_GetTick();
 80043ee:	4606      	mov	r6, r0
 80043f0:	e005      	b.n	80043fe <HAL_RCC_OscConfig+0x28a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f2:	f7ff f8e3 	bl	80035bc <HAL_GetTick>
 80043f6:	1b80      	subs	r0, r0, r6
 80043f8:	2802      	cmp	r0, #2
 80043fa:	f200 8090 	bhi.w	800451e <HAL_RCC_OscConfig+0x3aa>
 80043fe:	fa97 f3a7 	rbit	r3, r7
 8004402:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004406:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004408:	fa97 f3a7 	rbit	r3, r7
 800440c:	fab3 f383 	clz	r3, r3
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
 8004418:	07db      	lsls	r3, r3, #31
 800441a:	d4ea      	bmi.n	80043f2 <HAL_RCC_OscConfig+0x27e>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	e732      	b.n	8004286 <HAL_RCC_OscConfig+0x112>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004424:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004428:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800442c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8004438:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800443c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800443e:	f7ff f8bd 	bl	80035bc <HAL_GetTick>
 8004442:	4606      	mov	r6, r0
 8004444:	e004      	b.n	8004450 <HAL_RCC_OscConfig+0x2dc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004446:	f7ff f8b9 	bl	80035bc <HAL_GetTick>
 800444a:	1b80      	subs	r0, r0, r6
 800444c:	2864      	cmp	r0, #100	; 0x64
 800444e:	d866      	bhi.n	800451e <HAL_RCC_OscConfig+0x3aa>
 8004450:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004454:	682a      	ldr	r2, [r5, #0]
 8004456:	fa97 f3a7 	rbit	r3, r7
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	fa22 f303 	lsr.w	r3, r2, r3
 8004466:	07d8      	lsls	r0, r3, #31
 8004468:	d4ed      	bmi.n	8004446 <HAL_RCC_OscConfig+0x2d2>
 800446a:	e6c6      	b.n	80041fa <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_PWR_CLK_ENABLE();
 800446c:	4a09      	ldr	r2, [pc, #36]	; (8004494 <HAL_RCC_OscConfig+0x320>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_OscConfig+0x328>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004470:	69d1      	ldr	r1, [r2, #28]
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004472:	461d      	mov	r5, r3
      __HAL_RCC_PWR_CLK_ENABLE();
 8004474:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004478:	61d1      	str	r1, [r2, #28]
 800447a:	69d2      	ldr	r2, [r2, #28]
 800447c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004480:	9201      	str	r2, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004488:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800448a:	f7ff f897 	bl	80035bc <HAL_GetTick>
 800448e:	4606      	mov	r6, r0
 8004490:	e00b      	b.n	80044aa <HAL_RCC_OscConfig+0x336>
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000
 8004498:	42420480 	.word	0x42420480
 800449c:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a0:	f7ff f88c 	bl	80035bc <HAL_GetTick>
 80044a4:	1b80      	subs	r0, r0, r6
 80044a6:	2864      	cmp	r0, #100	; 0x64
 80044a8:	d839      	bhi.n	800451e <HAL_RCC_OscConfig+0x3aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044aa:	682b      	ldr	r3, [r5, #0]
 80044ac:	05d8      	lsls	r0, r3, #23
 80044ae:	d5f7      	bpl.n	80044a0 <HAL_RCC_OscConfig+0x32c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b0:	68e3      	ldr	r3, [r4, #12]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d062      	beq.n	800457c <HAL_RCC_OscConfig+0x408>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80bc 	beq.w	8004634 <HAL_RCC_OscConfig+0x4c0>
 80044bc:	2b05      	cmp	r3, #5
 80044be:	4b84      	ldr	r3, [pc, #528]	; (80046d0 <HAL_RCC_OscConfig+0x55c>)
 80044c0:	6a1a      	ldr	r2, [r3, #32]
 80044c2:	f000 80fd 	beq.w	80046c0 <HAL_RCC_OscConfig+0x54c>
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	621a      	str	r2, [r3, #32]
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	f022 0204 	bic.w	r2, r2, #4
 80044d2:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80044d4:	f7ff f872 	bl	80035bc <HAL_GetTick>
 80044d8:	f04f 0802 	mov.w	r8, #2
 80044dc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044de:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e2:	4d7b      	ldr	r5, [pc, #492]	; (80046d0 <HAL_RCC_OscConfig+0x55c>)
 80044e4:	fa98 f3a8 	rbit	r3, r8
 80044e8:	fa98 f3a8 	rbit	r3, r8
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f4:	115b      	asrs	r3, r3, #5
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	bf0c      	ite	eq
 80044fa:	6a2a      	ldreq	r2, [r5, #32]
 80044fc:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
 80044fe:	fa98 f3a8 	rbit	r3, r8
 8004502:	fab3 f383 	clz	r3, r3
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	fa22 f303 	lsr.w	r3, r2, r3
 800450e:	07d9      	lsls	r1, r3, #31
 8004510:	f53f aebc 	bmi.w	800428c <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004514:	f7ff f852 	bl	80035bc <HAL_GetTick>
 8004518:	1bc0      	subs	r0, r0, r7
 800451a:	42b0      	cmp	r0, r6
 800451c:	d9e2      	bls.n	80044e4 <HAL_RCC_OscConfig+0x370>
            return HAL_TIMEOUT;
 800451e:	2003      	movs	r0, #3
}
 8004520:	b002      	add	sp, #8
 8004522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004526:	2301      	movs	r3, #1
 8004528:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800452c:	fab3 f383 	clz	r3, r3
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004536:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800453a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800453c:	f7ff f83e 	bl	80035bc <HAL_GetTick>
 8004540:	2702      	movs	r7, #2
 8004542:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004544:	4d62      	ldr	r5, [pc, #392]	; (80046d0 <HAL_RCC_OscConfig+0x55c>)
 8004546:	e004      	b.n	8004552 <HAL_RCC_OscConfig+0x3de>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004548:	f7ff f838 	bl	80035bc <HAL_GetTick>
 800454c:	1b80      	subs	r0, r0, r6
 800454e:	2802      	cmp	r0, #2
 8004550:	d8e5      	bhi.n	800451e <HAL_RCC_OscConfig+0x3aa>
 8004552:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	682a      	ldr	r2, [r5, #0]
 8004558:	fa97 f3a7 	rbit	r3, r7
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
 8004568:	07d8      	lsls	r0, r3, #31
 800456a:	d4ed      	bmi.n	8004548 <HAL_RCC_OscConfig+0x3d4>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	e688      	b.n	8004282 <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004570:	4a57      	ldr	r2, [pc, #348]	; (80046d0 <HAL_RCC_OscConfig+0x55c>)
 8004572:	6813      	ldr	r3, [r2, #0]
 8004574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e624      	b.n	80041c6 <HAL_RCC_OscConfig+0x52>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457c:	4a54      	ldr	r2, [pc, #336]	; (80046d0 <HAL_RCC_OscConfig+0x55c>)
 800457e:	6a13      	ldr	r3, [r2, #32]
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6213      	str	r3, [r2, #32]
 8004586:	e7a5      	b.n	80044d4 <HAL_RCC_OscConfig+0x360>
 8004588:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800458c:	fab3 f383 	clz	r3, r3
 8004590:	2200      	movs	r2, #0
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004598:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800459c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800459e:	f7ff f80d 	bl	80035bc <HAL_GetTick>
 80045a2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80045a6:	4606      	mov	r6, r0
 80045a8:	e004      	b.n	80045b4 <HAL_RCC_OscConfig+0x440>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045aa:	f7ff f807 	bl	80035bc <HAL_GetTick>
 80045ae:	1b80      	subs	r0, r0, r6
 80045b0:	2802      	cmp	r0, #2
 80045b2:	d8b4      	bhi.n	800451e <HAL_RCC_OscConfig+0x3aa>
 80045b4:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b8:	682a      	ldr	r2, [r5, #0]
 80045ba:	fa97 f3a7 	rbit	r3, r7
 80045be:	fab3 f383 	clz	r3, r3
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ca:	07db      	lsls	r3, r3, #31
 80045cc:	d4ed      	bmi.n	80045aa <HAL_RCC_OscConfig+0x436>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045ce:	6a23      	ldr	r3, [r4, #32]
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d4:	d06d      	beq.n	80046b2 <HAL_RCC_OscConfig+0x53e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045d6:	4d3e      	ldr	r5, [pc, #248]	; (80046d0 <HAL_RCC_OscConfig+0x55c>)
 80045d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80045da:	686a      	ldr	r2, [r5, #4]
 80045dc:	430b      	orrs	r3, r1
 80045de:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80045e2:	4313      	orrs	r3, r2
 80045e4:	606b      	str	r3, [r5, #4]
 80045e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045ea:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	2201      	movs	r2, #1
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80045fa:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80045fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004600:	f7fe ffdc 	bl	80035bc <HAL_GetTick>
 8004604:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8004608:	4606      	mov	r6, r0
 800460a:	e004      	b.n	8004616 <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460c:	f7fe ffd6 	bl	80035bc <HAL_GetTick>
 8004610:	1b80      	subs	r0, r0, r6
 8004612:	2802      	cmp	r0, #2
 8004614:	d883      	bhi.n	800451e <HAL_RCC_OscConfig+0x3aa>
 8004616:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800461a:	682a      	ldr	r2, [r5, #0]
 800461c:	fa94 f3a4 	rbit	r3, r4
 8004620:	fab3 f383 	clz	r3, r3
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
 800462c:	07df      	lsls	r7, r3, #31
 800462e:	f53f ae5f 	bmi.w	80042f0 <HAL_RCC_OscConfig+0x17c>
 8004632:	e7eb      	b.n	800460c <HAL_RCC_OscConfig+0x498>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004634:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004638:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800463c:	6a1a      	ldr	r2, [r3, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463e:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	621a      	str	r2, [r3, #32]
 8004646:	6a1a      	ldr	r2, [r3, #32]
 8004648:	f04f 0802 	mov.w	r8, #2
 800464c:	f022 0204 	bic.w	r2, r2, #4
 8004650:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8004652:	f7fe ffb3 	bl	80035bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004656:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800465a:	4606      	mov	r6, r0
 800465c:	fa98 f3a8 	rbit	r3, r8
 8004660:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004664:	fab3 f383 	clz	r3, r3
 8004668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466c:	115b      	asrs	r3, r3, #5
 800466e:	2b02      	cmp	r3, #2
 8004670:	bf0c      	ite	eq
 8004672:	6a2a      	ldreq	r2, [r5, #32]
 8004674:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
 8004676:	fa98 f3a8 	rbit	r3, r8
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	fa22 f303 	lsr.w	r3, r2, r3
 8004686:	07da      	lsls	r2, r3, #31
 8004688:	f57f ae00 	bpl.w	800428c <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fe ff96 	bl	80035bc <HAL_GetTick>
 8004690:	1b80      	subs	r0, r0, r6
 8004692:	42b8      	cmp	r0, r7
 8004694:	d9e2      	bls.n	800465c <HAL_RCC_OscConfig+0x4e8>
 8004696:	e742      	b.n	800451e <HAL_RCC_OscConfig+0x3aa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800469c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	e589      	b.n	80041c6 <HAL_RCC_OscConfig+0x52>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046b2:	686a      	ldr	r2, [r5, #4]
 80046b4:	68a1      	ldr	r1, [r4, #8]
 80046b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80046ba:	430a      	orrs	r2, r1
 80046bc:	606a      	str	r2, [r5, #4]
 80046be:	e78a      	b.n	80045d6 <HAL_RCC_OscConfig+0x462>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c0:	f042 0204 	orr.w	r2, r2, #4
 80046c4:	621a      	str	r2, [r3, #32]
 80046c6:	6a1a      	ldr	r2, [r3, #32]
 80046c8:	f042 0201 	orr.w	r2, r2, #1
 80046cc:	621a      	str	r2, [r3, #32]
 80046ce:	e701      	b.n	80044d4 <HAL_RCC_OscConfig+0x360>
 80046d0:	40021000 	.word	0x40021000

080046d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d4:	b570      	push	{r4, r5, r6, lr}
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80046d6:	2601      	movs	r6, #1
 80046d8:	2502      	movs	r5, #2
{
 80046da:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80046dc:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <HAL_RCC_GetSysClockFreq+0x7c>)
 80046de:	f10d 0e18 	add.w	lr, sp, #24
 80046e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80046e4:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80046e8:	4c1a      	ldr	r4, [pc, #104]	; (8004754 <HAL_RCC_GetSysClockFreq+0x80>)
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80046ea:	f88d 6004 	strb.w	r6, [sp, #4]
 80046ee:	f88d 5005 	strb.w	r5, [sp, #5]
  tmpreg = RCC->CFGR;
 80046f2:	6863      	ldr	r3, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046f4:	f003 020c 	and.w	r2, r3, #12
 80046f8:	2a08      	cmp	r2, #8
 80046fa:	d112      	bne.n	8004722 <HAL_RCC_GetSysClockFreq+0x4e>
 80046fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004700:	fa92 f2a2 	rbit	r2, r2
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8004704:	fab2 f182 	clz	r1, r2
 8004708:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800470c:	40ca      	lsrs	r2, r1
 800470e:	4472      	add	r2, lr
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004710:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8004712:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004716:	d407      	bmi.n	8004728 <HAL_RCC_GetSysClockFreq+0x54>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004718:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <HAL_RCC_GetSysClockFreq+0x84>)
 800471a:	fb03 f000 	mul.w	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800471e:	b006      	add	sp, #24
 8004720:	bd70      	pop	{r4, r5, r6, pc}
      sysclockfreq = HSE_VALUE;
 8004722:	480e      	ldr	r0, [pc, #56]	; (800475c <HAL_RCC_GetSysClockFreq+0x88>)
}
 8004724:	b006      	add	sp, #24
 8004726:	bd70      	pop	{r4, r5, r6, pc}
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8004728:	6863      	ldr	r3, [r4, #4]
 800472a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800472e:	fa92 f2a2 	rbit	r2, r2
 8004732:	fab2 f282 	clz	r2, r2
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	40d3      	lsrs	r3, r2
 800473c:	4473      	add	r3, lr
 800473e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_RCC_GetSysClockFreq+0x88>)
 8004744:	fbb3 f3f2 	udiv	r3, r3, r2
 8004748:	fb00 f003 	mul.w	r0, r0, r3
}
 800474c:	b006      	add	sp, #24
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	08006040 	.word	0x08006040
 8004754:	40021000 	.word	0x40021000
 8004758:	003d0900 	.word	0x003d0900
 800475c:	007a1200 	.word	0x007a1200

08004760 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004760:	4a56      	ldr	r2, [pc, #344]	; (80048bc <HAL_RCC_ClockConfig+0x15c>)
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	428b      	cmp	r3, r1
 800476a:	d20b      	bcs.n	8004784 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476c:	6813      	ldr	r3, [r2, #0]
 800476e:	f023 0307 	bic.w	r3, r3, #7
 8004772:	430b      	orrs	r3, r1
 8004774:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	428b      	cmp	r3, r1
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x24>
      return HAL_ERROR;
 8004780:	2001      	movs	r0, #1
}
 8004782:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004784:	6803      	ldr	r3, [r0, #0]
{
 8004786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800478a:	079c      	lsls	r4, r3, #30
 800478c:	d506      	bpl.n	800479c <HAL_RCC_ClockConfig+0x3c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800478e:	4c4c      	ldr	r4, [pc, #304]	; (80048c0 <HAL_RCC_ClockConfig+0x160>)
 8004790:	6885      	ldr	r5, [r0, #8]
 8004792:	6862      	ldr	r2, [r4, #4]
 8004794:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004798:	432a      	orrs	r2, r5
 800479a:	6062      	str	r2, [r4, #4]
 800479c:	4606      	mov	r6, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479e:	07d8      	lsls	r0, r3, #31
 80047a0:	460c      	mov	r4, r1
 80047a2:	d530      	bpl.n	8004806 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a4:	6872      	ldr	r2, [r6, #4]
 80047a6:	2a01      	cmp	r2, #1
 80047a8:	f000 8085 	beq.w	80048b6 <HAL_RCC_ClockConfig+0x156>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ac:	2a02      	cmp	r2, #2
 80047ae:	bf0c      	ite	eq
 80047b0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80047b4:	2302      	movne	r3, #2
 80047b6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ba:	4941      	ldr	r1, [pc, #260]	; (80048c0 <HAL_RCC_ClockConfig+0x160>)
 80047bc:	6809      	ldr	r1, [r1, #0]
 80047be:	fa93 f3a3 	rbit	r3, r3
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	fa21 f303 	lsr.w	r3, r1, r3
 80047ce:	07d9      	lsls	r1, r3, #31
 80047d0:	d529      	bpl.n	8004826 <HAL_RCC_ClockConfig+0xc6>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d2:	4d3b      	ldr	r5, [pc, #236]	; (80048c0 <HAL_RCC_ClockConfig+0x160>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d8:	686b      	ldr	r3, [r5, #4]
 80047da:	f023 0303 	bic.w	r3, r3, #3
 80047de:	4313      	orrs	r3, r2
 80047e0:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80047e2:	f7fe feeb 	bl	80035bc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e6:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80047e8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d023      	beq.n	8004836 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d105      	bne.n	80047fe <HAL_RCC_ClockConfig+0x9e>
 80047f2:	e057      	b.n	80048a4 <HAL_RCC_ClockConfig+0x144>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fe fee2 	bl	80035bc <HAL_GetTick>
 80047f8:	1bc0      	subs	r0, r0, r7
 80047fa:	4540      	cmp	r0, r8
 80047fc:	d858      	bhi.n	80048b0 <HAL_RCC_ClockConfig+0x150>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80047fe:	686b      	ldr	r3, [r5, #4]
 8004800:	f013 0f0c 	tst.w	r3, #12
 8004804:	d1f6      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x94>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004806:	4a2d      	ldr	r2, [pc, #180]	; (80048bc <HAL_RCC_ClockConfig+0x15c>)
 8004808:	6813      	ldr	r3, [r2, #0]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	42a3      	cmp	r3, r4
 8004810:	d917      	bls.n	8004842 <HAL_RCC_ClockConfig+0xe2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	6813      	ldr	r3, [r2, #0]
 8004814:	f023 0307 	bic.w	r3, r3, #7
 8004818:	4323      	orrs	r3, r4
 800481a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	42a3      	cmp	r3, r4
 8004824:	d00d      	beq.n	8004842 <HAL_RCC_ClockConfig+0xe2>
      return HAL_ERROR;
 8004826:	2001      	movs	r0, #1
 8004828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482c:	f7fe fec6 	bl	80035bc <HAL_GetTick>
 8004830:	1bc0      	subs	r0, r0, r7
 8004832:	4540      	cmp	r0, r8
 8004834:	d83c      	bhi.n	80048b0 <HAL_RCC_ClockConfig+0x150>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004836:	686b      	ldr	r3, [r5, #4]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b04      	cmp	r3, #4
 800483e:	d1f5      	bne.n	800482c <HAL_RCC_ClockConfig+0xcc>
 8004840:	e7e1      	b.n	8004806 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004842:	6833      	ldr	r3, [r6, #0]
 8004844:	075a      	lsls	r2, r3, #29
 8004846:	d506      	bpl.n	8004856 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004848:	491d      	ldr	r1, [pc, #116]	; (80048c0 <HAL_RCC_ClockConfig+0x160>)
 800484a:	68f0      	ldr	r0, [r6, #12]
 800484c:	684a      	ldr	r2, [r1, #4]
 800484e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004852:	4302      	orrs	r2, r0
 8004854:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004856:	071b      	lsls	r3, r3, #28
 8004858:	d507      	bpl.n	800486a <HAL_RCC_ClockConfig+0x10a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800485a:	4a19      	ldr	r2, [pc, #100]	; (80048c0 <HAL_RCC_ClockConfig+0x160>)
 800485c:	6931      	ldr	r1, [r6, #16]
 800485e:	6853      	ldr	r3, [r2, #4]
 8004860:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004864:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004868:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800486a:	f7ff ff33 	bl	80046d4 <HAL_RCC_GetSysClockFreq>
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <HAL_RCC_ClockConfig+0x160>)
 8004870:	22f0      	movs	r2, #240	; 0xf0
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	fa92 f2a2 	rbit	r2, r2
 8004878:	fab2 f282 	clz	r2, r2
 800487c:	4911      	ldr	r1, [pc, #68]	; (80048c4 <HAL_RCC_ClockConfig+0x164>)
 800487e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004882:	40d3      	lsrs	r3, r2
 8004884:	5ccb      	ldrb	r3, [r1, r3]
 8004886:	4a10      	ldr	r2, [pc, #64]	; (80048c8 <HAL_RCC_ClockConfig+0x168>)
 8004888:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 800488c:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800488e:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004890:	f7fe fe66 	bl	8003560 <HAL_InitTick>
  return HAL_OK;
 8004894:	2000      	movs	r0, #0
}
 8004896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489a:	f7fe fe8f 	bl	80035bc <HAL_GetTick>
 800489e:	1bc0      	subs	r0, r0, r7
 80048a0:	4540      	cmp	r0, r8
 80048a2:	d805      	bhi.n	80048b0 <HAL_RCC_ClockConfig+0x150>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a4:	686b      	ldr	r3, [r5, #4]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d1f5      	bne.n	800489a <HAL_RCC_ClockConfig+0x13a>
 80048ae:	e7aa      	b.n	8004806 <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 80048b0:	2003      	movs	r0, #3
 80048b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048ba:	e77c      	b.n	80047b6 <HAL_RCC_ClockConfig+0x56>
 80048bc:	40022000 	.word	0x40022000
 80048c0:	40021000 	.word	0x40021000
 80048c4:	08006300 	.word	0x08006300
 80048c8:	20000000 	.word	0x20000000

080048cc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80048cc:	4b01      	ldr	r3, [pc, #4]	; (80048d4 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000000 	.word	0x20000000

080048d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80048d8:	4b08      	ldr	r3, [pc, #32]	; (80048fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	fa92 f2a2 	rbit	r2, r2
 80048e4:	fab2 f282 	clz	r2, r2
 80048e8:	4805      	ldr	r0, [pc, #20]	; (8004900 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80048ea:	4906      	ldr	r1, [pc, #24]	; (8004904 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80048ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048f0:	40d3      	lsrs	r3, r2
 80048f2:	5cc3      	ldrb	r3, [r0, r3]
 80048f4:	6808      	ldr	r0, [r1, #0]
}    
 80048f6:	40d8      	lsrs	r0, r3
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40021000 	.word	0x40021000
 8004900:	08006310 	.word	0x08006310
 8004904:	20000000 	.word	0x20000000

08004908 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004908:	4b08      	ldr	r3, [pc, #32]	; (800492c <HAL_RCC_GetPCLK2Freq+0x24>)
 800490a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	fa92 f2a2 	rbit	r2, r2
 8004914:	fab2 f282 	clz	r2, r2
 8004918:	4805      	ldr	r0, [pc, #20]	; (8004930 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 800491a:	4906      	ldr	r1, [pc, #24]	; (8004934 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800491c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004920:	40d3      	lsrs	r3, r2
 8004922:	5cc3      	ldrb	r3, [r0, r3]
 8004924:	6808      	ldr	r0, [r1, #0]
} 
 8004926:	40d8      	lsrs	r0, r3
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40021000 	.word	0x40021000
 8004930:	08006310 	.word	0x08006310
 8004934:	20000000 	.word	0x20000000

08004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8004938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493c:	4617      	mov	r7, r2
 800493e:	4606      	mov	r6, r0
 8004940:	460d      	mov	r5, r1
 8004942:	461c      	mov	r4, r3
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004944:	f7fe fe3a 	bl	80035bc <HAL_GetTick>
 8004948:	4680      	mov	r8, r0

  /* Wait until flag is set */
  if(Status == RESET)
 800494a:	bb47      	cbnz	r7, 800499e <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x66>
 800494c:	6830      	ldr	r0, [r6, #0]
 800494e:	e001      	b.n	8004954 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x1c>
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
    {
      if(Timeout != HAL_MAX_DELAY)
 8004950:	1c61      	adds	r1, r4, #1
 8004952:	d106      	bne.n	8004962 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x2a>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8004954:	6882      	ldr	r2, [r0, #8]
 8004956:	ea35 0302 	bics.w	r3, r5, r2
 800495a:	d1f9      	bne.n	8004950 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800495c:	2000      	movs	r0, #0
 800495e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004962:	b9a4      	cbnz	r4, 800498e <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x56>
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004964:	6843      	ldr	r3, [r0, #4]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004966:	6ab2      	ldr	r2, [r6, #40]	; 0x28
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004968:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800496c:	6043      	str	r3, [r0, #4]
          __HAL_SPI_DISABLE(hspi);
 800496e:	6803      	ldr	r3, [r0, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004970:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
          __HAL_SPI_DISABLE(hspi);
 8004974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004978:	6003      	str	r3, [r0, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800497a:	d02d      	beq.n	80049d8 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0xa0>
          hspi->State= HAL_SPI_STATE_READY;
 800497c:	2201      	movs	r2, #1
          __HAL_UNLOCK(hspi);
 800497e:	2300      	movs	r3, #0
          hspi->State= HAL_SPI_STATE_READY;
 8004980:	f886 2051 	strb.w	r2, [r6, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8004984:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
          return HAL_TIMEOUT;
 8004988:	2003      	movs	r0, #3
 800498a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800498e:	f7fe fe15 	bl	80035bc <HAL_GetTick>
 8004992:	eba0 0008 	sub.w	r0, r0, r8
 8004996:	4284      	cmp	r4, r0
 8004998:	d2d8      	bcs.n	800494c <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x14>
 800499a:	6830      	ldr	r0, [r6, #0]
 800499c:	e7e2      	b.n	8004964 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x2c>
 800499e:	6833      	ldr	r3, [r6, #0]
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	ea35 0202 	bics.w	r2, r5, r2
 80049a6:	d1d9      	bne.n	800495c <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x24>
      if(Timeout != HAL_MAX_DELAY)
 80049a8:	1c62      	adds	r2, r4, #1
 80049aa:	d0f9      	beq.n	80049a0 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x68>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80049ac:	b9ec      	cbnz	r4, 80049ea <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0xb2>
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049ae:	685a      	ldr	r2, [r3, #4]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049b0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049b6:	605a      	str	r2, [r3, #4]
          __HAL_SPI_DISABLE(hspi);
 80049b8:	681a      	ldr	r2, [r3, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ba:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
          __HAL_SPI_DISABLE(hspi);
 80049be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c2:	601a      	str	r2, [r3, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049c4:	d1da      	bne.n	800497c <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x44>
            SPI_RESET_CRC(hspi);
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e7d1      	b.n	800497c <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x44>
            SPI_RESET_CRC(hspi);
 80049d8:	6803      	ldr	r3, [r0, #0]
 80049da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049de:	6003      	str	r3, [r0, #0]
 80049e0:	6803      	ldr	r3, [r0, #0]
 80049e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049e6:	6003      	str	r3, [r0, #0]
 80049e8:	e7c8      	b.n	800497c <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x44>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80049ea:	f7fe fde7 	bl	80035bc <HAL_GetTick>
 80049ee:	eba0 0008 	sub.w	r0, r0, r8
 80049f2:	4284      	cmp	r4, r0
 80049f4:	d2d3      	bcs.n	800499e <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x66>
 80049f6:	6833      	ldr	r3, [r6, #0]
 80049f8:	e7d9      	b.n	80049ae <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm+0x76>
 80049fa:	bf00      	nop

080049fc <HAL_SPI_Transmit>:
{
 80049fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->State == HAL_SPI_STATE_READY)
 80049fe:	f890 5051 	ldrb.w	r5, [r0, #81]	; 0x51
{
 8004a02:	b083      	sub	sp, #12
  if(hspi->State == HAL_SPI_STATE_READY)
 8004a04:	b2ed      	uxtb	r5, r5
 8004a06:	2d01      	cmp	r5, #1
 8004a08:	d002      	beq.n	8004a10 <HAL_SPI_Transmit+0x14>
    return HAL_BUSY;
 8004a0a:	2002      	movs	r0, #2
}
 8004a0c:	b003      	add	sp, #12
 8004a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0)) 
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d043      	beq.n	8004a9c <HAL_SPI_Transmit+0xa0>
 8004a14:	2a00      	cmp	r2, #0
 8004a16:	d041      	beq.n	8004a9c <HAL_SPI_Transmit+0xa0>
    __HAL_LOCK(hspi);
 8004a18:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004a1c:	2c01      	cmp	r4, #1
 8004a1e:	d0f4      	beq.n	8004a0a <HAL_SPI_Transmit+0xe>
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a20:	2400      	movs	r4, #0
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 8004a22:	2612      	movs	r6, #18
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a24:	6a87      	ldr	r7, [r0, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 8004a26:	f880 6051 	strb.w	r6, [r0, #81]	; 0x51
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a2a:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    __HAL_LOCK(hspi);
 8004a2e:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
    hspi->pTxBuffPtr  = pData;
 8004a32:	6301      	str	r1, [r0, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8004a34:	8682      	strh	r2, [r0, #52]	; 0x34
    hspi->TxXferCount = Size;
 8004a36:	86c2      	strh	r2, [r0, #54]	; 0x36
    hspi->TxISR = 0;
 8004a38:	64c4      	str	r4, [r0, #76]	; 0x4c
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a3a:	6544      	str	r4, [r0, #84]	; 0x54
    hspi->RxISR = 0;
 8004a3c:	6484      	str	r4, [r0, #72]	; 0x48
    hspi->pRxBuffPtr  = NULL;
 8004a3e:	6384      	str	r4, [r0, #56]	; 0x38
    hspi->RxXferSize  = 0;
 8004a40:	8784      	strh	r4, [r0, #60]	; 0x3c
    hspi->RxXferCount = 0;
 8004a42:	87c4      	strh	r4, [r0, #62]	; 0x3e
      SPI_RESET_CRC(hspi);
 8004a44:	6806      	ldr	r6, [r0, #0]
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a46:	d05c      	beq.n	8004b02 <HAL_SPI_Transmit+0x106>
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a48:	6884      	ldr	r4, [r0, #8]
 8004a4a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8004a4e:	d053      	beq.n	8004af8 <HAL_SPI_Transmit+0xfc>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a50:	6834      	ldr	r4, [r6, #0]
 8004a52:	0664      	lsls	r4, r4, #25
 8004a54:	d403      	bmi.n	8004a5e <HAL_SPI_Transmit+0x62>
      __HAL_SPI_ENABLE(hspi);
 8004a56:	6834      	ldr	r4, [r6, #0]
 8004a58:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8004a5c:	6034      	str	r4, [r6, #0]
 8004a5e:	461d      	mov	r5, r3
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a60:	68c3      	ldr	r3, [r0, #12]
 8004a62:	4604      	mov	r4, r0
 8004a64:	b9e3      	cbnz	r3, 8004aa0 <HAL_SPI_Transmit+0xa4>
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8004a66:	6840      	ldr	r0, [r0, #4]
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d05d      	beq.n	8004b28 <HAL_SPI_Transmit+0x12c>
 8004a6c:	2a01      	cmp	r2, #1
 8004a6e:	d10b      	bne.n	8004a88 <HAL_SPI_Transmit+0x8c>
 8004a70:	e087      	b.n	8004b82 <HAL_SPI_Transmit+0x186>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004a72:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004a74:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004a76:	1c59      	adds	r1, r3, #1
 8004a78:	6321      	str	r1, [r4, #48]	; 0x30
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	6826      	ldr	r6, [r4, #0]
        hspi->TxXferCount--;
 8004a7e:	3a01      	subs	r2, #1
 8004a80:	b292      	uxth	r2, r2
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004a82:	60f3      	str	r3, [r6, #12]
        hspi->TxXferCount--;
 8004a84:	86e2      	strh	r2, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 8004a86:	b32a      	cbz	r2, 8004ad4 <HAL_SPI_Transmit+0xd8>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8004a88:	462b      	mov	r3, r5
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f7ff ff52 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d0ec      	beq.n	8004a72 <HAL_SPI_Transmit+0x76>
          return HAL_TIMEOUT;
 8004a98:	2003      	movs	r0, #3
 8004a9a:	e7b7      	b.n	8004a0c <HAL_SPI_Transmit+0x10>
      return  HAL_ERROR;
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	e7b5      	b.n	8004a0c <HAL_SPI_Transmit+0x10>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8004aa0:	6843      	ldr	r3, [r0, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d036      	beq.n	8004b14 <HAL_SPI_Transmit+0x118>
 8004aa6:	2a01      	cmp	r2, #1
 8004aa8:	d10b      	bne.n	8004ac2 <HAL_SPI_Transmit+0xc6>
 8004aaa:	e063      	b.n	8004b74 <HAL_SPI_Transmit+0x178>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004aac:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004aae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004ab0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004ab4:	6826      	ldr	r6, [r4, #0]
        hspi->TxXferCount--;
 8004ab6:	3a01      	subs	r2, #1
 8004ab8:	b292      	uxth	r2, r2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004aba:	60f1      	str	r1, [r6, #12]
        hspi->pTxBuffPtr+=2;
 8004abc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004abe:	86e2      	strh	r2, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 8004ac0:	b142      	cbz	r2, 8004ad4 <HAL_SPI_Transmit+0xd8>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7ff ff35 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d0ec      	beq.n	8004aac <HAL_SPI_Transmit+0xb0>
 8004ad2:	e7e1      	b.n	8004a98 <HAL_SPI_Transmit+0x9c>
 8004ad4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8004ad6:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 8004ada:	d02f      	beq.n	8004b3c <HAL_SPI_Transmit+0x140>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8004adc:	462b      	mov	r3, r5
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7ff ff28 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	d02c      	beq.n	8004b46 <HAL_SPI_Transmit+0x14a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004aec:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004aee:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004af0:	f043 0310 	orr.w	r3, r3, #16
 8004af4:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004af6:	e789      	b.n	8004a0c <HAL_SPI_Transmit+0x10>
      SPI_1LINE_TX(hspi);
 8004af8:	6834      	ldr	r4, [r6, #0]
 8004afa:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004afe:	6034      	str	r4, [r6, #0]
 8004b00:	e7a6      	b.n	8004a50 <HAL_SPI_Transmit+0x54>
      SPI_RESET_CRC(hspi);
 8004b02:	6834      	ldr	r4, [r6, #0]
 8004b04:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8004b08:	6034      	str	r4, [r6, #0]
 8004b0a:	6834      	ldr	r4, [r6, #0]
 8004b0c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8004b10:	6034      	str	r4, [r6, #0]
 8004b12:	e799      	b.n	8004a48 <HAL_SPI_Transmit+0x4c>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004b14:	f831 0b02 	ldrh.w	r0, [r1], #2
        hspi->TxXferCount--;
 8004b18:	3a01      	subs	r2, #1
 8004b1a:	b292      	uxth	r2, r2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004b1c:	60f0      	str	r0, [r6, #12]
        hspi->pTxBuffPtr+=2;
 8004b1e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004b20:	86e2      	strh	r2, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 8004b22:	2a00      	cmp	r2, #0
 8004b24:	d1cd      	bne.n	8004ac2 <HAL_SPI_Transmit+0xc6>
 8004b26:	e7d6      	b.n	8004ad6 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004b28:	1c4b      	adds	r3, r1, #1
 8004b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8004b2c:	7809      	ldrb	r1, [r1, #0]
        hspi->TxXferCount--;
 8004b2e:	3a01      	subs	r2, #1
 8004b30:	b292      	uxth	r2, r2
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004b32:	60f1      	str	r1, [r6, #12]
        hspi->TxXferCount--;
 8004b34:	86e2      	strh	r2, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	d1a6      	bne.n	8004a88 <HAL_SPI_Transmit+0x8c>
 8004b3a:	e7cc      	b.n	8004ad6 <HAL_SPI_Transmit+0xda>
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b42:	6033      	str	r3, [r6, #0]
 8004b44:	e7ca      	b.n	8004adc <HAL_SPI_Transmit+0xe0>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8004b46:	462b      	mov	r3, r5
 8004b48:	2201      	movs	r2, #1
 8004b4a:	2180      	movs	r1, #128	; 0x80
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7ff fef3 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d1ca      	bne.n	8004aec <HAL_SPI_Transmit+0xf0>
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b56:	68a3      	ldr	r3, [r4, #8]
 8004b58:	b923      	cbnz	r3, 8004b64 <HAL_SPI_Transmit+0x168>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	9201      	str	r2, [sp, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	9301      	str	r3, [sp, #4]
    __HAL_UNLOCK(hspi);
 8004b64:	2500      	movs	r5, #0
    hspi->State = HAL_SPI_STATE_READY; 
 8004b66:	2301      	movs	r3, #1
    __HAL_UNLOCK(hspi);
 8004b68:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    hspi->State = HAL_SPI_STATE_READY; 
 8004b6c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    return HAL_OK;
 8004b70:	4628      	mov	r0, r5
 8004b72:	e74b      	b.n	8004a0c <HAL_SPI_Transmit+0x10>
        hspi->TxXferCount--;
 8004b74:	2300      	movs	r3, #0
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004b76:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004b7a:	60f2      	str	r2, [r6, #12]
        hspi->pTxBuffPtr+=2;
 8004b7c:	6301      	str	r1, [r0, #48]	; 0x30
        hspi->TxXferCount--;
 8004b7e:	86c3      	strh	r3, [r0, #54]	; 0x36
 8004b80:	e7a9      	b.n	8004ad6 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004b82:	1c4a      	adds	r2, r1, #1
 8004b84:	6322      	str	r2, [r4, #48]	; 0x30
 8004b86:	780a      	ldrb	r2, [r1, #0]
 8004b88:	60f2      	str	r2, [r6, #12]
        hspi->TxXferCount--;
 8004b8a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004b8c:	e7a3      	b.n	8004ad6 <HAL_SPI_Transmit+0xda>
 8004b8e:	bf00      	nop

08004b90 <HAL_SPI_TransmitReceive>:
{
 8004b90:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint16_t tmpreg = 0;
 8004b92:	2400      	movs	r4, #0
{
 8004b94:	b083      	sub	sp, #12
  __IO uint16_t tmpreg = 0;
 8004b96:	f8ad 4006 	strh.w	r4, [sp, #6]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8004b9a:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
 8004b9e:	2c01      	cmp	r4, #1
 8004ba0:	d006      	beq.n	8004bb0 <HAL_SPI_TransmitReceive+0x20>
 8004ba2:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
 8004ba6:	2c22      	cmp	r4, #34	; 0x22
 8004ba8:	d002      	beq.n	8004bb0 <HAL_SPI_TransmitReceive+0x20>
    return HAL_BUSY;
 8004baa:	2002      	movs	r0, #2
}
 8004bac:	b003      	add	sp, #12
 8004bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	d062      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0xea>
 8004bb4:	2a00      	cmp	r2, #0
 8004bb6:	d060      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0xea>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d05e      	beq.n	8004c7a <HAL_SPI_TransmitReceive+0xea>
    __HAL_LOCK(hspi);
 8004bbc:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004bc0:	2c01      	cmp	r4, #1
 8004bc2:	d0f2      	beq.n	8004baa <HAL_SPI_TransmitReceive+0x1a>
 8004bc4:	2501      	movs	r5, #1
    if(hspi->State == HAL_SPI_STATE_READY)
 8004bc6:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    __HAL_LOCK(hspi);
 8004bca:	f880 5050 	strb.w	r5, [r0, #80]	; 0x50
    if(hspi->State == HAL_SPI_STATE_READY)
 8004bce:	42ac      	cmp	r4, r5
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bd0:	bf04      	itt	eq
 8004bd2:	2432      	moveq	r4, #50	; 0x32
 8004bd4:	f880 4051 	strbeq.w	r4, [r0, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd8:	2400      	movs	r4, #0
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bda:	6a85      	ldr	r5, [r0, #40]	; 0x28
    hspi->pRxBuffPtr  = pRxData;
 8004bdc:	6382      	str	r2, [r0, #56]	; 0x38
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bde:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    hspi->RxXferSize  = Size;
 8004be2:	8783      	strh	r3, [r0, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 8004be4:	87c3      	strh	r3, [r0, #62]	; 0x3e
    hspi->pTxBuffPtr  = pTxData;
 8004be6:	6301      	str	r1, [r0, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 8004be8:	8683      	strh	r3, [r0, #52]	; 0x34
    hspi->TxXferCount = Size;
 8004bea:	86c3      	strh	r3, [r0, #54]	; 0x36
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bec:	6544      	str	r4, [r0, #84]	; 0x54
    hspi->RxISR = 0;
 8004bee:	6484      	str	r4, [r0, #72]	; 0x48
    hspi->TxISR = 0;
 8004bf0:	64c4      	str	r4, [r0, #76]	; 0x4c
      SPI_RESET_CRC(hspi);
 8004bf2:	6802      	ldr	r2, [r0, #0]
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bf4:	f000 809a 	beq.w	8004d2c <HAL_SPI_TransmitReceive+0x19c>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf8:	6814      	ldr	r4, [r2, #0]
 8004bfa:	0664      	lsls	r4, r4, #25
 8004bfc:	d540      	bpl.n	8004c80 <HAL_SPI_TransmitReceive+0xf0>
 8004bfe:	4604      	mov	r4, r0
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c00:	68c0      	ldr	r0, [r0, #12]
 8004c02:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8004c06:	6860      	ldr	r0, [r4, #4]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c08:	d057      	beq.n	8004cba <HAL_SPI_TransmitReceive+0x12a>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d03d      	beq.n	8004c8a <HAL_SPI_TransmitReceive+0xfa>
 8004c0e:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004c12:	d111      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0xa8>
 8004c14:	e0e4      	b.n	8004de0 <HAL_SPI_TransmitReceive+0x250>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004c16:	f7ff fe8f 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004c1a:	2800      	cmp	r0, #0
 8004c1c:	d14b      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x126>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c22:	68d2      	ldr	r2, [r2, #12]
 8004c24:	1c59      	adds	r1, r3, #1
 8004c26:	63a1      	str	r1, [r4, #56]	; 0x38
 8004c28:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8004c2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8004c2c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
          hspi->RxXferCount--;
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8004c32:	2a00      	cmp	r2, #0
 8004c34:	f000 80b3 	beq.w	8004d9e <HAL_SPI_TransmitReceive+0x20e>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8004c38:	9b08      	ldr	r3, [sp, #32]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7ff fe7a 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d136      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x126>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004c48:	2101      	movs	r1, #1
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004c4a:	6b26      	ldr	r6, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 8004c4c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004c4e:	1877      	adds	r7, r6, r1
 8004c50:	6327      	str	r7, [r4, #48]	; 0x30
 8004c52:	7837      	ldrb	r7, [r6, #0]
          hspi->TxXferCount--;
 8004c54:	3d01      	subs	r5, #1
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004c56:	6826      	ldr	r6, [r4, #0]
          hspi->TxXferCount--;
 8004c58:	b2ad      	uxth	r5, r5
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004c5a:	60f7      	str	r7, [r6, #12]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004c5c:	9b08      	ldr	r3, [sp, #32]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	4620      	mov	r0, r4
          hspi->TxXferCount--;
 8004c62:	86e5      	strh	r5, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004c64:	2d00      	cmp	r5, #0
 8004c66:	d1d6      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x86>
 8004c68:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004c6a:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8004c6e:	d1d2      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x86>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004c70:	6835      	ldr	r5, [r6, #0]
 8004c72:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8004c76:	6035      	str	r5, [r6, #0]
 8004c78:	e7cd      	b.n	8004c16 <HAL_SPI_TransmitReceive+0x86>
      return  HAL_ERROR;
 8004c7a:	2001      	movs	r0, #1
}
 8004c7c:	b003      	add	sp, #12
 8004c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_SPI_ENABLE(hspi);
 8004c80:	6814      	ldr	r4, [r2, #0]
 8004c82:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8004c86:	6014      	str	r4, [r2, #0]
 8004c88:	e7b9      	b.n	8004bfe <HAL_SPI_TransmitReceive+0x6e>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004c8a:	1c48      	adds	r0, r1, #1
 8004c8c:	6320      	str	r0, [r4, #48]	; 0x30
 8004c8e:	7809      	ldrb	r1, [r1, #0]
        hspi->TxXferCount--;
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29b      	uxth	r3, r3
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004c94:	60d1      	str	r1, [r2, #12]
        hspi->TxXferCount--;
 8004c96:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1cd      	bne.n	8004c38 <HAL_SPI_TransmitReceive+0xa8>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c9c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8004ca0:	f000 8099 	beq.w	8004dd6 <HAL_SPI_TransmitReceive+0x246>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004ca4:	9b08      	ldr	r3, [sp, #32]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2101      	movs	r1, #1
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7ff fe44 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	f000 8088 	beq.w	8004dc6 <HAL_SPI_TransmitReceive+0x236>
          return HAL_TIMEOUT;
 8004cb6:	2003      	movs	r0, #3
 8004cb8:	e778      	b.n	8004bac <HAL_SPI_TransmitReceive+0x1c>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d03f      	beq.n	8004d3e <HAL_SPI_TransmitReceive+0x1ae>
 8004cbe:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004cc2:	d111      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x158>
 8004cc4:	e0ba      	b.n	8004e3c <HAL_SPI_TransmitReceive+0x2ac>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004cc6:	f7ff fe37 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d1f3      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x126>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 8004cd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8004cda:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
          hspi->RxXferCount--;
 8004cdc:	3b01      	subs	r3, #1
          hspi->pRxBuffPtr+=2;
 8004cde:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8004ce0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8004ce2:	2900      	cmp	r1, #0
 8004ce4:	f000 809e 	beq.w	8004e24 <HAL_SPI_TransmitReceive+0x294>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8004ce8:	9b08      	ldr	r3, [sp, #32]
 8004cea:	2200      	movs	r2, #0
 8004cec:	2102      	movs	r1, #2
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f7ff fe22 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d1de      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x126>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004cf8:	6b26      	ldr	r6, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 8004cfa:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004cfc:	f836 eb02 	ldrh.w	lr, [r6], #2
 8004d00:	6827      	ldr	r7, [r4, #0]
          hspi->TxXferCount--;
 8004d02:	3d01      	subs	r5, #1
 8004d04:	b2ad      	uxth	r5, r5
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004d06:	f8c7 e00c 	str.w	lr, [r7, #12]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004d0a:	9b08      	ldr	r3, [sp, #32]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2101      	movs	r1, #1
 8004d10:	4620      	mov	r0, r4
          hspi->pTxBuffPtr+=2;
 8004d12:	6326      	str	r6, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 8004d14:	86e5      	strh	r5, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004d16:	2d00      	cmp	r5, #0
 8004d18:	d1d5      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x136>
 8004d1a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004d1c:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8004d20:	d1d1      	bne.n	8004cc6 <HAL_SPI_TransmitReceive+0x136>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004d22:	683d      	ldr	r5, [r7, #0]
 8004d24:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8004d28:	603d      	str	r5, [r7, #0]
 8004d2a:	e7cc      	b.n	8004cc6 <HAL_SPI_TransmitReceive+0x136>
      SPI_RESET_CRC(hspi);
 8004d2c:	6814      	ldr	r4, [r2, #0]
 8004d2e:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8004d32:	6014      	str	r4, [r2, #0]
 8004d34:	6814      	ldr	r4, [r2, #0]
 8004d36:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8004d3a:	6014      	str	r4, [r2, #0]
 8004d3c:	e75c      	b.n	8004bf8 <HAL_SPI_TransmitReceive+0x68>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004d3e:	f831 0b02 	ldrh.w	r0, [r1], #2
        hspi->TxXferCount--;
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29b      	uxth	r3, r3
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004d46:	60d0      	str	r0, [r2, #12]
        hspi->pTxBuffPtr+=2;
 8004d48:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004d4a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1cb      	bne.n	8004ce8 <HAL_SPI_TransmitReceive+0x158>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d50:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8004d54:	d07c      	beq.n	8004e50 <HAL_SPI_TransmitReceive+0x2c0>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004d56:	9b08      	ldr	r3, [sp, #32]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f7ff fdeb 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d1a7      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x126>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 8004d70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pRxBuffPtr+=2;
 8004d72:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8004d74:	3b01      	subs	r3, #1
 8004d76:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7e:	d039      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0x264>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8004d80:	2201      	movs	r2, #1
 8004d82:	9b08      	ldr	r3, [sp, #32]
 8004d84:	2180      	movs	r1, #128	; 0x80
 8004d86:	4620      	mov	r0, r4
 8004d88:	f7ff fdd6 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d03d      	beq.n	8004e0e <HAL_SPI_TransmitReceive+0x27e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d92:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d94:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d96:	f043 0310 	orr.w	r3, r3, #16
 8004d9a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d9c:	e706      	b.n	8004bac <HAL_SPI_TransmitReceive+0x1c>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8004d9e:	6862      	ldr	r2, [r4, #4]
 8004da0:	2a00      	cmp	r2, #0
 8004da2:	d1e9      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x1e8>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004da4:	9b08      	ldr	r3, [sp, #32]
 8004da6:	2101      	movs	r1, #1
 8004da8:	4620      	mov	r0, r4
 8004daa:	f7ff fdc5 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d181      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x126>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8004db2:	6822      	ldr	r2, [r4, #0]
 8004db4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004db6:	68d2      	ldr	r2, [r2, #12]
 8004db8:	1c59      	adds	r1, r3, #1
 8004dba:	63a1      	str	r1, [r4, #56]	; 0x38
 8004dbc:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8004dbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004dc4:	e7d8      	b.n	8004d78 <HAL_SPI_TransmitReceive+0x1e8>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dc6:	6822      	ldr	r2, [r4, #0]
 8004dc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dca:	68d2      	ldr	r2, [r2, #12]
 8004dcc:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8004dce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004dd4:	e7d0      	b.n	8004d78 <HAL_SPI_TransmitReceive+0x1e8>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e761      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x114>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	f47f af29 	bne.w	8004c38 <HAL_SPI_TransmitReceive+0xa8>
        hspi->TxXferCount--;
 8004de6:	2300      	movs	r3, #0
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8004de8:	1c48      	adds	r0, r1, #1
 8004dea:	6320      	str	r0, [r4, #48]	; 0x30
 8004dec:	7809      	ldrb	r1, [r1, #0]
 8004dee:	60d1      	str	r1, [r2, #12]
        hspi->TxXferCount--;
 8004df0:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004df2:	e753      	b.n	8004c9c <HAL_SPI_TransmitReceive+0x10c>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004df4:	9b08      	ldr	r3, [sp, #32]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2101      	movs	r1, #1
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f7ff fd9c 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004e00:	b358      	cbz	r0, 8004e5a <HAL_SPI_TransmitReceive+0x2ca>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004e02:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e04:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004e06:	f043 0302 	orr.w	r3, r3, #2
 8004e0a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e0c:	e6ce      	b.n	8004bac <HAL_SPI_TransmitReceive+0x1c>
    hspi->State = HAL_SPI_STATE_READY;
 8004e0e:	2301      	movs	r3, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8004e10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 8004e12:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8004e16:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004e1a:	d024      	beq.n	8004e66 <HAL_SPI_TransmitReceive+0x2d6>
    __HAL_UNLOCK(hspi);
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    return HAL_OK;
 8004e22:	e6c3      	b.n	8004bac <HAL_SPI_TransmitReceive+0x1c>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e24:	6862      	ldr	r2, [r4, #4]
 8004e26:	2a00      	cmp	r2, #0
 8004e28:	d1a6      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x1e8>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004e2a:	9b08      	ldr	r3, [sp, #32]
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f7ff fd82 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	f47f af3e 	bne.w	8004cb6 <HAL_SPI_TransmitReceive+0x126>
 8004e3a:	e794      	b.n	8004d66 <HAL_SPI_TransmitReceive+0x1d6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	f47f af53 	bne.w	8004ce8 <HAL_SPI_TransmitReceive+0x158>
        hspi->TxXferCount--;
 8004e42:	2300      	movs	r3, #0
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8004e44:	f831 0b02 	ldrh.w	r0, [r1], #2
 8004e48:	60d0      	str	r0, [r2, #12]
        hspi->pTxBuffPtr+=2;
 8004e4a:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004e4c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004e4e:	e77f      	b.n	8004d50 <HAL_SPI_TransmitReceive+0x1c0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004e50:	6813      	ldr	r3, [r2, #0]
 8004e52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	e77d      	b.n	8004d56 <HAL_SPI_TransmitReceive+0x1c6>
      tmpreg = hspi->Instance->DR;
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f8ad 3006 	strh.w	r3, [sp, #6]
 8004e64:	e78c      	b.n	8004d80 <HAL_SPI_TransmitReceive+0x1f0>
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8004e66:	6821      	ldr	r1, [r4, #0]
 8004e68:	6888      	ldr	r0, [r1, #8]
 8004e6a:	06c0      	lsls	r0, r0, #27
 8004e6c:	d5d6      	bpl.n	8004e1c <HAL_SPI_TransmitReceive+0x28c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004e6e:	6d65      	ldr	r5, [r4, #84]	; 0x54
      return HAL_ERROR; 
 8004e70:	4618      	mov	r0, r3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004e72:	f045 0502 	orr.w	r5, r5, #2
 8004e76:	6565      	str	r5, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 8004e78:	680b      	ldr	r3, [r1, #0]
 8004e7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e7e:	600b      	str	r3, [r1, #0]
 8004e80:	680b      	ldr	r3, [r1, #0]
 8004e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e86:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hspi);
 8004e88:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      return HAL_ERROR; 
 8004e8c:	e68e      	b.n	8004bac <HAL_SPI_TransmitReceive+0x1c>
 8004e8e:	bf00      	nop

08004e90 <HAL_SPI_Receive>:
{
 8004e90:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint16_t tmpreg = 0;
 8004e92:	2500      	movs	r5, #0
{
 8004e94:	b085      	sub	sp, #20
  __IO uint16_t tmpreg = 0;
 8004e96:	f8ad 500e 	strh.w	r5, [sp, #14]
  if(hspi->State == HAL_SPI_STATE_READY)
 8004e9a:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
 8004e9e:	b2e4      	uxtb	r4, r4
 8004ea0:	2c01      	cmp	r4, #1
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_Receive+0x1a>
    return HAL_BUSY;
 8004ea4:	2002      	movs	r0, #2
}
 8004ea6:	b005      	add	sp, #20
 8004ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0)) 
 8004eaa:	2900      	cmp	r1, #0
 8004eac:	d044      	beq.n	8004f38 <HAL_SPI_Receive+0xa8>
 8004eae:	2a00      	cmp	r2, #0
 8004eb0:	d042      	beq.n	8004f38 <HAL_SPI_Receive+0xa8>
    __HAL_LOCK(hspi);
 8004eb2:	f890 6050 	ldrb.w	r6, [r0, #80]	; 0x50
 8004eb6:	2e01      	cmp	r6, #1
 8004eb8:	d0f4      	beq.n	8004ea4 <HAL_SPI_Receive+0x14>
    hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004eba:	2622      	movs	r6, #34	; 0x22
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ebc:	6887      	ldr	r7, [r0, #8]
    hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ebe:	f880 6051 	strb.w	r6, [r0, #81]	; 0x51
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec2:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    __HAL_LOCK(hspi);
 8004ec6:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
    hspi->pRxBuffPtr  = pData;
 8004eca:	6381      	str	r1, [r0, #56]	; 0x38
    hspi->RxXferSize  = Size;
 8004ecc:	8782      	strh	r2, [r0, #60]	; 0x3c
    hspi->RxXferCount = Size;
 8004ece:	87c2      	strh	r2, [r0, #62]	; 0x3e
    hspi->RxISR = 0;
 8004ed0:	6485      	str	r5, [r0, #72]	; 0x48
    hspi->TxISR = 0;
 8004ed2:	64c5      	str	r5, [r0, #76]	; 0x4c
    hspi->pTxBuffPtr  = NULL;
 8004ed4:	6305      	str	r5, [r0, #48]	; 0x30
    hspi->TxXferSize  = 0;
 8004ed6:	8685      	strh	r5, [r0, #52]	; 0x34
    hspi->TxXferCount = 0;
 8004ed8:	86c5      	strh	r5, [r0, #54]	; 0x36
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eda:	6545      	str	r5, [r0, #84]	; 0x54
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004edc:	d050      	beq.n	8004f80 <HAL_SPI_Receive+0xf0>
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ede:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8004ee0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8004ee4:	d042      	beq.n	8004f6c <HAL_SPI_Receive+0xdc>
 8004ee6:	461c      	mov	r4, r3
    if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004ee8:	6843      	ldr	r3, [r0, #4]
 8004eea:	4605      	mov	r5, r0
 8004eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef0:	d04c      	beq.n	8004f8c <HAL_SPI_Receive+0xfc>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ef2:	6829      	ldr	r1, [r5, #0]
 8004ef4:	680b      	ldr	r3, [r1, #0]
 8004ef6:	0658      	lsls	r0, r3, #25
 8004ef8:	d403      	bmi.n	8004f02 <HAL_SPI_Receive+0x72>
      __HAL_SPI_ENABLE(hspi);
 8004efa:	680b      	ldr	r3, [r1, #0]
 8004efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f00:	600b      	str	r3, [r1, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004f02:	68eb      	ldr	r3, [r5, #12]
 8004f04:	b1d3      	cbz	r3, 8004f3c <HAL_SPI_Receive+0xac>
      while(hspi->RxXferCount > 1)
 8004f06:	2a01      	cmp	r2, #1
 8004f08:	d10c      	bne.n	8004f24 <HAL_SPI_Receive+0x94>
 8004f0a:	e04a      	b.n	8004fa2 <HAL_SPI_Receive+0x112>
        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f0c:	6829      	ldr	r1, [r5, #0]
 8004f0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004f10:	68ca      	ldr	r2, [r1, #12]
 8004f12:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 8004f16:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
        hspi->pRxBuffPtr+=2;
 8004f18:	63ab      	str	r3, [r5, #56]	; 0x38
        hspi->RxXferCount--;
 8004f1a:	3a01      	subs	r2, #1
 8004f1c:	b292      	uxth	r2, r2
      while(hspi->RxXferCount > 1)
 8004f1e:	2a01      	cmp	r2, #1
        hspi->RxXferCount--;
 8004f20:	87ea      	strh	r2, [r5, #62]	; 0x3e
      while(hspi->RxXferCount > 1)
 8004f22:	d93d      	bls.n	8004fa0 <HAL_SPI_Receive+0x110>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004f24:	4623      	mov	r3, r4
 8004f26:	2200      	movs	r2, #0
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f7ff fd04 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d0eb      	beq.n	8004f0c <HAL_SPI_Receive+0x7c>
          return HAL_TIMEOUT;
 8004f34:	2003      	movs	r0, #3
 8004f36:	e7b6      	b.n	8004ea6 <HAL_SPI_Receive+0x16>
      return  HAL_ERROR;
 8004f38:	4620      	mov	r0, r4
 8004f3a:	e7b4      	b.n	8004ea6 <HAL_SPI_Receive+0x16>
      while(hspi->RxXferCount > 1)
 8004f3c:	2a01      	cmp	r2, #1
 8004f3e:	d10c      	bne.n	8004f5a <HAL_SPI_Receive+0xca>
 8004f40:	e056      	b.n	8004ff0 <HAL_SPI_Receive+0x160>
        (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8004f42:	682a      	ldr	r2, [r5, #0]
 8004f44:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004f46:	68d2      	ldr	r2, [r2, #12]
 8004f48:	1c59      	adds	r1, r3, #1
 8004f4a:	63a9      	str	r1, [r5, #56]	; 0x38
 8004f4c:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8004f4e:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
 8004f50:	3a01      	subs	r2, #1
 8004f52:	b292      	uxth	r2, r2
      while(hspi->RxXferCount > 1)
 8004f54:	2a01      	cmp	r2, #1
        hspi->RxXferCount--;
 8004f56:	87ea      	strh	r2, [r5, #62]	; 0x3e
      while(hspi->RxXferCount > 1)
 8004f58:	d949      	bls.n	8004fee <HAL_SPI_Receive+0x15e>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2101      	movs	r1, #1
 8004f60:	4628      	mov	r0, r5
 8004f62:	f7ff fce9 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d0eb      	beq.n	8004f42 <HAL_SPI_Receive+0xb2>
 8004f6a:	e7e3      	b.n	8004f34 <HAL_SPI_Receive+0xa4>
      SPI_RESET_CRC(hspi);
 8004f6c:	6804      	ldr	r4, [r0, #0]
 8004f6e:	6825      	ldr	r5, [r4, #0]
 8004f70:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
 8004f74:	6025      	str	r5, [r4, #0]
 8004f76:	6825      	ldr	r5, [r4, #0]
 8004f78:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
 8004f7c:	6025      	str	r5, [r4, #0]
 8004f7e:	e7b2      	b.n	8004ee6 <HAL_SPI_Receive+0x56>
      SPI_1LINE_RX(hspi);
 8004f80:	6805      	ldr	r5, [r0, #0]
 8004f82:	682c      	ldr	r4, [r5, #0]
 8004f84:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8004f88:	602c      	str	r4, [r5, #0]
 8004f8a:	e7a8      	b.n	8004ede <HAL_SPI_Receive+0x4e>
    if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004f8c:	2f00      	cmp	r7, #0
 8004f8e:	d1b0      	bne.n	8004ef2 <HAL_SPI_Receive+0x62>
      __HAL_UNLOCK(hspi);
 8004f90:	f880 7050 	strb.w	r7, [r0, #80]	; 0x50
      return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f94:	4613      	mov	r3, r2
 8004f96:	9400      	str	r4, [sp, #0]
 8004f98:	460a      	mov	r2, r1
 8004f9a:	f7ff fdf9 	bl	8004b90 <HAL_SPI_TransmitReceive>
 8004f9e:	e782      	b.n	8004ea6 <HAL_SPI_Receive+0x16>
 8004fa0:	6aae      	ldr	r6, [r5, #40]	; 0x28
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8004fa2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8004fa6:	d032      	beq.n	800500e <HAL_SPI_Receive+0x17e>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8004fa8:	4623      	mov	r3, r4
 8004faa:	2200      	movs	r2, #0
 8004fac:	2101      	movs	r1, #1
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f7ff fcc2 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d1bd      	bne.n	8004f34 <HAL_SPI_Receive+0xa4>
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fb8:	68eb      	ldr	r3, [r5, #12]
      (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8004fba:	682a      	ldr	r2, [r5, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004fbc:	bb0b      	cbnz	r3, 8005002 <HAL_SPI_Receive+0x172>
      (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8004fbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004fc0:	68d2      	ldr	r2, [r2, #12]
 8004fc2:	1c59      	adds	r1, r3, #1
 8004fc4:	63a9      	str	r1, [r5, #56]	; 0x38
 8004fc6:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 8004fc8:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    hspi->RxXferCount--;
 8004fcc:	3b01      	subs	r3, #1
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fce:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    hspi->RxXferCount--;
 8004fd2:	87eb      	strh	r3, [r5, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fd4:	d045      	beq.n	8005062 <HAL_SPI_Receive+0x1d2>
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fd6:	686b      	ldr	r3, [r5, #4]
 8004fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fdc:	d026      	beq.n	800502c <HAL_SPI_Receive+0x19c>
    hspi->State = HAL_SPI_STATE_READY;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
    __HAL_UNLOCK(hspi);
 8004fe4:	2400      	movs	r4, #0
 8004fe6:	f885 4050 	strb.w	r4, [r5, #80]	; 0x50
    return HAL_OK;
 8004fea:	4620      	mov	r0, r4
 8004fec:	e75b      	b.n	8004ea6 <HAL_SPI_Receive+0x16>
 8004fee:	6aae      	ldr	r6, [r5, #40]	; 0x28
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8004ff0:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8004ff4:	d1d8      	bne.n	8004fa8 <HAL_SPI_Receive+0x118>
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004ff6:	682a      	ldr	r2, [r5, #0]
 8004ff8:	6813      	ldr	r3, [r2, #0]
 8004ffa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	e7d2      	b.n	8004fa8 <HAL_SPI_Receive+0x118>
      *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005002:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005004:	68d2      	ldr	r2, [r2, #12]
 8005006:	f823 2b02 	strh.w	r2, [r3], #2
      hspi->pRxBuffPtr+=2;
 800500a:	63ab      	str	r3, [r5, #56]	; 0x38
 800500c:	e7dc      	b.n	8004fc8 <HAL_SPI_Receive+0x138>
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800500e:	680b      	ldr	r3, [r1, #0]
 8005010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005014:	600b      	str	r3, [r1, #0]
 8005016:	e7c7      	b.n	8004fa8 <HAL_SPI_Receive+0x118>
      tmpreg = hspi->Instance->DR;
 8005018:	682b      	ldr	r3, [r5, #0]
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800501a:	6869      	ldr	r1, [r5, #4]
      tmpreg = hspi->Instance->DR;
 800501c:	68db      	ldr	r3, [r3, #12]
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800501e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
      tmpreg = hspi->Instance->DR;
 8005022:	b29b      	uxth	r3, r3
 8005024:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005026:	f8ad 300e 	strh.w	r3, [sp, #14]
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800502a:	d106      	bne.n	800503a <HAL_SPI_Receive+0x1aa>
 800502c:	68ab      	ldr	r3, [r5, #8]
 800502e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005032:	d024      	beq.n	800507e <HAL_SPI_Receive+0x1ee>
 8005034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005038:	d021      	beq.n	800507e <HAL_SPI_Receive+0x1ee>
    hspi->State = HAL_SPI_STATE_READY;
 800503a:	2301      	movs	r3, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800503c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    hspi->State = HAL_SPI_STATE_READY;
 8005040:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8005044:	d1ce      	bne.n	8004fe4 <HAL_SPI_Receive+0x154>
 8005046:	682b      	ldr	r3, [r5, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	06db      	lsls	r3, r3, #27
 800504c:	d5ca      	bpl.n	8004fe4 <HAL_SPI_Receive+0x154>
      if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 800504e:	4628      	mov	r0, r5
 8005050:	f000 f86c 	bl	800512c <SPI_ISCRCErrorValid>
 8005054:	2801      	cmp	r0, #1
 8005056:	d018      	beq.n	800508a <HAL_SPI_Receive+0x1fa>
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005058:	f06f 0210 	mvn.w	r2, #16
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	e7c0      	b.n	8004fe4 <HAL_SPI_Receive+0x154>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005062:	4623      	mov	r3, r4
 8005064:	2200      	movs	r2, #0
 8005066:	2101      	movs	r1, #1
 8005068:	4628      	mov	r0, r5
 800506a:	f7ff fc65 	bl	8004938 <_ZL26SPI_WaitOnFlagUntilTimeoutP19__SPI_HandleTypeDefm10FlagStatusm>
 800506e:	2800      	cmp	r0, #0
 8005070:	d0d2      	beq.n	8005018 <HAL_SPI_Receive+0x188>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005072:	6d6b      	ldr	r3, [r5, #84]	; 0x54
        return HAL_TIMEOUT;
 8005074:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005076:	f043 0302 	orr.w	r3, r3, #2
 800507a:	656b      	str	r3, [r5, #84]	; 0x54
        return HAL_TIMEOUT;
 800507c:	e713      	b.n	8004ea6 <HAL_SPI_Receive+0x16>
      __HAL_SPI_DISABLE(hspi);
 800507e:	6829      	ldr	r1, [r5, #0]
 8005080:	680b      	ldr	r3, [r1, #0]
 8005082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005086:	600b      	str	r3, [r1, #0]
 8005088:	e7d7      	b.n	800503a <HAL_SPI_Receive+0x1aa>
        __HAL_UNLOCK(hspi);
 800508a:	2100      	movs	r1, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800508c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
        SPI_RESET_CRC(hspi);
 800508e:	682b      	ldr	r3, [r5, #0]
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005090:	f042 0202 	orr.w	r2, r2, #2
 8005094:	656a      	str	r2, [r5, #84]	; 0x54
        SPI_RESET_CRC(hspi);
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050a4:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 80050a6:	f885 1050 	strb.w	r1, [r5, #80]	; 0x50
        return HAL_ERROR; 
 80050aa:	e6fc      	b.n	8004ea6 <HAL_SPI_Receive+0x16>

080050ac <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d038      	beq.n	8005122 <HAL_SPI_Init+0x76>
{
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 80050b2:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80050b6:	4604      	mov	r4, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d02f      	beq.n	800511c <HAL_SPI_Init+0x70>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80050bc:	2602      	movs	r6, #2
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 80050be:	2000      	movs	r0, #0
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_READY;
 80050c0:	2101      	movs	r1, #1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80050c2:	68a2      	ldr	r2, [r4, #8]
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	68e5      	ldr	r5, [r4, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	6922      	ldr	r2, [r4, #16]
 80050cc:	432b      	orrs	r3, r5
 80050ce:	6965      	ldr	r5, [r4, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	69e2      	ldr	r2, [r4, #28]
 80050d4:	432b      	orrs	r3, r5
 80050d6:	6a25      	ldr	r5, [r4, #32]
  hspi->State = HAL_SPI_STATE_BUSY;
 80050d8:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80050dc:	69a7      	ldr	r7, [r4, #24]
 80050de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050e0:	4313      	orrs	r3, r2
 80050e2:	432b      	orrs	r3, r5
  __HAL_SPI_DISABLE(hspi);
 80050e4:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80050e6:	0c3d      	lsrs	r5, r7, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80050e8:	4333      	orrs	r3, r6
 80050ea:	f407 7700 	and.w	r7, r7, #512	; 0x200
 80050ee:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80050f0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  __HAL_SPI_DISABLE(hspi);
 80050f2:	6816      	ldr	r6, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80050f4:	f005 0504 	and.w	r5, r5, #4
 80050f8:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80050fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  __HAL_SPI_DISABLE(hspi);
 80050fc:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8005100:	6016      	str	r6, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005102:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005104:	6055      	str	r5, [r2, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8005106:	6117      	str	r7, [r2, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005108:	69d3      	ldr	r3, [r2, #28]
  uCRCErrorWorkaroundCheck = 0;
 800510a:	4d07      	ldr	r5, [pc, #28]	; (8005128 <HAL_SPI_Init+0x7c>)
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800510c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  uCRCErrorWorkaroundCheck = 0;
 8005110:	7028      	strb	r0, [r5, #0]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005112:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005114:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005116:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  
  return HAL_OK;
 800511a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_SPI_MspInit(hspi);
 800511c:	f7fe f884 	bl	8003228 <HAL_SPI_MspInit>
 8005120:	e7cc      	b.n	80050bc <HAL_SPI_Init+0x10>
    return HAL_ERROR;
 8005122:	2001      	movs	r0, #1
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000350 	.word	0x20000350

0800512c <SPI_ISCRCErrorValid>:
  }
  return (SPI_VALID_CRC_ERROR);
#else
  return (SPI_VALID_CRC_ERROR);
#endif
}
 800512c:	2001      	movs	r0, #1
 800512e:	4770      	bx	lr

08005130 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005130:	6a02      	ldr	r2, [r0, #32]
{
 8005132:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005134:	f022 0201 	bic.w	r2, r2, #1
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005138:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513a:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800513c:	6a03      	ldr	r3, [r0, #32]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800513e:	4d11      	ldr	r5, [pc, #68]	; (8005184 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x54>)
  tmpcr2 =  TIMx->CR2;
 8005140:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005142:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 8005144:	680c      	ldr	r4, [r1, #0]
  tmpccer &= ~TIM_CCER_CC1P;
 8005146:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800514a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800514e:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8005150:	ea43 0306 	orr.w	r3, r3, r6
  tmpccmrx |= OC_Config->OCMode;
 8005154:	ea42 0204 	orr.w	r2, r2, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005158:	d006      	beq.n	8005168 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x38>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800515a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800515c:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800515e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005160:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8005162:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005164:	6203      	str	r3, [r0, #32]
}
 8005166:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8005168:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCIdleState;
 800516a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800516c:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    tmpccer &= ~TIM_CCER_CC1NP;
 8005170:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8005174:	698c      	ldr	r4, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8005176:	4333      	orrs	r3, r6
    tmpcr2 |= OC_Config->OCIdleState;
 8005178:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 800517a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800517e:	ea45 0704 	orr.w	r7, r5, r4
 8005182:	e7ea      	b.n	800515a <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x2a>
 8005184:	40012c00 	.word	0x40012c00

08005188 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005188:	6a02      	ldr	r2, [r0, #32]
{
 800518a:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800518c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8005190:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005192:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 8005194:	6a03      	ldr	r3, [r0, #32]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005196:	4d12      	ldr	r5, [pc, #72]	; (80051e0 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x58>)
  tmpcr2 =  TIMx->CR2;
 8005198:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800519a:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 800519c:	680c      	ldr	r4, [r1, #0]
  tmpccer &= ~TIM_CCER_CC3P;
 800519e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051a6:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 80051a8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80051ac:	ea42 0204 	orr.w	r2, r2, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051b0:	d006      	beq.n	80051c0 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x38>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051b2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80051b4:	6047      	str	r7, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80051b6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80051b8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 80051ba:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80051bc:	6203      	str	r3, [r0, #32]
}
 80051be:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80051c0:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80051c2:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80051c4:	698d      	ldr	r5, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80051c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ca:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80051ce:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80051d2:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80051d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80051d8:	ea47 1704 	orr.w	r7, r7, r4, lsl #4
 80051dc:	e7e9      	b.n	80051b2 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x2a>
 80051de:	bf00      	nop
 80051e0:	40012c00 	.word	0x40012c00

080051e4 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e4:	6a02      	ldr	r2, [r0, #32]
{
 80051e6:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80051ec:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ee:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 80051f0:	6a03      	ldr	r3, [r0, #32]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80051f2:	4e0d      	ldr	r6, [pc, #52]	; (8005228 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x44>)
  tmpcr2 =  TIMx->CR2;
 80051f4:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80051f6:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= (OC_Config->OCMode << 8);
 80051f8:	680c      	ldr	r4, [r1, #0]
  tmpccer &= ~TIM_CCER_CC4P;
 80051fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051fe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8005202:	42b0      	cmp	r0, r6
  tmpccer |= (OC_Config->OCPolarity << 12);
 8005204:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8);
 8005208:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800520c:	d006      	beq.n	800521c <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x38>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800520e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005210:	6045      	str	r5, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005212:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005214:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8005216:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005218:	6203      	str	r3, [r0, #32]
}
 800521a:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800521c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800521e:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8005222:	ea45 1584 	orr.w	r5, r5, r4, lsl #6
 8005226:	e7f2      	b.n	800520e <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x2a>
 8005228:	40012c00 	.word	0x40012c00

0800522c <HAL_TIM_PWM_MspInit>:
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop

08005230 <HAL_TIM_PWM_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8005230:	2201      	movs	r2, #1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005232:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << Channel;
 8005234:	fa02 f101 	lsl.w	r1, r2, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005238:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800523a:	480a      	ldr	r0, [pc, #40]	; (8005264 <HAL_TIM_PWM_Start+0x34>)
  TIMx->CCER &= ~tmp;
 800523c:	ea22 0201 	bic.w	r2, r2, r1
 8005240:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8005242:	6a1a      	ldr	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005244:	4283      	cmp	r3, r0
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8005246:	ea41 0102 	orr.w	r1, r1, r2
 800524a:	6219      	str	r1, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800524c:	d103      	bne.n	8005256 <HAL_TIM_PWM_Start+0x26>
    __HAL_TIM_MOE_ENABLE(htim);
 800524e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005254:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8005256:	681a      	ldr	r2, [r3, #0]
}
 8005258:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40012c00 	.word	0x40012c00

08005268 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005268:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800526c:	2b01      	cmp	r3, #1
 800526e:	d040      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x8a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	2202      	movs	r2, #2
{
 8005272:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8005274:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8005276:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800527c:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 800527e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005280:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005284:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8005288:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 800528a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->Instance->SMCR = tmpsmcr;
 800528e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8005290:	d073      	beq.n	800537a <HAL_TIM_ConfigClockSource+0x112>
 8005292:	d918      	bls.n	80052c6 <HAL_TIM_ConfigClockSource+0x5e>
 8005294:	2c70      	cmp	r4, #112	; 0x70
 8005296:	d060      	beq.n	800535a <HAL_TIM_ConfigClockSource+0xf2>
 8005298:	d92d      	bls.n	80052f6 <HAL_TIM_ConfigClockSource+0x8e>
 800529a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800529e:	d057      	beq.n	8005350 <HAL_TIM_ConfigClockSource+0xe8>
 80052a0:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 80052a4:	d11c      	bne.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr = TIMx->SMCR;
 80052a6:	689c      	ldr	r4, [r3, #8]
 80052a8:	688a      	ldr	r2, [r1, #8]
 80052aa:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ac:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80052b0:	68c9      	ldr	r1, [r1, #12]
 80052b2:	432a      	orrs	r2, r5
 80052b4:	4322      	orrs	r2, r4
 80052b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  TIMx->SMCR = tmpsmcr;
 80052ba:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052c2:	609a      	str	r2, [r3, #8]
    break;
 80052c4:	e00c      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 80052c6:	2c10      	cmp	r4, #16
 80052c8:	d032      	beq.n	8005330 <HAL_TIM_ConfigClockSource+0xc8>
 80052ca:	d938      	bls.n	800533e <HAL_TIM_ConfigClockSource+0xd6>
 80052cc:	2c20      	cmp	r4, #32
 80052ce:	d06c      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x142>
 80052d0:	2c30      	cmp	r4, #48	; 0x30
 80052d2:	d105      	bne.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 80052d4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80052d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80052da:	f042 0237 	orr.w	r2, r2, #55	; 0x37
   TIMx->SMCR = tmpsmcr;
 80052de:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 80052e6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 80052ea:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  return HAL_OK;
 80052ee:	4618      	mov	r0, r3
}
 80052f0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80052f2:	2002      	movs	r0, #2
 80052f4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80052f6:	2c50      	cmp	r4, #80	; 0x50
 80052f8:	d05e      	beq.n	80053b8 <HAL_TIM_ConfigClockSource+0x150>
 80052fa:	2c60      	cmp	r4, #96	; 0x60
 80052fc:	d1f0      	bne.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052fe:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005300:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005302:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005306:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005308:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800530c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800530e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005312:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8005316:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12);
 800531a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800531e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005320:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8005322:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005324:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005328:	f042 0267 	orr.w	r2, r2, #103	; 0x67
   TIMx->SMCR = tmpsmcr;
 800532c:	609a      	str	r2, [r3, #8]
 800532e:	e7d7      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8005330:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005332:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005336:	f042 0217 	orr.w	r2, r2, #23
   TIMx->SMCR = tmpsmcr;
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	e7d0      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 800533e:	2c00      	cmp	r4, #0
 8005340:	d1ce      	bne.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 8005342:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8005344:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8005348:	f042 0207 	orr.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800534c:	609a      	str	r2, [r3, #8]
 800534e:	e7c7      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	f022 0207 	bic.w	r2, r2, #7
 8005356:	609a      	str	r2, [r3, #8]
    break;
 8005358:	e7c2      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
  tmpsmcr = TIMx->SMCR;
 800535a:	689c      	ldr	r4, [r3, #8]
 800535c:	688a      	ldr	r2, [r1, #8]
 800535e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005360:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8005364:	68c9      	ldr	r1, [r1, #12]
 8005366:	432a      	orrs	r2, r5
 8005368:	4322      	orrs	r2, r4
 800536a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  TIMx->SMCR = tmpsmcr;
 800536e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005370:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005372:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005376:	609a      	str	r2, [r3, #8]
    break;
 8005378:	e7b2      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 800537a:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800537c:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800537e:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005380:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005384:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005386:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005388:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800538a:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800538e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8005392:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005396:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8005398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800539a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800539c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800539e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80053a2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
   TIMx->SMCR = tmpsmcr;
 80053a6:	609a      	str	r2, [r3, #8]
 80053a8:	e79a      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
   tmpsmcr = TIMx->SMCR;
 80053aa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80053ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80053b0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   TIMx->SMCR = tmpsmcr;
 80053b4:	609a      	str	r2, [r3, #8]
 80053b6:	e793      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>
  tmpccer = TIMx->CCER;
 80053b8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ba:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053bc:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053be:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c2:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053c8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 80053d0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80053d4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80053d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80053da:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80053dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80053e0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   TIMx->SMCR = tmpsmcr;
 80053e4:	609a      	str	r2, [r3, #8]
 80053e6:	e77b      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x78>

080053e8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e8:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 80053ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053ec:	4290      	cmp	r0, r2
 80053ee:	d025      	beq.n	800543c <TIM_Base_SetConfig+0x54>
 80053f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 80053f4:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f6:	d010      	beq.n	800541a <TIM_Base_SetConfig+0x32>
 80053f8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80053fc:	4290      	cmp	r0, r2
 80053fe:	d00c      	beq.n	800541a <TIM_Base_SetConfig+0x32>
 8005400:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005404:	4290      	cmp	r0, r2
 8005406:	d008      	beq.n	800541a <TIM_Base_SetConfig+0x32>
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005408:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800540a:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800540c:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800540e:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005410:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005412:	6282      	str	r2, [r0, #40]	; 0x28
}
 8005414:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8005416:	6143      	str	r3, [r0, #20]
}
 8005418:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800541a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005420:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8005422:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8005424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005428:	432b      	orrs	r3, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 800542a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800542c:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800542e:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8005430:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005432:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005434:	6282      	str	r2, [r0, #40]	; 0x28
}
 8005436:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8005438:	6143      	str	r3, [r0, #20]
}
 800543a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800543c:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005442:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005444:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800544a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800544c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800544e:	688b      	ldr	r3, [r1, #8]
 8005450:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005452:	680b      	ldr	r3, [r1, #0]
 8005454:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005456:	690b      	ldr	r3, [r1, #16]
 8005458:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800545a:	2301      	movs	r3, #1
 800545c:	6143      	str	r3, [r0, #20]
 800545e:	4770      	bx	lr
 8005460:	40012c00 	.word	0x40012c00

08005464 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8005464:	b1b8      	cbz	r0, 8005496 <HAL_TIM_Base_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 8005466:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800546a:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 800546c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005470:	4604      	mov	r4, r0
 8005472:	b15b      	cbz	r3, 800548c <HAL_TIM_Base_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 8005474:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005476:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8005478:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547c:	1d21      	adds	r1, r4, #4
 800547e:	f7ff ffb3 	bl	80053e8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8005482:	2301      	movs	r3, #1
  return HAL_OK;
 8005484:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8005486:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800548a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800548c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8005490:	f7fd ffd8 	bl	8003444 <HAL_TIM_Base_MspInit>
 8005494:	e7ee      	b.n	8005474 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8005496:	2001      	movs	r0, #1
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop

0800549c <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 800549c:	b1b8      	cbz	r0, 80054ce <HAL_TIM_PWM_Init+0x32>
  if(htim->State == HAL_TIM_STATE_RESET)
 800549e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 80054a2:	b510      	push	{r4, lr}
  if(htim->State == HAL_TIM_STATE_RESET)
 80054a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054a8:	4604      	mov	r4, r0
 80054aa:	b15b      	cbz	r3, 80054c4 <HAL_TIM_PWM_Init+0x28>
  htim->State= HAL_TIM_STATE_BUSY;
 80054ac:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ae:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80054b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054b4:	1d21      	adds	r1, r4, #4
 80054b6:	f7ff ff97 	bl	80053e8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80054ba:	2301      	movs	r3, #1
  return HAL_OK;
 80054bc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80054be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80054c2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80054c4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80054c8:	f7ff feb0 	bl	800522c <HAL_TIM_PWM_MspInit>
 80054cc:	e7ee      	b.n	80054ac <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80054ce:	2001      	movs	r0, #1
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop

080054d4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d4:	6a02      	ldr	r2, [r0, #32]
{
 80054d6:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d8:	f022 0210 	bic.w	r2, r2, #16
  tmpccer |= (OC_Config->OCPolarity << 4);
 80054dc:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054de:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 80054e0:	6a03      	ldr	r3, [r0, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054e2:	4d12      	ldr	r5, [pc, #72]	; (800552c <TIM_OC2_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 80054e4:	6847      	ldr	r7, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80054e6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8);
 80054e8:	680c      	ldr	r4, [r1, #0]
  tmpccer &= ~TIM_CCER_CC2P;
 80054ea:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054ee:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054f2:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4);
 80054f4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8);
 80054f8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054fc:	d006      	beq.n	800550c <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 80054fe:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005500:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005502:	6182      	str	r2, [r0, #24]
}
 8005504:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 8005506:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005508:	6203      	str	r3, [r0, #32]
}
 800550a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800550c:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800550e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8005510:	698d      	ldr	r5, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005516:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800551a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800551e:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8005524:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 8005528:	e7e9      	b.n	80054fe <TIM_OC2_SetConfig+0x2a>
 800552a:	bf00      	nop
 800552c:	40012c00 	.word	0x40012c00

08005530 <HAL_TIM_PWM_ConfigChannel>:
{
 8005530:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005532:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005536:	2b01      	cmp	r3, #1
 8005538:	d02b      	beq.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x62>
 800553a:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800553e:	2101      	movs	r1, #1
 8005540:	4604      	mov	r4, r0
 8005542:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8005546:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 800554a:	2a0c      	cmp	r2, #12
 800554c:	d81a      	bhi.n	8005584 <HAL_TIM_PWM_ConfigChannel+0x54>
 800554e:	e8df f002 	tbb	[pc, r2]
 8005552:	1935      	.short	0x1935
 8005554:	19071919 	.word	0x19071919
 8005558:	19471919 	.word	0x19471919
 800555c:	1919      	.short	0x1919
 800555e:	22          	.byte	0x22
 800555f:	00          	.byte	0x00
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005560:	4629      	mov	r1, r5
 8005562:	6800      	ldr	r0, [r0, #0]
 8005564:	f7ff ffb6 	bl	80054d4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005568:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800556a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800556c:	6999      	ldr	r1, [r3, #24]
 800556e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005572:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005574:	6999      	ldr	r1, [r3, #24]
 8005576:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800557a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005582:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005584:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005586:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005588:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800558c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8005590:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8005592:	2002      	movs	r0, #2
}
 8005594:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005596:	4629      	mov	r1, r5
 8005598:	6800      	ldr	r0, [r0, #0]
 800559a:	f7ff fe23 	bl	80051e4 <_ZL17TIM_OC4_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800559e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80055a0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055a2:	69d9      	ldr	r1, [r3, #28]
 80055a4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80055a8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055aa:	69d9      	ldr	r1, [r3, #28]
 80055ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80055b0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80055b8:	61da      	str	r2, [r3, #28]
    break;
 80055ba:	e7e3      	b.n	8005584 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055bc:	4629      	mov	r1, r5
 80055be:	6800      	ldr	r0, [r0, #0]
 80055c0:	f7ff fdb6 	bl	8005130 <_ZL17TIM_OC1_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055c4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055c8:	6999      	ldr	r1, [r3, #24]
 80055ca:	f041 0108 	orr.w	r1, r1, #8
 80055ce:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055d0:	6999      	ldr	r1, [r3, #24]
 80055d2:	f021 0104 	bic.w	r1, r1, #4
 80055d6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	4302      	orrs	r2, r0
 80055dc:	619a      	str	r2, [r3, #24]
    break;
 80055de:	e7d1      	b.n	8005584 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055e0:	4629      	mov	r1, r5
 80055e2:	6800      	ldr	r0, [r0, #0]
 80055e4:	f7ff fdd0 	bl	8005188 <_ZL17TIM_OC3_SetConfigP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ea:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ec:	69d9      	ldr	r1, [r3, #28]
 80055ee:	f041 0108 	orr.w	r1, r1, #8
 80055f2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055f4:	69d9      	ldr	r1, [r3, #28]
 80055f6:	f021 0104 	bic.w	r1, r1, #4
 80055fa:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055fc:	69da      	ldr	r2, [r3, #28]
 80055fe:	4302      	orrs	r2, r0
 8005600:	61da      	str	r2, [r3, #28]
    break;
 8005602:	e7bf      	b.n	8005584 <HAL_TIM_PWM_ConfigChannel+0x54>

08005604 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005604:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005608:	2b01      	cmp	r3, #1
 800560a:	d01c      	beq.n	8005646 <HAL_TIMEx_ConfigBreakDeadTime+0x42>
 800560c:	4602      	mov	r2, r0
{
 800560e:	b4f0      	push	{r4, r5, r6, r7}

  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 8005610:	e891 0088 	ldmia.w	r1, {r3, r7}
                                   sBreakDeadTimeConfig->AutomaticOutput;


  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005614:	2400      	movs	r4, #0
  htim->State = HAL_TIM_STATE_BUSY;
 8005616:	2002      	movs	r0, #2
  htim->State = HAL_TIM_STATE_READY;
 8005618:	2501      	movs	r5, #1
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 800561a:	688e      	ldr	r6, [r1, #8]
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 800561c:	433b      	orrs	r3, r7
                                   sBreakDeadTimeConfig->LockLevel        |
 800561e:	68cf      	ldr	r7, [r1, #12]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
 8005620:	4333      	orrs	r3, r6
                                   sBreakDeadTimeConfig->DeadTime         |
 8005622:	690e      	ldr	r6, [r1, #16]
                                   sBreakDeadTimeConfig->LockLevel        |
 8005624:	433b      	orrs	r3, r7
                                   sBreakDeadTimeConfig->BreakState       |
 8005626:	694f      	ldr	r7, [r1, #20]
                                   sBreakDeadTimeConfig->DeadTime         |
 8005628:	4333      	orrs	r3, r6
                                   sBreakDeadTimeConfig->BreakPolarity    |
 800562a:	698e      	ldr	r6, [r1, #24]
                                   sBreakDeadTimeConfig->BreakState       |
 800562c:	433b      	orrs	r3, r7
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 800562e:	6811      	ldr	r1, [r2, #0]
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8005630:	4333      	orrs	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8005632:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39

  return HAL_OK;
 8005636:	4620      	mov	r0, r4
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 8005638:	644b      	str	r3, [r1, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;
 800563a:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800563e:	f882 4038 	strb.w	r4, [r2, #56]	; 0x38
}
 8005642:	bcf0      	pop	{r4, r5, r6, r7}
 8005644:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005646:	2002      	movs	r0, #2
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop

0800564c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800564c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005650:	2b01      	cmp	r3, #1
 8005652:	d01f      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005654:	4602      	mov	r2, r0

  htim->State = HAL_TIM_STATE_BUSY;
 8005656:	2002      	movs	r0, #2
{
 8005658:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800565a:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_READY;
 800565c:	2601      	movs	r6, #1
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800565e:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005660:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005664:	685c      	ldr	r4, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005666:	f8d1 e000 	ldr.w	lr, [r1]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800566a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 800566e:	605c      	str	r4, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005670:	6858      	ldr	r0, [r3, #4]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005672:	684f      	ldr	r7, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8005674:	ea40 000e 	orr.w	r0, r0, lr
 8005678:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800567a:	689c      	ldr	r4, [r3, #8]

  return HAL_OK;
 800567c:	4628      	mov	r0, r5
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800567e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8005682:	609c      	str	r4, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8005684:	6899      	ldr	r1, [r3, #8]
 8005686:	4339      	orrs	r1, r7
 8005688:	6099      	str	r1, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800568a:	f882 6039 	strb.w	r6, [r2, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800568e:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
  return HAL_OK;
 8005692:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8005694:	2002      	movs	r0, #2
 8005696:	4770      	bx	lr

08005698 <_ZL14UART_SetConfigP18UART_HandleTypeDef>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800569c:	4682      	mov	sl, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800569e:	6804      	ldr	r4, [r0, #0]
 80056a0:	68c1      	ldr	r1, [r0, #12]
 80056a2:	6922      	ldr	r2, [r4, #16]
  /*------- UART-associated USART registers setting : CR1 Configuration ------*/
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80056a4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80056aa:	430a      	orrs	r2, r1
 80056ac:	6122      	str	r2, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, 
 80056ae:	68e2      	ldr	r2, [r4, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80056b0:	6900      	ldr	r0, [r0, #16]
 80056b2:	f8da 1014 	ldr.w	r1, [sl, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80056b6:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80056ba:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 80056bc:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
 80056c0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60e3      	str	r3, [r4, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056c6:	6963      	ldr	r3, [r4, #20]
 80056c8:	f8da 1018 	ldr.w	r1, [sl, #24]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80056cc:	4a51      	ldr	r2, [pc, #324]	; (8005814 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x17c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d2:	430b      	orrs	r3, r1
  if((huart->Instance == USART1))
 80056d4:	4294      	cmp	r4, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056d6:	6163      	str	r3, [r4, #20]
  if((huart->Instance == USART1))
 80056d8:	d059      	beq.n	800578e <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xf6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80056da:	f7ff f8fd 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 80056de:	f8da 3004 	ldr.w	r3, [sl, #4]
 80056e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80056f0:	4f49      	ldr	r7, [pc, #292]	; (8005818 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x180>)
 80056f2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80056f6:	fba7 2303 	umull	r2, r3, r7, r3
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	011d      	lsls	r5, r3, #4
 80056fe:	f7ff f8eb 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8005702:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005706:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800570a:	0093      	lsls	r3, r2, #2
 800570c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005710:	fbb0 f6f3 	udiv	r6, r0, r3
 8005714:	f7ff f8e0 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8005718:	f8da 2004 	ldr.w	r2, [sl, #4]
 800571c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005720:	0093      	lsls	r3, r2, #2
 8005722:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005726:	fbb0 f3f3 	udiv	r3, r0, r3
 800572a:	fba7 2303 	umull	r2, r3, r7, r3
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	fb08 6313 	mls	r3, r8, r3, r6
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	3332      	adds	r3, #50	; 0x32
 8005738:	fba7 2303 	umull	r2, r3, r7, r3
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8005742:	f7ff f8c9 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 8005746:	f8da 2004 	ldr.w	r2, [sl, #4]
 800574a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800574e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005752:	0093      	lsls	r3, r2, #2
 8005754:	fbb0 f9f3 	udiv	r9, r0, r3
 8005758:	f7ff f8be 	bl	80048d8 <HAL_RCC_GetPCLK1Freq>
 800575c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005760:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005764:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	fbb0 f3f3 	udiv	r3, r0, r3
 800576e:	fba7 2303 	umull	r2, r3, r7, r3
 8005772:	095b      	lsrs	r3, r3, #5
 8005774:	fb08 9313 	mls	r3, r8, r3, r9
 8005778:	011b      	lsls	r3, r3, #4
 800577a:	3332      	adds	r3, #50	; 0x32
 800577c:	fba7 2303 	umull	r2, r3, r7, r3
 8005780:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8005784:	4333      	orrs	r3, r6
 8005786:	442b      	add	r3, r5
 8005788:	60a3      	str	r3, [r4, #8]
 800578a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800578e:	f7ff f8bb 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 8005792:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005796:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800579a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80057a4:	4f1c      	ldr	r7, [pc, #112]	; (8005818 <_ZL14UART_SetConfigP18UART_HandleTypeDef+0x180>)
 80057a6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80057aa:	fba7 2303 	umull	r2, r3, r7, r3
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	011d      	lsls	r5, r3, #4
 80057b2:	f7ff f8a9 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 80057b6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80057ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057be:	0093      	lsls	r3, r2, #2
 80057c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057c4:	fbb0 f6f3 	udiv	r6, r0, r3
 80057c8:	f7ff f89e 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 80057cc:	f8da 2004 	ldr.w	r2, [sl, #4]
 80057d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057d4:	0093      	lsls	r3, r2, #2
 80057d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80057da:	fbb0 f3f3 	udiv	r3, r0, r3
 80057de:	fba7 2303 	umull	r2, r3, r7, r3
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	fb08 6313 	mls	r3, r8, r3, r6
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	3332      	adds	r3, #50	; 0x32
 80057ec:	fba7 2303 	umull	r2, r3, r7, r3
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80057f6:	f7ff f887 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 80057fa:	f8da 2004 	ldr.w	r2, [sl, #4]
 80057fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005802:	0093      	lsls	r3, r2, #2
 8005804:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005808:	fbb0 f9f3 	udiv	r9, r0, r3
 800580c:	f7ff f87c 	bl	8004908 <HAL_RCC_GetPCLK2Freq>
 8005810:	e7a4      	b.n	800575c <_ZL14UART_SetConfigP18UART_HandleTypeDef+0xc4>
 8005812:	bf00      	nop
 8005814:	40013800 	.word	0x40013800
 8005818:	51eb851f 	.word	0x51eb851f

0800581c <_ZL27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefm10FlagStatusm.constprop.1>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	4607      	mov	r7, r0
 8005820:	4616      	mov	r6, r2
 8005822:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 8005824:	f7fd feca 	bl	80035bc <HAL_GetTick>
 8005828:	683c      	ldr	r4, [r7, #0]
 800582a:	4a11      	ldr	r2, [pc, #68]	; (8005870 <_ZL27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefm10FlagStatusm.constprop.1+0x54>)
 800582c:	e001      	b.n	8005832 <_ZL27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefm10FlagStatusm.constprop.1+0x16>
      if(Timeout != HAL_MAX_DELAY)
 800582e:	1c73      	adds	r3, r6, #1
 8005830:	d105      	bne.n	800583e <_ZL27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefm10FlagStatusm.constprop.1+0x22>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	ea35 0303 	bics.w	r3, r5, r3
 8005838:	d1f9      	bne.n	800582e <_ZL27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefm10FlagStatusm.constprop.1+0x12>
  return HAL_OK;
 800583a:	2000      	movs	r0, #0
}
 800583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  if(--counterdown == 0)
 800583e:	3a01      	subs	r2, #1
 8005840:	d1f7      	bne.n	8005832 <_ZL27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefm10FlagStatusm.constprop.1+0x16>
          huart->State= HAL_UART_STATE_READY;
 8005842:	2101      	movs	r1, #1
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005844:	68e3      	ldr	r3, [r4, #12]
          return HAL_TIMEOUT;
 8005846:	2003      	movs	r0, #3
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800584c:	60e3      	str	r3, [r4, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800584e:	68e3      	ldr	r3, [r4, #12]
 8005850:	f023 0320 	bic.w	r3, r3, #32
 8005854:	60e3      	str	r3, [r4, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800585c:	60e3      	str	r3, [r4, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800585e:	6963      	ldr	r3, [r4, #20]
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	6163      	str	r3, [r4, #20]
          __HAL_UNLOCK(huart);
 8005866:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
          huart->State= HAL_UART_STATE_READY;
 800586a:	f887 1039 	strb.w	r1, [r7, #57]	; 0x39
 800586e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005870:	000f4240 	.word	0x000f4240

08005874 <HAL_UART_Init>:
  if(huart == NULL)
 8005874:	b350      	cbz	r0, 80058cc <HAL_UART_Init+0x58>
{
 8005876:	b538      	push	{r3, r4, r5, lr}
  if(huart->State == HAL_UART_STATE_RESET)
 8005878:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800587c:	4604      	mov	r4, r0
 800587e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005882:	b1f3      	cbz	r3, 80058c2 <HAL_UART_Init+0x4e>
  huart->State = HAL_UART_STATE_BUSY;
 8005884:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 8005886:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8005888:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800588c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800588e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005894:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005896:	f7ff feff 	bl	8005698 <_ZL14UART_SetConfigP18UART_HandleTypeDef>
  huart->State= HAL_UART_STATE_READY;
 800589a:	2501      	movs	r5, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589c:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800589e:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80058a0:	4608      	mov	r0, r1
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058b0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058b8:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ba:	63e1      	str	r1, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80058bc:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  return HAL_OK;
 80058c0:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80058c2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80058c6:	f7fd fdef 	bl	80034a8 <HAL_UART_MspInit>
 80058ca:	e7db      	b.n	8005884 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80058cc:	2001      	movs	r0, #1
 80058ce:	4770      	bx	lr

080058d0 <HAL_UART_Transmit>:
{
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4604      	mov	r4, r0
  tmp_state = huart->State;
 80058d4:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
{
 80058d8:	460d      	mov	r5, r1
  tmp_state = huart->State;
 80058da:	b2c1      	uxtb	r1, r0
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80058dc:	2901      	cmp	r1, #1
{
 80058de:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_RX))
 80058e0:	d003      	beq.n	80058ea <HAL_UART_Transmit+0x1a>
 80058e2:	2922      	cmp	r1, #34	; 0x22
 80058e4:	d001      	beq.n	80058ea <HAL_UART_Transmit+0x1a>
    return HAL_BUSY;
 80058e6:	2002      	movs	r0, #2
}
 80058e8:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == NULL) || (Size == 0))
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	d035      	beq.n	800595a <HAL_UART_Transmit+0x8a>
 80058ee:	2a00      	cmp	r2, #0
 80058f0:	d033      	beq.n	800595a <HAL_UART_Transmit+0x8a>
    __HAL_LOCK(huart);
 80058f2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d0f5      	beq.n	80058e6 <HAL_UART_Transmit+0x16>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 80058fe:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    __HAL_LOCK(huart);
 8005902:	2101      	movs	r1, #1
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8005904:	2b22      	cmp	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8005906:	bf0c      	ite	eq
 8005908:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 800590a:	2312      	movne	r3, #18
    __HAL_LOCK(huart);
 800590c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
      huart->State = HAL_UART_STATE_BUSY_TX;
 8005910:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->TxXferSize = Size;
 8005914:	84a2      	strh	r2, [r4, #36]	; 0x24
 8005916:	e008      	b.n	800592a <HAL_UART_Transmit+0x5a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005918:	f7ff ff80 	bl	800581c <_ZL27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefm10FlagStatusm.constprop.1>
 800591c:	bb28      	cbnz	r0, 800596a <HAL_UART_Transmit+0x9a>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800591e:	782a      	ldrb	r2, [r5, #0]
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	3501      	adds	r5, #1
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0)
 8005928:	b1ca      	cbz	r2, 800595e <HAL_UART_Transmit+0x8e>
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800592a:	68a3      	ldr	r3, [r4, #8]
      huart->TxXferCount--;
 800592c:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->TxXferCount--;
 8005932:	84e2      	strh	r2, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8005934:	f04f 0180 	mov.w	r1, #128	; 0x80
 8005938:	4632      	mov	r2, r6
 800593a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800593c:	d1ec      	bne.n	8005918 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 800593e:	f7ff ff6d 	bl	800581c <_ZL27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefm10FlagStatusm.constprop.1>
 8005942:	b990      	cbnz	r0, 800596a <HAL_UART_Transmit+0x9a>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005944:	882b      	ldrh	r3, [r5, #0]
 8005946:	6821      	ldr	r1, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005948:	6922      	ldr	r2, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800594a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800594e:	604b      	str	r3, [r1, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005950:	b90a      	cbnz	r2, 8005956 <HAL_UART_Transmit+0x86>
          pData +=2;
 8005952:	3502      	adds	r5, #2
 8005954:	e7e7      	b.n	8005926 <HAL_UART_Transmit+0x56>
          pData +=1;
 8005956:	3501      	adds	r5, #1
 8005958:	e7e5      	b.n	8005926 <HAL_UART_Transmit+0x56>
      return  HAL_ERROR;
 800595a:	2001      	movs	r0, #1
 800595c:	bd70      	pop	{r4, r5, r6, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 800595e:	4632      	mov	r2, r6
 8005960:	2140      	movs	r1, #64	; 0x40
 8005962:	4620      	mov	r0, r4
 8005964:	f7ff ff5a 	bl	800581c <_ZL27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefm10FlagStatusm.constprop.1>
 8005968:	b108      	cbz	r0, 800596e <HAL_UART_Transmit+0x9e>
          return HAL_TIMEOUT;
 800596a:	2003      	movs	r0, #3
 800596c:	bd70      	pop	{r4, r5, r6, pc}
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800596e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8005972:	2000      	movs	r0, #0
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8005974:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 8005976:	bf0c      	ite	eq
 8005978:	2322      	moveq	r3, #34	; 0x22
      huart->State = HAL_UART_STATE_READY;
 800597a:	2301      	movne	r3, #1
    __HAL_UNLOCK(huart);
 800597c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
      huart->State = HAL_UART_STATE_READY;
 8005980:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8005984:	bd70      	pop	{r4, r5, r6, pc}
 8005986:	bf00      	nop

08005988 <HAL_UART_Receive>:
{
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	4604      	mov	r4, r0
  tmp_state = huart->State;
 800598c:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
{
 8005990:	460d      	mov	r5, r1
  tmp_state = huart->State;
 8005992:	b2c1      	uxtb	r1, r0
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8005994:	2901      	cmp	r1, #1
{
 8005996:	461e      	mov	r6, r3
  if((tmp_state == HAL_UART_STATE_READY) || (tmp_state == HAL_UART_STATE_BUSY_TX))
 8005998:	d003      	beq.n	80059a2 <HAL_UART_Receive+0x1a>
 800599a:	2912      	cmp	r1, #18
 800599c:	d001      	beq.n	80059a2 <HAL_UART_Receive+0x1a>
    return HAL_BUSY;
 800599e:	2002      	movs	r0, #2
}
 80059a0:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == NULL ) || (Size == 0))
 80059a2:	2d00      	cmp	r5, #0
 80059a4:	d045      	beq.n	8005a32 <HAL_UART_Receive+0xaa>
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	d043      	beq.n	8005a32 <HAL_UART_Receive+0xaa>
    __HAL_LOCK(huart);
 80059aa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d0f5      	beq.n	800599e <HAL_UART_Receive+0x16>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80059b6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    __HAL_LOCK(huart);
 80059ba:	2101      	movs	r1, #1
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80059bc:	2b12      	cmp	r3, #18
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80059be:	bf0c      	ite	eq
 80059c0:	2332      	moveq	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_RX;
 80059c2:	2322      	movne	r3, #34	; 0x22
    __HAL_LOCK(huart);
 80059c4:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
      huart->State = HAL_UART_STATE_BUSY_RX;
 80059c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->RxXferSize = Size;
 80059cc:	85a2      	strh	r2, [r4, #44]	; 0x2c
 80059ce:	e006      	b.n	80059de <HAL_UART_Receive+0x56>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	3501      	adds	r5, #1
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f805 3c01 	strb.w	r3, [r5, #-1]
 80059da:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0)
 80059dc:	b35a      	cbz	r2, 8005a36 <HAL_UART_Receive+0xae>
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059de:	68a3      	ldr	r3, [r4, #8]
      huart->RxXferCount--;
 80059e0:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->RxXferCount--;
 80059e6:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80059e8:	f04f 0120 	mov.w	r1, #32
 80059ec:	4632      	mov	r2, r6
 80059ee:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80059f0:	d00d      	beq.n	8005a0e <HAL_UART_Receive+0x86>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80059f2:	f7ff ff13 	bl	800581c <_ZL27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefm10FlagStatusm.constprop.1>
 80059f6:	bb50      	cbnz	r0, 8005a4e <HAL_UART_Receive+0xc6>
        if(huart->Init.Parity == UART_PARITY_NONE)
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0e8      	beq.n	80059d0 <HAL_UART_Receive+0x48>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	3501      	adds	r5, #1
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a08:	f805 3c01 	strb.w	r3, [r5, #-1]
 8005a0c:	e7e5      	b.n	80059da <HAL_UART_Receive+0x52>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8005a0e:	f7ff ff05 	bl	800581c <_ZL27UART_WaitOnFlagUntilTimeoutP18UART_HandleTypeDefm10FlagStatusm.constprop.1>
 8005a12:	b9e0      	cbnz	r0, 8005a4e <HAL_UART_Receive+0xc6>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	b933      	cbnz	r3, 8005a26 <HAL_UART_Receive+0x9e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a20:	f825 3b02 	strh.w	r3, [r5], #2
 8005a24:	e7d9      	b.n	80059da <HAL_UART_Receive+0x52>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	f825 3b01 	strh.w	r3, [r5], #1
 8005a30:	e7d3      	b.n	80059da <HAL_UART_Receive+0x52>
      return  HAL_ERROR;
 8005a32:	2001      	movs	r0, #1
 8005a34:	bd70      	pop	{r4, r5, r6, pc}
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8005a36:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8005a3a:	2000      	movs	r0, #0
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8005a3c:	2b32      	cmp	r3, #50	; 0x32
      huart->State = HAL_UART_STATE_BUSY_TX;
 8005a3e:	bf0c      	ite	eq
 8005a40:	2312      	moveq	r3, #18
      huart->State = HAL_UART_STATE_READY;
 8005a42:	2301      	movne	r3, #1
    __HAL_UNLOCK(huart);
 8005a44:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
      huart->State = HAL_UART_STATE_READY;
 8005a48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8005a4c:	bd70      	pop	{r4, r5, r6, pc}
          return HAL_TIMEOUT;
 8005a4e:	2003      	movs	r0, #3
 8005a50:	bd70      	pop	{r4, r5, r6, pc}
 8005a52:	bf00      	nop

08005a54 <HAL_UART_TxCpltCallback>:
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop

08005a58 <HAL_UART_RxCpltCallback>:
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop

08005a5c <HAL_UART_ErrorCallback>:
{
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop

08005a60 <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8005a60:	6803      	ldr	r3, [r0, #0]
{
 8005a62:	b510      	push	{r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8005a64:	681a      	ldr	r2, [r3, #0]
{
 8005a66:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005a68:	07d0      	lsls	r0, r2, #31
{
 8005a6a:	b082      	sub	sp, #8
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8005a6c:	68d9      	ldr	r1, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005a6e:	d501      	bpl.n	8005a74 <HAL_UART_IRQHandler+0x14>
 8005a70:	05ca      	lsls	r2, r1, #23
 8005a72:	d459      	bmi.n	8005b28 <HAL_UART_IRQHandler+0xc8>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8005a74:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8005a76:	695a      	ldr	r2, [r3, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005a78:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8005a7a:	f002 0201 	and.w	r2, r2, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005a7e:	d53f      	bpl.n	8005b00 <HAL_UART_IRQHandler+0xa0>
 8005a80:	2a00      	cmp	r2, #0
 8005a82:	d044      	beq.n	8005b0e <HAL_UART_IRQHandler+0xae>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005a86:	f042 0204 	orr.w	r2, r2, #4
 8005a8a:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8005a8c:	681a      	ldr	r2, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005a8e:	0751      	lsls	r1, r2, #29
 8005a90:	d54f      	bpl.n	8005b32 <HAL_UART_IRQHandler+0xd2>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005a94:	f042 0202 	orr.w	r2, r2, #2
 8005a98:	63e2      	str	r2, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8005a9a:	681a      	ldr	r2, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005a9c:	0712      	lsls	r2, r2, #28
 8005a9e:	d43e      	bmi.n	8005b1e <HAL_UART_IRQHandler+0xbe>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8005aa0:	681a      	ldr	r2, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8005aa2:	68d9      	ldr	r1, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005aa4:	0690      	lsls	r0, r2, #26
 8005aa6:	d501      	bpl.n	8005aac <HAL_UART_IRQHandler+0x4c>
 8005aa8:	068a      	lsls	r2, r1, #26
 8005aaa:	d464      	bmi.n	8005b76 <HAL_UART_IRQHandler+0x116>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8005aac:	681a      	ldr	r2, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8005aae:	68d9      	ldr	r1, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005ab0:	0610      	lsls	r0, r2, #24
 8005ab2:	d501      	bpl.n	8005ab8 <HAL_UART_IRQHandler+0x58>
 8005ab4:	0609      	lsls	r1, r1, #24
 8005ab6:	d440      	bmi.n	8005b3a <HAL_UART_IRQHandler+0xda>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 8005ab8:	681a      	ldr	r2, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 8005aba:	68d9      	ldr	r1, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005abc:	0652      	lsls	r2, r2, #25
 8005abe:	d510      	bpl.n	8005ae2 <HAL_UART_IRQHandler+0x82>
 8005ac0:	0648      	lsls	r0, r1, #25
 8005ac2:	d50e      	bpl.n	8005ae2 <HAL_UART_IRQHandler+0x82>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ac4:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8005ac6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005acc:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8005ace:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8005ad2:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 8005ad8:	2301      	movne	r3, #1
 8005ada:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005ade:	f7ff ffb9 	bl	8005a54 <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ae4:	b153      	cbz	r3, 8005afc <HAL_UART_IRQHandler+0x9c>
    huart->State = HAL_UART_STATE_READY;
 8005ae6:	2201      	movs	r2, #1
    __HAL_UART_CLEAR_PEFLAG(huart);
 8005ae8:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 8005aea:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 8005aec:	6819      	ldr	r1, [r3, #0]
 8005aee:	9101      	str	r1, [sp, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	9301      	str	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 8005af4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8005af8:	f7ff ffb0 	bl	8005a5c <HAL_UART_ErrorCallback>
}
 8005afc:	b002      	add	sp, #8
 8005afe:	bd10      	pop	{r4, pc}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8005b00:	6819      	ldr	r1, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005b02:	0748      	lsls	r0, r1, #29
 8005b04:	d506      	bpl.n	8005b14 <HAL_UART_IRQHandler+0xb4>
 8005b06:	2a00      	cmp	r2, #0
 8005b08:	d1c3      	bne.n	8005a92 <HAL_UART_IRQHandler+0x32>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	e7c8      	b.n	8005aa0 <HAL_UART_IRQHandler+0x40>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 8005b0e:	6819      	ldr	r1, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005b10:	0749      	lsls	r1, r1, #29
 8005b12:	d4fa      	bmi.n	8005b0a <HAL_UART_IRQHandler+0xaa>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8005b14:	6819      	ldr	r1, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005b16:	0709      	lsls	r1, r1, #28
 8005b18:	d5c2      	bpl.n	8005aa0 <HAL_UART_IRQHandler+0x40>
 8005b1a:	2a00      	cmp	r2, #0
 8005b1c:	d0c0      	beq.n	8005aa0 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b1e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b20:	f042 0208 	orr.w	r2, r2, #8
 8005b24:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005b26:	e7bb      	b.n	8005aa0 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005b30:	e7a0      	b.n	8005a74 <HAL_UART_IRQHandler+0x14>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8005b32:	681a      	ldr	r2, [r3, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8005b34:	0712      	lsls	r2, r2, #28
 8005b36:	d4f2      	bmi.n	8005b1e <HAL_UART_IRQHandler+0xbe>
 8005b38:	e7b2      	b.n	8005aa0 <HAL_UART_IRQHandler+0x40>
  tmp_state = huart->State;
 8005b3a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8005b3e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005b42:	2a12      	cmp	r2, #18
 8005b44:	d1b8      	bne.n	8005ab8 <HAL_UART_IRQHandler+0x58>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b46:	68a2      	ldr	r2, [r4, #8]
 8005b48:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8005b4c:	6a22      	ldr	r2, [r4, #32]
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b4e:	d04d      	beq.n	8005bec <HAL_UART_IRQHandler+0x18c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b50:	1c51      	adds	r1, r2, #1
 8005b52:	6221      	str	r1, [r4, #32]
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	605a      	str	r2, [r3, #4]
    if(--huart->TxXferCount == 0)
 8005b58:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005b5a:	3a01      	subs	r2, #1
 8005b5c:	b292      	uxth	r2, r2
 8005b5e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8005b60:	2a00      	cmp	r2, #0
 8005b62:	d1a9      	bne.n	8005ab8 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b6a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b72:	60da      	str	r2, [r3, #12]
 8005b74:	e7a0      	b.n	8005ab8 <HAL_UART_IRQHandler+0x58>
  tmp_state = huart->State; 
 8005b76:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8005b7a:	f002 02ef 	and.w	r2, r2, #239	; 0xef
 8005b7e:	2a22      	cmp	r2, #34	; 0x22
 8005b80:	d194      	bne.n	8005aac <HAL_UART_IRQHandler+0x4c>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b82:	68a2      	ldr	r2, [r4, #8]
 8005b84:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005b88:	d026      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x178>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005b8a:	6922      	ldr	r2, [r4, #16]
 8005b8c:	2a00      	cmp	r2, #0
 8005b8e:	d136      	bne.n	8005bfe <HAL_UART_IRQHandler+0x19e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	1c51      	adds	r1, r2, #1
 8005b96:	62a1      	str	r1, [r4, #40]	; 0x28
 8005b98:	7013      	strb	r3, [r2, #0]
 8005b9a:	6823      	ldr	r3, [r4, #0]
    if(--huart->RxXferCount == 0)
 8005b9c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8005b9e:	3a01      	subs	r2, #1
 8005ba0:	b292      	uxth	r2, r2
 8005ba2:	85e2      	strh	r2, [r4, #46]	; 0x2e
 8005ba4:	2a00      	cmp	r2, #0
 8005ba6:	d181      	bne.n	8005aac <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	f022 0220 	bic.w	r2, r2, #32
 8005bae:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8005bb0:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005bb4:	2a32      	cmp	r2, #50	; 0x32
 8005bb6:	d02b      	beq.n	8005c10 <HAL_UART_IRQHandler+0x1b0>
        huart->State = HAL_UART_STATE_READY;
 8005bb8:	2101      	movs	r1, #1
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bc0:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bc2:	695a      	ldr	r2, [r3, #20]
 8005bc4:	f022 0201 	bic.w	r2, r2, #1
 8005bc8:	615a      	str	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 8005bca:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 8005bce:	4620      	mov	r0, r4
 8005bd0:	f7ff ff42 	bl	8005a58 <HAL_UART_RxCpltCallback>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	e769      	b.n	8005aac <HAL_UART_IRQHandler+0x4c>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005bd8:	6921      	ldr	r1, [r4, #16]
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8005bda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005bdc:	b9e1      	cbnz	r1, 8005c18 <HAL_UART_IRQHandler+0x1b8>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bde:	6859      	ldr	r1, [r3, #4]
 8005be0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005be4:	f822 1b02 	strh.w	r1, [r2], #2
        huart->pRxBuffPtr += 2;
 8005be8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005bea:	e7d7      	b.n	8005b9c <HAL_UART_IRQHandler+0x13c>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bec:	8811      	ldrh	r1, [r2, #0]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005bee:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bf0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005bf4:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8005bf6:	b9a8      	cbnz	r0, 8005c24 <HAL_UART_IRQHandler+0x1c4>
        huart->pTxBuffPtr += 2;
 8005bf8:	3202      	adds	r2, #2
 8005bfa:	6222      	str	r2, [r4, #32]
 8005bfc:	e7ac      	b.n	8005b58 <HAL_UART_IRQHandler+0xf8>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c06:	1c51      	adds	r1, r2, #1
 8005c08:	62a1      	str	r1, [r4, #40]	; 0x28
 8005c0a:	7013      	strb	r3, [r2, #0]
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	e7c5      	b.n	8005b9c <HAL_UART_IRQHandler+0x13c>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8005c10:	2312      	movs	r3, #18
 8005c12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8005c16:	e7da      	b.n	8005bce <HAL_UART_IRQHandler+0x16e>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c18:	6859      	ldr	r1, [r3, #4]
 8005c1a:	b2c9      	uxtb	r1, r1
 8005c1c:	f822 1b01 	strh.w	r1, [r2], #1
        huart->pRxBuffPtr += 1;
 8005c20:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c22:	e7bb      	b.n	8005b9c <HAL_UART_IRQHandler+0x13c>
        huart->pTxBuffPtr += 1;
 8005c24:	3201      	adds	r2, #1
 8005c26:	6222      	str	r2, [r4, #32]
 8005c28:	e796      	b.n	8005b58 <HAL_UART_IRQHandler+0xf8>
 8005c2a:	bf00      	nop

08005c2c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4b02      	ldr	r3, [pc, #8]	; (8005c3c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005c32:	6003      	str	r3, [r0, #0]
 8005c34:	f000 f8a0 	bl	8005d78 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005c38:	4620      	mov	r0, r4
 8005c3a:	bd10      	pop	{r4, pc}
 8005c3c:	08006354 	.word	0x08006354

08005c40 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005c40:	b510      	push	{r4, lr}
 8005c42:	4604      	mov	r4, r0
 8005c44:	f7ff fff2 	bl	8005c2c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005c48:	4620      	mov	r0, r4
 8005c4a:	210c      	movs	r1, #12
 8005c4c:	f000 f871 	bl	8005d32 <_ZdlPvj>
 8005c50:	4620      	mov	r0, r4
 8005c52:	bd10      	pop	{r4, pc}

08005c54 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c58:	9e06      	ldr	r6, [sp, #24]
 8005c5a:	4680      	mov	r8, r0
 8005c5c:	4296      	cmp	r6, r2
 8005c5e:	460f      	mov	r7, r1
 8005c60:	4614      	mov	r4, r2
 8005c62:	461d      	mov	r5, r3
 8005c64:	d103      	bne.n	8005c6e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8005c66:	4619      	mov	r1, r3
 8005c68:	f000 f8da 	bl	8005e20 <_ZNKSt9type_infoeqERKS_>
 8005c6c:	b958      	cbnz	r0, 8005c86 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8005c6e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005c72:	4622      	mov	r2, r4
 8005c74:	6803      	ldr	r3, [r0, #0]
 8005c76:	9606      	str	r6, [sp, #24]
 8005c78:	6a1e      	ldr	r6, [r3, #32]
 8005c7a:	4639      	mov	r1, r7
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	46b4      	mov	ip, r6
 8005c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c84:	4760      	bx	ip
 8005c86:	2006      	movs	r0, #6
 8005c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005c8c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c90:	460e      	mov	r6, r1
 8005c92:	4619      	mov	r1, r3
 8005c94:	4683      	mov	fp, r0
 8005c96:	4617      	mov	r7, r2
 8005c98:	4699      	mov	r9, r3
 8005c9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c9c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8005ca0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005ca4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005ca6:	f000 f8bb 	bl	8005e20 <_ZNKSt9type_infoeqERKS_>
 8005caa:	b190      	cbz	r0, 8005cd2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8005cac:	2e00      	cmp	r6, #0
 8005cae:	602c      	str	r4, [r5, #0]
 8005cb0:	712f      	strb	r7, [r5, #4]
 8005cb2:	db09      	blt.n	8005cc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8005cb4:	4434      	add	r4, r6
 8005cb6:	45a0      	cmp	r8, r4
 8005cb8:	bf0c      	ite	eq
 8005cba:	2406      	moveq	r4, #6
 8005cbc:	2401      	movne	r4, #1
 8005cbe:	71ac      	strb	r4, [r5, #6]
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	b001      	add	sp, #4
 8005cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc8:	3602      	adds	r6, #2
 8005cca:	d1f9      	bne.n	8005cc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	71ab      	strb	r3, [r5, #6]
 8005cd0:	e7f6      	b.n	8005cc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005cd2:	4544      	cmp	r4, r8
 8005cd4:	d104      	bne.n	8005ce0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005cd6:	4651      	mov	r1, sl
 8005cd8:	4658      	mov	r0, fp
 8005cda:	f000 f8a1 	bl	8005e20 <_ZNKSt9type_infoeqERKS_>
 8005cde:	b988      	cbnz	r0, 8005d04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8005ce0:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005ce4:	463a      	mov	r2, r7
 8005ce6:	6803      	ldr	r3, [r0, #0]
 8005ce8:	950d      	str	r5, [sp, #52]	; 0x34
 8005cea:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005cee:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005cf2:	940a      	str	r4, [sp, #40]	; 0x28
 8005cf4:	69dc      	ldr	r4, [r3, #28]
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	464b      	mov	r3, r9
 8005cfa:	46a4      	mov	ip, r4
 8005cfc:	b001      	add	sp, #4
 8005cfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d02:	4760      	bx	ip
 8005d04:	716f      	strb	r7, [r5, #5]
 8005d06:	e7db      	b.n	8005cc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08005d08 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	460d      	mov	r5, r1
 8005d10:	4616      	mov	r6, r2
 8005d12:	461f      	mov	r7, r3
 8005d14:	f000 f844 	bl	8005da0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005d18:	b948      	cbnz	r0, 8005d2e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005d1a:	68a0      	ldr	r0, [r4, #8]
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	6803      	ldr	r3, [r0, #0]
 8005d20:	4629      	mov	r1, r5
 8005d22:	699c      	ldr	r4, [r3, #24]
 8005d24:	463b      	mov	r3, r7
 8005d26:	46a4      	mov	ip, r4
 8005d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2c:	4760      	bx	ip
 8005d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d32 <_ZdlPvj>:
 8005d32:	f000 b88b 	b.w	8005e4c <_ZdlPv>

08005d36 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8005d36:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005d38:	2310      	movs	r3, #16
 8005d3a:	2400      	movs	r4, #0
 8005d3c:	9302      	str	r3, [sp, #8]
 8005d3e:	6803      	ldr	r3, [r0, #0]
 8005d40:	4615      	mov	r5, r2
 8005d42:	699e      	ldr	r6, [r3, #24]
 8005d44:	9400      	str	r4, [sp, #0]
 8005d46:	466b      	mov	r3, sp
 8005d48:	f88d 4004 	strb.w	r4, [sp, #4]
 8005d4c:	9403      	str	r4, [sp, #12]
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	47b0      	blx	r6
 8005d52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005d56:	f003 0306 	and.w	r3, r3, #6
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	bf09      	itett	eq
 8005d5e:	2001      	moveq	r0, #1
 8005d60:	4620      	movne	r0, r4
 8005d62:	9b00      	ldreq	r3, [sp, #0]
 8005d64:	602b      	streq	r3, [r5, #0]
 8005d66:	b004      	add	sp, #16
 8005d68:	bd70      	pop	{r4, r5, r6, pc}

08005d6a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8005d6a:	9800      	ldr	r0, [sp, #0]
 8005d6c:	4290      	cmp	r0, r2
 8005d6e:	bf0c      	ite	eq
 8005d70:	2006      	moveq	r0, #6
 8005d72:	2001      	movne	r0, #1
 8005d74:	4770      	bx	lr
	...

08005d78 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	4b02      	ldr	r3, [pc, #8]	; (8005d88 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8005d7e:	6003      	str	r3, [r0, #0]
 8005d80:	f000 f84b 	bl	8005e1a <_ZNSt9type_infoD1Ev>
 8005d84:	4620      	mov	r0, r4
 8005d86:	bd10      	pop	{r4, pc}
 8005d88:	080063b0 	.word	0x080063b0

08005d8c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	4604      	mov	r4, r0
 8005d90:	f7ff fff2 	bl	8005d78 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005d94:	4620      	mov	r0, r4
 8005d96:	2108      	movs	r1, #8
 8005d98:	f7ff ffcb 	bl	8005d32 <_ZdlPvj>
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	bd10      	pop	{r4, pc}

08005da0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4615      	mov	r5, r2
 8005da4:	461c      	mov	r4, r3
 8005da6:	f000 f83b 	bl	8005e20 <_ZNKSt9type_infoeqERKS_>
 8005daa:	b120      	cbz	r0, 8005db6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8005dac:	2308      	movs	r3, #8
 8005dae:	60e3      	str	r3, [r4, #12]
 8005db0:	2306      	movs	r3, #6
 8005db2:	6025      	str	r5, [r4, #0]
 8005db4:	7123      	strb	r3, [r4, #4]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}

08005db8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8005db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	4616      	mov	r6, r2
 8005dc2:	461f      	mov	r7, r3
 8005dc4:	f000 f82c 	bl	8005e20 <_ZNKSt9type_infoeqERKS_>
 8005dc8:	b948      	cbnz	r0, 8005dde <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005dca:	2f03      	cmp	r7, #3
 8005dcc:	d807      	bhi.n	8005dde <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	4629      	mov	r1, r5
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	4718      	bx	r3
 8005dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005de2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de6:	9e06      	ldr	r6, [sp, #24]
 8005de8:	4698      	mov	r8, r3
 8005dea:	9b08      	ldr	r3, [sp, #32]
 8005dec:	4607      	mov	r7, r0
 8005dee:	429e      	cmp	r6, r3
 8005df0:	4615      	mov	r5, r2
 8005df2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005df4:	d103      	bne.n	8005dfe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8005df6:	9907      	ldr	r1, [sp, #28]
 8005df8:	f000 f812 	bl	8005e20 <_ZNKSt9type_infoeqERKS_>
 8005dfc:	b958      	cbnz	r0, 8005e16 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8005dfe:	4641      	mov	r1, r8
 8005e00:	4638      	mov	r0, r7
 8005e02:	f000 f80d 	bl	8005e20 <_ZNKSt9type_infoeqERKS_>
 8005e06:	b118      	cbz	r0, 8005e10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	6026      	str	r6, [r4, #0]
 8005e0c:	7125      	strb	r5, [r4, #4]
 8005e0e:	71a3      	strb	r3, [r4, #6]
 8005e10:	2000      	movs	r0, #0
 8005e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e16:	7165      	strb	r5, [r4, #5]
 8005e18:	e7fa      	b.n	8005e10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08005e1a <_ZNSt9type_infoD1Ev>:
 8005e1a:	4770      	bx	lr

08005e1c <_ZNKSt9type_info14__is_pointer_pEv>:
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	4770      	bx	lr

08005e20 <_ZNKSt9type_infoeqERKS_>:
 8005e20:	4281      	cmp	r1, r0
 8005e22:	b508      	push	{r3, lr}
 8005e24:	d00e      	beq.n	8005e44 <_ZNKSt9type_infoeqERKS_+0x24>
 8005e26:	6840      	ldr	r0, [r0, #4]
 8005e28:	7803      	ldrb	r3, [r0, #0]
 8005e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e2c:	d00c      	beq.n	8005e48 <_ZNKSt9type_infoeqERKS_+0x28>
 8005e2e:	6849      	ldr	r1, [r1, #4]
 8005e30:	780b      	ldrb	r3, [r1, #0]
 8005e32:	2b2a      	cmp	r3, #42	; 0x2a
 8005e34:	bf08      	it	eq
 8005e36:	3101      	addeq	r1, #1
 8005e38:	f7fa f988 	bl	800014c <strcmp>
 8005e3c:	fab0 f080 	clz	r0, r0
 8005e40:	0940      	lsrs	r0, r0, #5
 8005e42:	bd08      	pop	{r3, pc}
 8005e44:	2001      	movs	r0, #1
 8005e46:	bd08      	pop	{r3, pc}
 8005e48:	2000      	movs	r0, #0
 8005e4a:	bd08      	pop	{r3, pc}

08005e4c <_ZdlPv>:
 8005e4c:	f000 b824 	b.w	8005e98 <free>

08005e50 <__libc_init_array>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	2500      	movs	r5, #0
 8005e54:	4e0c      	ldr	r6, [pc, #48]	; (8005e88 <__libc_init_array+0x38>)
 8005e56:	4c0d      	ldr	r4, [pc, #52]	; (8005e8c <__libc_init_array+0x3c>)
 8005e58:	1ba4      	subs	r4, r4, r6
 8005e5a:	10a4      	asrs	r4, r4, #2
 8005e5c:	42a5      	cmp	r5, r4
 8005e5e:	d109      	bne.n	8005e74 <__libc_init_array+0x24>
 8005e60:	f000 f8e2 	bl	8006028 <_init>
 8005e64:	2500      	movs	r5, #0
 8005e66:	4e0a      	ldr	r6, [pc, #40]	; (8005e90 <__libc_init_array+0x40>)
 8005e68:	4c0a      	ldr	r4, [pc, #40]	; (8005e94 <__libc_init_array+0x44>)
 8005e6a:	1ba4      	subs	r4, r4, r6
 8005e6c:	10a4      	asrs	r4, r4, #2
 8005e6e:	42a5      	cmp	r5, r4
 8005e70:	d105      	bne.n	8005e7e <__libc_init_array+0x2e>
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
 8005e74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e78:	4798      	blx	r3
 8005e7a:	3501      	adds	r5, #1
 8005e7c:	e7ee      	b.n	8005e5c <__libc_init_array+0xc>
 8005e7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e82:	4798      	blx	r3
 8005e84:	3501      	adds	r5, #1
 8005e86:	e7f2      	b.n	8005e6e <__libc_init_array+0x1e>
 8005e88:	080067a0 	.word	0x080067a0
 8005e8c:	080067a0 	.word	0x080067a0
 8005e90:	080067a0 	.word	0x080067a0
 8005e94:	080067a4 	.word	0x080067a4

08005e98 <free>:
 8005e98:	4b02      	ldr	r3, [pc, #8]	; (8005ea4 <free+0xc>)
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	f000 b817 	b.w	8005ed0 <_free_r>
 8005ea2:	bf00      	nop
 8005ea4:	20000004 	.word	0x20000004

08005ea8 <memcpy>:
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	1e43      	subs	r3, r0, #1
 8005eac:	440a      	add	r2, r1
 8005eae:	4291      	cmp	r1, r2
 8005eb0:	d100      	bne.n	8005eb4 <memcpy+0xc>
 8005eb2:	bd10      	pop	{r4, pc}
 8005eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ebc:	e7f7      	b.n	8005eae <memcpy+0x6>

08005ebe <memset>:
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4402      	add	r2, r0
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d100      	bne.n	8005ec8 <memset+0xa>
 8005ec6:	4770      	bx	lr
 8005ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8005ecc:	e7f9      	b.n	8005ec2 <memset+0x4>
	...

08005ed0 <_free_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	d043      	beq.n	8005f60 <_free_r+0x90>
 8005ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005edc:	1f0c      	subs	r4, r1, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bfb8      	it	lt
 8005ee2:	18e4      	addlt	r4, r4, r3
 8005ee4:	f000 f840 	bl	8005f68 <__malloc_lock>
 8005ee8:	4a1e      	ldr	r2, [pc, #120]	; (8005f64 <_free_r+0x94>)
 8005eea:	6813      	ldr	r3, [r2, #0]
 8005eec:	4610      	mov	r0, r2
 8005eee:	b933      	cbnz	r3, 8005efe <_free_r+0x2e>
 8005ef0:	6063      	str	r3, [r4, #4]
 8005ef2:	6014      	str	r4, [r2, #0]
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005efa:	f000 b836 	b.w	8005f6a <__malloc_unlock>
 8005efe:	42a3      	cmp	r3, r4
 8005f00:	d90b      	bls.n	8005f1a <_free_r+0x4a>
 8005f02:	6821      	ldr	r1, [r4, #0]
 8005f04:	1862      	adds	r2, r4, r1
 8005f06:	4293      	cmp	r3, r2
 8005f08:	bf01      	itttt	eq
 8005f0a:	681a      	ldreq	r2, [r3, #0]
 8005f0c:	685b      	ldreq	r3, [r3, #4]
 8005f0e:	1852      	addeq	r2, r2, r1
 8005f10:	6022      	streq	r2, [r4, #0]
 8005f12:	6063      	str	r3, [r4, #4]
 8005f14:	6004      	str	r4, [r0, #0]
 8005f16:	e7ed      	b.n	8005ef4 <_free_r+0x24>
 8005f18:	4613      	mov	r3, r2
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	b10a      	cbz	r2, 8005f22 <_free_r+0x52>
 8005f1e:	42a2      	cmp	r2, r4
 8005f20:	d9fa      	bls.n	8005f18 <_free_r+0x48>
 8005f22:	6819      	ldr	r1, [r3, #0]
 8005f24:	1858      	adds	r0, r3, r1
 8005f26:	42a0      	cmp	r0, r4
 8005f28:	d10b      	bne.n	8005f42 <_free_r+0x72>
 8005f2a:	6820      	ldr	r0, [r4, #0]
 8005f2c:	4401      	add	r1, r0
 8005f2e:	1858      	adds	r0, r3, r1
 8005f30:	4282      	cmp	r2, r0
 8005f32:	6019      	str	r1, [r3, #0]
 8005f34:	d1de      	bne.n	8005ef4 <_free_r+0x24>
 8005f36:	6810      	ldr	r0, [r2, #0]
 8005f38:	6852      	ldr	r2, [r2, #4]
 8005f3a:	4401      	add	r1, r0
 8005f3c:	6019      	str	r1, [r3, #0]
 8005f3e:	605a      	str	r2, [r3, #4]
 8005f40:	e7d8      	b.n	8005ef4 <_free_r+0x24>
 8005f42:	d902      	bls.n	8005f4a <_free_r+0x7a>
 8005f44:	230c      	movs	r3, #12
 8005f46:	602b      	str	r3, [r5, #0]
 8005f48:	e7d4      	b.n	8005ef4 <_free_r+0x24>
 8005f4a:	6820      	ldr	r0, [r4, #0]
 8005f4c:	1821      	adds	r1, r4, r0
 8005f4e:	428a      	cmp	r2, r1
 8005f50:	bf01      	itttt	eq
 8005f52:	6811      	ldreq	r1, [r2, #0]
 8005f54:	6852      	ldreq	r2, [r2, #4]
 8005f56:	1809      	addeq	r1, r1, r0
 8005f58:	6021      	streq	r1, [r4, #0]
 8005f5a:	6062      	str	r2, [r4, #4]
 8005f5c:	605c      	str	r4, [r3, #4]
 8005f5e:	e7c9      	b.n	8005ef4 <_free_r+0x24>
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
 8005f62:	bf00      	nop
 8005f64:	20000354 	.word	0x20000354

08005f68 <__malloc_lock>:
 8005f68:	4770      	bx	lr

08005f6a <__malloc_unlock>:
 8005f6a:	4770      	bx	lr

08005f6c <abort>:
 8005f6c:	b508      	push	{r3, lr}
 8005f6e:	2006      	movs	r0, #6
 8005f70:	f000 f82c 	bl	8005fcc <raise>
 8005f74:	2001      	movs	r0, #1
 8005f76:	f000 f855 	bl	8006024 <_exit>

08005f7a <_raise_r>:
 8005f7a:	291f      	cmp	r1, #31
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4604      	mov	r4, r0
 8005f80:	460d      	mov	r5, r1
 8005f82:	d904      	bls.n	8005f8e <_raise_r+0x14>
 8005f84:	2316      	movs	r3, #22
 8005f86:	6003      	str	r3, [r0, #0]
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f8c:	bd38      	pop	{r3, r4, r5, pc}
 8005f8e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f90:	b112      	cbz	r2, 8005f98 <_raise_r+0x1e>
 8005f92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f96:	b94b      	cbnz	r3, 8005fac <_raise_r+0x32>
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 f831 	bl	8006000 <_getpid_r>
 8005f9e:	462a      	mov	r2, r5
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fa8:	f000 b818 	b.w	8005fdc <_kill_r>
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d00a      	beq.n	8005fc6 <_raise_r+0x4c>
 8005fb0:	1c59      	adds	r1, r3, #1
 8005fb2:	d103      	bne.n	8005fbc <_raise_r+0x42>
 8005fb4:	2316      	movs	r3, #22
 8005fb6:	6003      	str	r3, [r0, #0]
 8005fb8:	2001      	movs	r0, #1
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	2400      	movs	r4, #0
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005fc4:	4798      	blx	r3
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	bd38      	pop	{r3, r4, r5, pc}
	...

08005fcc <raise>:
 8005fcc:	4b02      	ldr	r3, [pc, #8]	; (8005fd8 <raise+0xc>)
 8005fce:	4601      	mov	r1, r0
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	f7ff bfd2 	b.w	8005f7a <_raise_r>
 8005fd6:	bf00      	nop
 8005fd8:	20000004 	.word	0x20000004

08005fdc <_kill_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	2300      	movs	r3, #0
 8005fe0:	4c06      	ldr	r4, [pc, #24]	; (8005ffc <_kill_r+0x20>)
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	f000 f813 	bl	8006014 <_kill>
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	d102      	bne.n	8005ff8 <_kill_r+0x1c>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	b103      	cbz	r3, 8005ff8 <_kill_r+0x1c>
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	bd38      	pop	{r3, r4, r5, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000358 	.word	0x20000358

08006000 <_getpid_r>:
 8006000:	f000 b800 	b.w	8006004 <_getpid>

08006004 <_getpid>:
 8006004:	2258      	movs	r2, #88	; 0x58
 8006006:	4b02      	ldr	r3, [pc, #8]	; (8006010 <_getpid+0xc>)
 8006008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	4770      	bx	lr
 8006010:	20000358 	.word	0x20000358

08006014 <_kill>:
 8006014:	2258      	movs	r2, #88	; 0x58
 8006016:	4b02      	ldr	r3, [pc, #8]	; (8006020 <_kill+0xc>)
 8006018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	4770      	bx	lr
 8006020:	20000358 	.word	0x20000358

08006024 <_exit>:
 8006024:	e7fe      	b.n	8006024 <_exit>
	...

08006028 <_init>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr

08006034 <_fini>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	bf00      	nop
 8006038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603a:	bc08      	pop	{r3}
 800603c:	469e      	mov	lr, r3
 800603e:	4770      	bx	lr
