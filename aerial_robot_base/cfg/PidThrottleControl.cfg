#!/usr/bin/env python
PACKAGE = "jsk_quadcopter"

import roslib;roslib.load_manifest(PACKAGE)
from math import pi

from dynamic_reconfigure.parameter_generator import *
from jsk_quadcopter_common.msg import DynamicReconfigureLevels

gen = ParameterGenerator()


gen.add("pidControlFlag", bool_t, DynamicReconfigureLevels.RECONFIGURE_CONTROL_FLAG, "PID Control Flag", False)
gen.add("ctrlLoopRate", double_t, DynamicReconfigureLevels.RECONFIGURE_CONTROL_LOOP_RATE, "CtrlLoopTate", 40, 0, 50)

gen.add("posPGain", double_t, DynamicReconfigureLevels.RECONFIGURE_POS_P_GAIN, "PosPGain", 1, 0, 2)
gen.add("posIGain", double_t, DynamicReconfigureLevels.RECONFIGURE_POS_I_GAIN, "PosIGain", 0.4, 0, 1)
gen.add("posDGain", double_t, DynamicReconfigureLevels.RECONFIGURE_POS_D_GAIN, "PosDGain", 1.1, 0, 2)

gen.add("posPGainLand", double_t, DynamicReconfigureLevels.RECONFIGURE_POS_P_GAIN_LAND, "PosPGainLand", 0.2, 0, 1)
gen.add("posIGainLand", double_t, DynamicReconfigureLevels.RECONFIGURE_POS_I_GAIN_LAND, "PosIGainLand", 0.1, 0, 1)
gen.add("posDGainLand", double_t, DynamicReconfigureLevels.RECONFIGURE_POS_D_GAIN_LAND, "PosDGainLand", 0.5, 0, 1)

gen.add("constPControlThreLand", double_t, DynamicReconfigureLevels.RECONFIGURE_CONST_P_CONTROL_THRESHOLD_LAND, "ConstPControlThresholdLand", -0.1, -1, 1)
gen.add("constPTermLev1ValueLand", double_t, DynamicReconfigureLevels.RECONFIGURE_CONST_P_TERM_LEVEL1_VALUE_LAND, "ConstPTermLev1ValueLand", -50, -100, 100)
gen.add("constPTermLev2ValueLand", double_t, DynamicReconfigureLevels.RECONFIGURE_CONST_P_TERM_LEVEL2_VALUE_LAND, "ConstPTermLev2ValueLand", -90, -100, 100)
gen.add("constIControlThreLand", double_t, DynamicReconfigureLevels.RECONFIGURE_CONST_I_CONTROL_THRESHOLD_LAND, "ConstIControlThreLand", -0.25, -1, 1)
gen.add("constITermValueLand", double_t, DynamicReconfigureLevels.RECONFIGURE_CONST_I_TERM_VALUE_LAND, "ConstITermValueLand", 0.5, 0, 1)
gen.add("offset", int_t, DynamicReconfigureLevels.RECONFIGURE_OFFSET, "Offset", 1000, 0, 1500)
gen.add("posLimit", int_t, DynamicReconfigureLevels.RECONFIGURE_POS_LIMIT, "PosLmit", 2300, 0, 3000)
gen.add("posPLimit", int_t, DynamicReconfigureLevels.RECONFIGURE_POS_P_LIMIT, "PosPLmit", 250, 0, 500)
gen.add("posPLimitHover", int_t, DynamicReconfigureLevels.RECONFIGURE_POS_P_LIMIT_HOVER, "PosPLmitHover", 100, 0, 500)
gen.add("posILimit", int_t, DynamicReconfigureLevels.RECONFIGURE_POS_I_LIMIT, "PosILmit", 1200, 0, 1500)
gen.add("posDLimit", int_t, DynamicReconfigureLevels.RECONFIGURE_POS_D_LIMIT, "PosDLmit", 300, 0, 500)
gen.add("velValueLimitHover", double_t, DynamicReconfigureLevels.RECONFIGURE_VEL_VALUE_LIMIT_HOVER, "VelValueLimitHover", 0, 0, 1)
gen.add("iEnableLimitHover", double_t, DynamicReconfigureLevels.RECONFIGURE_I_ENABLE_LIMIT_HOVER, "IEnableLimitHover", 0.1, 0, 1)

exit(gen.generate(PACKAGE, "jsk_quadcopter", "PidThrottleControl"))


